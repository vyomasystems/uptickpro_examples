//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
//
// On Tue Jul 29 14:28:06 +04 2025
//
//
// Ports:
// Name                         I/O  size props
// fn_base_alu                    O    64
// fn_base_alu_op1                I    64
// fn_base_alu_op2                I    64
// fn_base_alu_fn                 I     4
// fn_base_alu_pc                 I    64
// fn_base_alu_op1pc              I     1
// fn_base_alu_wordop             I     1
//
// Combinational paths from inputs to outputs:
//   (fn_base_alu_op1,
//    fn_base_alu_op2,
//    fn_base_alu_fn,
//    fn_base_alu_pc,
//    fn_base_alu_op1pc,
//    fn_base_alu_wordop) -> fn_base_alu
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module module_fn_base_alu(fn_base_alu_op1,
			  fn_base_alu_op2,
			  fn_base_alu_fn,
			  fn_base_alu_pc,
			  fn_base_alu_op1pc,
			  fn_base_alu_wordop,
			  fn_base_alu);
  // value method fn_base_alu
  input  [63 : 0] fn_base_alu_op1;
  input  [63 : 0] fn_base_alu_op2;
  input  [3 : 0] fn_base_alu_fn;
  input  [63 : 0] fn_base_alu_pc;
  input  fn_base_alu_op1pc;
  input  fn_base_alu_wordop;
  output [63 : 0] fn_base_alu;

  // signals for module outputs
  reg [63 : 0] fn_base_alu;

  // remaining internal signals
  wire [63 : 0] lv_add__h29,
		lv_logic__h32,
		lv_shiftout__h31,
		op1_xor_op2__h28;
  wire less__h30;

  // value method fn_base_alu
  always@(fn_base_alu_fn or
	  lv_logic__h32 or lv_add__h29 or lv_shiftout__h31 or less__h30)
  begin
    case (fn_base_alu_fn)
      4'd0, 4'd10: fn_base_alu = lv_add__h29;
      4'd1, 4'd5, 4'd11: fn_base_alu = lv_shiftout__h31;
      4'd12, 4'd14: fn_base_alu = { 63'd0, less__h30 };
      default: fn_base_alu = lv_logic__h32;
    endcase
  end

  // remaining internal signals
  module_fn_shift instance_fn_shift_2(.fn_shift_op1(fn_base_alu_op1),
				      .fn_shift_op2(fn_base_alu_op2[5:0]),
				      .fn_shift_fn(fn_base_alu_fn),
				      .fn_shift_wordop(fn_base_alu_wordop),
				      .fn_shift(lv_shiftout__h31));
  module_fn_compare instance_fn_compare_0(.fn_compare_op1(fn_base_alu_op1),
					  .fn_compare_op2(fn_base_alu_op2),
					  .fn_compare_fn(fn_base_alu_fn),
					  .fn_compare_op1_xor_op2(op1_xor_op2__h28),
					  .fn_compare(less__h30));
  module_fn_logic instance_fn_logic_3(.fn_logic_op1(fn_base_alu_op1),
				      .fn_logic_op2(fn_base_alu_op2),
				      .fn_logic_fn(fn_base_alu_fn),
				      .fn_logic_op1_xor_op2(op1_xor_op2__h28),
				      .fn_logic(lv_logic__h32));
  module_fn_add instance_fn_add_1(.fn_add_op1(fn_base_alu_op1pc ?
						fn_base_alu_pc :
						fn_base_alu_op1),
				  .fn_add_op2(fn_base_alu_op2),
				  .fn_add_sub(fn_base_alu_fn[1]),
				  .fn_add(lv_add__h29));
  assign op1_xor_op2__h28 = fn_base_alu_op1 ^ fn_base_alu_op2 ;
endmodule  // module_fn_base_alu

