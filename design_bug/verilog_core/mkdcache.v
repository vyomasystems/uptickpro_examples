//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
//
// On Tue Jul 29 14:28:13 +04 2025
//
//
// Ports:
// Name                         I/O  size props
// RDY_receive_core_req_put       O     1
// send_core_cache_resp_get       O   132
// RDY_send_core_cache_resp_get   O     1
// send_core_io_resp              O   133 reg
// RDY_send_core_io_resp          O     1 const
// send_mem_rd_req_get            O    43 reg
// RDY_send_mem_rd_req_get        O     1 reg
// RDY_receive_mem_rd_resp_put    O     1
// send_mem_wr_req                O   555 reg
// RDY_send_mem_wr_req            O     1 reg
// RDY_deq_mem_wr_req             O     1 reg
// RDY_receive_mem_wr_resp_put    O     1
// send_mem_io_req_get            O   100 reg
// RDY_send_mem_io_req_get        O     1 reg
// RDY_receive_mem_io_resp_put    O     1 reg
// RDY_ma_curr_priv               O     1 const
// RDY_ma_cache_enable            O     1 const
// mv_storebuffer_empty           O     1
// RDY_mv_storebuffer_empty       O     1 const
// mv_cache_available             O     1
// RDY_mv_cache_available         O     1 const
// RDY_ma_commit_store            O     1 const
// RDY_ma_commit_io               O     1 const
// get_ptw_resp_get               O   132
// RDY_get_ptw_resp_get           O     1
// RDY_put_pa_from_tlb_put        O     1
// get_hold_req_get               O   141
// RDY_get_hold_req_get           O     1
// mv_perf_counters               O    13
// RDY_mv_perf_counters           O     1 const
// pmp_cfg_0                      I     8
// pmp_cfg_1                      I     8
// pmp_cfg_2                      I     8
// pmp_cfg_3                      I     8
// pmp_addr_0                     I    32
// pmp_addr_1                     I    32
// pmp_addr_2                     I    32
// pmp_addr_3                     I    32
// CLK                            I     1 clock
// RST_N                          I     1 reset
// receive_core_req_put           I   141
// receive_mem_rd_resp_put        I    66
// receive_mem_wr_resp_put        I     1
// receive_mem_io_resp_put        I    65 reg
// ma_curr_priv_c                 I     2
// ma_cache_enable_c              I     1
// ma_commit_store_storecommit    I     2
// ma_commit_io_currepoch         I     1
// put_pa_from_tlb_put            I   105
// EN_receive_core_req_put        I     1
// EN_receive_mem_rd_resp_put     I     1
// EN_deq_mem_wr_req              I     1
// EN_receive_mem_wr_resp_put     I     1
// EN_receive_mem_io_resp_put     I     1
// EN_ma_curr_priv                I     1
// EN_ma_cache_enable             I     1
// EN_ma_commit_store             I     1
// EN_ma_commit_io                I     1
// EN_put_pa_from_tlb_put         I     1
// EN_send_core_cache_resp_get    I     1
// EN_send_mem_rd_req_get         I     1
// EN_send_mem_io_req_get         I     1
// EN_get_ptw_resp_get            I     1
// EN_get_hold_req_get            I     1
//
// Combinational paths from inputs to outputs:
//   (receive_core_req_put,
//    ma_curr_priv_c,
//    ma_cache_enable_c,
//    put_pa_from_tlb_put,
//    EN_receive_core_req_put,
//    EN_ma_curr_priv,
//    EN_ma_cache_enable,
//    EN_put_pa_from_tlb_put,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> mv_perf_counters
//   (ma_curr_priv_c,
//    ma_cache_enable_c,
//    put_pa_from_tlb_put,
//    EN_ma_curr_priv,
//    EN_ma_cache_enable,
//    EN_put_pa_from_tlb_put,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_send_core_cache_resp_get
//   (ma_curr_priv_c,
//    ma_cache_enable_c,
//    put_pa_from_tlb_put,
//    EN_ma_curr_priv,
//    EN_ma_cache_enable,
//    EN_put_pa_from_tlb_put,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_get_ptw_resp_get
//   (ma_curr_priv_c,
//    ma_cache_enable_c,
//    put_pa_from_tlb_put,
//    EN_ma_curr_priv,
//    EN_ma_cache_enable,
//    EN_put_pa_from_tlb_put,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_get_hold_req_get
//   (ma_curr_priv_c,
//    ma_cache_enable_c,
//    put_pa_from_tlb_put,
//    EN_ma_curr_priv,
//    EN_ma_cache_enable,
//    EN_put_pa_from_tlb_put,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> send_core_cache_resp_get
//   (ma_curr_priv_c,
//    ma_cache_enable_c,
//    put_pa_from_tlb_put,
//    EN_ma_curr_priv,
//    EN_ma_cache_enable,
//    EN_put_pa_from_tlb_put,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> get_ptw_resp_get
//   (ma_curr_priv_c,
//    ma_cache_enable_c,
//    put_pa_from_tlb_put,
//    EN_ma_curr_priv,
//    EN_ma_cache_enable,
//    EN_put_pa_from_tlb_put,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> get_hold_req_get
//   EN_ma_cache_enable -> RDY_receive_core_req_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkdcache(pmp_cfg_0,
		pmp_cfg_1,
		pmp_cfg_2,
		pmp_cfg_3,
		pmp_addr_0,
		pmp_addr_1,
		pmp_addr_2,
		pmp_addr_3,
		CLK,
		RST_N,

		receive_core_req_put,
		EN_receive_core_req_put,
		RDY_receive_core_req_put,

		EN_send_core_cache_resp_get,
		send_core_cache_resp_get,
		RDY_send_core_cache_resp_get,

		send_core_io_resp,
		RDY_send_core_io_resp,

		EN_send_mem_rd_req_get,
		send_mem_rd_req_get,
		RDY_send_mem_rd_req_get,

		receive_mem_rd_resp_put,
		EN_receive_mem_rd_resp_put,
		RDY_receive_mem_rd_resp_put,

		send_mem_wr_req,
		RDY_send_mem_wr_req,

		EN_deq_mem_wr_req,
		RDY_deq_mem_wr_req,

		receive_mem_wr_resp_put,
		EN_receive_mem_wr_resp_put,
		RDY_receive_mem_wr_resp_put,

		EN_send_mem_io_req_get,
		send_mem_io_req_get,
		RDY_send_mem_io_req_get,

		receive_mem_io_resp_put,
		EN_receive_mem_io_resp_put,
		RDY_receive_mem_io_resp_put,

		ma_curr_priv_c,
		EN_ma_curr_priv,
		RDY_ma_curr_priv,

		ma_cache_enable_c,
		EN_ma_cache_enable,
		RDY_ma_cache_enable,

		mv_storebuffer_empty,
		RDY_mv_storebuffer_empty,

		mv_cache_available,
		RDY_mv_cache_available,

		ma_commit_store_storecommit,
		EN_ma_commit_store,
		RDY_ma_commit_store,

		ma_commit_io_currepoch,
		EN_ma_commit_io,
		RDY_ma_commit_io,

		EN_get_ptw_resp_get,
		get_ptw_resp_get,
		RDY_get_ptw_resp_get,

		put_pa_from_tlb_put,
		EN_put_pa_from_tlb_put,
		RDY_put_pa_from_tlb_put,

		EN_get_hold_req_get,
		get_hold_req_get,
		RDY_get_hold_req_get,

		mv_perf_counters,
		RDY_mv_perf_counters);
  parameter [31 : 0] id = 32'b0;
  input  [7 : 0] pmp_cfg_0;
  input  [7 : 0] pmp_cfg_1;
  input  [7 : 0] pmp_cfg_2;
  input  [7 : 0] pmp_cfg_3;
  input  [31 : 0] pmp_addr_0;
  input  [31 : 0] pmp_addr_1;
  input  [31 : 0] pmp_addr_2;
  input  [31 : 0] pmp_addr_3;
  input  CLK;
  input  RST_N;

  // action method receive_core_req_put
  input  [140 : 0] receive_core_req_put;
  input  EN_receive_core_req_put;
  output RDY_receive_core_req_put;

  // actionvalue method send_core_cache_resp_get
  input  EN_send_core_cache_resp_get;
  output [131 : 0] send_core_cache_resp_get;
  output RDY_send_core_cache_resp_get;

  // value method send_core_io_resp
  output [132 : 0] send_core_io_resp;
  output RDY_send_core_io_resp;

  // actionvalue method send_mem_rd_req_get
  input  EN_send_mem_rd_req_get;
  output [42 : 0] send_mem_rd_req_get;
  output RDY_send_mem_rd_req_get;

  // action method receive_mem_rd_resp_put
  input  [65 : 0] receive_mem_rd_resp_put;
  input  EN_receive_mem_rd_resp_put;
  output RDY_receive_mem_rd_resp_put;

  // value method send_mem_wr_req
  output [554 : 0] send_mem_wr_req;
  output RDY_send_mem_wr_req;

  // action method deq_mem_wr_req
  input  EN_deq_mem_wr_req;
  output RDY_deq_mem_wr_req;

  // action method receive_mem_wr_resp_put
  input  receive_mem_wr_resp_put;
  input  EN_receive_mem_wr_resp_put;
  output RDY_receive_mem_wr_resp_put;

  // actionvalue method send_mem_io_req_get
  input  EN_send_mem_io_req_get;
  output [99 : 0] send_mem_io_req_get;
  output RDY_send_mem_io_req_get;

  // action method receive_mem_io_resp_put
  input  [64 : 0] receive_mem_io_resp_put;
  input  EN_receive_mem_io_resp_put;
  output RDY_receive_mem_io_resp_put;

  // action method ma_curr_priv
  input  [1 : 0] ma_curr_priv_c;
  input  EN_ma_curr_priv;
  output RDY_ma_curr_priv;

  // action method ma_cache_enable
  input  ma_cache_enable_c;
  input  EN_ma_cache_enable;
  output RDY_ma_cache_enable;

  // value method mv_storebuffer_empty
  output mv_storebuffer_empty;
  output RDY_mv_storebuffer_empty;

  // value method mv_cache_available
  output mv_cache_available;
  output RDY_mv_cache_available;

  // action method ma_commit_store
  input  [1 : 0] ma_commit_store_storecommit;
  input  EN_ma_commit_store;
  output RDY_ma_commit_store;

  // action method ma_commit_io
  input  ma_commit_io_currepoch;
  input  EN_ma_commit_io;
  output RDY_ma_commit_io;

  // actionvalue method get_ptw_resp_get
  input  EN_get_ptw_resp_get;
  output [131 : 0] get_ptw_resp_get;
  output RDY_get_ptw_resp_get;

  // action method put_pa_from_tlb_put
  input  [104 : 0] put_pa_from_tlb_put;
  input  EN_put_pa_from_tlb_put;
  output RDY_put_pa_from_tlb_put;

  // actionvalue method get_hold_req_get
  input  EN_get_hold_req_get;
  output [140 : 0] get_hold_req_get;
  output RDY_get_hold_req_get;

  // value method mv_perf_counters
  output [12 : 0] mv_perf_counters;
  output RDY_mv_perf_counters;

  // signals for module outputs
  wire [554 : 0] send_mem_wr_req;
  wire [140 : 0] get_hold_req_get;
  wire [132 : 0] send_core_io_resp;
  wire [131 : 0] get_ptw_resp_get, send_core_cache_resp_get;
  wire [99 : 0] send_mem_io_req_get;
  wire [42 : 0] send_mem_rd_req_get;
  wire [12 : 0] mv_perf_counters;
  wire RDY_deq_mem_wr_req,
       RDY_get_hold_req_get,
       RDY_get_ptw_resp_get,
       RDY_ma_cache_enable,
       RDY_ma_commit_io,
       RDY_ma_commit_store,
       RDY_ma_curr_priv,
       RDY_mv_cache_available,
       RDY_mv_perf_counters,
       RDY_mv_storebuffer_empty,
       RDY_put_pa_from_tlb_put,
       RDY_receive_core_req_put,
       RDY_receive_mem_io_resp_put,
       RDY_receive_mem_rd_resp_put,
       RDY_receive_mem_wr_resp_put,
       RDY_send_core_cache_resp_get,
       RDY_send_core_io_resp,
       RDY_send_mem_io_req_get,
       RDY_send_mem_rd_req_get,
       RDY_send_mem_wr_req,
       mv_cache_available,
       mv_storebuffer_empty;

  // inlined wires
  wire [141 : 0] ff_hold_request_rv_port0__write_1,
		 ff_hold_request_rv_port1__read,
		 ff_hold_request_rv_port1__write_1,
		 ff_hold_request_rv_port2__read;
  wire [132 : 0] ff_core_response_rv_port0__write_1,
		 ff_core_response_rv_port1__read,
		 ff_core_response_rv_port1__write_1,
		 ff_core_response_rv_port2__read,
		 ff_ptw_response_rv_port0__write_1,
		 ff_ptw_response_rv_port1__read,
		 ff_ptw_response_rv_port2__read;
  wire [131 : 0] wr_fb_response_wget, wr_ram_response_wget;
  wire [105 : 0] ff_from_tlb_rv_port0__write_1,
		 ff_from_tlb_rv_port1__read,
		 ff_from_tlb_rv_port1__write_1,
		 ff_from_tlb_rv_port2__read;
  wire [66 : 0] ff_mem_rd_resp_rv_port0__write_1,
		ff_mem_rd_resp_rv_port1__read,
		ff_mem_rd_resp_rv_port1__write_1,
		ff_mem_rd_resp_rv_port2__read;
  wire [1 : 0] ff_mem_wr_resp_rv_port0__write_1,
	       ff_mem_wr_resp_rv_port1__read,
	       ff_mem_wr_resp_rv_port1__write_1,
	       ff_mem_wr_resp_rv_port2__read,
	       wr_fb_state_wget,
	       wr_ram_state_wget;
  wire _ma_perform_release_RL_rl_release_from_fillbuffer_EN_m_fillbuffer_wget,
       ff_core_response_rv_EN_port0__write,
       ff_hold_request_rv_EN_port0__write,
       ff_ptw_response_rv_EN_port0__write,
       rg_core_io_response_1_whas,
       rg_release_readphase_1_whas,
       wr_allocating_storebuffer_wget,
       wr_fault_whas,
       wr_ram_state_whas,
       wr_total_atomic_access_whas,
       wr_total_atomic_fb_hits_whas,
       wr_total_read_access_whas,
       wr_total_read_fb_hits_whas,
       wr_total_write_access_whas,
       wr_total_write_fb_hits_whas;

  // register ff_core_response_rv
  reg [132 : 0] ff_core_response_rv;
  wire [132 : 0] ff_core_response_rv_D_IN;
  wire ff_core_response_rv_EN;

  // register ff_from_tlb_rv
  reg [105 : 0] ff_from_tlb_rv;
  wire [105 : 0] ff_from_tlb_rv_D_IN;
  wire ff_from_tlb_rv_EN;

  // register ff_hold_request_rv
  reg [141 : 0] ff_hold_request_rv;
  wire [141 : 0] ff_hold_request_rv_D_IN;
  wire ff_hold_request_rv_EN;

  // register ff_mem_rd_resp_rv
  reg [66 : 0] ff_mem_rd_resp_rv;
  wire [66 : 0] ff_mem_rd_resp_rv_D_IN;
  wire ff_mem_rd_resp_rv_EN;

  // register ff_mem_wr_resp_rv
  reg [1 : 0] ff_mem_wr_resp_rv;
  wire [1 : 0] ff_mem_wr_resp_rv_D_IN;
  wire ff_mem_wr_resp_rv_EN;

  // register ff_ptw_response_rv
  reg [132 : 0] ff_ptw_response_rv;
  wire [132 : 0] ff_ptw_response_rv_D_IN;
  wire ff_ptw_response_rv_EN;

  // register replacement_v_count_0
  reg [1 : 0] replacement_v_count_0;
  wire [1 : 0] replacement_v_count_0_D_IN;
  wire replacement_v_count_0_EN;

  // register replacement_v_count_1
  reg [1 : 0] replacement_v_count_1;
  wire [1 : 0] replacement_v_count_1_D_IN;
  wire replacement_v_count_1_EN;

  // register replacement_v_count_10
  reg [1 : 0] replacement_v_count_10;
  wire [1 : 0] replacement_v_count_10_D_IN;
  wire replacement_v_count_10_EN;

  // register replacement_v_count_11
  reg [1 : 0] replacement_v_count_11;
  wire [1 : 0] replacement_v_count_11_D_IN;
  wire replacement_v_count_11_EN;

  // register replacement_v_count_12
  reg [1 : 0] replacement_v_count_12;
  wire [1 : 0] replacement_v_count_12_D_IN;
  wire replacement_v_count_12_EN;

  // register replacement_v_count_13
  reg [1 : 0] replacement_v_count_13;
  wire [1 : 0] replacement_v_count_13_D_IN;
  wire replacement_v_count_13_EN;

  // register replacement_v_count_14
  reg [1 : 0] replacement_v_count_14;
  wire [1 : 0] replacement_v_count_14_D_IN;
  wire replacement_v_count_14_EN;

  // register replacement_v_count_15
  reg [1 : 0] replacement_v_count_15;
  wire [1 : 0] replacement_v_count_15_D_IN;
  wire replacement_v_count_15_EN;

  // register replacement_v_count_16
  reg [1 : 0] replacement_v_count_16;
  wire [1 : 0] replacement_v_count_16_D_IN;
  wire replacement_v_count_16_EN;

  // register replacement_v_count_17
  reg [1 : 0] replacement_v_count_17;
  wire [1 : 0] replacement_v_count_17_D_IN;
  wire replacement_v_count_17_EN;

  // register replacement_v_count_18
  reg [1 : 0] replacement_v_count_18;
  wire [1 : 0] replacement_v_count_18_D_IN;
  wire replacement_v_count_18_EN;

  // register replacement_v_count_19
  reg [1 : 0] replacement_v_count_19;
  wire [1 : 0] replacement_v_count_19_D_IN;
  wire replacement_v_count_19_EN;

  // register replacement_v_count_2
  reg [1 : 0] replacement_v_count_2;
  wire [1 : 0] replacement_v_count_2_D_IN;
  wire replacement_v_count_2_EN;

  // register replacement_v_count_20
  reg [1 : 0] replacement_v_count_20;
  wire [1 : 0] replacement_v_count_20_D_IN;
  wire replacement_v_count_20_EN;

  // register replacement_v_count_21
  reg [1 : 0] replacement_v_count_21;
  wire [1 : 0] replacement_v_count_21_D_IN;
  wire replacement_v_count_21_EN;

  // register replacement_v_count_22
  reg [1 : 0] replacement_v_count_22;
  wire [1 : 0] replacement_v_count_22_D_IN;
  wire replacement_v_count_22_EN;

  // register replacement_v_count_23
  reg [1 : 0] replacement_v_count_23;
  wire [1 : 0] replacement_v_count_23_D_IN;
  wire replacement_v_count_23_EN;

  // register replacement_v_count_24
  reg [1 : 0] replacement_v_count_24;
  wire [1 : 0] replacement_v_count_24_D_IN;
  wire replacement_v_count_24_EN;

  // register replacement_v_count_25
  reg [1 : 0] replacement_v_count_25;
  wire [1 : 0] replacement_v_count_25_D_IN;
  wire replacement_v_count_25_EN;

  // register replacement_v_count_26
  reg [1 : 0] replacement_v_count_26;
  wire [1 : 0] replacement_v_count_26_D_IN;
  wire replacement_v_count_26_EN;

  // register replacement_v_count_27
  reg [1 : 0] replacement_v_count_27;
  wire [1 : 0] replacement_v_count_27_D_IN;
  wire replacement_v_count_27_EN;

  // register replacement_v_count_28
  reg [1 : 0] replacement_v_count_28;
  wire [1 : 0] replacement_v_count_28_D_IN;
  wire replacement_v_count_28_EN;

  // register replacement_v_count_29
  reg [1 : 0] replacement_v_count_29;
  wire [1 : 0] replacement_v_count_29_D_IN;
  wire replacement_v_count_29_EN;

  // register replacement_v_count_3
  reg [1 : 0] replacement_v_count_3;
  wire [1 : 0] replacement_v_count_3_D_IN;
  wire replacement_v_count_3_EN;

  // register replacement_v_count_30
  reg [1 : 0] replacement_v_count_30;
  wire [1 : 0] replacement_v_count_30_D_IN;
  wire replacement_v_count_30_EN;

  // register replacement_v_count_31
  reg [1 : 0] replacement_v_count_31;
  wire [1 : 0] replacement_v_count_31_D_IN;
  wire replacement_v_count_31_EN;

  // register replacement_v_count_32
  reg [1 : 0] replacement_v_count_32;
  wire [1 : 0] replacement_v_count_32_D_IN;
  wire replacement_v_count_32_EN;

  // register replacement_v_count_33
  reg [1 : 0] replacement_v_count_33;
  wire [1 : 0] replacement_v_count_33_D_IN;
  wire replacement_v_count_33_EN;

  // register replacement_v_count_34
  reg [1 : 0] replacement_v_count_34;
  wire [1 : 0] replacement_v_count_34_D_IN;
  wire replacement_v_count_34_EN;

  // register replacement_v_count_35
  reg [1 : 0] replacement_v_count_35;
  wire [1 : 0] replacement_v_count_35_D_IN;
  wire replacement_v_count_35_EN;

  // register replacement_v_count_36
  reg [1 : 0] replacement_v_count_36;
  wire [1 : 0] replacement_v_count_36_D_IN;
  wire replacement_v_count_36_EN;

  // register replacement_v_count_37
  reg [1 : 0] replacement_v_count_37;
  wire [1 : 0] replacement_v_count_37_D_IN;
  wire replacement_v_count_37_EN;

  // register replacement_v_count_38
  reg [1 : 0] replacement_v_count_38;
  wire [1 : 0] replacement_v_count_38_D_IN;
  wire replacement_v_count_38_EN;

  // register replacement_v_count_39
  reg [1 : 0] replacement_v_count_39;
  wire [1 : 0] replacement_v_count_39_D_IN;
  wire replacement_v_count_39_EN;

  // register replacement_v_count_4
  reg [1 : 0] replacement_v_count_4;
  wire [1 : 0] replacement_v_count_4_D_IN;
  wire replacement_v_count_4_EN;

  // register replacement_v_count_40
  reg [1 : 0] replacement_v_count_40;
  wire [1 : 0] replacement_v_count_40_D_IN;
  wire replacement_v_count_40_EN;

  // register replacement_v_count_41
  reg [1 : 0] replacement_v_count_41;
  wire [1 : 0] replacement_v_count_41_D_IN;
  wire replacement_v_count_41_EN;

  // register replacement_v_count_42
  reg [1 : 0] replacement_v_count_42;
  wire [1 : 0] replacement_v_count_42_D_IN;
  wire replacement_v_count_42_EN;

  // register replacement_v_count_43
  reg [1 : 0] replacement_v_count_43;
  wire [1 : 0] replacement_v_count_43_D_IN;
  wire replacement_v_count_43_EN;

  // register replacement_v_count_44
  reg [1 : 0] replacement_v_count_44;
  wire [1 : 0] replacement_v_count_44_D_IN;
  wire replacement_v_count_44_EN;

  // register replacement_v_count_45
  reg [1 : 0] replacement_v_count_45;
  wire [1 : 0] replacement_v_count_45_D_IN;
  wire replacement_v_count_45_EN;

  // register replacement_v_count_46
  reg [1 : 0] replacement_v_count_46;
  wire [1 : 0] replacement_v_count_46_D_IN;
  wire replacement_v_count_46_EN;

  // register replacement_v_count_47
  reg [1 : 0] replacement_v_count_47;
  wire [1 : 0] replacement_v_count_47_D_IN;
  wire replacement_v_count_47_EN;

  // register replacement_v_count_48
  reg [1 : 0] replacement_v_count_48;
  wire [1 : 0] replacement_v_count_48_D_IN;
  wire replacement_v_count_48_EN;

  // register replacement_v_count_49
  reg [1 : 0] replacement_v_count_49;
  wire [1 : 0] replacement_v_count_49_D_IN;
  wire replacement_v_count_49_EN;

  // register replacement_v_count_5
  reg [1 : 0] replacement_v_count_5;
  wire [1 : 0] replacement_v_count_5_D_IN;
  wire replacement_v_count_5_EN;

  // register replacement_v_count_50
  reg [1 : 0] replacement_v_count_50;
  wire [1 : 0] replacement_v_count_50_D_IN;
  wire replacement_v_count_50_EN;

  // register replacement_v_count_51
  reg [1 : 0] replacement_v_count_51;
  wire [1 : 0] replacement_v_count_51_D_IN;
  wire replacement_v_count_51_EN;

  // register replacement_v_count_52
  reg [1 : 0] replacement_v_count_52;
  wire [1 : 0] replacement_v_count_52_D_IN;
  wire replacement_v_count_52_EN;

  // register replacement_v_count_53
  reg [1 : 0] replacement_v_count_53;
  wire [1 : 0] replacement_v_count_53_D_IN;
  wire replacement_v_count_53_EN;

  // register replacement_v_count_54
  reg [1 : 0] replacement_v_count_54;
  wire [1 : 0] replacement_v_count_54_D_IN;
  wire replacement_v_count_54_EN;

  // register replacement_v_count_55
  reg [1 : 0] replacement_v_count_55;
  wire [1 : 0] replacement_v_count_55_D_IN;
  wire replacement_v_count_55_EN;

  // register replacement_v_count_56
  reg [1 : 0] replacement_v_count_56;
  wire [1 : 0] replacement_v_count_56_D_IN;
  wire replacement_v_count_56_EN;

  // register replacement_v_count_57
  reg [1 : 0] replacement_v_count_57;
  wire [1 : 0] replacement_v_count_57_D_IN;
  wire replacement_v_count_57_EN;

  // register replacement_v_count_58
  reg [1 : 0] replacement_v_count_58;
  wire [1 : 0] replacement_v_count_58_D_IN;
  wire replacement_v_count_58_EN;

  // register replacement_v_count_59
  reg [1 : 0] replacement_v_count_59;
  wire [1 : 0] replacement_v_count_59_D_IN;
  wire replacement_v_count_59_EN;

  // register replacement_v_count_6
  reg [1 : 0] replacement_v_count_6;
  wire [1 : 0] replacement_v_count_6_D_IN;
  wire replacement_v_count_6_EN;

  // register replacement_v_count_60
  reg [1 : 0] replacement_v_count_60;
  wire [1 : 0] replacement_v_count_60_D_IN;
  wire replacement_v_count_60_EN;

  // register replacement_v_count_61
  reg [1 : 0] replacement_v_count_61;
  wire [1 : 0] replacement_v_count_61_D_IN;
  wire replacement_v_count_61_EN;

  // register replacement_v_count_62
  reg [1 : 0] replacement_v_count_62;
  wire [1 : 0] replacement_v_count_62_D_IN;
  wire replacement_v_count_62_EN;

  // register replacement_v_count_63
  reg [1 : 0] replacement_v_count_63;
  wire [1 : 0] replacement_v_count_63_D_IN;
  wire replacement_v_count_63_EN;

  // register replacement_v_count_7
  reg [1 : 0] replacement_v_count_7;
  wire [1 : 0] replacement_v_count_7_D_IN;
  wire replacement_v_count_7_EN;

  // register replacement_v_count_8
  reg [1 : 0] replacement_v_count_8;
  wire [1 : 0] replacement_v_count_8_D_IN;
  wire replacement_v_count_8_EN;

  // register replacement_v_count_9
  reg [1 : 0] replacement_v_count_9;
  wire [1 : 0] replacement_v_count_9_D_IN;
  wire replacement_v_count_9_EN;

  // register rg_atomic_rd_data
  reg [63 : 0] rg_atomic_rd_data;
  wire [63 : 0] rg_atomic_rd_data_D_IN;
  wire rg_atomic_rd_data_EN;

  // register rg_core_io_response
  reg [132 : 0] rg_core_io_response;
  wire [132 : 0] rg_core_io_response_D_IN;
  wire rg_core_io_response_EN;

  // register rg_fence_pending
  reg rg_fence_pending;
  wire rg_fence_pending_D_IN, rg_fence_pending_EN;

  // register rg_fence_set
  reg [5 : 0] rg_fence_set;
  wire [5 : 0] rg_fence_set_D_IN;
  wire rg_fence_set_EN;

  // register rg_fence_stall
  reg rg_fence_stall;
  wire rg_fence_stall_D_IN, rg_fence_stall_EN;

  // register rg_fence_way
  reg [1 : 0] rg_fence_way;
  wire [1 : 0] rg_fence_way_D_IN;
  wire rg_fence_way_EN;

  // register rg_globaldirty
  reg rg_globaldirty;
  wire rg_globaldirty_D_IN, rg_globaldirty_EN;

  // register rg_handling_miss
  reg rg_handling_miss;
  wire rg_handling_miss_D_IN, rg_handling_miss_EN;

  // register rg_io_atomic_done
  reg rg_io_atomic_done;
  wire rg_io_atomic_done_D_IN, rg_io_atomic_done_EN;

  // register rg_io_busy
  reg rg_io_busy;
  wire rg_io_busy_D_IN, rg_io_busy_EN;

  // register rg_performing_replay
  reg rg_performing_replay;
  wire rg_performing_replay_D_IN, rg_performing_replay_EN;

  // register rg_polling_mode
  reg rg_polling_mode;
  wire rg_polling_mode_D_IN, rg_polling_mode_EN;

  // register rg_recent_req
  reg [5 : 0] rg_recent_req;
  wire [5 : 0] rg_recent_req_D_IN;
  wire rg_recent_req_EN;

  // register rg_release_readphase
  reg rg_release_readphase;
  wire rg_release_readphase_D_IN, rg_release_readphase_EN;

  // register rg_reservation_address
  reg [64 : 0] rg_reservation_address;
  wire [64 : 0] rg_reservation_address_D_IN;
  wire rg_reservation_address_EN;

  // register rg_wEpoch
  reg rg_wEpoch;
  wire rg_wEpoch_D_IN, rg_wEpoch_EN;

  // register v_reg_dirty_0
  reg [3 : 0] v_reg_dirty_0;
  reg [3 : 0] v_reg_dirty_0_D_IN;
  wire v_reg_dirty_0_EN;

  // register v_reg_dirty_1
  reg [3 : 0] v_reg_dirty_1;
  reg [3 : 0] v_reg_dirty_1_D_IN;
  wire v_reg_dirty_1_EN;

  // register v_reg_dirty_10
  reg [3 : 0] v_reg_dirty_10;
  reg [3 : 0] v_reg_dirty_10_D_IN;
  wire v_reg_dirty_10_EN;

  // register v_reg_dirty_11
  reg [3 : 0] v_reg_dirty_11;
  reg [3 : 0] v_reg_dirty_11_D_IN;
  wire v_reg_dirty_11_EN;

  // register v_reg_dirty_12
  reg [3 : 0] v_reg_dirty_12;
  reg [3 : 0] v_reg_dirty_12_D_IN;
  wire v_reg_dirty_12_EN;

  // register v_reg_dirty_13
  reg [3 : 0] v_reg_dirty_13;
  reg [3 : 0] v_reg_dirty_13_D_IN;
  wire v_reg_dirty_13_EN;

  // register v_reg_dirty_14
  reg [3 : 0] v_reg_dirty_14;
  reg [3 : 0] v_reg_dirty_14_D_IN;
  wire v_reg_dirty_14_EN;

  // register v_reg_dirty_15
  reg [3 : 0] v_reg_dirty_15;
  reg [3 : 0] v_reg_dirty_15_D_IN;
  wire v_reg_dirty_15_EN;

  // register v_reg_dirty_16
  reg [3 : 0] v_reg_dirty_16;
  reg [3 : 0] v_reg_dirty_16_D_IN;
  wire v_reg_dirty_16_EN;

  // register v_reg_dirty_17
  reg [3 : 0] v_reg_dirty_17;
  reg [3 : 0] v_reg_dirty_17_D_IN;
  wire v_reg_dirty_17_EN;

  // register v_reg_dirty_18
  reg [3 : 0] v_reg_dirty_18;
  reg [3 : 0] v_reg_dirty_18_D_IN;
  wire v_reg_dirty_18_EN;

  // register v_reg_dirty_19
  reg [3 : 0] v_reg_dirty_19;
  reg [3 : 0] v_reg_dirty_19_D_IN;
  wire v_reg_dirty_19_EN;

  // register v_reg_dirty_2
  reg [3 : 0] v_reg_dirty_2;
  reg [3 : 0] v_reg_dirty_2_D_IN;
  wire v_reg_dirty_2_EN;

  // register v_reg_dirty_20
  reg [3 : 0] v_reg_dirty_20;
  reg [3 : 0] v_reg_dirty_20_D_IN;
  wire v_reg_dirty_20_EN;

  // register v_reg_dirty_21
  reg [3 : 0] v_reg_dirty_21;
  reg [3 : 0] v_reg_dirty_21_D_IN;
  wire v_reg_dirty_21_EN;

  // register v_reg_dirty_22
  reg [3 : 0] v_reg_dirty_22;
  reg [3 : 0] v_reg_dirty_22_D_IN;
  wire v_reg_dirty_22_EN;

  // register v_reg_dirty_23
  reg [3 : 0] v_reg_dirty_23;
  reg [3 : 0] v_reg_dirty_23_D_IN;
  wire v_reg_dirty_23_EN;

  // register v_reg_dirty_24
  reg [3 : 0] v_reg_dirty_24;
  reg [3 : 0] v_reg_dirty_24_D_IN;
  wire v_reg_dirty_24_EN;

  // register v_reg_dirty_25
  reg [3 : 0] v_reg_dirty_25;
  reg [3 : 0] v_reg_dirty_25_D_IN;
  wire v_reg_dirty_25_EN;

  // register v_reg_dirty_26
  reg [3 : 0] v_reg_dirty_26;
  reg [3 : 0] v_reg_dirty_26_D_IN;
  wire v_reg_dirty_26_EN;

  // register v_reg_dirty_27
  reg [3 : 0] v_reg_dirty_27;
  reg [3 : 0] v_reg_dirty_27_D_IN;
  wire v_reg_dirty_27_EN;

  // register v_reg_dirty_28
  reg [3 : 0] v_reg_dirty_28;
  reg [3 : 0] v_reg_dirty_28_D_IN;
  wire v_reg_dirty_28_EN;

  // register v_reg_dirty_29
  reg [3 : 0] v_reg_dirty_29;
  reg [3 : 0] v_reg_dirty_29_D_IN;
  wire v_reg_dirty_29_EN;

  // register v_reg_dirty_3
  reg [3 : 0] v_reg_dirty_3;
  reg [3 : 0] v_reg_dirty_3_D_IN;
  wire v_reg_dirty_3_EN;

  // register v_reg_dirty_30
  reg [3 : 0] v_reg_dirty_30;
  reg [3 : 0] v_reg_dirty_30_D_IN;
  wire v_reg_dirty_30_EN;

  // register v_reg_dirty_31
  reg [3 : 0] v_reg_dirty_31;
  reg [3 : 0] v_reg_dirty_31_D_IN;
  wire v_reg_dirty_31_EN;

  // register v_reg_dirty_32
  reg [3 : 0] v_reg_dirty_32;
  reg [3 : 0] v_reg_dirty_32_D_IN;
  wire v_reg_dirty_32_EN;

  // register v_reg_dirty_33
  reg [3 : 0] v_reg_dirty_33;
  reg [3 : 0] v_reg_dirty_33_D_IN;
  wire v_reg_dirty_33_EN;

  // register v_reg_dirty_34
  reg [3 : 0] v_reg_dirty_34;
  reg [3 : 0] v_reg_dirty_34_D_IN;
  wire v_reg_dirty_34_EN;

  // register v_reg_dirty_35
  reg [3 : 0] v_reg_dirty_35;
  reg [3 : 0] v_reg_dirty_35_D_IN;
  wire v_reg_dirty_35_EN;

  // register v_reg_dirty_36
  reg [3 : 0] v_reg_dirty_36;
  reg [3 : 0] v_reg_dirty_36_D_IN;
  wire v_reg_dirty_36_EN;

  // register v_reg_dirty_37
  reg [3 : 0] v_reg_dirty_37;
  reg [3 : 0] v_reg_dirty_37_D_IN;
  wire v_reg_dirty_37_EN;

  // register v_reg_dirty_38
  reg [3 : 0] v_reg_dirty_38;
  reg [3 : 0] v_reg_dirty_38_D_IN;
  wire v_reg_dirty_38_EN;

  // register v_reg_dirty_39
  reg [3 : 0] v_reg_dirty_39;
  reg [3 : 0] v_reg_dirty_39_D_IN;
  wire v_reg_dirty_39_EN;

  // register v_reg_dirty_4
  reg [3 : 0] v_reg_dirty_4;
  reg [3 : 0] v_reg_dirty_4_D_IN;
  wire v_reg_dirty_4_EN;

  // register v_reg_dirty_40
  reg [3 : 0] v_reg_dirty_40;
  reg [3 : 0] v_reg_dirty_40_D_IN;
  wire v_reg_dirty_40_EN;

  // register v_reg_dirty_41
  reg [3 : 0] v_reg_dirty_41;
  reg [3 : 0] v_reg_dirty_41_D_IN;
  wire v_reg_dirty_41_EN;

  // register v_reg_dirty_42
  reg [3 : 0] v_reg_dirty_42;
  reg [3 : 0] v_reg_dirty_42_D_IN;
  wire v_reg_dirty_42_EN;

  // register v_reg_dirty_43
  reg [3 : 0] v_reg_dirty_43;
  reg [3 : 0] v_reg_dirty_43_D_IN;
  wire v_reg_dirty_43_EN;

  // register v_reg_dirty_44
  reg [3 : 0] v_reg_dirty_44;
  reg [3 : 0] v_reg_dirty_44_D_IN;
  wire v_reg_dirty_44_EN;

  // register v_reg_dirty_45
  reg [3 : 0] v_reg_dirty_45;
  reg [3 : 0] v_reg_dirty_45_D_IN;
  wire v_reg_dirty_45_EN;

  // register v_reg_dirty_46
  reg [3 : 0] v_reg_dirty_46;
  reg [3 : 0] v_reg_dirty_46_D_IN;
  wire v_reg_dirty_46_EN;

  // register v_reg_dirty_47
  reg [3 : 0] v_reg_dirty_47;
  reg [3 : 0] v_reg_dirty_47_D_IN;
  wire v_reg_dirty_47_EN;

  // register v_reg_dirty_48
  reg [3 : 0] v_reg_dirty_48;
  reg [3 : 0] v_reg_dirty_48_D_IN;
  wire v_reg_dirty_48_EN;

  // register v_reg_dirty_49
  reg [3 : 0] v_reg_dirty_49;
  reg [3 : 0] v_reg_dirty_49_D_IN;
  wire v_reg_dirty_49_EN;

  // register v_reg_dirty_5
  reg [3 : 0] v_reg_dirty_5;
  reg [3 : 0] v_reg_dirty_5_D_IN;
  wire v_reg_dirty_5_EN;

  // register v_reg_dirty_50
  reg [3 : 0] v_reg_dirty_50;
  reg [3 : 0] v_reg_dirty_50_D_IN;
  wire v_reg_dirty_50_EN;

  // register v_reg_dirty_51
  reg [3 : 0] v_reg_dirty_51;
  reg [3 : 0] v_reg_dirty_51_D_IN;
  wire v_reg_dirty_51_EN;

  // register v_reg_dirty_52
  reg [3 : 0] v_reg_dirty_52;
  reg [3 : 0] v_reg_dirty_52_D_IN;
  wire v_reg_dirty_52_EN;

  // register v_reg_dirty_53
  reg [3 : 0] v_reg_dirty_53;
  reg [3 : 0] v_reg_dirty_53_D_IN;
  wire v_reg_dirty_53_EN;

  // register v_reg_dirty_54
  reg [3 : 0] v_reg_dirty_54;
  reg [3 : 0] v_reg_dirty_54_D_IN;
  wire v_reg_dirty_54_EN;

  // register v_reg_dirty_55
  reg [3 : 0] v_reg_dirty_55;
  reg [3 : 0] v_reg_dirty_55_D_IN;
  wire v_reg_dirty_55_EN;

  // register v_reg_dirty_56
  reg [3 : 0] v_reg_dirty_56;
  reg [3 : 0] v_reg_dirty_56_D_IN;
  wire v_reg_dirty_56_EN;

  // register v_reg_dirty_57
  reg [3 : 0] v_reg_dirty_57;
  reg [3 : 0] v_reg_dirty_57_D_IN;
  wire v_reg_dirty_57_EN;

  // register v_reg_dirty_58
  reg [3 : 0] v_reg_dirty_58;
  reg [3 : 0] v_reg_dirty_58_D_IN;
  wire v_reg_dirty_58_EN;

  // register v_reg_dirty_59
  reg [3 : 0] v_reg_dirty_59;
  reg [3 : 0] v_reg_dirty_59_D_IN;
  wire v_reg_dirty_59_EN;

  // register v_reg_dirty_6
  reg [3 : 0] v_reg_dirty_6;
  reg [3 : 0] v_reg_dirty_6_D_IN;
  wire v_reg_dirty_6_EN;

  // register v_reg_dirty_60
  reg [3 : 0] v_reg_dirty_60;
  reg [3 : 0] v_reg_dirty_60_D_IN;
  wire v_reg_dirty_60_EN;

  // register v_reg_dirty_61
  reg [3 : 0] v_reg_dirty_61;
  reg [3 : 0] v_reg_dirty_61_D_IN;
  wire v_reg_dirty_61_EN;

  // register v_reg_dirty_62
  reg [3 : 0] v_reg_dirty_62;
  reg [3 : 0] v_reg_dirty_62_D_IN;
  wire v_reg_dirty_62_EN;

  // register v_reg_dirty_63
  reg [3 : 0] v_reg_dirty_63;
  reg [3 : 0] v_reg_dirty_63_D_IN;
  wire v_reg_dirty_63_EN;

  // register v_reg_dirty_7
  reg [3 : 0] v_reg_dirty_7;
  reg [3 : 0] v_reg_dirty_7_D_IN;
  wire v_reg_dirty_7_EN;

  // register v_reg_dirty_8
  reg [3 : 0] v_reg_dirty_8;
  reg [3 : 0] v_reg_dirty_8_D_IN;
  wire v_reg_dirty_8_EN;

  // register v_reg_dirty_9
  reg [3 : 0] v_reg_dirty_9;
  reg [3 : 0] v_reg_dirty_9_D_IN;
  wire v_reg_dirty_9_EN;

  // register v_reg_valid_0
  reg [3 : 0] v_reg_valid_0;
  reg [3 : 0] v_reg_valid_0_D_IN;
  wire v_reg_valid_0_EN;

  // register v_reg_valid_1
  reg [3 : 0] v_reg_valid_1;
  reg [3 : 0] v_reg_valid_1_D_IN;
  wire v_reg_valid_1_EN;

  // register v_reg_valid_10
  reg [3 : 0] v_reg_valid_10;
  reg [3 : 0] v_reg_valid_10_D_IN;
  wire v_reg_valid_10_EN;

  // register v_reg_valid_11
  reg [3 : 0] v_reg_valid_11;
  reg [3 : 0] v_reg_valid_11_D_IN;
  wire v_reg_valid_11_EN;

  // register v_reg_valid_12
  reg [3 : 0] v_reg_valid_12;
  reg [3 : 0] v_reg_valid_12_D_IN;
  wire v_reg_valid_12_EN;

  // register v_reg_valid_13
  reg [3 : 0] v_reg_valid_13;
  reg [3 : 0] v_reg_valid_13_D_IN;
  wire v_reg_valid_13_EN;

  // register v_reg_valid_14
  reg [3 : 0] v_reg_valid_14;
  reg [3 : 0] v_reg_valid_14_D_IN;
  wire v_reg_valid_14_EN;

  // register v_reg_valid_15
  reg [3 : 0] v_reg_valid_15;
  reg [3 : 0] v_reg_valid_15_D_IN;
  wire v_reg_valid_15_EN;

  // register v_reg_valid_16
  reg [3 : 0] v_reg_valid_16;
  reg [3 : 0] v_reg_valid_16_D_IN;
  wire v_reg_valid_16_EN;

  // register v_reg_valid_17
  reg [3 : 0] v_reg_valid_17;
  reg [3 : 0] v_reg_valid_17_D_IN;
  wire v_reg_valid_17_EN;

  // register v_reg_valid_18
  reg [3 : 0] v_reg_valid_18;
  reg [3 : 0] v_reg_valid_18_D_IN;
  wire v_reg_valid_18_EN;

  // register v_reg_valid_19
  reg [3 : 0] v_reg_valid_19;
  reg [3 : 0] v_reg_valid_19_D_IN;
  wire v_reg_valid_19_EN;

  // register v_reg_valid_2
  reg [3 : 0] v_reg_valid_2;
  reg [3 : 0] v_reg_valid_2_D_IN;
  wire v_reg_valid_2_EN;

  // register v_reg_valid_20
  reg [3 : 0] v_reg_valid_20;
  reg [3 : 0] v_reg_valid_20_D_IN;
  wire v_reg_valid_20_EN;

  // register v_reg_valid_21
  reg [3 : 0] v_reg_valid_21;
  reg [3 : 0] v_reg_valid_21_D_IN;
  wire v_reg_valid_21_EN;

  // register v_reg_valid_22
  reg [3 : 0] v_reg_valid_22;
  reg [3 : 0] v_reg_valid_22_D_IN;
  wire v_reg_valid_22_EN;

  // register v_reg_valid_23
  reg [3 : 0] v_reg_valid_23;
  reg [3 : 0] v_reg_valid_23_D_IN;
  wire v_reg_valid_23_EN;

  // register v_reg_valid_24
  reg [3 : 0] v_reg_valid_24;
  reg [3 : 0] v_reg_valid_24_D_IN;
  wire v_reg_valid_24_EN;

  // register v_reg_valid_25
  reg [3 : 0] v_reg_valid_25;
  reg [3 : 0] v_reg_valid_25_D_IN;
  wire v_reg_valid_25_EN;

  // register v_reg_valid_26
  reg [3 : 0] v_reg_valid_26;
  reg [3 : 0] v_reg_valid_26_D_IN;
  wire v_reg_valid_26_EN;

  // register v_reg_valid_27
  reg [3 : 0] v_reg_valid_27;
  reg [3 : 0] v_reg_valid_27_D_IN;
  wire v_reg_valid_27_EN;

  // register v_reg_valid_28
  reg [3 : 0] v_reg_valid_28;
  reg [3 : 0] v_reg_valid_28_D_IN;
  wire v_reg_valid_28_EN;

  // register v_reg_valid_29
  reg [3 : 0] v_reg_valid_29;
  reg [3 : 0] v_reg_valid_29_D_IN;
  wire v_reg_valid_29_EN;

  // register v_reg_valid_3
  reg [3 : 0] v_reg_valid_3;
  reg [3 : 0] v_reg_valid_3_D_IN;
  wire v_reg_valid_3_EN;

  // register v_reg_valid_30
  reg [3 : 0] v_reg_valid_30;
  reg [3 : 0] v_reg_valid_30_D_IN;
  wire v_reg_valid_30_EN;

  // register v_reg_valid_31
  reg [3 : 0] v_reg_valid_31;
  reg [3 : 0] v_reg_valid_31_D_IN;
  wire v_reg_valid_31_EN;

  // register v_reg_valid_32
  reg [3 : 0] v_reg_valid_32;
  reg [3 : 0] v_reg_valid_32_D_IN;
  wire v_reg_valid_32_EN;

  // register v_reg_valid_33
  reg [3 : 0] v_reg_valid_33;
  reg [3 : 0] v_reg_valid_33_D_IN;
  wire v_reg_valid_33_EN;

  // register v_reg_valid_34
  reg [3 : 0] v_reg_valid_34;
  reg [3 : 0] v_reg_valid_34_D_IN;
  wire v_reg_valid_34_EN;

  // register v_reg_valid_35
  reg [3 : 0] v_reg_valid_35;
  reg [3 : 0] v_reg_valid_35_D_IN;
  wire v_reg_valid_35_EN;

  // register v_reg_valid_36
  reg [3 : 0] v_reg_valid_36;
  reg [3 : 0] v_reg_valid_36_D_IN;
  wire v_reg_valid_36_EN;

  // register v_reg_valid_37
  reg [3 : 0] v_reg_valid_37;
  reg [3 : 0] v_reg_valid_37_D_IN;
  wire v_reg_valid_37_EN;

  // register v_reg_valid_38
  reg [3 : 0] v_reg_valid_38;
  reg [3 : 0] v_reg_valid_38_D_IN;
  wire v_reg_valid_38_EN;

  // register v_reg_valid_39
  reg [3 : 0] v_reg_valid_39;
  reg [3 : 0] v_reg_valid_39_D_IN;
  wire v_reg_valid_39_EN;

  // register v_reg_valid_4
  reg [3 : 0] v_reg_valid_4;
  reg [3 : 0] v_reg_valid_4_D_IN;
  wire v_reg_valid_4_EN;

  // register v_reg_valid_40
  reg [3 : 0] v_reg_valid_40;
  reg [3 : 0] v_reg_valid_40_D_IN;
  wire v_reg_valid_40_EN;

  // register v_reg_valid_41
  reg [3 : 0] v_reg_valid_41;
  reg [3 : 0] v_reg_valid_41_D_IN;
  wire v_reg_valid_41_EN;

  // register v_reg_valid_42
  reg [3 : 0] v_reg_valid_42;
  reg [3 : 0] v_reg_valid_42_D_IN;
  wire v_reg_valid_42_EN;

  // register v_reg_valid_43
  reg [3 : 0] v_reg_valid_43;
  reg [3 : 0] v_reg_valid_43_D_IN;
  wire v_reg_valid_43_EN;

  // register v_reg_valid_44
  reg [3 : 0] v_reg_valid_44;
  reg [3 : 0] v_reg_valid_44_D_IN;
  wire v_reg_valid_44_EN;

  // register v_reg_valid_45
  reg [3 : 0] v_reg_valid_45;
  reg [3 : 0] v_reg_valid_45_D_IN;
  wire v_reg_valid_45_EN;

  // register v_reg_valid_46
  reg [3 : 0] v_reg_valid_46;
  reg [3 : 0] v_reg_valid_46_D_IN;
  wire v_reg_valid_46_EN;

  // register v_reg_valid_47
  reg [3 : 0] v_reg_valid_47;
  reg [3 : 0] v_reg_valid_47_D_IN;
  wire v_reg_valid_47_EN;

  // register v_reg_valid_48
  reg [3 : 0] v_reg_valid_48;
  reg [3 : 0] v_reg_valid_48_D_IN;
  wire v_reg_valid_48_EN;

  // register v_reg_valid_49
  reg [3 : 0] v_reg_valid_49;
  reg [3 : 0] v_reg_valid_49_D_IN;
  wire v_reg_valid_49_EN;

  // register v_reg_valid_5
  reg [3 : 0] v_reg_valid_5;
  reg [3 : 0] v_reg_valid_5_D_IN;
  wire v_reg_valid_5_EN;

  // register v_reg_valid_50
  reg [3 : 0] v_reg_valid_50;
  reg [3 : 0] v_reg_valid_50_D_IN;
  wire v_reg_valid_50_EN;

  // register v_reg_valid_51
  reg [3 : 0] v_reg_valid_51;
  reg [3 : 0] v_reg_valid_51_D_IN;
  wire v_reg_valid_51_EN;

  // register v_reg_valid_52
  reg [3 : 0] v_reg_valid_52;
  reg [3 : 0] v_reg_valid_52_D_IN;
  wire v_reg_valid_52_EN;

  // register v_reg_valid_53
  reg [3 : 0] v_reg_valid_53;
  reg [3 : 0] v_reg_valid_53_D_IN;
  wire v_reg_valid_53_EN;

  // register v_reg_valid_54
  reg [3 : 0] v_reg_valid_54;
  reg [3 : 0] v_reg_valid_54_D_IN;
  wire v_reg_valid_54_EN;

  // register v_reg_valid_55
  reg [3 : 0] v_reg_valid_55;
  reg [3 : 0] v_reg_valid_55_D_IN;
  wire v_reg_valid_55_EN;

  // register v_reg_valid_56
  reg [3 : 0] v_reg_valid_56;
  reg [3 : 0] v_reg_valid_56_D_IN;
  wire v_reg_valid_56_EN;

  // register v_reg_valid_57
  reg [3 : 0] v_reg_valid_57;
  reg [3 : 0] v_reg_valid_57_D_IN;
  wire v_reg_valid_57_EN;

  // register v_reg_valid_58
  reg [3 : 0] v_reg_valid_58;
  reg [3 : 0] v_reg_valid_58_D_IN;
  wire v_reg_valid_58_EN;

  // register v_reg_valid_59
  reg [3 : 0] v_reg_valid_59;
  reg [3 : 0] v_reg_valid_59_D_IN;
  wire v_reg_valid_59_EN;

  // register v_reg_valid_6
  reg [3 : 0] v_reg_valid_6;
  reg [3 : 0] v_reg_valid_6_D_IN;
  wire v_reg_valid_6_EN;

  // register v_reg_valid_60
  reg [3 : 0] v_reg_valid_60;
  reg [3 : 0] v_reg_valid_60_D_IN;
  wire v_reg_valid_60_EN;

  // register v_reg_valid_61
  reg [3 : 0] v_reg_valid_61;
  reg [3 : 0] v_reg_valid_61_D_IN;
  wire v_reg_valid_61_EN;

  // register v_reg_valid_62
  reg [3 : 0] v_reg_valid_62;
  reg [3 : 0] v_reg_valid_62_D_IN;
  wire v_reg_valid_62_EN;

  // register v_reg_valid_63
  reg [3 : 0] v_reg_valid_63;
  reg [3 : 0] v_reg_valid_63_D_IN;
  wire v_reg_valid_63_EN;

  // register v_reg_valid_7
  reg [3 : 0] v_reg_valid_7;
  reg [3 : 0] v_reg_valid_7_D_IN;
  wire v_reg_valid_7_EN;

  // register v_reg_valid_8
  reg [3 : 0] v_reg_valid_8;
  reg [3 : 0] v_reg_valid_8_D_IN;
  wire v_reg_valid_8_EN;

  // register v_reg_valid_9
  reg [3 : 0] v_reg_valid_9;
  reg [3 : 0] v_reg_valid_9_D_IN;
  wire v_reg_valid_9_EN;

  // ports of submodule ff_core_request
  wire [140 : 0] ff_core_request_D_IN, ff_core_request_D_OUT;
  wire ff_core_request_CLR,
       ff_core_request_DEQ,
       ff_core_request_EMPTY_N,
       ff_core_request_ENQ,
       ff_core_request_FULL_N;

  // ports of submodule ff_mem_io_request
  wire [99 : 0] ff_mem_io_request_D_IN, ff_mem_io_request_D_OUT;
  wire ff_mem_io_request_CLR,
       ff_mem_io_request_DEQ,
       ff_mem_io_request_EMPTY_N,
       ff_mem_io_request_ENQ,
       ff_mem_io_request_FULL_N;

  // ports of submodule ff_mem_io_resp
  wire [64 : 0] ff_mem_io_resp_D_IN, ff_mem_io_resp_D_OUT;
  wire ff_mem_io_resp_CLR,
       ff_mem_io_resp_DEQ,
       ff_mem_io_resp_EMPTY_N,
       ff_mem_io_resp_ENQ,
       ff_mem_io_resp_FULL_N;

  // ports of submodule ff_mem_rd_request
  wire [42 : 0] ff_mem_rd_request_D_IN, ff_mem_rd_request_D_OUT;
  wire ff_mem_rd_request_CLR,
       ff_mem_rd_request_DEQ,
       ff_mem_rd_request_EMPTY_N,
       ff_mem_rd_request_ENQ,
       ff_mem_rd_request_FULL_N;

  // ports of submodule ff_mem_wr_request
  wire [554 : 0] ff_mem_wr_request_D_IN, ff_mem_wr_request_D_OUT;
  wire ff_mem_wr_request_CLR,
       ff_mem_wr_request_DEQ,
       ff_mem_wr_request_EMPTY_N,
       ff_mem_wr_request_ENQ,
       ff_mem_wr_request_FULL_N;

  // ports of submodule ff_pending_req
  wire [6 : 0] ff_pending_req_D_IN, ff_pending_req_D_OUT;
  wire ff_pending_req_CLR,
       ff_pending_req_DEQ,
       ff_pending_req_EMPTY_N,
       ff_pending_req_ENQ,
       ff_pending_req_FULL_N;

  // ports of submodule m_data
  reg [5 : 0] m_data_ma_request_index;
  reg [1 : 0] m_data_ma_request_way;
  wire [575 : 0] m_data_mv_word_select;
  wire [511 : 0] m_data_ma_request_dataline, m_data_mv_line_select;
  wire [7 : 0] m_data_ma_request_banks;
  wire [3 : 0] m_data_mv_line_select_wayselect,
	       m_data_mv_word_select_wayselect;
  wire [2 : 0] m_data_mv_word_select_blocknum;
  wire m_data_EN_ma_request,
       m_data_EN_mv_line_select,
       m_data_EN_mv_word_select,
       m_data_ma_request_read_write;

  // ports of submodule m_fillbuffer
  wire [545 : 0] m_fillbuffer_mv_release_info;
  wire [511 : 0] m_fillbuffer_mav_allocate_line_dataline;
  wire [75 : 0] m_fillbuffer_mav_polling_response;
  wire [65 : 0] m_fillbuffer_ma_fill_from_memory_mem_resp;
  wire [63 : 0] m_fillbuffer_ma_from_storebuffer_dataword,
		m_fillbuffer_ma_from_storebuffer_mask;
  wire [31 : 0] m_fillbuffer_ma_from_storebuffer_address,
		m_fillbuffer_mav_allocate_line_address,
		m_fillbuffer_mav_polling_response_address;
  wire [3 : 0] m_fillbuffer_ma_fill_from_memory_fbindex,
	       m_fillbuffer_ma_from_storebuffer_fbindex,
	       m_fillbuffer_mav_allocate_line,
	       m_fillbuffer_mav_polling_response_fbindex;
  wire [2 : 0] m_fillbuffer_ma_fill_from_memory_init_bank;
  wire m_fillbuffer_EN_ma_fill_from_memory,
       m_fillbuffer_EN_ma_from_storebuffer,
       m_fillbuffer_EN_ma_perform_release,
       m_fillbuffer_EN_mav_allocate_line,
       m_fillbuffer_EN_mav_polling_response,
       m_fillbuffer_mav_allocate_line_dirty,
       m_fillbuffer_mav_allocate_line_from_ram,
       m_fillbuffer_mav_polling_response_fill,
       m_fillbuffer_mv_fbempty,
       m_fillbuffer_mv_fbfull,
       m_fillbuffer_mv_fbhead_valid;

  // ports of submodule m_iobuffer
  wire [171 : 0] m_iobuffer_ma_allocate_io_entry, m_iobuffer_mv_io_head;
  wire m_iobuffer_EN_ma_allocate_io,
       m_iobuffer_EN_ma_commit_io,
       m_iobuffer_EN_ma_increment_head,
       m_iobuffer_RDY_mv_io_head,
       m_iobuffer_mv_io_empty,
       m_iobuffer_mv_io_full,
       m_iobuffer_mv_io_head_valid;

  // ports of submodule m_storebuffer
  wire [166 : 0] m_storebuffer_mv_sb_head;
  wire [127 : 0] m_storebuffer_mav_check_sb_hit;
  wire [63 : 0] m_storebuffer_ma_allocate_entry_data,
		m_storebuffer_ma_allocate_entry_read_data;
  wire [31 : 0] m_storebuffer_ma_allocate_entry_address,
		m_storebuffer_mav_check_sb_hit_phyaddr;
  wire [4 : 0] m_storebuffer_ma_allocate_entry_atomic_op;
  wire [3 : 0] m_storebuffer_ma_allocate_entry_fbindex;
  wire [1 : 0] m_storebuffer_ma_allocate_entry_size;
  wire m_storebuffer_EN_ma_allocate_entry,
       m_storebuffer_EN_ma_commit_store,
       m_storebuffer_EN_ma_increment_head,
       m_storebuffer_EN_mav_check_sb_hit,
       m_storebuffer_RDY_ma_allocate_entry,
       m_storebuffer_ma_allocate_entry_atomic,
       m_storebuffer_ma_allocate_entry_epochs,
       m_storebuffer_ma_commit_store_sbid,
       m_storebuffer_mv_sb_busy,
       m_storebuffer_mv_sb_curr_tail,
       m_storebuffer_mv_sb_empty,
       m_storebuffer_mv_sb_full,
       m_storebuffer_mv_sb_head_commit,
       m_storebuffer_mv_sb_head_valid;

  // ports of submodule m_tag
  reg [5 : 0] m_tag_ma_request_index;
  reg [1 : 0] m_tag_ma_request_way;
  wire [31 : 0] m_tag_ma_request_address,
		m_tag_mv_tag_select,
		m_tag_mv_tagmatch_resp_address_in;
  wire [3 : 0] m_tag_mv_tagmatch_resp;
  wire [1 : 0] m_tag_mv_tag_select_wayselect;
  wire m_tag_EN_ma_request, m_tag_ma_request_read_write;

  // rule scheduling signals
  wire CAN_FIRE_RL_rg_core_io_response__dreg_update,
       CAN_FIRE_RL_rg_release_readphase__dreg_update,
       CAN_FIRE_RL_rl_commit_stores,
       CAN_FIRE_RL_rl_deq_write_resp,
       CAN_FIRE_RL_rl_deq_write_response,
       CAN_FIRE_RL_rl_fence_operation,
       CAN_FIRE_RL_rl_fill_from_memory,
       CAN_FIRE_RL_rl_fillbuffer_check,
       CAN_FIRE_RL_rl_initiate_io,
       CAN_FIRE_RL_rl_io_response,
       CAN_FIRE_RL_rl_perform_replay,
       CAN_FIRE_RL_rl_ram_check,
       CAN_FIRE_RL_rl_release_from_fillbuffer,
       CAN_FIRE_RL_rl_response_to_core,
       CAN_FIRE_RL_rl_send_memory_request,
       CAN_FIRE___me_check_5,
       CAN_FIRE_deq_mem_wr_req,
       CAN_FIRE_get_hold_req_get,
       CAN_FIRE_get_ptw_resp_get,
       CAN_FIRE_ma_cache_enable,
       CAN_FIRE_ma_commit_io,
       CAN_FIRE_ma_commit_store,
       CAN_FIRE_ma_curr_priv,
       CAN_FIRE_put_pa_from_tlb_put,
       CAN_FIRE_receive_core_req_put,
       CAN_FIRE_receive_mem_io_resp_put,
       CAN_FIRE_receive_mem_rd_resp_put,
       CAN_FIRE_receive_mem_wr_resp_put,
       CAN_FIRE_send_core_cache_resp_get,
       CAN_FIRE_send_mem_io_req_get,
       CAN_FIRE_send_mem_rd_req_get,
       WILL_FIRE_RL_rg_core_io_response__dreg_update,
       WILL_FIRE_RL_rg_release_readphase__dreg_update,
       WILL_FIRE_RL_rl_commit_stores,
       WILL_FIRE_RL_rl_deq_write_resp,
       WILL_FIRE_RL_rl_deq_write_response,
       WILL_FIRE_RL_rl_fence_operation,
       WILL_FIRE_RL_rl_fill_from_memory,
       WILL_FIRE_RL_rl_fillbuffer_check,
       WILL_FIRE_RL_rl_initiate_io,
       WILL_FIRE_RL_rl_io_response,
       WILL_FIRE_RL_rl_perform_replay,
       WILL_FIRE_RL_rl_ram_check,
       WILL_FIRE_RL_rl_release_from_fillbuffer,
       WILL_FIRE_RL_rl_response_to_core,
       WILL_FIRE_RL_rl_send_memory_request,
       WILL_FIRE___me_check_5,
       WILL_FIRE_deq_mem_wr_req,
       WILL_FIRE_get_hold_req_get,
       WILL_FIRE_get_ptw_resp_get,
       WILL_FIRE_ma_cache_enable,
       WILL_FIRE_ma_commit_io,
       WILL_FIRE_ma_commit_store,
       WILL_FIRE_ma_curr_priv,
       WILL_FIRE_put_pa_from_tlb_put,
       WILL_FIRE_receive_core_req_put,
       WILL_FIRE_receive_mem_io_resp_put,
       WILL_FIRE_receive_mem_rd_resp_put,
       WILL_FIRE_receive_mem_wr_resp_put,
       WILL_FIRE_send_core_cache_resp_get,
       WILL_FIRE_send_mem_io_req_get,
       WILL_FIRE_send_mem_rd_req_get;

  // inputs to muxes for submodule ports
  wire [554 : 0] MUX_ff_mem_wr_request_enq_1__VAL_1,
		 MUX_ff_mem_wr_request_enq_1__VAL_2;
  wire [132 : 0] MUX_ff_core_response_rv_port0__write_1__VAL_1,
		 MUX_ff_core_response_rv_port0__write_1__VAL_2,
		 MUX_ff_ptw_response_rv_port0__write_1__VAL_1;
  wire [99 : 0] MUX_ff_mem_io_request_enq_1__VAL_1,
		MUX_ff_mem_io_request_enq_1__VAL_2;
  wire [5 : 0] MUX_m_data_ma_request_2__VAL_1;
  wire [3 : 0] MUX_m_data_mv_line_select_1__VAL_2,
	       MUX_v_reg_dirty_0_write_1__VAL_1,
	       MUX_v_reg_dirty_14_write_1__VAL_2,
	       MUX_v_reg_valid_0_write_1__VAL_1,
	       MUX_v_reg_valid_34_write_1__VAL_2;
  wire [1 : 0] MUX_replacement_v_count_0_write_1__VAL_2;
  wire MUX_ff_core_response_rv_port0__write_1__SEL_1,
       MUX_ff_mem_io_request_enq_1__SEL_1,
       MUX_ff_mem_wr_request_enq_1__SEL_1,
       MUX_ff_mem_wr_request_enq_1__SEL_2,
       MUX_ff_ptw_response_rv_port0__write_1__SEL_1,
       MUX_m_data_ma_request_1__SEL_1,
       MUX_m_data_ma_request_1__SEL_2,
       MUX_m_data_ma_request_1__VAL_2,
       MUX_m_data_mv_line_select_1__SEL_1,
       MUX_m_fillbuffer_mav_allocate_line_1__SEL_1,
       MUX_m_fillbuffer_mav_allocate_line_4__VAL_1,
       MUX_rg_io_busy_write_1__SEL_1,
       MUX_rg_performing_replay_write_1__SEL_1,
       MUX_v_reg_dirty_0_write_1__SEL_1,
       MUX_v_reg_dirty_0_write_1__SEL_2,
       MUX_v_reg_dirty_1_write_1__SEL_1,
       MUX_v_reg_dirty_1_write_1__SEL_2,
       MUX_v_reg_dirty_10_write_1__SEL_1,
       MUX_v_reg_dirty_10_write_1__SEL_2,
       MUX_v_reg_dirty_11_write_1__SEL_1,
       MUX_v_reg_dirty_11_write_1__SEL_2,
       MUX_v_reg_dirty_12_write_1__SEL_1,
       MUX_v_reg_dirty_12_write_1__SEL_2,
       MUX_v_reg_dirty_13_write_1__SEL_1,
       MUX_v_reg_dirty_13_write_1__SEL_2,
       MUX_v_reg_dirty_14_write_1__SEL_1,
       MUX_v_reg_dirty_14_write_1__SEL_2,
       MUX_v_reg_dirty_15_write_1__SEL_1,
       MUX_v_reg_dirty_15_write_1__SEL_2,
       MUX_v_reg_dirty_16_write_1__SEL_1,
       MUX_v_reg_dirty_16_write_1__SEL_2,
       MUX_v_reg_dirty_17_write_1__SEL_1,
       MUX_v_reg_dirty_17_write_1__SEL_2,
       MUX_v_reg_dirty_18_write_1__SEL_1,
       MUX_v_reg_dirty_18_write_1__SEL_2,
       MUX_v_reg_dirty_19_write_1__SEL_1,
       MUX_v_reg_dirty_19_write_1__SEL_2,
       MUX_v_reg_dirty_2_write_1__SEL_1,
       MUX_v_reg_dirty_2_write_1__SEL_2,
       MUX_v_reg_dirty_20_write_1__SEL_1,
       MUX_v_reg_dirty_20_write_1__SEL_2,
       MUX_v_reg_dirty_21_write_1__SEL_1,
       MUX_v_reg_dirty_21_write_1__SEL_2,
       MUX_v_reg_dirty_22_write_1__SEL_1,
       MUX_v_reg_dirty_22_write_1__SEL_2,
       MUX_v_reg_dirty_23_write_1__SEL_1,
       MUX_v_reg_dirty_23_write_1__SEL_2,
       MUX_v_reg_dirty_24_write_1__SEL_1,
       MUX_v_reg_dirty_24_write_1__SEL_2,
       MUX_v_reg_dirty_25_write_1__SEL_1,
       MUX_v_reg_dirty_25_write_1__SEL_2,
       MUX_v_reg_dirty_26_write_1__SEL_1,
       MUX_v_reg_dirty_26_write_1__SEL_2,
       MUX_v_reg_dirty_27_write_1__SEL_1,
       MUX_v_reg_dirty_27_write_1__SEL_2,
       MUX_v_reg_dirty_28_write_1__SEL_1,
       MUX_v_reg_dirty_28_write_1__SEL_2,
       MUX_v_reg_dirty_29_write_1__SEL_1,
       MUX_v_reg_dirty_29_write_1__SEL_2,
       MUX_v_reg_dirty_3_write_1__SEL_1,
       MUX_v_reg_dirty_3_write_1__SEL_2,
       MUX_v_reg_dirty_30_write_1__SEL_1,
       MUX_v_reg_dirty_30_write_1__SEL_2,
       MUX_v_reg_dirty_31_write_1__SEL_1,
       MUX_v_reg_dirty_31_write_1__SEL_2,
       MUX_v_reg_dirty_32_write_1__SEL_1,
       MUX_v_reg_dirty_32_write_1__SEL_2,
       MUX_v_reg_dirty_33_write_1__SEL_1,
       MUX_v_reg_dirty_33_write_1__SEL_2,
       MUX_v_reg_dirty_34_write_1__SEL_1,
       MUX_v_reg_dirty_34_write_1__SEL_2,
       MUX_v_reg_dirty_35_write_1__SEL_1,
       MUX_v_reg_dirty_35_write_1__SEL_2,
       MUX_v_reg_dirty_36_write_1__SEL_1,
       MUX_v_reg_dirty_36_write_1__SEL_2,
       MUX_v_reg_dirty_37_write_1__SEL_1,
       MUX_v_reg_dirty_37_write_1__SEL_2,
       MUX_v_reg_dirty_38_write_1__SEL_1,
       MUX_v_reg_dirty_38_write_1__SEL_2,
       MUX_v_reg_dirty_39_write_1__SEL_1,
       MUX_v_reg_dirty_39_write_1__SEL_2,
       MUX_v_reg_dirty_4_write_1__SEL_1,
       MUX_v_reg_dirty_4_write_1__SEL_2,
       MUX_v_reg_dirty_40_write_1__SEL_1,
       MUX_v_reg_dirty_40_write_1__SEL_2,
       MUX_v_reg_dirty_41_write_1__SEL_1,
       MUX_v_reg_dirty_41_write_1__SEL_2,
       MUX_v_reg_dirty_42_write_1__SEL_1,
       MUX_v_reg_dirty_42_write_1__SEL_2,
       MUX_v_reg_dirty_43_write_1__SEL_1,
       MUX_v_reg_dirty_43_write_1__SEL_2,
       MUX_v_reg_dirty_44_write_1__SEL_1,
       MUX_v_reg_dirty_44_write_1__SEL_2,
       MUX_v_reg_dirty_45_write_1__SEL_1,
       MUX_v_reg_dirty_45_write_1__SEL_2,
       MUX_v_reg_dirty_46_write_1__SEL_1,
       MUX_v_reg_dirty_46_write_1__SEL_2,
       MUX_v_reg_dirty_47_write_1__SEL_1,
       MUX_v_reg_dirty_47_write_1__SEL_2,
       MUX_v_reg_dirty_48_write_1__SEL_1,
       MUX_v_reg_dirty_48_write_1__SEL_2,
       MUX_v_reg_dirty_49_write_1__SEL_1,
       MUX_v_reg_dirty_49_write_1__SEL_2,
       MUX_v_reg_dirty_5_write_1__SEL_1,
       MUX_v_reg_dirty_5_write_1__SEL_2,
       MUX_v_reg_dirty_50_write_1__SEL_1,
       MUX_v_reg_dirty_50_write_1__SEL_2,
       MUX_v_reg_dirty_51_write_1__SEL_1,
       MUX_v_reg_dirty_51_write_1__SEL_2,
       MUX_v_reg_dirty_52_write_1__SEL_1,
       MUX_v_reg_dirty_52_write_1__SEL_2,
       MUX_v_reg_dirty_53_write_1__SEL_1,
       MUX_v_reg_dirty_53_write_1__SEL_2,
       MUX_v_reg_dirty_54_write_1__SEL_1,
       MUX_v_reg_dirty_54_write_1__SEL_2,
       MUX_v_reg_dirty_55_write_1__SEL_1,
       MUX_v_reg_dirty_55_write_1__SEL_2,
       MUX_v_reg_dirty_56_write_1__SEL_1,
       MUX_v_reg_dirty_56_write_1__SEL_2,
       MUX_v_reg_dirty_57_write_1__SEL_1,
       MUX_v_reg_dirty_57_write_1__SEL_2,
       MUX_v_reg_dirty_58_write_1__SEL_1,
       MUX_v_reg_dirty_58_write_1__SEL_2,
       MUX_v_reg_dirty_59_write_1__SEL_1,
       MUX_v_reg_dirty_59_write_1__SEL_2,
       MUX_v_reg_dirty_6_write_1__SEL_1,
       MUX_v_reg_dirty_6_write_1__SEL_2,
       MUX_v_reg_dirty_60_write_1__SEL_1,
       MUX_v_reg_dirty_60_write_1__SEL_2,
       MUX_v_reg_dirty_61_write_1__SEL_1,
       MUX_v_reg_dirty_61_write_1__SEL_2,
       MUX_v_reg_dirty_62_write_1__SEL_1,
       MUX_v_reg_dirty_62_write_1__SEL_2,
       MUX_v_reg_dirty_63_write_1__SEL_1,
       MUX_v_reg_dirty_63_write_1__SEL_2,
       MUX_v_reg_dirty_7_write_1__SEL_1,
       MUX_v_reg_dirty_7_write_1__SEL_2,
       MUX_v_reg_dirty_8_write_1__SEL_1,
       MUX_v_reg_dirty_8_write_1__SEL_2,
       MUX_v_reg_dirty_9_write_1__SEL_1,
       MUX_v_reg_dirty_9_write_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] lv_mem_response_data__h138405,
	       x__h104633,
	       x_data__h138891,
	       y__h104511;
  reg [3 : 0] SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234,
	      bs__h112864,
	      bs__h17345,
	      bs__h19378,
	      dirty__h121596,
	      valid__h121595;
  reg [1 : 0] SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522;
  reg lv_sign__h37978;
  wire [63 : 0] lv_response_word__h138459,
		lv_response_word__h35749,
		lv_response_word__h38293,
		lv_response_word__h38301,
		mem_response_data__h138390,
		op1___1__h139130,
		op1__h139072,
		op2___1__h139131,
		op2__h139073,
		response_word__h33628,
		x1_avValue_snd_fst_word__h38359,
		x1_avValue_snd_fst_word__h38375,
		x__h104508,
		x__h104510,
		x__h104523,
		x__h104534,
		y__h104509,
		y__h104524,
		y__h104535,
		y__h104634,
		y_avValue_snd_word__h38322;
  wire [55 : 0] lv_response_mtval2__h38300;
  wire [31 : 0] final_address__h17296,
		lv_evict_address__h124696,
		lv_mem_response_data38405_BITS_31_TO_0__q4,
		m_iobuffermv_io_head_BITS_107_TO_76__q5,
		mem_response_data38390_BITS_31_TO_0__q3,
		phyaddr__h120936,
		phyaddr__h33340;
  wire [15 : 0] mem_response_data38390_BITS_15_TO_0__q2;
  wire [7 : 0] fn_pmp_lookup___d251, mem_response_data38390_BITS_7_TO_0__q1;
  wire [6 : 0] IF_ff_core_request_first__5_BITS_74_TO_73_41_E_ETC___d263,
	       _theResult____h21507,
	       lv_cause__h138366,
	       lv_cause__h33342,
	       lv_response_cause__h33778,
	       lv_response_cause__h38295;
  wire [5 : 0] x__h138522, x__h33789;
  wire [3 : 0] lv_hitmask__h33411,
	       wayselect__h124582,
	       x__h114286,
	       x__read__h5263,
	       y__h114302,
	       y__h129959;
  wire [2 : 0] x__h34897,
	       x__h35465,
	       x__h35477,
	       x__h35489,
	       y__h35466,
	       y__h35478,
	       y__h35490;
  wire [1 : 0] IF_wr_fb_state_whas__66_THEN_wr_fb_state_wget__ETC___d368,
	       IF_wr_ram_state_whas__61_THEN_wr_ram_state_wge_ETC___d363,
	       entry_access__h112762,
	       i__h112865,
	       pmp_access__h33371,
	       v__h121592,
	       x1_avValue_fst_access__h38241,
	       x1_avValue_fst_access__h38249,
	       x__h28192,
	       x__h37055,
	       y__h37056;
  wire IF_ff_core_request_first__5_BITS_71_TO_70_99_E_ETC___d817,
       IF_ff_core_request_first__5_BITS_74_TO_73_41_E_ETC___d905,
       IF_ff_core_request_first__5_BITS_74_TO_73_41_E_ETC___d906,
       IF_m_iobuffer_mv_io_head__785_BIT_69_852_THEN__ETC___d1869,
       IF_m_iobuffer_mv_io_head__785_BIT_69_852_THEN__ETC___d1874,
       IF_wr_fb_state_whas__66_THEN_wr_fb_state_wget__ETC___d1226,
       IF_wr_ram_state_whas__61_THEN_wr_ram_state_wge_ETC___d1408,
       NOT_0_CONCAT_m_tag_mv_tagmatch_resp_ff_from_tl_ETC___d295,
       NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240,
       NOT_IF_wr_fb_state_whas__66_THEN_wr_fb_state_w_ETC___d1383,
       NOT_IF_wr_fb_state_whas__66_THEN_wr_fb_state_w_ETC___d1387,
       NOT_IF_wr_fb_state_whas__66_THEN_wr_fb_state_w_ETC___d411,
       NOT_IF_wr_ram_state_whas__61_THEN_wr_ram_state_ETC___d1385,
       NOT_IF_wr_ram_state_whas__61_THEN_wr_ram_state_ETC___d419,
       NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697,
       NOT_ff_core_request_first__5_BITS_74_TO_73_41__ETC___d1225,
       NOT_ff_core_request_first__5_BIT_76_6_09_AND_N_ETC___d225,
       NOT_ff_core_request_notEmpty__423_424_AND_NOT__ETC___d1434,
       NOT_ff_core_response_rv_port0__read__0_BIT_132_ETC___d1921,
       NOT_ff_from_tlb_rv_port1__read__02_BIT_64_54_5_ETC___d422,
       NOT_m_fillbuffer_mv_release_info__81_BIT_1_449_ETC___d1696,
       SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545,
       b__h37051,
       b__h37063,
       ff_core_request_first__5_BIT_76_6_AND_rg_fence_ETC___d30,
       ff_from_tlb_rv_port1__read__02_BITS_104_TO_73__ETC___d305,
       lv_response_epochs__h38296,
       m_fillbuffer_mv_fbfull__17_OR_rg_fence_stall_7_ETC___d1446,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1432,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1561,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1564,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1566,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1568,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1570,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1572,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1574,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1576,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1578,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1580,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1582,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1584,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1586,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1588,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1590,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1592,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1594,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1596,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1598,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1600,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1602,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1604,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1606,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1608,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1610,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1612,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1614,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1616,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1618,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1620,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1622,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1624,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1626,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1628,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1630,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1632,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1634,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1636,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1638,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1640,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1642,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1644,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1646,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1648,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1650,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1652,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1654,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1656,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1658,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1660,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1662,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1664,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1666,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1668,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1670,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1672,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1674,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1676,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1678,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1680,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1682,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1684,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1686,
       m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1688,
       m_iobuffer_mv_io_head__785_BIT_72_837_EQ_ma_co_ETC___d1928,
       m_storebuffer_mv_sb_head__770_BIT_70_923_EQ_ma_ETC___d1925,
       rg_reservation_address_88_BIT_64_89_AND_rg_res_ETC___d904,
       wr_fault_whas__58_AND_wr_fault_wget__59_60_OR__ETC___d370,
       x__h124219,
       x__read__h4493,
       x__read__h4563,
       x__read__h4633,
       x__read__h4703,
       x__read__h4773,
       x_wget__h4482,
       x_wget__h4552,
       x_wget__h4622,
       x_wget__h4692,
       x_wget__h4762,
       y__h109756,
       y__h124220;

  // action method receive_core_req_put
  assign RDY_receive_core_req_put =
	     !ff_core_response_rv[132] && !rg_fence_stall &&
	     !m_fillbuffer_mv_fbfull &&
	     !rg_performing_replay &&
	     !m_storebuffer_mv_sb_busy &&
	     EN_ma_cache_enable &&
	     ff_core_request_FULL_N ;
  assign CAN_FIRE_receive_core_req_put = RDY_receive_core_req_put ;
  assign WILL_FIRE_receive_core_req_put = EN_receive_core_req_put ;

  // actionvalue method send_core_cache_resp_get
  assign send_core_cache_resp_get = ff_core_response_rv_port1__read[131:0] ;
  assign RDY_send_core_cache_resp_get = ff_core_response_rv_port1__read[132] ;
  assign CAN_FIRE_send_core_cache_resp_get =
	     ff_core_response_rv_port1__read[132] ;
  assign WILL_FIRE_send_core_cache_resp_get = EN_send_core_cache_resp_get ;

  // value method send_core_io_resp
  assign send_core_io_resp = rg_core_io_response ;
  assign RDY_send_core_io_resp = 1'd1 ;

  // actionvalue method send_mem_rd_req_get
  assign send_mem_rd_req_get = ff_mem_rd_request_D_OUT ;
  assign RDY_send_mem_rd_req_get = ff_mem_rd_request_EMPTY_N ;
  assign CAN_FIRE_send_mem_rd_req_get = ff_mem_rd_request_EMPTY_N ;
  assign WILL_FIRE_send_mem_rd_req_get = EN_send_mem_rd_req_get ;

  // action method receive_mem_rd_resp_put
  assign RDY_receive_mem_rd_resp_put = !ff_mem_rd_resp_rv[66] ;
  assign CAN_FIRE_receive_mem_rd_resp_put = !ff_mem_rd_resp_rv[66] ;
  assign WILL_FIRE_receive_mem_rd_resp_put = EN_receive_mem_rd_resp_put ;

  // value method send_mem_wr_req
  assign send_mem_wr_req = ff_mem_wr_request_D_OUT ;
  assign RDY_send_mem_wr_req = ff_mem_wr_request_EMPTY_N ;

  // action method deq_mem_wr_req
  assign RDY_deq_mem_wr_req = ff_mem_wr_request_EMPTY_N ;
  assign CAN_FIRE_deq_mem_wr_req = ff_mem_wr_request_EMPTY_N ;
  assign WILL_FIRE_deq_mem_wr_req = EN_deq_mem_wr_req ;

  // action method receive_mem_wr_resp_put
  assign RDY_receive_mem_wr_resp_put = !ff_mem_wr_resp_rv[1] ;
  assign CAN_FIRE_receive_mem_wr_resp_put = !ff_mem_wr_resp_rv[1] ;
  assign WILL_FIRE_receive_mem_wr_resp_put = EN_receive_mem_wr_resp_put ;

  // actionvalue method send_mem_io_req_get
  assign send_mem_io_req_get = ff_mem_io_request_D_OUT ;
  assign RDY_send_mem_io_req_get = ff_mem_io_request_EMPTY_N ;
  assign CAN_FIRE_send_mem_io_req_get = ff_mem_io_request_EMPTY_N ;
  assign WILL_FIRE_send_mem_io_req_get = EN_send_mem_io_req_get ;

  // action method receive_mem_io_resp_put
  assign RDY_receive_mem_io_resp_put = ff_mem_io_resp_FULL_N ;
  assign CAN_FIRE_receive_mem_io_resp_put = ff_mem_io_resp_FULL_N ;
  assign WILL_FIRE_receive_mem_io_resp_put = EN_receive_mem_io_resp_put ;

  // action method ma_curr_priv
  assign RDY_ma_curr_priv = 1'd1 ;
  assign CAN_FIRE_ma_curr_priv = 1'd1 ;
  assign WILL_FIRE_ma_curr_priv = EN_ma_curr_priv ;

  // action method ma_cache_enable
  assign RDY_ma_cache_enable = 1'd1 ;
  assign CAN_FIRE_ma_cache_enable = 1'd1 ;
  assign WILL_FIRE_ma_cache_enable = EN_ma_cache_enable ;

  // value method mv_storebuffer_empty
  assign mv_storebuffer_empty = m_storebuffer_mv_sb_empty ;
  assign RDY_mv_storebuffer_empty = 1'd1 ;

  // value method mv_cache_available
  assign mv_cache_available =
	     NOT_ff_core_response_rv_port0__read__0_BIT_132_ETC___d1921 &&
	     !m_iobuffer_mv_io_full ;
  assign RDY_mv_cache_available = 1'd1 ;

  // action method ma_commit_store
  assign RDY_ma_commit_store = 1'd1 ;
  assign CAN_FIRE_ma_commit_store = 1'd1 ;
  assign WILL_FIRE_ma_commit_store = EN_ma_commit_store ;

  // action method ma_commit_io
  assign RDY_ma_commit_io = m_iobuffer_RDY_mv_io_head ;
  assign CAN_FIRE_ma_commit_io = m_iobuffer_RDY_mv_io_head ;
  assign WILL_FIRE_ma_commit_io = EN_ma_commit_io ;

  // actionvalue method get_ptw_resp_get
  assign get_ptw_resp_get = ff_ptw_response_rv_port1__read[131:0] ;
  assign RDY_get_ptw_resp_get = ff_ptw_response_rv_port1__read[132] ;
  assign CAN_FIRE_get_ptw_resp_get = ff_ptw_response_rv_port1__read[132] ;
  assign WILL_FIRE_get_ptw_resp_get = EN_get_ptw_resp_get ;

  // action method put_pa_from_tlb_put
  assign RDY_put_pa_from_tlb_put = !ff_from_tlb_rv[105] ;
  assign CAN_FIRE_put_pa_from_tlb_put = !ff_from_tlb_rv[105] ;
  assign WILL_FIRE_put_pa_from_tlb_put = EN_put_pa_from_tlb_put ;

  // actionvalue method get_hold_req_get
  assign get_hold_req_get = ff_hold_request_rv_port1__read[140:0] ;
  assign RDY_get_hold_req_get = ff_hold_request_rv_port1__read[141] ;
  assign CAN_FIRE_get_hold_req_get = ff_hold_request_rv_port1__read[141] ;
  assign WILL_FIRE_get_hold_req_get = EN_get_hold_req_get ;

  // value method mv_perf_counters
  assign mv_perf_counters =
	     { wr_total_read_access_whas,
	       wr_total_write_access_whas,
	       wr_total_atomic_access_whas,
	       x__read__h4493,
	       x__read__h4563,
	       x__read__h4633,
	       x__read__h4703,
	       x__read__h4773,
	       wr_total_read_fb_hits_whas,
	       wr_total_write_fb_hits_whas,
	       wr_total_atomic_fb_hits_whas,
	       MUX_m_data_mv_line_select_1__SEL_1,
	       MUX_ff_mem_wr_request_enq_1__SEL_2 } ;
  assign RDY_mv_perf_counters = 1'd1 ;

  // submodule ff_core_request
  FIFO2 #(.width(32'd141), .guarded(1'd1)) ff_core_request(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ff_core_request_D_IN),
							   .ENQ(ff_core_request_ENQ),
							   .DEQ(ff_core_request_DEQ),
							   .CLR(ff_core_request_CLR),
							   .D_OUT(ff_core_request_D_OUT),
							   .FULL_N(ff_core_request_FULL_N),
							   .EMPTY_N(ff_core_request_EMPTY_N));

  // submodule ff_mem_io_request
  FIFO1 #(.width(32'd100), .guarded(1'd1)) ff_mem_io_request(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ff_mem_io_request_D_IN),
							     .ENQ(ff_mem_io_request_ENQ),
							     .DEQ(ff_mem_io_request_DEQ),
							     .CLR(ff_mem_io_request_CLR),
							     .D_OUT(ff_mem_io_request_D_OUT),
							     .FULL_N(ff_mem_io_request_FULL_N),
							     .EMPTY_N(ff_mem_io_request_EMPTY_N));

  // submodule ff_mem_io_resp
  FIFO1 #(.width(32'd65), .guarded(1'd1)) ff_mem_io_resp(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ff_mem_io_resp_D_IN),
							 .ENQ(ff_mem_io_resp_ENQ),
							 .DEQ(ff_mem_io_resp_DEQ),
							 .CLR(ff_mem_io_resp_CLR),
							 .D_OUT(ff_mem_io_resp_D_OUT),
							 .FULL_N(ff_mem_io_resp_FULL_N),
							 .EMPTY_N(ff_mem_io_resp_EMPTY_N));

  // submodule ff_mem_rd_request
  FIFO2 #(.width(32'd43), .guarded(1'd1)) ff_mem_rd_request(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ff_mem_rd_request_D_IN),
							    .ENQ(ff_mem_rd_request_ENQ),
							    .DEQ(ff_mem_rd_request_DEQ),
							    .CLR(ff_mem_rd_request_CLR),
							    .D_OUT(ff_mem_rd_request_D_OUT),
							    .FULL_N(ff_mem_rd_request_FULL_N),
							    .EMPTY_N(ff_mem_rd_request_EMPTY_N));

  // submodule ff_mem_wr_request
  FIFO1 #(.width(32'd555), .guarded(1'd1)) ff_mem_wr_request(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ff_mem_wr_request_D_IN),
							     .ENQ(ff_mem_wr_request_ENQ),
							     .DEQ(ff_mem_wr_request_DEQ),
							     .CLR(ff_mem_wr_request_CLR),
							     .D_OUT(ff_mem_wr_request_D_OUT),
							     .FULL_N(ff_mem_wr_request_FULL_N),
							     .EMPTY_N(ff_mem_wr_request_EMPTY_N));

  // submodule ff_pending_req
  FIFO2 #(.width(32'd7), .guarded(1'd0)) ff_pending_req(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ff_pending_req_D_IN),
							.ENQ(ff_pending_req_ENQ),
							.DEQ(ff_pending_req_DEQ),
							.CLR(ff_pending_req_CLR),
							.D_OUT(ff_pending_req_D_OUT),
							.FULL_N(ff_pending_req_FULL_N),
							.EMPTY_N(ff_pending_req_EMPTY_N));

  // submodule m_data
  mkdcache_data #(.id(id)) m_data(.CLK(CLK),
				  .RST_N(RST_N),
				  .ma_request_banks(m_data_ma_request_banks),
				  .ma_request_dataline(m_data_ma_request_dataline),
				  .ma_request_index(m_data_ma_request_index),
				  .ma_request_read_write(m_data_ma_request_read_write),
				  .ma_request_way(m_data_ma_request_way),
				  .mv_line_select_wayselect(m_data_mv_line_select_wayselect),
				  .mv_word_select_blocknum(m_data_mv_word_select_blocknum),
				  .mv_word_select_wayselect(m_data_mv_word_select_wayselect),
				  .EN_ma_request(m_data_EN_ma_request),
				  .EN_mv_word_select(m_data_EN_mv_word_select),
				  .EN_mv_line_select(m_data_EN_mv_line_select),
				  .RDY_ma_request(),
				  .mv_word_select(m_data_mv_word_select),
				  .RDY_mv_word_select(),
				  .mv_line_select(m_data_mv_line_select),
				  .RDY_mv_line_select());

  // submodule m_fillbuffer
  mkdcache_fb_v2 #(.id(id)) m_fillbuffer(.CLK(CLK),
					 .RST_N(RST_N),
					 .ma_fill_from_memory_fbindex(m_fillbuffer_ma_fill_from_memory_fbindex),
					 .ma_fill_from_memory_init_bank(m_fillbuffer_ma_fill_from_memory_init_bank),
					 .ma_fill_from_memory_mem_resp(m_fillbuffer_ma_fill_from_memory_mem_resp),
					 .ma_from_storebuffer_address(m_fillbuffer_ma_from_storebuffer_address),
					 .ma_from_storebuffer_dataword(m_fillbuffer_ma_from_storebuffer_dataword),
					 .ma_from_storebuffer_fbindex(m_fillbuffer_ma_from_storebuffer_fbindex),
					 .ma_from_storebuffer_mask(m_fillbuffer_ma_from_storebuffer_mask),
					 .mav_allocate_line_address(m_fillbuffer_mav_allocate_line_address),
					 .mav_allocate_line_dataline(m_fillbuffer_mav_allocate_line_dataline),
					 .mav_allocate_line_dirty(m_fillbuffer_mav_allocate_line_dirty),
					 .mav_allocate_line_from_ram(m_fillbuffer_mav_allocate_line_from_ram),
					 .mav_polling_response_address(m_fillbuffer_mav_polling_response_address),
					 .mav_polling_response_fbindex(m_fillbuffer_mav_polling_response_fbindex),
					 .mav_polling_response_fill(m_fillbuffer_mav_polling_response_fill),
					 .EN_mav_allocate_line(m_fillbuffer_EN_mav_allocate_line),
					 .EN_ma_fill_from_memory(m_fillbuffer_EN_ma_fill_from_memory),
					 .EN_ma_from_storebuffer(m_fillbuffer_EN_ma_from_storebuffer),
					 .EN_ma_perform_release(m_fillbuffer_EN_ma_perform_release),
					 .EN_mav_polling_response(m_fillbuffer_EN_mav_polling_response),
					 .mv_fbfull(m_fillbuffer_mv_fbfull),
					 .mv_fbempty(m_fillbuffer_mv_fbempty),
					 .mv_fbhead_valid(m_fillbuffer_mv_fbhead_valid),
					 .mav_allocate_line(m_fillbuffer_mav_allocate_line),
					 .RDY_mav_allocate_line(),
					 .RDY_ma_fill_from_memory(),
					 .RDY_ma_from_storebuffer(),
					 .mv_release_info(m_fillbuffer_mv_release_info),
					 .RDY_mv_release_info(),
					 .RDY_ma_perform_release(),
					 .mav_polling_response(m_fillbuffer_mav_polling_response),
					 .RDY_mav_polling_response());

  // submodule m_iobuffer
  mkiobuffer #(.id(id)) m_iobuffer(.CLK(CLK),
				   .RST_N(RST_N),
				   .ma_allocate_io_entry(m_iobuffer_ma_allocate_io_entry),
				   .EN_ma_increment_head(m_iobuffer_EN_ma_increment_head),
				   .EN_ma_commit_io(m_iobuffer_EN_ma_commit_io),
				   .EN_ma_allocate_io(m_iobuffer_EN_ma_allocate_io),
				   .mv_io_full(m_iobuffer_mv_io_full),
				   .RDY_mv_io_full(),
				   .mv_io_empty(m_iobuffer_mv_io_empty),
				   .RDY_mv_io_empty(),
				   .mv_io_head_valid(m_iobuffer_mv_io_head_valid),
				   .RDY_mv_io_head_valid(),
				   .RDY_ma_increment_head(),
				   .RDY_ma_commit_io(),
				   .mv_io_head(m_iobuffer_mv_io_head),
				   .RDY_mv_io_head(m_iobuffer_RDY_mv_io_head),
				   .RDY_ma_allocate_io());

  // submodule m_storebuffer
  mkstorebuffer #(.id(id)) m_storebuffer(.CLK(CLK),
					 .RST_N(RST_N),
					 .ma_allocate_entry_address(m_storebuffer_ma_allocate_entry_address),
					 .ma_allocate_entry_atomic(m_storebuffer_ma_allocate_entry_atomic),
					 .ma_allocate_entry_atomic_op(m_storebuffer_ma_allocate_entry_atomic_op),
					 .ma_allocate_entry_data(m_storebuffer_ma_allocate_entry_data),
					 .ma_allocate_entry_epochs(m_storebuffer_ma_allocate_entry_epochs),
					 .ma_allocate_entry_fbindex(m_storebuffer_ma_allocate_entry_fbindex),
					 .ma_allocate_entry_read_data(m_storebuffer_ma_allocate_entry_read_data),
					 .ma_allocate_entry_size(m_storebuffer_ma_allocate_entry_size),
					 .ma_commit_store_sbid(m_storebuffer_ma_commit_store_sbid),
					 .mav_check_sb_hit_phyaddr(m_storebuffer_mav_check_sb_hit_phyaddr),
					 .EN_mav_check_sb_hit(m_storebuffer_EN_mav_check_sb_hit),
					 .EN_ma_allocate_entry(m_storebuffer_EN_ma_allocate_entry),
					 .EN_ma_commit_store(m_storebuffer_EN_ma_commit_store),
					 .EN_ma_increment_head(m_storebuffer_EN_ma_increment_head),
					 .mav_check_sb_hit(m_storebuffer_mav_check_sb_hit),
					 .RDY_mav_check_sb_hit(),
					 .RDY_ma_allocate_entry(m_storebuffer_RDY_ma_allocate_entry),
					 .RDY_ma_commit_store(),
					 .RDY_ma_increment_head(),
					 .mv_sb_head(m_storebuffer_mv_sb_head),
					 .RDY_mv_sb_head(),
					 .mv_sb_full(m_storebuffer_mv_sb_full),
					 .RDY_mv_sb_full(),
					 .mv_sb_empty(m_storebuffer_mv_sb_empty),
					 .RDY_mv_sb_empty(),
					 .mv_sb_busy(m_storebuffer_mv_sb_busy),
					 .RDY_mv_sb_busy(),
					 .mv_sb_head_commit(m_storebuffer_mv_sb_head_commit),
					 .RDY_mv_sb_head_commit(),
					 .mv_sb_head_valid(m_storebuffer_mv_sb_head_valid),
					 .RDY_mv_sb_head_valid(),
					 .mv_sb_curr_tail(m_storebuffer_mv_sb_curr_tail),
					 .RDY_mv_sb_curr_tail());

  // submodule m_tag
  mkdcache_tag #(.id(id)) m_tag(.CLK(CLK),
				.RST_N(RST_N),
				.ma_request_address(m_tag_ma_request_address),
				.ma_request_index(m_tag_ma_request_index),
				.ma_request_read_write(m_tag_ma_request_read_write),
				.ma_request_way(m_tag_ma_request_way),
				.mv_tag_select_wayselect(m_tag_mv_tag_select_wayselect),
				.mv_tagmatch_resp_address_in(m_tag_mv_tagmatch_resp_address_in),
				.EN_ma_request(m_tag_EN_ma_request),
				.RDY_ma_request(),
				.mv_tagmatch_resp(m_tag_mv_tagmatch_resp),
				.RDY_mv_tagmatch_resp(),
				.mv_tag_select(m_tag_mv_tag_select),
				.RDY_mv_tag_select());

  // rule RL_rl_fence_operation
  assign CAN_FIRE_RL_rl_fence_operation =
	     ff_core_request_EMPTY_N && ff_mem_wr_request_FULL_N &&
	     !ff_core_response_rv[132] &&
	     ff_core_request_first__5_BIT_76_6_AND_rg_fence_ETC___d30 ;
  assign WILL_FIRE_RL_rl_fence_operation = CAN_FIRE_RL_rl_fence_operation ;

  // rule RL_rl_deq_write_resp
  assign CAN_FIRE_RL_rl_deq_write_resp =
	     ff_core_request_EMPTY_N && rg_fence_pending &&
	     ff_core_request_D_OUT[76] ;
  assign WILL_FIRE_RL_rl_deq_write_resp = CAN_FIRE_RL_rl_deq_write_resp ;

  // rule RL_rl_deq_write_response
  assign CAN_FIRE_RL_rl_deq_write_response =
	     ff_mem_wr_resp_rv_port1__read[1] ;
  assign WILL_FIRE_RL_rl_deq_write_response =
	     CAN_FIRE_RL_rl_deq_write_response ;

  // rule RL_rl_ram_check
  assign CAN_FIRE_RL_rl_ram_check =
	     ff_from_tlb_rv_port1__read[105] && ff_core_request_EMPTY_N &&
	     EN_ma_curr_priv &&
	     EN_ma_cache_enable &&
	     NOT_ff_core_request_first__5_BIT_76_6_09_AND_N_ETC___d225 &&
	     !m_storebuffer_mv_sb_busy ;
  assign WILL_FIRE_RL_rl_ram_check = CAN_FIRE_RL_rl_ram_check ;

  // rule RL_rl_fillbuffer_check
  assign CAN_FIRE_RL_rl_fillbuffer_check =
	     ff_from_tlb_rv_port1__read[105] && ff_core_request_EMPTY_N &&
	     EN_ma_cache_enable &&
	     !ff_core_request_D_OUT[76] &&
	     !m_fillbuffer_mv_fbfull &&
	     !m_iobuffer_mv_io_full &&
	     !m_storebuffer_mv_sb_busy ;
  assign WILL_FIRE_RL_rl_fillbuffer_check = CAN_FIRE_RL_rl_fillbuffer_check ;

  // rule RL_rl_send_memory_request
  assign CAN_FIRE_RL_rl_send_memory_request =
	     ff_from_tlb_rv_port1__read[105] && ff_core_request_EMPTY_N &&
	     ff_mem_rd_request_FULL_N &&
	     IF_wr_ram_state_whas__61_THEN_wr_ram_state_wge_ETC___d1408 ;
  assign WILL_FIRE_RL_rl_send_memory_request =
	     CAN_FIRE_RL_rl_send_memory_request ;

  // rule RL_rl_perform_replay
  assign CAN_FIRE_RL_rl_perform_replay = rg_performing_replay ;
  assign WILL_FIRE_RL_rl_perform_replay = rg_performing_replay ;

  // rule RL_rl_release_from_fillbuffer
  assign CAN_FIRE_RL_rl_release_from_fillbuffer =
	     ff_mem_wr_request_FULL_N &&
	     m_fillbuffer_mv_fbfull__17_OR_rg_fence_stall_7_ETC___d1446 &&
	     !rg_performing_replay ;
  assign WILL_FIRE_RL_rl_release_from_fillbuffer =
	     CAN_FIRE_RL_rl_release_from_fillbuffer &&
	     !EN_receive_core_req_put ;

  // rule __me_check_5
  assign CAN_FIRE___me_check_5 = 1'b1 ;
  assign WILL_FIRE___me_check_5 = 1'b1 ;

  // rule RL_rl_initiate_io
  assign CAN_FIRE_RL_rl_initiate_io =
	     m_iobuffer_RDY_mv_io_head && ff_mem_io_request_FULL_N &&
	     m_iobuffer_mv_io_head_valid &&
	     !m_iobuffer_mv_io_empty &&
	     !rg_io_busy ;
  assign WILL_FIRE_RL_rl_initiate_io = CAN_FIRE_RL_rl_initiate_io ;

  // rule RL_rl_response_to_core
  assign CAN_FIRE_RL_rl_response_to_core =
	     ff_from_tlb_rv_port1__read[105] && ff_core_request_EMPTY_N &&
	     !ff_hold_request_rv[141] &&
	     !ff_ptw_response_rv[132] &&
	     !ff_core_response_rv[132] &&
	     m_storebuffer_RDY_ma_allocate_entry &&
	     !ff_core_request_D_OUT[76] &&
	     wr_fault_whas__58_AND_wr_fault_wget__59_60_OR__ETC___d370 ;
  assign WILL_FIRE_RL_rl_response_to_core = CAN_FIRE_RL_rl_response_to_core ;

  // rule RL_rl_fill_from_memory
  assign CAN_FIRE_RL_rl_fill_from_memory =
	     ff_mem_rd_resp_rv_port1__read[66] && ff_pending_req_EMPTY_N ;
  assign WILL_FIRE_RL_rl_fill_from_memory = CAN_FIRE_RL_rl_fill_from_memory ;

  // rule RL_rl_commit_stores
  assign CAN_FIRE_RL_rl_commit_stores =
	     m_storebuffer_mv_sb_head_commit &&
	     m_storebuffer_mv_sb_head_valid &&
	     !m_storebuffer_mv_sb_busy &&
	     !m_storebuffer_mv_sb_empty ;
  assign WILL_FIRE_RL_rl_commit_stores = CAN_FIRE_RL_rl_commit_stores ;

  // rule RL_rl_io_response
  assign CAN_FIRE_RL_rl_io_response =
	     m_iobuffer_RDY_mv_io_head && ff_mem_io_resp_EMPTY_N &&
	     !ff_ptw_response_rv[132] &&
	     ff_mem_io_request_FULL_N &&
	     rg_io_busy ;
  assign WILL_FIRE_RL_rl_io_response = CAN_FIRE_RL_rl_io_response ;

  // rule RL_rg_core_io_response__dreg_update
  assign CAN_FIRE_RL_rg_core_io_response__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_core_io_response__dreg_update = 1'd1 ;

  // rule RL_rg_release_readphase__dreg_update
  assign CAN_FIRE_RL_rg_release_readphase__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_release_readphase__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_ff_core_response_rv_port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_fence_operation &&
	     (rg_fence_way == 2'd3 && _theResult____h21507 == 7'd64 ||
	      !rg_globaldirty) ;
  assign MUX_ff_mem_io_request_enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_response && !m_iobuffer_mv_io_head[0] &&
	     m_iobuffer_mv_io_head[71:70] == 2'd2 &&
	     !rg_io_atomic_done &&
	     !ff_mem_io_resp_D_OUT[0] ;
  assign MUX_ff_mem_wr_request_enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_fence_operation && bs__h17345[rg_fence_way] &&
	     bs__h19378[rg_fence_way] ;
  assign MUX_ff_mem_wr_request_enq_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] &&
	     rg_release_readphase ;
  assign MUX_ff_ptw_response_rv_port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_response && m_iobuffer_mv_io_head[0] ;
  assign MUX_m_data_ma_request_1__SEL_1 =
	     EN_receive_core_req_put && ma_cache_enable_c ;
  assign MUX_m_data_ma_request_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] ;
  assign MUX_m_data_mv_line_select_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_rg_io_busy_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_response &&
	     (m_iobuffer_mv_io_head[0] ||
	      m_iobuffer_mv_io_head[71:70] != 2'd2 ||
	      rg_io_atomic_done ||
	      ff_mem_io_resp_D_OUT[0]) ;
  assign MUX_rg_performing_replay_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     NOT_m_fillbuffer_mv_release_info__81_BIT_1_449_ETC___d1696 ;
  assign MUX_v_reg_dirty_0_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd0 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_0_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1561 ;
  assign MUX_v_reg_dirty_1_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd1 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_1_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1564 ;
  assign MUX_v_reg_dirty_10_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd10 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_10_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1582 ;
  assign MUX_v_reg_dirty_11_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd11 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_11_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1584 ;
  assign MUX_v_reg_dirty_12_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd12 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_12_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1586 ;
  assign MUX_v_reg_dirty_13_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd13 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_13_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1588 ;
  assign MUX_v_reg_dirty_14_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd14 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_14_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1590 ;
  assign MUX_v_reg_dirty_15_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd15 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_15_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1592 ;
  assign MUX_v_reg_dirty_16_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd16 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_16_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1594 ;
  assign MUX_v_reg_dirty_17_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd17 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_17_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1596 ;
  assign MUX_v_reg_dirty_18_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd18 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_18_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1598 ;
  assign MUX_v_reg_dirty_19_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd19 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_19_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1600 ;
  assign MUX_v_reg_dirty_2_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd2 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_2_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1566 ;
  assign MUX_v_reg_dirty_20_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd20 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_20_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1602 ;
  assign MUX_v_reg_dirty_21_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd21 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_21_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1604 ;
  assign MUX_v_reg_dirty_22_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd22 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_22_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1606 ;
  assign MUX_v_reg_dirty_23_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd23 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_23_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1608 ;
  assign MUX_v_reg_dirty_24_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd24 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_24_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1610 ;
  assign MUX_v_reg_dirty_25_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd25 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_25_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1612 ;
  assign MUX_v_reg_dirty_26_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd26 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_26_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1614 ;
  assign MUX_v_reg_dirty_27_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd27 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_27_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1616 ;
  assign MUX_v_reg_dirty_28_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd28 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_28_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1618 ;
  assign MUX_v_reg_dirty_29_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd29 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_29_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1620 ;
  assign MUX_v_reg_dirty_3_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd3 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_3_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1568 ;
  assign MUX_v_reg_dirty_30_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd30 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_30_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1622 ;
  assign MUX_v_reg_dirty_31_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd31 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_31_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1624 ;
  assign MUX_v_reg_dirty_32_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd32 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_32_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1626 ;
  assign MUX_v_reg_dirty_33_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd33 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_33_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1628 ;
  assign MUX_v_reg_dirty_34_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd34 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_34_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1630 ;
  assign MUX_v_reg_dirty_35_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd35 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_35_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1632 ;
  assign MUX_v_reg_dirty_36_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd36 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_36_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1634 ;
  assign MUX_v_reg_dirty_37_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd37 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_37_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1636 ;
  assign MUX_v_reg_dirty_38_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd38 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_38_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1638 ;
  assign MUX_v_reg_dirty_39_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd39 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_39_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1640 ;
  assign MUX_v_reg_dirty_4_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd4 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_4_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1570 ;
  assign MUX_v_reg_dirty_40_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd40 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_40_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1642 ;
  assign MUX_v_reg_dirty_41_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd41 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_41_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1644 ;
  assign MUX_v_reg_dirty_42_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd42 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_42_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1646 ;
  assign MUX_v_reg_dirty_43_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd43 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_43_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1648 ;
  assign MUX_v_reg_dirty_44_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd44 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_44_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1650 ;
  assign MUX_v_reg_dirty_45_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd45 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_45_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1652 ;
  assign MUX_v_reg_dirty_46_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd46 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_46_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1654 ;
  assign MUX_v_reg_dirty_47_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd47 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_47_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1656 ;
  assign MUX_v_reg_dirty_48_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd48 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_48_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1658 ;
  assign MUX_v_reg_dirty_49_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd49 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_49_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1660 ;
  assign MUX_v_reg_dirty_5_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd5 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_5_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1572 ;
  assign MUX_v_reg_dirty_50_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd50 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_50_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1662 ;
  assign MUX_v_reg_dirty_51_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd51 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_51_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1664 ;
  assign MUX_v_reg_dirty_52_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd52 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_52_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1666 ;
  assign MUX_v_reg_dirty_53_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd53 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_53_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1668 ;
  assign MUX_v_reg_dirty_54_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd54 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_54_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1670 ;
  assign MUX_v_reg_dirty_55_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd55 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_55_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1672 ;
  assign MUX_v_reg_dirty_56_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd56 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_56_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1674 ;
  assign MUX_v_reg_dirty_57_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd57 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_57_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1676 ;
  assign MUX_v_reg_dirty_58_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd58 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_58_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1678 ;
  assign MUX_v_reg_dirty_59_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd59 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_59_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1680 ;
  assign MUX_v_reg_dirty_6_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd6 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_6_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1574 ;
  assign MUX_v_reg_dirty_60_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd60 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_60_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1682 ;
  assign MUX_v_reg_dirty_61_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd61 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_61_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1684 ;
  assign MUX_v_reg_dirty_62_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd62 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_62_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1686 ;
  assign MUX_v_reg_dirty_63_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd63 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_63_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1688 ;
  assign MUX_v_reg_dirty_7_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd7 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_7_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1576 ;
  assign MUX_v_reg_dirty_8_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd8 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_8_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1578 ;
  assign MUX_v_reg_dirty_9_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd9 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ;
  assign MUX_v_reg_dirty_9_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1580 ;
  assign MUX_ff_core_response_rv_port0__write_1__VAL_1 =
	     { 1'd1,
	       64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       1'd0,
	       7'bxxxxxxx /* unspecified value */ ,
	       ff_core_request_D_OUT[75],
	       2'd0,
	       57'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_ff_core_response_rv_port0__write_1__VAL_2 =
	     { 1'd1,
	       lv_response_word__h38293,
	       b__h37051 && wr_fb_response_wget[67] ||
	       b__h37063 && wr_ram_response_wget[67],
	       lv_response_cause__h38295,
	       lv_response_epochs__h38296,
	       b__h37051 && wr_fb_response_wget[58] ||
	       b__h37063 && wr_ram_response_wget[58],
	       IF_ff_core_request_first__5_BITS_74_TO_73_41_E_ETC___d906,
	       m_storebuffer_mv_sb_curr_tail,
	       lv_response_mtval2__h38300 } ;
  assign MUX_ff_mem_io_request_enq_1__VAL_1 =
	     { m_iobuffer_mv_io_head[171:140],
	       1'd1,
	       x_data__h138891,
	       m_iobuffer_mv_io_head[75:73] } ;
  assign MUX_ff_mem_io_request_enq_1__VAL_2 =
	     { m_iobuffer_mv_io_head[171:140],
	       m_iobuffer_mv_io_head[71:70] == 2'd1,
	       m_iobuffer_mv_io_head[139:73] } ;
  assign MUX_ff_mem_wr_request_enq_1__VAL_1 =
	     { final_address__h17296, m_data_mv_line_select, 11'd59 } ;
  assign MUX_ff_mem_wr_request_enq_1__VAL_2 =
	     { lv_evict_address__h124696, m_data_mv_line_select, 11'd59 } ;
  assign MUX_ff_ptw_response_rv_port0__write_1__VAL_1 =
	     { 1'd1,
	       lv_response_word__h138459,
	       ff_mem_io_resp_D_OUT[0],
	       lv_cause__h138366,
	       m_iobuffer_mv_io_head[72],
	       2'd0,
	       57'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_m_data_ma_request_1__VAL_2 =
	     !SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	     rg_release_readphase ;
  assign MUX_m_data_ma_request_2__VAL_1 =
	     receive_core_req_put[76] ? 6'd0 : receive_core_req_put[88:83] ;
  assign MUX_m_data_mv_line_select_1__VAL_2 = 4'd1 << rg_fence_way ;
  assign MUX_m_fillbuffer_mav_allocate_line_4__VAL_1 =
	     bs__h112864[i__h112865] ;
  assign MUX_replacement_v_count_0_write_1__VAL_2 =
	     SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 -
	     2'd1 ;
  assign MUX_v_reg_dirty_0_write_1__VAL_1 = bs__h112864 & y__h114302 ;
  assign MUX_v_reg_dirty_14_write_1__VAL_2 =
	     m_fillbuffer_mv_release_info[0] ?
	       dirty__h121596 | wayselect__h124582 :
	       dirty__h121596 & y__h129959 ;
  assign MUX_v_reg_valid_0_write_1__VAL_1 =
	     SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 &
	     y__h114302 ;
  assign MUX_v_reg_valid_34_write_1__VAL_2 =
	     valid__h121595 | wayselect__h124582 ;

  // inlined wires
  assign rg_core_io_response_1_whas =
	     WILL_FIRE_RL_rl_io_response && !m_iobuffer_mv_io_head[0] &&
	     (m_iobuffer_mv_io_head[71:70] != 2'd2 || rg_io_atomic_done ||
	      ff_mem_io_resp_D_OUT[0]) ;
  assign rg_release_readphase_1_whas =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] &&
	     SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 &&
	     !rg_release_readphase ;
  assign wr_fault_whas =
	     WILL_FIRE_RL_rl_ram_check &&
	     (fn_pmp_lookup___d251[7] || ff_from_tlb_rv_port1__read[72] ||
	      ff_from_tlb_rv_port1__read[64]) ;
  assign wr_ram_state_wget =
	     (lv_hitmask__h33411 != 4'd0 && ma_cache_enable_c) ? 2'd1 : 2'd0 ;
  assign wr_ram_state_whas =
	     WILL_FIRE_RL_rl_ram_check && !fn_pmp_lookup___d251[7] &&
	     !ff_from_tlb_rv_port1__read[72] &&
	     !ff_from_tlb_rv_port1__read[64] ;
  assign wr_ram_response_wget =
	     { response_word__h33628,
	       fn_pmp_lookup___d251[7] || ff_from_tlb_rv_port1__read[72] ||
	       ff_from_tlb_rv_port1__read[64],
	       lv_response_cause__h33778,
	       ff_core_request_D_OUT[75],
	       1'd0,
	       ff_core_request_D_OUT[74:73] != 2'd0,
	       57'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign wr_fb_state_wget =
	     (!ma_cache_enable_c ||
	      ff_from_tlb_rv_port1__read__02_BITS_104_TO_73__ETC___d305) ?
	       2'd1 :
	       (m_fillbuffer_mav_polling_response[1] ?
		  (m_fillbuffer_mav_polling_response[0] ? 2'd1 : 2'd2) :
		  2'd0) ;
  assign wr_fb_response_wget =
	     { lv_response_word__h35749,
	       m_fillbuffer_mav_polling_response[75],
	       IF_ff_core_request_first__5_BITS_74_TO_73_41_E_ETC___d263,
	       ff_core_request_D_OUT[75],
	       !ma_cache_enable_c ||
	       ff_from_tlb_rv_port1__read__02_BITS_104_TO_73__ETC___d305,
	       !ma_cache_enable_c ||
	       ff_from_tlb_rv_port1__read__02_BITS_104_TO_73__ETC___d305 ||
	       ff_core_request_D_OUT[74:73] != 2'd0,
	       57'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign wr_total_read_access_whas =
	     EN_receive_core_req_put && receive_core_req_put[74:73] == 2'd0 ;
  assign wr_total_write_access_whas =
	     EN_receive_core_req_put && receive_core_req_put[74:73] == 2'd1 ;
  assign wr_total_atomic_access_whas =
	     EN_receive_core_req_put && receive_core_req_put[74:73] == 2'd2 ;
  assign wr_total_atomic_fb_hits_whas =
	     WILL_FIRE_RL_rl_response_to_core && b__h37051 &&
	     rg_handling_miss &&
	     ff_core_request_D_OUT[74:73] == 2'd2 ;
  assign wr_total_read_fb_hits_whas =
	     WILL_FIRE_RL_rl_response_to_core && b__h37051 &&
	     rg_handling_miss &&
	     ff_core_request_D_OUT[74:73] == 2'd0 ;
  assign wr_total_write_fb_hits_whas =
	     WILL_FIRE_RL_rl_response_to_core && b__h37051 &&
	     rg_handling_miss &&
	     ff_core_request_D_OUT[74:73] == 2'd1 ;
  assign wr_allocating_storebuffer_wget =
	     ff_core_request_D_OUT[74:73] != 2'd0 && ma_cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__02_BITS_104_TO_73__ETC___d305 ;
  assign _ma_perform_release_RL_rl_release_from_fillbuffer_EN_m_fillbuffer_wget =
	     m_fillbuffer_mv_release_info[1] ||
	     !SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	     rg_release_readphase ;
  assign ff_core_response_rv_EN_port0__write =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     !ff_from_tlb_rv_port1__read[64] &&
	     !ff_core_request_D_OUT[0] ;
  assign ff_core_response_rv_port0__write_1 =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       MUX_ff_core_response_rv_port0__write_1__VAL_1 :
	       MUX_ff_core_response_rv_port0__write_1__VAL_2 ;
  assign ff_core_response_rv_port1__read =
	     ff_core_response_rv_EN_port0__write ?
	       ff_core_response_rv_port0__write_1 :
	       ff_core_response_rv ;
  assign ff_core_response_rv_port1__write_1 =
	     { 1'd0,
	       132'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_core_response_rv_port2__read =
	     EN_send_core_cache_resp_get ?
	       ff_core_response_rv_port1__write_1 :
	       ff_core_response_rv_port1__read ;
  assign ff_ptw_response_rv_EN_port0__write =
	     WILL_FIRE_RL_rl_io_response && m_iobuffer_mv_io_head[0] ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     NOT_ff_from_tlb_rv_port1__read__02_BIT_64_54_5_ETC___d422 ;
  assign ff_ptw_response_rv_port0__write_1 =
	     MUX_ff_ptw_response_rv_port0__write_1__SEL_1 ?
	       MUX_ff_ptw_response_rv_port0__write_1__VAL_1 :
	       MUX_ff_core_response_rv_port0__write_1__VAL_2 ;
  assign ff_ptw_response_rv_port1__read =
	     ff_ptw_response_rv_EN_port0__write ?
	       ff_ptw_response_rv_port0__write_1 :
	       ff_ptw_response_rv ;
  assign ff_ptw_response_rv_port2__read =
	     EN_get_ptw_resp_get ?
	       ff_core_response_rv_port1__write_1 :
	       ff_ptw_response_rv_port1__read ;
  assign ff_mem_rd_resp_rv_port0__write_1 =
	     { 1'd1, receive_mem_rd_resp_put } ;
  assign ff_mem_rd_resp_rv_port1__read =
	     EN_receive_mem_rd_resp_put ?
	       ff_mem_rd_resp_rv_port0__write_1 :
	       ff_mem_rd_resp_rv ;
  assign ff_mem_rd_resp_rv_port1__write_1 =
	     { 1'd0,
	       66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_mem_rd_resp_rv_port2__read =
	     CAN_FIRE_RL_rl_fill_from_memory ?
	       ff_mem_rd_resp_rv_port1__write_1 :
	       ff_mem_rd_resp_rv_port1__read ;
  assign ff_mem_wr_resp_rv_port0__write_1 =
	     { 1'd1, receive_mem_wr_resp_put } ;
  assign ff_mem_wr_resp_rv_port1__read =
	     EN_receive_mem_wr_resp_put ?
	       ff_mem_wr_resp_rv_port0__write_1 :
	       ff_mem_wr_resp_rv ;
  assign ff_mem_wr_resp_rv_port1__write_1 =
	     { 1'd0, 1'bx /* unspecified value */  } ;
  assign ff_mem_wr_resp_rv_port2__read =
	     ff_mem_wr_resp_rv_port1__read[1] ?
	       ff_mem_wr_resp_rv_port1__write_1 :
	       ff_mem_wr_resp_rv_port1__read ;
  assign ff_hold_request_rv_EN_port0__write =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[64] ;
  assign ff_hold_request_rv_port0__write_1 = { 1'd1, ff_core_request_D_OUT } ;
  assign ff_hold_request_rv_port1__read =
	     ff_hold_request_rv_EN_port0__write ?
	       ff_hold_request_rv_port0__write_1 :
	       ff_hold_request_rv ;
  assign ff_hold_request_rv_port1__write_1 =
	     { 1'd0,
	       141'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_hold_request_rv_port2__read =
	     EN_get_hold_req_get ?
	       ff_hold_request_rv_port1__write_1 :
	       ff_hold_request_rv_port1__read ;
  assign ff_from_tlb_rv_port0__write_1 = { 1'd1, put_pa_from_tlb_put } ;
  assign ff_from_tlb_rv_port1__read =
	     EN_put_pa_from_tlb_put ?
	       ff_from_tlb_rv_port0__write_1 :
	       ff_from_tlb_rv ;
  assign ff_from_tlb_rv_port1__write_1 =
	     { 1'd0,
	       105'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_from_tlb_rv_port2__read =
	     CAN_FIRE_RL_rl_response_to_core ?
	       ff_from_tlb_rv_port1__write_1 :
	       ff_from_tlb_rv_port1__read ;

  // register ff_core_response_rv
  assign ff_core_response_rv_D_IN = ff_core_response_rv_port2__read ;
  assign ff_core_response_rv_EN = 1'b1 ;

  // register ff_from_tlb_rv
  assign ff_from_tlb_rv_D_IN = ff_from_tlb_rv_port2__read ;
  assign ff_from_tlb_rv_EN = 1'b1 ;

  // register ff_hold_request_rv
  assign ff_hold_request_rv_D_IN = ff_hold_request_rv_port2__read ;
  assign ff_hold_request_rv_EN = 1'b1 ;

  // register ff_mem_rd_resp_rv
  assign ff_mem_rd_resp_rv_D_IN = ff_mem_rd_resp_rv_port2__read ;
  assign ff_mem_rd_resp_rv_EN = 1'b1 ;

  // register ff_mem_wr_resp_rv
  assign ff_mem_wr_resp_rv_D_IN = ff_mem_wr_resp_rv_port2__read ;
  assign ff_mem_wr_resp_rv_EN = 1'b1 ;

  // register ff_ptw_response_rv
  assign ff_ptw_response_rv_D_IN = ff_ptw_response_rv_port2__read ;
  assign ff_ptw_response_rv_EN = 1'b1 ;

  // register replacement_v_count_0
  assign replacement_v_count_0_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_0_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd0 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_1
  assign replacement_v_count_1_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_1_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd1 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_10
  assign replacement_v_count_10_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_10_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd10 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_11
  assign replacement_v_count_11_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_11_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd11 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_12
  assign replacement_v_count_12_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_12_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd12 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_13
  assign replacement_v_count_13_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_13_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd13 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_14
  assign replacement_v_count_14_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_14_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd14 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_15
  assign replacement_v_count_15_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_15_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd15 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_16
  assign replacement_v_count_16_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_16_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd16 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_17
  assign replacement_v_count_17_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_17_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd17 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_18
  assign replacement_v_count_18_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_18_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd18 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_19
  assign replacement_v_count_19_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_19_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd19 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_2
  assign replacement_v_count_2_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_2_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd2 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_20
  assign replacement_v_count_20_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_20_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd20 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_21
  assign replacement_v_count_21_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_21_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd21 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_22
  assign replacement_v_count_22_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_22_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd22 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_23
  assign replacement_v_count_23_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_23_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd23 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_24
  assign replacement_v_count_24_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_24_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd24 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_25
  assign replacement_v_count_25_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_25_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd25 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_26
  assign replacement_v_count_26_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_26_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd26 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_27
  assign replacement_v_count_27_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_27_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd27 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_28
  assign replacement_v_count_28_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_28_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd28 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_29
  assign replacement_v_count_29_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_29_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd29 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_3
  assign replacement_v_count_3_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_3_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd3 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_30
  assign replacement_v_count_30_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_30_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd30 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_31
  assign replacement_v_count_31_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_31_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd31 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_32
  assign replacement_v_count_32_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_32_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd32 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_33
  assign replacement_v_count_33_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_33_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd33 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_34
  assign replacement_v_count_34_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_34_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd34 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_35
  assign replacement_v_count_35_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_35_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd35 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_36
  assign replacement_v_count_36_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_36_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd36 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_37
  assign replacement_v_count_37_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_37_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd37 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_38
  assign replacement_v_count_38_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_38_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd38 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_39
  assign replacement_v_count_39_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_39_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd39 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_4
  assign replacement_v_count_4_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_4_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd4 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_40
  assign replacement_v_count_40_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_40_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd40 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_41
  assign replacement_v_count_41_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_41_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd41 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_42
  assign replacement_v_count_42_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_42_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd42 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_43
  assign replacement_v_count_43_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_43_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd43 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_44
  assign replacement_v_count_44_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_44_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd44 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_45
  assign replacement_v_count_45_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_45_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd45 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_46
  assign replacement_v_count_46_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_46_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd46 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_47
  assign replacement_v_count_47_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_47_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd47 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_48
  assign replacement_v_count_48_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_48_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd48 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_49
  assign replacement_v_count_49_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_49_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd49 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_5
  assign replacement_v_count_5_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_5_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd5 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_50
  assign replacement_v_count_50_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_50_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd50 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_51
  assign replacement_v_count_51_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_51_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd51 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_52
  assign replacement_v_count_52_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_52_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd52 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_53
  assign replacement_v_count_53_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_53_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd53 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_54
  assign replacement_v_count_54_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_54_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd54 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_55
  assign replacement_v_count_55_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_55_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd55 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_56
  assign replacement_v_count_56_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_56_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd56 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_57
  assign replacement_v_count_57_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_57_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd57 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_58
  assign replacement_v_count_58_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_58_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd58 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_59
  assign replacement_v_count_59_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_59_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd59 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_6
  assign replacement_v_count_6_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_6_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd6 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_60
  assign replacement_v_count_60_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_60_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd60 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_61
  assign replacement_v_count_61_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_61_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd61 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_62
  assign replacement_v_count_62_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_62_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd62 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_63
  assign replacement_v_count_63_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_63_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd63 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_7
  assign replacement_v_count_7_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_7_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd7 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_8
  assign replacement_v_count_8_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_8_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd8 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register replacement_v_count_9
  assign replacement_v_count_9_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_9_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd9 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 ;

  // register rg_atomic_rd_data
  assign rg_atomic_rd_data_D_IN = lv_mem_response_data__h138405 ;
  assign rg_atomic_rd_data_EN = MUX_ff_mem_io_request_enq_1__SEL_1 ;

  // register rg_core_io_response
  assign rg_core_io_response_D_IN =
	     rg_core_io_response_1_whas ?
	       MUX_ff_ptw_response_rv_port0__write_1__VAL_1 :
	       { 1'd0,
		 132'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign rg_core_io_response_EN = 1'd1 ;

  // register rg_fence_pending
  assign rg_fence_pending_D_IN = 1'd0 ;
  assign rg_fence_pending_EN = CAN_FIRE_RL_rl_deq_write_resp ;

  // register rg_fence_set
  assign rg_fence_set_D_IN =
	     (rg_fence_way == 2'd3 && _theResult____h21507 == 7'd64 ||
	      !rg_globaldirty) ?
	       6'd0 :
	       _theResult____h21507[5:0] ;
  assign rg_fence_set_EN = CAN_FIRE_RL_rl_fence_operation ;

  // register rg_fence_stall
  assign rg_fence_stall_D_IN =
	     !MUX_ff_core_response_rv_port0__write_1__SEL_1 &&
	     receive_core_req_put[76] ;
  assign rg_fence_stall_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     EN_receive_core_req_put ;

  // register rg_fence_way
  assign rg_fence_way_D_IN =
	     (rg_fence_way == 2'd3 && _theResult____h21507 == 7'd64 ||
	      !rg_globaldirty) ?
	       2'd0 :
	       x__h28192 ;
  assign rg_fence_way_EN = CAN_FIRE_RL_rl_fence_operation ;

  // register rg_globaldirty
  assign rg_globaldirty_D_IN =
	     !MUX_ff_core_response_rv_port0__write_1__SEL_1 ;
  assign rg_globaldirty_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_commit_stores ;

  // register rg_handling_miss
  assign rg_handling_miss_D_IN = !WILL_FIRE_RL_rl_response_to_core ;
  assign rg_handling_miss_EN =
	     WILL_FIRE_RL_rl_response_to_core ||
	     WILL_FIRE_RL_rl_send_memory_request ;

  // register rg_io_atomic_done
  assign rg_io_atomic_done_D_IN =
	     m_iobuffer_mv_io_head[71:70] == 2'd2 && !rg_io_atomic_done &&
	     !ff_mem_io_resp_D_OUT[0] ;
  assign rg_io_atomic_done_EN =
	     WILL_FIRE_RL_rl_io_response && !m_iobuffer_mv_io_head[0] &&
	     m_iobuffer_mv_io_head[71:70] == 2'd2 &&
	     (!ff_mem_io_resp_D_OUT[0] || rg_io_atomic_done) ;

  // register rg_io_busy
  assign rg_io_busy_D_IN = !MUX_rg_io_busy_write_1__SEL_1 ;
  assign rg_io_busy_EN =
	     WILL_FIRE_RL_rl_io_response &&
	     (m_iobuffer_mv_io_head[0] ||
	      m_iobuffer_mv_io_head[71:70] != 2'd2 ||
	      rg_io_atomic_done ||
	      ff_mem_io_resp_D_OUT[0]) ||
	     WILL_FIRE_RL_rl_initiate_io ;

  // register rg_performing_replay
  assign rg_performing_replay_D_IN = MUX_rg_performing_replay_write_1__SEL_1 ;
  assign rg_performing_replay_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     NOT_m_fillbuffer_mv_release_info__81_BIT_1_449_ETC___d1696 ||
	     rg_performing_replay ;

  // register rg_polling_mode
  assign rg_polling_mode_D_IN =
	     m_fillbuffer_mav_polling_response[1] &&
	     !m_fillbuffer_mav_polling_response[0] ;
  assign rg_polling_mode_EN =
	     WILL_FIRE_RL_rl_fillbuffer_check && ma_cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__02_BITS_104_TO_73__ETC___d305 ;

  // register rg_recent_req
  assign rg_recent_req_D_IN = MUX_m_data_ma_request_2__VAL_1 ;
  assign rg_recent_req_EN = EN_receive_core_req_put ;

  // register rg_release_readphase
  assign rg_release_readphase_D_IN = rg_release_readphase_1_whas ;
  assign rg_release_readphase_EN = 1'd1 ;

  // register rg_reservation_address
  assign rg_reservation_address_D_IN =
	     (ff_core_request_D_OUT[4:1] == 4'b0101) ?
	       { 62'h2000000000000000, ff_core_request_D_OUT[79:77] } :
	       { 1'd0,
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign rg_reservation_address_EN =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_D_OUT[74:73] == 2'd2 &&
	     (ff_core_request_D_OUT[4:1] == 4'b0101 ||
	      ff_core_request_D_OUT[4:1] == 4'b0111) ;

  // register rg_wEpoch
  assign rg_wEpoch_D_IN = 1'b0 ;
  assign rg_wEpoch_EN = 1'b0 ;

  // register v_reg_dirty_0
  always@(MUX_v_reg_dirty_0_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_0_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_0_write_1__SEL_1:
	v_reg_dirty_0_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_0_write_1__SEL_2:
	v_reg_dirty_0_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_0_D_IN = 4'd0;
    default: v_reg_dirty_0_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_0_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd0 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1561 ;

  // register v_reg_dirty_1
  always@(MUX_v_reg_dirty_1_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_1_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_1_write_1__SEL_1:
	v_reg_dirty_1_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_1_write_1__SEL_2:
	v_reg_dirty_1_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_1_D_IN = 4'd0;
    default: v_reg_dirty_1_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_1_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd1 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1564 ;

  // register v_reg_dirty_10
  always@(MUX_v_reg_dirty_10_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_10_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_10_write_1__SEL_1:
	v_reg_dirty_10_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_10_write_1__SEL_2:
	v_reg_dirty_10_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_10_D_IN = 4'd0;
    default: v_reg_dirty_10_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_10_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd10 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1582 ;

  // register v_reg_dirty_11
  always@(MUX_v_reg_dirty_11_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_11_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_11_write_1__SEL_1:
	v_reg_dirty_11_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_11_write_1__SEL_2:
	v_reg_dirty_11_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_11_D_IN = 4'd0;
    default: v_reg_dirty_11_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_11_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd11 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1584 ;

  // register v_reg_dirty_12
  always@(MUX_v_reg_dirty_12_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_12_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_12_write_1__SEL_1:
	v_reg_dirty_12_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_12_write_1__SEL_2:
	v_reg_dirty_12_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_12_D_IN = 4'd0;
    default: v_reg_dirty_12_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_12_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd12 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1586 ;

  // register v_reg_dirty_13
  always@(MUX_v_reg_dirty_13_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_13_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_13_write_1__SEL_1:
	v_reg_dirty_13_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_13_write_1__SEL_2:
	v_reg_dirty_13_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_13_D_IN = 4'd0;
    default: v_reg_dirty_13_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_13_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd13 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1588 ;

  // register v_reg_dirty_14
  always@(MUX_v_reg_dirty_14_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_14_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_14_write_1__SEL_1:
	v_reg_dirty_14_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_14_write_1__SEL_2:
	v_reg_dirty_14_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_14_D_IN = 4'd0;
    default: v_reg_dirty_14_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_14_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd14 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1590 ;

  // register v_reg_dirty_15
  always@(MUX_v_reg_dirty_15_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_15_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_15_write_1__SEL_1:
	v_reg_dirty_15_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_15_write_1__SEL_2:
	v_reg_dirty_15_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_15_D_IN = 4'd0;
    default: v_reg_dirty_15_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_15_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd15 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1592 ;

  // register v_reg_dirty_16
  always@(MUX_v_reg_dirty_16_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_16_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_16_write_1__SEL_1:
	v_reg_dirty_16_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_16_write_1__SEL_2:
	v_reg_dirty_16_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_16_D_IN = 4'd0;
    default: v_reg_dirty_16_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_16_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd16 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1594 ;

  // register v_reg_dirty_17
  always@(MUX_v_reg_dirty_17_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_17_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_17_write_1__SEL_1:
	v_reg_dirty_17_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_17_write_1__SEL_2:
	v_reg_dirty_17_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_17_D_IN = 4'd0;
    default: v_reg_dirty_17_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_17_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd17 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1596 ;

  // register v_reg_dirty_18
  always@(MUX_v_reg_dirty_18_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_18_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_18_write_1__SEL_1:
	v_reg_dirty_18_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_18_write_1__SEL_2:
	v_reg_dirty_18_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_18_D_IN = 4'd0;
    default: v_reg_dirty_18_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_18_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd18 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1598 ;

  // register v_reg_dirty_19
  always@(MUX_v_reg_dirty_19_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_19_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_19_write_1__SEL_1:
	v_reg_dirty_19_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_19_write_1__SEL_2:
	v_reg_dirty_19_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_19_D_IN = 4'd0;
    default: v_reg_dirty_19_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_19_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd19 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1600 ;

  // register v_reg_dirty_2
  always@(MUX_v_reg_dirty_2_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_2_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_2_write_1__SEL_1:
	v_reg_dirty_2_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_2_write_1__SEL_2:
	v_reg_dirty_2_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_2_D_IN = 4'd0;
    default: v_reg_dirty_2_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_2_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd2 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1566 ;

  // register v_reg_dirty_20
  always@(MUX_v_reg_dirty_20_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_20_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_20_write_1__SEL_1:
	v_reg_dirty_20_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_20_write_1__SEL_2:
	v_reg_dirty_20_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_20_D_IN = 4'd0;
    default: v_reg_dirty_20_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_20_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd20 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1602 ;

  // register v_reg_dirty_21
  always@(MUX_v_reg_dirty_21_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_21_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_21_write_1__SEL_1:
	v_reg_dirty_21_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_21_write_1__SEL_2:
	v_reg_dirty_21_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_21_D_IN = 4'd0;
    default: v_reg_dirty_21_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_21_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd21 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1604 ;

  // register v_reg_dirty_22
  always@(MUX_v_reg_dirty_22_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_22_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_22_write_1__SEL_1:
	v_reg_dirty_22_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_22_write_1__SEL_2:
	v_reg_dirty_22_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_22_D_IN = 4'd0;
    default: v_reg_dirty_22_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_22_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd22 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1606 ;

  // register v_reg_dirty_23
  always@(MUX_v_reg_dirty_23_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_23_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_23_write_1__SEL_1:
	v_reg_dirty_23_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_23_write_1__SEL_2:
	v_reg_dirty_23_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_23_D_IN = 4'd0;
    default: v_reg_dirty_23_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_23_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd23 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1608 ;

  // register v_reg_dirty_24
  always@(MUX_v_reg_dirty_24_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_24_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_24_write_1__SEL_1:
	v_reg_dirty_24_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_24_write_1__SEL_2:
	v_reg_dirty_24_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_24_D_IN = 4'd0;
    default: v_reg_dirty_24_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_24_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd24 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1610 ;

  // register v_reg_dirty_25
  always@(MUX_v_reg_dirty_25_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_25_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_25_write_1__SEL_1:
	v_reg_dirty_25_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_25_write_1__SEL_2:
	v_reg_dirty_25_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_25_D_IN = 4'd0;
    default: v_reg_dirty_25_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_25_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd25 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1612 ;

  // register v_reg_dirty_26
  always@(MUX_v_reg_dirty_26_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_26_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_26_write_1__SEL_1:
	v_reg_dirty_26_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_26_write_1__SEL_2:
	v_reg_dirty_26_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_26_D_IN = 4'd0;
    default: v_reg_dirty_26_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_26_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd26 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1614 ;

  // register v_reg_dirty_27
  always@(MUX_v_reg_dirty_27_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_27_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_27_write_1__SEL_1:
	v_reg_dirty_27_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_27_write_1__SEL_2:
	v_reg_dirty_27_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_27_D_IN = 4'd0;
    default: v_reg_dirty_27_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_27_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd27 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1616 ;

  // register v_reg_dirty_28
  always@(MUX_v_reg_dirty_28_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_28_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_28_write_1__SEL_1:
	v_reg_dirty_28_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_28_write_1__SEL_2:
	v_reg_dirty_28_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_28_D_IN = 4'd0;
    default: v_reg_dirty_28_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_28_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd28 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1618 ;

  // register v_reg_dirty_29
  always@(MUX_v_reg_dirty_29_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_29_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_29_write_1__SEL_1:
	v_reg_dirty_29_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_29_write_1__SEL_2:
	v_reg_dirty_29_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_29_D_IN = 4'd0;
    default: v_reg_dirty_29_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_29_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd29 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1620 ;

  // register v_reg_dirty_3
  always@(MUX_v_reg_dirty_3_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_3_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_3_write_1__SEL_1:
	v_reg_dirty_3_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_3_write_1__SEL_2:
	v_reg_dirty_3_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_3_D_IN = 4'd0;
    default: v_reg_dirty_3_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_3_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd3 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1568 ;

  // register v_reg_dirty_30
  always@(MUX_v_reg_dirty_30_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_30_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_30_write_1__SEL_1:
	v_reg_dirty_30_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_30_write_1__SEL_2:
	v_reg_dirty_30_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_30_D_IN = 4'd0;
    default: v_reg_dirty_30_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_30_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd30 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1622 ;

  // register v_reg_dirty_31
  always@(MUX_v_reg_dirty_31_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_31_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_31_write_1__SEL_1:
	v_reg_dirty_31_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_31_write_1__SEL_2:
	v_reg_dirty_31_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_31_D_IN = 4'd0;
    default: v_reg_dirty_31_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_31_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd31 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1624 ;

  // register v_reg_dirty_32
  always@(MUX_v_reg_dirty_32_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_32_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_32_write_1__SEL_1:
	v_reg_dirty_32_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_32_write_1__SEL_2:
	v_reg_dirty_32_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_32_D_IN = 4'd0;
    default: v_reg_dirty_32_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_32_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd32 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1626 ;

  // register v_reg_dirty_33
  always@(MUX_v_reg_dirty_33_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_33_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_33_write_1__SEL_1:
	v_reg_dirty_33_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_33_write_1__SEL_2:
	v_reg_dirty_33_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_33_D_IN = 4'd0;
    default: v_reg_dirty_33_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_33_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd33 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1628 ;

  // register v_reg_dirty_34
  always@(MUX_v_reg_dirty_34_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_34_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_34_write_1__SEL_1:
	v_reg_dirty_34_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_34_write_1__SEL_2:
	v_reg_dirty_34_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_34_D_IN = 4'd0;
    default: v_reg_dirty_34_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_34_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd34 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1630 ;

  // register v_reg_dirty_35
  always@(MUX_v_reg_dirty_35_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_35_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_35_write_1__SEL_1:
	v_reg_dirty_35_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_35_write_1__SEL_2:
	v_reg_dirty_35_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_35_D_IN = 4'd0;
    default: v_reg_dirty_35_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_35_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd35 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1632 ;

  // register v_reg_dirty_36
  always@(MUX_v_reg_dirty_36_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_36_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_36_write_1__SEL_1:
	v_reg_dirty_36_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_36_write_1__SEL_2:
	v_reg_dirty_36_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_36_D_IN = 4'd0;
    default: v_reg_dirty_36_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_36_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd36 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1634 ;

  // register v_reg_dirty_37
  always@(MUX_v_reg_dirty_37_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_37_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_37_write_1__SEL_1:
	v_reg_dirty_37_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_37_write_1__SEL_2:
	v_reg_dirty_37_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_37_D_IN = 4'd0;
    default: v_reg_dirty_37_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_37_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd37 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1636 ;

  // register v_reg_dirty_38
  always@(MUX_v_reg_dirty_38_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_38_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_38_write_1__SEL_1:
	v_reg_dirty_38_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_38_write_1__SEL_2:
	v_reg_dirty_38_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_38_D_IN = 4'd0;
    default: v_reg_dirty_38_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_38_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd38 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1638 ;

  // register v_reg_dirty_39
  always@(MUX_v_reg_dirty_39_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_39_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_39_write_1__SEL_1:
	v_reg_dirty_39_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_39_write_1__SEL_2:
	v_reg_dirty_39_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_39_D_IN = 4'd0;
    default: v_reg_dirty_39_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_39_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd39 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1640 ;

  // register v_reg_dirty_4
  always@(MUX_v_reg_dirty_4_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_4_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_4_write_1__SEL_1:
	v_reg_dirty_4_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_4_write_1__SEL_2:
	v_reg_dirty_4_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_4_D_IN = 4'd0;
    default: v_reg_dirty_4_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_4_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd4 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1570 ;

  // register v_reg_dirty_40
  always@(MUX_v_reg_dirty_40_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_40_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_40_write_1__SEL_1:
	v_reg_dirty_40_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_40_write_1__SEL_2:
	v_reg_dirty_40_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_40_D_IN = 4'd0;
    default: v_reg_dirty_40_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_40_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd40 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1642 ;

  // register v_reg_dirty_41
  always@(MUX_v_reg_dirty_41_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_41_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_41_write_1__SEL_1:
	v_reg_dirty_41_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_41_write_1__SEL_2:
	v_reg_dirty_41_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_41_D_IN = 4'd0;
    default: v_reg_dirty_41_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_41_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd41 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1644 ;

  // register v_reg_dirty_42
  always@(MUX_v_reg_dirty_42_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_42_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_42_write_1__SEL_1:
	v_reg_dirty_42_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_42_write_1__SEL_2:
	v_reg_dirty_42_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_42_D_IN = 4'd0;
    default: v_reg_dirty_42_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_42_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd42 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1646 ;

  // register v_reg_dirty_43
  always@(MUX_v_reg_dirty_43_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_43_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_43_write_1__SEL_1:
	v_reg_dirty_43_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_43_write_1__SEL_2:
	v_reg_dirty_43_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_43_D_IN = 4'd0;
    default: v_reg_dirty_43_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_43_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd43 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1648 ;

  // register v_reg_dirty_44
  always@(MUX_v_reg_dirty_44_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_44_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_44_write_1__SEL_1:
	v_reg_dirty_44_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_44_write_1__SEL_2:
	v_reg_dirty_44_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_44_D_IN = 4'd0;
    default: v_reg_dirty_44_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_44_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd44 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1650 ;

  // register v_reg_dirty_45
  always@(MUX_v_reg_dirty_45_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_45_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_45_write_1__SEL_1:
	v_reg_dirty_45_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_45_write_1__SEL_2:
	v_reg_dirty_45_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_45_D_IN = 4'd0;
    default: v_reg_dirty_45_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_45_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd45 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1652 ;

  // register v_reg_dirty_46
  always@(MUX_v_reg_dirty_46_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_46_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_46_write_1__SEL_1:
	v_reg_dirty_46_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_46_write_1__SEL_2:
	v_reg_dirty_46_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_46_D_IN = 4'd0;
    default: v_reg_dirty_46_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_46_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd46 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1654 ;

  // register v_reg_dirty_47
  always@(MUX_v_reg_dirty_47_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_47_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_47_write_1__SEL_1:
	v_reg_dirty_47_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_47_write_1__SEL_2:
	v_reg_dirty_47_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_47_D_IN = 4'd0;
    default: v_reg_dirty_47_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_47_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd47 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1656 ;

  // register v_reg_dirty_48
  always@(MUX_v_reg_dirty_48_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_48_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_48_write_1__SEL_1:
	v_reg_dirty_48_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_48_write_1__SEL_2:
	v_reg_dirty_48_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_48_D_IN = 4'd0;
    default: v_reg_dirty_48_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_48_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd48 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1658 ;

  // register v_reg_dirty_49
  always@(MUX_v_reg_dirty_49_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_49_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_49_write_1__SEL_1:
	v_reg_dirty_49_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_49_write_1__SEL_2:
	v_reg_dirty_49_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_49_D_IN = 4'd0;
    default: v_reg_dirty_49_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_49_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd49 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1660 ;

  // register v_reg_dirty_5
  always@(MUX_v_reg_dirty_5_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_5_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_5_write_1__SEL_1:
	v_reg_dirty_5_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_5_write_1__SEL_2:
	v_reg_dirty_5_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_5_D_IN = 4'd0;
    default: v_reg_dirty_5_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_5_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd5 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1572 ;

  // register v_reg_dirty_50
  always@(MUX_v_reg_dirty_50_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_50_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_50_write_1__SEL_1:
	v_reg_dirty_50_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_50_write_1__SEL_2:
	v_reg_dirty_50_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_50_D_IN = 4'd0;
    default: v_reg_dirty_50_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_50_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd50 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1662 ;

  // register v_reg_dirty_51
  always@(MUX_v_reg_dirty_51_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_51_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_51_write_1__SEL_1:
	v_reg_dirty_51_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_51_write_1__SEL_2:
	v_reg_dirty_51_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_51_D_IN = 4'd0;
    default: v_reg_dirty_51_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_51_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd51 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1664 ;

  // register v_reg_dirty_52
  always@(MUX_v_reg_dirty_52_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_52_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_52_write_1__SEL_1:
	v_reg_dirty_52_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_52_write_1__SEL_2:
	v_reg_dirty_52_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_52_D_IN = 4'd0;
    default: v_reg_dirty_52_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_52_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd52 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1666 ;

  // register v_reg_dirty_53
  always@(MUX_v_reg_dirty_53_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_53_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_53_write_1__SEL_1:
	v_reg_dirty_53_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_53_write_1__SEL_2:
	v_reg_dirty_53_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_53_D_IN = 4'd0;
    default: v_reg_dirty_53_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_53_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd53 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1668 ;

  // register v_reg_dirty_54
  always@(MUX_v_reg_dirty_54_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_54_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_54_write_1__SEL_1:
	v_reg_dirty_54_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_54_write_1__SEL_2:
	v_reg_dirty_54_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_54_D_IN = 4'd0;
    default: v_reg_dirty_54_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_54_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd54 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1670 ;

  // register v_reg_dirty_55
  always@(MUX_v_reg_dirty_55_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_55_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_55_write_1__SEL_1:
	v_reg_dirty_55_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_55_write_1__SEL_2:
	v_reg_dirty_55_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_55_D_IN = 4'd0;
    default: v_reg_dirty_55_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_55_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd55 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1672 ;

  // register v_reg_dirty_56
  always@(MUX_v_reg_dirty_56_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_56_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_56_write_1__SEL_1:
	v_reg_dirty_56_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_56_write_1__SEL_2:
	v_reg_dirty_56_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_56_D_IN = 4'd0;
    default: v_reg_dirty_56_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_56_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd56 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1674 ;

  // register v_reg_dirty_57
  always@(MUX_v_reg_dirty_57_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_57_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_57_write_1__SEL_1:
	v_reg_dirty_57_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_57_write_1__SEL_2:
	v_reg_dirty_57_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_57_D_IN = 4'd0;
    default: v_reg_dirty_57_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_57_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd57 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1676 ;

  // register v_reg_dirty_58
  always@(MUX_v_reg_dirty_58_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_58_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_58_write_1__SEL_1:
	v_reg_dirty_58_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_58_write_1__SEL_2:
	v_reg_dirty_58_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_58_D_IN = 4'd0;
    default: v_reg_dirty_58_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_58_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd58 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1678 ;

  // register v_reg_dirty_59
  always@(MUX_v_reg_dirty_59_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_59_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_59_write_1__SEL_1:
	v_reg_dirty_59_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_59_write_1__SEL_2:
	v_reg_dirty_59_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_59_D_IN = 4'd0;
    default: v_reg_dirty_59_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_59_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd59 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1680 ;

  // register v_reg_dirty_6
  always@(MUX_v_reg_dirty_6_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_6_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_6_write_1__SEL_1:
	v_reg_dirty_6_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_6_write_1__SEL_2:
	v_reg_dirty_6_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_6_D_IN = 4'd0;
    default: v_reg_dirty_6_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_6_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd6 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1574 ;

  // register v_reg_dirty_60
  always@(MUX_v_reg_dirty_60_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_60_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_60_write_1__SEL_1:
	v_reg_dirty_60_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_60_write_1__SEL_2:
	v_reg_dirty_60_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_60_D_IN = 4'd0;
    default: v_reg_dirty_60_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_60_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd60 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1682 ;

  // register v_reg_dirty_61
  always@(MUX_v_reg_dirty_61_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_61_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_61_write_1__SEL_1:
	v_reg_dirty_61_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_61_write_1__SEL_2:
	v_reg_dirty_61_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_61_D_IN = 4'd0;
    default: v_reg_dirty_61_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_61_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd61 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1684 ;

  // register v_reg_dirty_62
  always@(MUX_v_reg_dirty_62_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_62_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_62_write_1__SEL_1:
	v_reg_dirty_62_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_62_write_1__SEL_2:
	v_reg_dirty_62_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_62_D_IN = 4'd0;
    default: v_reg_dirty_62_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_62_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd62 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1686 ;

  // register v_reg_dirty_63
  always@(MUX_v_reg_dirty_63_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_63_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_63_write_1__SEL_1:
	v_reg_dirty_63_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_63_write_1__SEL_2:
	v_reg_dirty_63_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_63_D_IN = 4'd0;
    default: v_reg_dirty_63_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_63_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd63 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1688 ;

  // register v_reg_dirty_7
  always@(MUX_v_reg_dirty_7_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_7_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_7_write_1__SEL_1:
	v_reg_dirty_7_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_7_write_1__SEL_2:
	v_reg_dirty_7_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_7_D_IN = 4'd0;
    default: v_reg_dirty_7_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_7_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd7 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1576 ;

  // register v_reg_dirty_8
  always@(MUX_v_reg_dirty_8_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_8_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_8_write_1__SEL_1:
	v_reg_dirty_8_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_8_write_1__SEL_2:
	v_reg_dirty_8_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_8_D_IN = 4'd0;
    default: v_reg_dirty_8_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_8_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd8 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1578 ;

  // register v_reg_dirty_9
  always@(MUX_v_reg_dirty_9_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_9_write_1__SEL_2 or
	  MUX_v_reg_dirty_14_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_9_write_1__SEL_1:
	v_reg_dirty_9_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_9_write_1__SEL_2:
	v_reg_dirty_9_D_IN = MUX_v_reg_dirty_14_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_9_D_IN = 4'd0;
    default: v_reg_dirty_9_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_9_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd9 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1580 ;

  // register v_reg_valid_0
  always@(MUX_v_reg_dirty_0_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_0_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_0_write_1__SEL_1:
	v_reg_valid_0_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_0_write_1__SEL_2:
	v_reg_valid_0_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_0_D_IN = 4'd0;
    default: v_reg_valid_0_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_0_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd0 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1561 ;

  // register v_reg_valid_1
  always@(MUX_v_reg_dirty_1_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_1_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_1_write_1__SEL_1:
	v_reg_valid_1_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_1_write_1__SEL_2:
	v_reg_valid_1_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_1_D_IN = 4'd0;
    default: v_reg_valid_1_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_1_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd1 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1564 ;

  // register v_reg_valid_10
  always@(MUX_v_reg_dirty_10_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_10_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_10_write_1__SEL_1:
	v_reg_valid_10_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_10_write_1__SEL_2:
	v_reg_valid_10_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_10_D_IN = 4'd0;
    default: v_reg_valid_10_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_10_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd10 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1582 ;

  // register v_reg_valid_11
  always@(MUX_v_reg_dirty_11_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_11_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_11_write_1__SEL_1:
	v_reg_valid_11_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_11_write_1__SEL_2:
	v_reg_valid_11_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_11_D_IN = 4'd0;
    default: v_reg_valid_11_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_11_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd11 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1584 ;

  // register v_reg_valid_12
  always@(MUX_v_reg_dirty_12_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_12_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_12_write_1__SEL_1:
	v_reg_valid_12_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_12_write_1__SEL_2:
	v_reg_valid_12_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_12_D_IN = 4'd0;
    default: v_reg_valid_12_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_12_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd12 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1586 ;

  // register v_reg_valid_13
  always@(MUX_v_reg_dirty_13_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_13_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_13_write_1__SEL_1:
	v_reg_valid_13_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_13_write_1__SEL_2:
	v_reg_valid_13_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_13_D_IN = 4'd0;
    default: v_reg_valid_13_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_13_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd13 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1588 ;

  // register v_reg_valid_14
  always@(MUX_v_reg_dirty_14_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_14_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_14_write_1__SEL_1:
	v_reg_valid_14_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_14_write_1__SEL_2:
	v_reg_valid_14_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_14_D_IN = 4'd0;
    default: v_reg_valid_14_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_14_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd14 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1590 ;

  // register v_reg_valid_15
  always@(MUX_v_reg_dirty_15_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_15_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_15_write_1__SEL_1:
	v_reg_valid_15_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_15_write_1__SEL_2:
	v_reg_valid_15_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_15_D_IN = 4'd0;
    default: v_reg_valid_15_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_15_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd15 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1592 ;

  // register v_reg_valid_16
  always@(MUX_v_reg_dirty_16_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_16_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_16_write_1__SEL_1:
	v_reg_valid_16_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_16_write_1__SEL_2:
	v_reg_valid_16_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_16_D_IN = 4'd0;
    default: v_reg_valid_16_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_16_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd16 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1594 ;

  // register v_reg_valid_17
  always@(MUX_v_reg_dirty_17_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_17_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_17_write_1__SEL_1:
	v_reg_valid_17_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_17_write_1__SEL_2:
	v_reg_valid_17_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_17_D_IN = 4'd0;
    default: v_reg_valid_17_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_17_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd17 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1596 ;

  // register v_reg_valid_18
  always@(MUX_v_reg_dirty_18_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_18_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_18_write_1__SEL_1:
	v_reg_valid_18_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_18_write_1__SEL_2:
	v_reg_valid_18_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_18_D_IN = 4'd0;
    default: v_reg_valid_18_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_18_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd18 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1598 ;

  // register v_reg_valid_19
  always@(MUX_v_reg_dirty_19_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_19_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_19_write_1__SEL_1:
	v_reg_valid_19_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_19_write_1__SEL_2:
	v_reg_valid_19_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_19_D_IN = 4'd0;
    default: v_reg_valid_19_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_19_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd19 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1600 ;

  // register v_reg_valid_2
  always@(MUX_v_reg_dirty_2_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_2_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_2_write_1__SEL_1:
	v_reg_valid_2_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_2_write_1__SEL_2:
	v_reg_valid_2_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_2_D_IN = 4'd0;
    default: v_reg_valid_2_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_2_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd2 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1566 ;

  // register v_reg_valid_20
  always@(MUX_v_reg_dirty_20_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_20_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_20_write_1__SEL_1:
	v_reg_valid_20_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_20_write_1__SEL_2:
	v_reg_valid_20_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_20_D_IN = 4'd0;
    default: v_reg_valid_20_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_20_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd20 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1602 ;

  // register v_reg_valid_21
  always@(MUX_v_reg_dirty_21_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_21_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_21_write_1__SEL_1:
	v_reg_valid_21_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_21_write_1__SEL_2:
	v_reg_valid_21_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_21_D_IN = 4'd0;
    default: v_reg_valid_21_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_21_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd21 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1604 ;

  // register v_reg_valid_22
  always@(MUX_v_reg_dirty_22_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_22_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_22_write_1__SEL_1:
	v_reg_valid_22_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_22_write_1__SEL_2:
	v_reg_valid_22_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_22_D_IN = 4'd0;
    default: v_reg_valid_22_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_22_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd22 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1606 ;

  // register v_reg_valid_23
  always@(MUX_v_reg_dirty_23_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_23_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_23_write_1__SEL_1:
	v_reg_valid_23_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_23_write_1__SEL_2:
	v_reg_valid_23_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_23_D_IN = 4'd0;
    default: v_reg_valid_23_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_23_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd23 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1608 ;

  // register v_reg_valid_24
  always@(MUX_v_reg_dirty_24_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_24_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_24_write_1__SEL_1:
	v_reg_valid_24_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_24_write_1__SEL_2:
	v_reg_valid_24_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_24_D_IN = 4'd0;
    default: v_reg_valid_24_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_24_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd24 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1610 ;

  // register v_reg_valid_25
  always@(MUX_v_reg_dirty_25_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_25_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_25_write_1__SEL_1:
	v_reg_valid_25_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_25_write_1__SEL_2:
	v_reg_valid_25_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_25_D_IN = 4'd0;
    default: v_reg_valid_25_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_25_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd25 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1612 ;

  // register v_reg_valid_26
  always@(MUX_v_reg_dirty_26_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_26_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_26_write_1__SEL_1:
	v_reg_valid_26_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_26_write_1__SEL_2:
	v_reg_valid_26_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_26_D_IN = 4'd0;
    default: v_reg_valid_26_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_26_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd26 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1614 ;

  // register v_reg_valid_27
  always@(MUX_v_reg_dirty_27_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_27_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_27_write_1__SEL_1:
	v_reg_valid_27_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_27_write_1__SEL_2:
	v_reg_valid_27_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_27_D_IN = 4'd0;
    default: v_reg_valid_27_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_27_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd27 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1616 ;

  // register v_reg_valid_28
  always@(MUX_v_reg_dirty_28_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_28_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_28_write_1__SEL_1:
	v_reg_valid_28_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_28_write_1__SEL_2:
	v_reg_valid_28_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_28_D_IN = 4'd0;
    default: v_reg_valid_28_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_28_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd28 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1618 ;

  // register v_reg_valid_29
  always@(MUX_v_reg_dirty_29_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_29_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_29_write_1__SEL_1:
	v_reg_valid_29_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_29_write_1__SEL_2:
	v_reg_valid_29_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_29_D_IN = 4'd0;
    default: v_reg_valid_29_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_29_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd29 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1620 ;

  // register v_reg_valid_3
  always@(MUX_v_reg_dirty_3_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_3_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_3_write_1__SEL_1:
	v_reg_valid_3_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_3_write_1__SEL_2:
	v_reg_valid_3_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_3_D_IN = 4'd0;
    default: v_reg_valid_3_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_3_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd3 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1568 ;

  // register v_reg_valid_30
  always@(MUX_v_reg_dirty_30_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_30_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_30_write_1__SEL_1:
	v_reg_valid_30_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_30_write_1__SEL_2:
	v_reg_valid_30_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_30_D_IN = 4'd0;
    default: v_reg_valid_30_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_30_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd30 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1622 ;

  // register v_reg_valid_31
  always@(MUX_v_reg_dirty_31_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_31_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_31_write_1__SEL_1:
	v_reg_valid_31_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_31_write_1__SEL_2:
	v_reg_valid_31_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_31_D_IN = 4'd0;
    default: v_reg_valid_31_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_31_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd31 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1624 ;

  // register v_reg_valid_32
  always@(MUX_v_reg_dirty_32_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_32_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_32_write_1__SEL_1:
	v_reg_valid_32_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_32_write_1__SEL_2:
	v_reg_valid_32_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_32_D_IN = 4'd0;
    default: v_reg_valid_32_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_32_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd32 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1626 ;

  // register v_reg_valid_33
  always@(MUX_v_reg_dirty_33_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_33_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_33_write_1__SEL_1:
	v_reg_valid_33_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_33_write_1__SEL_2:
	v_reg_valid_33_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_33_D_IN = 4'd0;
    default: v_reg_valid_33_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_33_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd33 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1628 ;

  // register v_reg_valid_34
  always@(MUX_v_reg_dirty_34_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_34_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_34_write_1__SEL_1:
	v_reg_valid_34_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_34_write_1__SEL_2:
	v_reg_valid_34_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_34_D_IN = 4'd0;
    default: v_reg_valid_34_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_34_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd34 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1630 ;

  // register v_reg_valid_35
  always@(MUX_v_reg_dirty_35_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_35_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_35_write_1__SEL_1:
	v_reg_valid_35_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_35_write_1__SEL_2:
	v_reg_valid_35_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_35_D_IN = 4'd0;
    default: v_reg_valid_35_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_35_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd35 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1632 ;

  // register v_reg_valid_36
  always@(MUX_v_reg_dirty_36_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_36_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_36_write_1__SEL_1:
	v_reg_valid_36_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_36_write_1__SEL_2:
	v_reg_valid_36_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_36_D_IN = 4'd0;
    default: v_reg_valid_36_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_36_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd36 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1634 ;

  // register v_reg_valid_37
  always@(MUX_v_reg_dirty_37_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_37_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_37_write_1__SEL_1:
	v_reg_valid_37_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_37_write_1__SEL_2:
	v_reg_valid_37_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_37_D_IN = 4'd0;
    default: v_reg_valid_37_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_37_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd37 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1636 ;

  // register v_reg_valid_38
  always@(MUX_v_reg_dirty_38_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_38_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_38_write_1__SEL_1:
	v_reg_valid_38_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_38_write_1__SEL_2:
	v_reg_valid_38_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_38_D_IN = 4'd0;
    default: v_reg_valid_38_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_38_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd38 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1638 ;

  // register v_reg_valid_39
  always@(MUX_v_reg_dirty_39_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_39_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_39_write_1__SEL_1:
	v_reg_valid_39_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_39_write_1__SEL_2:
	v_reg_valid_39_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_39_D_IN = 4'd0;
    default: v_reg_valid_39_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_39_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd39 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1640 ;

  // register v_reg_valid_4
  always@(MUX_v_reg_dirty_4_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_4_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_4_write_1__SEL_1:
	v_reg_valid_4_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_4_write_1__SEL_2:
	v_reg_valid_4_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_4_D_IN = 4'd0;
    default: v_reg_valid_4_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_4_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd4 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1570 ;

  // register v_reg_valid_40
  always@(MUX_v_reg_dirty_40_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_40_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_40_write_1__SEL_1:
	v_reg_valid_40_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_40_write_1__SEL_2:
	v_reg_valid_40_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_40_D_IN = 4'd0;
    default: v_reg_valid_40_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_40_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd40 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1642 ;

  // register v_reg_valid_41
  always@(MUX_v_reg_dirty_41_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_41_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_41_write_1__SEL_1:
	v_reg_valid_41_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_41_write_1__SEL_2:
	v_reg_valid_41_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_41_D_IN = 4'd0;
    default: v_reg_valid_41_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_41_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd41 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1644 ;

  // register v_reg_valid_42
  always@(MUX_v_reg_dirty_42_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_42_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_42_write_1__SEL_1:
	v_reg_valid_42_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_42_write_1__SEL_2:
	v_reg_valid_42_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_42_D_IN = 4'd0;
    default: v_reg_valid_42_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_42_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd42 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1646 ;

  // register v_reg_valid_43
  always@(MUX_v_reg_dirty_43_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_43_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_43_write_1__SEL_1:
	v_reg_valid_43_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_43_write_1__SEL_2:
	v_reg_valid_43_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_43_D_IN = 4'd0;
    default: v_reg_valid_43_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_43_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd43 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1648 ;

  // register v_reg_valid_44
  always@(MUX_v_reg_dirty_44_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_44_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_44_write_1__SEL_1:
	v_reg_valid_44_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_44_write_1__SEL_2:
	v_reg_valid_44_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_44_D_IN = 4'd0;
    default: v_reg_valid_44_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_44_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd44 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1650 ;

  // register v_reg_valid_45
  always@(MUX_v_reg_dirty_45_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_45_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_45_write_1__SEL_1:
	v_reg_valid_45_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_45_write_1__SEL_2:
	v_reg_valid_45_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_45_D_IN = 4'd0;
    default: v_reg_valid_45_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_45_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd45 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1652 ;

  // register v_reg_valid_46
  always@(MUX_v_reg_dirty_46_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_46_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_46_write_1__SEL_1:
	v_reg_valid_46_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_46_write_1__SEL_2:
	v_reg_valid_46_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_46_D_IN = 4'd0;
    default: v_reg_valid_46_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_46_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd46 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1654 ;

  // register v_reg_valid_47
  always@(MUX_v_reg_dirty_47_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_47_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_47_write_1__SEL_1:
	v_reg_valid_47_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_47_write_1__SEL_2:
	v_reg_valid_47_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_47_D_IN = 4'd0;
    default: v_reg_valid_47_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_47_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd47 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1656 ;

  // register v_reg_valid_48
  always@(MUX_v_reg_dirty_48_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_48_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_48_write_1__SEL_1:
	v_reg_valid_48_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_48_write_1__SEL_2:
	v_reg_valid_48_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_48_D_IN = 4'd0;
    default: v_reg_valid_48_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_48_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd48 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1658 ;

  // register v_reg_valid_49
  always@(MUX_v_reg_dirty_49_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_49_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_49_write_1__SEL_1:
	v_reg_valid_49_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_49_write_1__SEL_2:
	v_reg_valid_49_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_49_D_IN = 4'd0;
    default: v_reg_valid_49_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_49_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd49 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1660 ;

  // register v_reg_valid_5
  always@(MUX_v_reg_dirty_5_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_5_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_5_write_1__SEL_1:
	v_reg_valid_5_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_5_write_1__SEL_2:
	v_reg_valid_5_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_5_D_IN = 4'd0;
    default: v_reg_valid_5_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_5_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd5 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1572 ;

  // register v_reg_valid_50
  always@(MUX_v_reg_dirty_50_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_50_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_50_write_1__SEL_1:
	v_reg_valid_50_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_50_write_1__SEL_2:
	v_reg_valid_50_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_50_D_IN = 4'd0;
    default: v_reg_valid_50_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_50_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd50 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1662 ;

  // register v_reg_valid_51
  always@(MUX_v_reg_dirty_51_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_51_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_51_write_1__SEL_1:
	v_reg_valid_51_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_51_write_1__SEL_2:
	v_reg_valid_51_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_51_D_IN = 4'd0;
    default: v_reg_valid_51_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_51_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd51 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1664 ;

  // register v_reg_valid_52
  always@(MUX_v_reg_dirty_52_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_52_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_52_write_1__SEL_1:
	v_reg_valid_52_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_52_write_1__SEL_2:
	v_reg_valid_52_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_52_D_IN = 4'd0;
    default: v_reg_valid_52_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_52_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd52 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1666 ;

  // register v_reg_valid_53
  always@(MUX_v_reg_dirty_53_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_53_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_53_write_1__SEL_1:
	v_reg_valid_53_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_53_write_1__SEL_2:
	v_reg_valid_53_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_53_D_IN = 4'd0;
    default: v_reg_valid_53_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_53_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd53 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1668 ;

  // register v_reg_valid_54
  always@(MUX_v_reg_dirty_54_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_54_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_54_write_1__SEL_1:
	v_reg_valid_54_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_54_write_1__SEL_2:
	v_reg_valid_54_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_54_D_IN = 4'd0;
    default: v_reg_valid_54_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_54_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd54 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1670 ;

  // register v_reg_valid_55
  always@(MUX_v_reg_dirty_55_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_55_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_55_write_1__SEL_1:
	v_reg_valid_55_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_55_write_1__SEL_2:
	v_reg_valid_55_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_55_D_IN = 4'd0;
    default: v_reg_valid_55_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_55_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd55 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1672 ;

  // register v_reg_valid_56
  always@(MUX_v_reg_dirty_56_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_56_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_56_write_1__SEL_1:
	v_reg_valid_56_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_56_write_1__SEL_2:
	v_reg_valid_56_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_56_D_IN = 4'd0;
    default: v_reg_valid_56_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_56_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd56 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1674 ;

  // register v_reg_valid_57
  always@(MUX_v_reg_dirty_57_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_57_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_57_write_1__SEL_1:
	v_reg_valid_57_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_57_write_1__SEL_2:
	v_reg_valid_57_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_57_D_IN = 4'd0;
    default: v_reg_valid_57_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_57_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd57 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1676 ;

  // register v_reg_valid_58
  always@(MUX_v_reg_dirty_58_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_58_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_58_write_1__SEL_1:
	v_reg_valid_58_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_58_write_1__SEL_2:
	v_reg_valid_58_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_58_D_IN = 4'd0;
    default: v_reg_valid_58_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_58_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd58 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1678 ;

  // register v_reg_valid_59
  always@(MUX_v_reg_dirty_59_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_59_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_59_write_1__SEL_1:
	v_reg_valid_59_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_59_write_1__SEL_2:
	v_reg_valid_59_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_59_D_IN = 4'd0;
    default: v_reg_valid_59_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_59_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd59 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1680 ;

  // register v_reg_valid_6
  always@(MUX_v_reg_dirty_6_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_6_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_6_write_1__SEL_1:
	v_reg_valid_6_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_6_write_1__SEL_2:
	v_reg_valid_6_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_6_D_IN = 4'd0;
    default: v_reg_valid_6_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_6_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd6 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1574 ;

  // register v_reg_valid_60
  always@(MUX_v_reg_dirty_60_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_60_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_60_write_1__SEL_1:
	v_reg_valid_60_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_60_write_1__SEL_2:
	v_reg_valid_60_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_60_D_IN = 4'd0;
    default: v_reg_valid_60_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_60_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd60 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1682 ;

  // register v_reg_valid_61
  always@(MUX_v_reg_dirty_61_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_61_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_61_write_1__SEL_1:
	v_reg_valid_61_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_61_write_1__SEL_2:
	v_reg_valid_61_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_61_D_IN = 4'd0;
    default: v_reg_valid_61_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_61_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd61 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1684 ;

  // register v_reg_valid_62
  always@(MUX_v_reg_dirty_62_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_62_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_62_write_1__SEL_1:
	v_reg_valid_62_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_62_write_1__SEL_2:
	v_reg_valid_62_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_62_D_IN = 4'd0;
    default: v_reg_valid_62_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_62_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd62 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1686 ;

  // register v_reg_valid_63
  always@(MUX_v_reg_dirty_63_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_63_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_63_write_1__SEL_1:
	v_reg_valid_63_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_63_write_1__SEL_2:
	v_reg_valid_63_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_63_D_IN = 4'd0;
    default: v_reg_valid_63_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_63_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd63 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1688 ;

  // register v_reg_valid_7
  always@(MUX_v_reg_dirty_7_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_7_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_7_write_1__SEL_1:
	v_reg_valid_7_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_7_write_1__SEL_2:
	v_reg_valid_7_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_7_D_IN = 4'd0;
    default: v_reg_valid_7_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_7_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd7 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1576 ;

  // register v_reg_valid_8
  always@(MUX_v_reg_dirty_8_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_8_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_8_write_1__SEL_1:
	v_reg_valid_8_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_8_write_1__SEL_2:
	v_reg_valid_8_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_8_D_IN = 4'd0;
    default: v_reg_valid_8_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_8_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd8 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1578 ;

  // register v_reg_valid_9
  always@(MUX_v_reg_dirty_9_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_9_write_1__SEL_2 or
	  MUX_v_reg_valid_34_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_9_write_1__SEL_1:
	v_reg_valid_9_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_9_write_1__SEL_2:
	v_reg_valid_9_D_IN = MUX_v_reg_valid_34_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_9_D_IN = 4'd0;
    default: v_reg_valid_9_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_9_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[84:79] == 6'd9 &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1580 ;

  // submodule ff_core_request
  assign ff_core_request_D_IN = receive_core_req_put ;
  assign ff_core_request_ENQ = EN_receive_core_req_put ;
  assign ff_core_request_DEQ =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core ;
  assign ff_core_request_CLR = 1'b0 ;

  // submodule ff_mem_io_request
  assign ff_mem_io_request_D_IN =
	     MUX_ff_mem_io_request_enq_1__SEL_1 ?
	       MUX_ff_mem_io_request_enq_1__VAL_1 :
	       MUX_ff_mem_io_request_enq_1__VAL_2 ;
  assign ff_mem_io_request_ENQ =
	     WILL_FIRE_RL_rl_io_response && !m_iobuffer_mv_io_head[0] &&
	     m_iobuffer_mv_io_head[71:70] == 2'd2 &&
	     !rg_io_atomic_done &&
	     !ff_mem_io_resp_D_OUT[0] ||
	     WILL_FIRE_RL_rl_initiate_io ;
  assign ff_mem_io_request_DEQ = EN_send_mem_io_req_get ;
  assign ff_mem_io_request_CLR = 1'b0 ;

  // submodule ff_mem_io_resp
  assign ff_mem_io_resp_D_IN = receive_mem_io_resp_put ;
  assign ff_mem_io_resp_ENQ = EN_receive_mem_io_resp_put ;
  assign ff_mem_io_resp_DEQ = CAN_FIRE_RL_rl_io_response ;
  assign ff_mem_io_resp_CLR = 1'b0 ;

  // submodule ff_mem_rd_request
  assign ff_mem_rd_request_D_IN = { phyaddr__h120936, 11'd59 } ;
  assign ff_mem_rd_request_ENQ = CAN_FIRE_RL_rl_send_memory_request ;
  assign ff_mem_rd_request_DEQ = EN_send_mem_rd_req_get ;
  assign ff_mem_rd_request_CLR = 1'b0 ;

  // submodule ff_mem_wr_request
  assign ff_mem_wr_request_D_IN =
	     MUX_ff_mem_wr_request_enq_1__SEL_1 ?
	       MUX_ff_mem_wr_request_enq_1__VAL_1 :
	       MUX_ff_mem_wr_request_enq_1__VAL_2 ;
  assign ff_mem_wr_request_ENQ =
	     MUX_ff_mem_wr_request_enq_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] &&
	     rg_release_readphase ;
  assign ff_mem_wr_request_DEQ = EN_deq_mem_wr_req ;
  assign ff_mem_wr_request_CLR = 1'b0 ;

  // submodule ff_pending_req
  assign ff_pending_req_D_IN =
	     { ff_from_tlb_rv_port1__read[78:76],
	       m_fillbuffer_mav_allocate_line } ;
  assign ff_pending_req_ENQ = CAN_FIRE_RL_rl_send_memory_request ;
  assign ff_pending_req_DEQ =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     ff_mem_rd_resp_rv_port1__read[1] ;
  assign ff_pending_req_CLR = 1'b0 ;

  // submodule m_data
  assign m_data_ma_request_banks = 8'd255 ;
  assign m_data_ma_request_dataline = m_fillbuffer_mv_release_info[545:34] ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  MUX_m_data_ma_request_2__VAL_1 or
	  MUX_m_data_ma_request_1__SEL_2 or
	  m_fillbuffer_mv_release_info or
	  rg_performing_replay or
	  rg_recent_req or
	  WILL_FIRE_RL_rl_fence_operation or _theResult____h21507)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1:
	  m_data_ma_request_index = MUX_m_data_ma_request_2__VAL_1;
      MUX_m_data_ma_request_1__SEL_2:
	  m_data_ma_request_index = m_fillbuffer_mv_release_info[13:8];
      rg_performing_replay: m_data_ma_request_index = rg_recent_req;
      WILL_FIRE_RL_rl_fence_operation:
	  m_data_ma_request_index = _theResult____h21507[5:0];
      default: m_data_ma_request_index = 6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  assign m_data_ma_request_read_write =
	     MUX_m_data_ma_request_1__SEL_2 &&
	     MUX_m_data_ma_request_1__VAL_2 ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  MUX_m_data_ma_request_1__SEL_2 or
	  v__h121592 or
	  rg_performing_replay or WILL_FIRE_RL_rl_fence_operation)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1:
	  m_data_ma_request_way = 2'bxx /* unspecified value */ ;
      MUX_m_data_ma_request_1__SEL_2: m_data_ma_request_way = v__h121592;
      rg_performing_replay:
	  m_data_ma_request_way = 2'bxx /* unspecified value */ ;
      WILL_FIRE_RL_rl_fence_operation:
	  m_data_ma_request_way = 2'bxx /* unspecified value */ ;
      default: m_data_ma_request_way = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign m_data_mv_line_select_wayselect =
	     MUX_m_data_mv_line_select_1__SEL_1 ?
	       wayselect__h124582 :
	       MUX_m_data_mv_line_select_1__VAL_2 ;
  assign m_data_mv_word_select_blocknum = ff_from_tlb_rv_port1__read[78:76] ;
  assign m_data_mv_word_select_wayselect = lv_hitmask__h33411 ;
  assign m_data_EN_ma_request =
	     EN_receive_core_req_put && ma_cache_enable_c ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] ||
	     rg_performing_replay ||
	     WILL_FIRE_RL_rl_fence_operation ;
  assign m_data_EN_mv_word_select = CAN_FIRE_RL_rl_ram_check ;
  assign m_data_EN_mv_line_select =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // submodule m_fillbuffer
  assign m_fillbuffer_ma_fill_from_memory_fbindex =
	     ff_pending_req_D_OUT[3:0] ;
  assign m_fillbuffer_ma_fill_from_memory_init_bank =
	     ff_pending_req_D_OUT[6:4] ;
  assign m_fillbuffer_ma_fill_from_memory_mem_resp =
	     ff_mem_rd_resp_rv_port1__read[65:0] ;
  assign m_fillbuffer_ma_from_storebuffer_address =
	     m_storebuffer_mv_sb_head[166:135] ;
  assign m_fillbuffer_ma_from_storebuffer_dataword =
	     m_storebuffer_mv_sb_head[134:71] ;
  assign m_fillbuffer_ma_from_storebuffer_fbindex =
	     m_storebuffer_mv_sb_head[69:66] ;
  assign m_fillbuffer_ma_from_storebuffer_mask =
	     m_storebuffer_mv_sb_head[65:2] ;
  assign m_fillbuffer_mav_allocate_line_address =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 ?
	       ff_from_tlb_rv_port1__read[104:73] :
	       phyaddr__h120936 ;
  assign m_fillbuffer_mav_allocate_line_dataline =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 ?
	       m_data_mv_word_select[511:0] :
	       512'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  ;
  assign m_fillbuffer_mav_allocate_line_dirty =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 ?
	       MUX_m_fillbuffer_mav_allocate_line_4__VAL_1 :
	       1'bx /* unspecified value */  ;
  assign m_fillbuffer_mav_allocate_line_from_ram =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 ;
  assign m_fillbuffer_mav_polling_response_address = phyaddr__h33340 ;
  assign m_fillbuffer_mav_polling_response_fbindex =
	     ff_pending_req_D_OUT[3:0] ;
  assign m_fillbuffer_mav_polling_response_fill = ff_pending_req_EMPTY_N ;
  assign m_fillbuffer_EN_mav_allocate_line =
	     WILL_FIRE_RL_rl_response_to_core &&
	     NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 ||
	     WILL_FIRE_RL_rl_send_memory_request ;
  assign m_fillbuffer_EN_ma_fill_from_memory =
	     CAN_FIRE_RL_rl_fill_from_memory ;
  assign m_fillbuffer_EN_ma_from_storebuffer = CAN_FIRE_RL_rl_commit_stores ;
  assign m_fillbuffer_EN_ma_perform_release =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     (m_fillbuffer_mv_release_info[1] ||
	      !SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_EN_mav_polling_response =
	     CAN_FIRE_RL_rl_fillbuffer_check ;

  // submodule m_iobuffer
  assign m_iobuffer_ma_allocate_io_entry =
	     { ff_from_tlb_rv_port1__read[104:73],
	       ff_core_request_D_OUT[69:6],
	       ff_core_request_D_OUT[72:70],
	       ff_core_request_D_OUT[75],
	       entry_access__h112762,
	       ff_core_request_D_OUT[5:1],
	       ff_core_request_D_OUT[140:77],
	       ff_core_request_D_OUT[0] } ;
  assign m_iobuffer_EN_ma_increment_head =
	     WILL_FIRE_RL_rl_io_response &&
	     (m_iobuffer_mv_io_head[0] ||
	      m_iobuffer_mv_io_head[71:70] != 2'd2 ||
	      rg_io_atomic_done ||
	      ff_mem_io_resp_D_OUT[0]) ||
	     EN_ma_commit_io &&
	     !m_iobuffer_mv_io_head__785_BIT_72_837_EQ_ma_co_ETC___d1928 ;
  assign m_iobuffer_EN_ma_commit_io =
	     EN_ma_commit_io &&
	     m_iobuffer_mv_io_head__785_BIT_72_837_EQ_ma_co_ETC___d1928 ;
  assign m_iobuffer_EN_ma_allocate_io =
	     WILL_FIRE_RL_rl_response_to_core &&
	     IF_wr_fb_state_whas__66_THEN_wr_fb_state_wget__ETC___d1226 ;

  // submodule m_storebuffer
  assign m_storebuffer_ma_allocate_entry_address = phyaddr__h33340 ;
  assign m_storebuffer_ma_allocate_entry_atomic =
	     entry_access__h112762 == 2'd2 ;
  assign m_storebuffer_ma_allocate_entry_atomic_op =
	     ff_core_request_D_OUT[5:1] ;
  assign m_storebuffer_ma_allocate_entry_data = ff_core_request_D_OUT[69:6] ;
  assign m_storebuffer_ma_allocate_entry_epochs = ff_core_request_D_OUT[75] ;
  assign m_storebuffer_ma_allocate_entry_fbindex =
	     b__h37051 ? x__read__h5263 : m_fillbuffer_mav_allocate_line ;
  assign m_storebuffer_ma_allocate_entry_read_data =
	     lv_response_word__h38293 ;
  assign m_storebuffer_ma_allocate_entry_size = ff_core_request_D_OUT[71:70] ;
  assign m_storebuffer_ma_commit_store_sbid = ma_commit_store_storecommit[0] ;
  assign m_storebuffer_mav_check_sb_hit_phyaddr = phyaddr__h33340 ;
  assign m_storebuffer_EN_mav_check_sb_hit = CAN_FIRE_RL_rl_response_to_core ;
  assign m_storebuffer_EN_ma_allocate_entry =
	     WILL_FIRE_RL_rl_response_to_core &&
	     NOT_IF_wr_fb_state_whas__66_THEN_wr_fb_state_w_ETC___d1387 &&
	     NOT_ff_core_request_first__5_BITS_74_TO_73_41__ETC___d1225 &&
	     !ff_from_tlb_rv_port1__read[64] ;
  assign m_storebuffer_EN_ma_commit_store =
	     EN_ma_commit_store &&
	     m_storebuffer_mv_sb_head__770_BIT_70_923_EQ_ma_ETC___d1925 ;
  assign m_storebuffer_EN_ma_increment_head =
	     EN_ma_commit_store &&
	     !m_storebuffer_mv_sb_head__770_BIT_70_923_EQ_ma_ETC___d1925 ||
	     WILL_FIRE_RL_rl_commit_stores ;

  // submodule m_tag
  assign m_tag_ma_request_address = m_fillbuffer_mv_release_info[33:2] ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  MUX_m_data_ma_request_2__VAL_1 or
	  MUX_m_data_ma_request_1__SEL_2 or
	  m_fillbuffer_mv_release_info or
	  rg_performing_replay or
	  rg_recent_req or
	  WILL_FIRE_RL_rl_fence_operation or _theResult____h21507)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1:
	  m_tag_ma_request_index = MUX_m_data_ma_request_2__VAL_1;
      MUX_m_data_ma_request_1__SEL_2:
	  m_tag_ma_request_index = m_fillbuffer_mv_release_info[13:8];
      rg_performing_replay: m_tag_ma_request_index = rg_recent_req;
      WILL_FIRE_RL_rl_fence_operation:
	  m_tag_ma_request_index = _theResult____h21507[5:0];
      default: m_tag_ma_request_index = 6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  assign m_tag_ma_request_read_write =
	     MUX_m_data_ma_request_1__SEL_2 &&
	     MUX_m_data_ma_request_1__VAL_2 ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  MUX_m_data_ma_request_1__SEL_2 or
	  v__h121592 or
	  rg_performing_replay or WILL_FIRE_RL_rl_fence_operation)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1:
	  m_tag_ma_request_way = 2'bxx /* unspecified value */ ;
      MUX_m_data_ma_request_1__SEL_2: m_tag_ma_request_way = v__h121592;
      rg_performing_replay:
	  m_tag_ma_request_way = 2'bxx /* unspecified value */ ;
      WILL_FIRE_RL_rl_fence_operation:
	  m_tag_ma_request_way = 2'bxx /* unspecified value */ ;
      default: m_tag_ma_request_way = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign m_tag_mv_tag_select_wayselect =
	     WILL_FIRE_RL_rl_fence_operation ? rg_fence_way : v__h121592 ;
  assign m_tag_mv_tagmatch_resp_address_in = phyaddr__h33340 ;
  assign m_tag_EN_ma_request =
	     EN_receive_core_req_put && ma_cache_enable_c ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] ||
	     rg_performing_replay ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // remaining internal signals
  module_fn_pmp_lookup instance_fn_pmp_lookup_0(.fn_pmp_lookup_req({ phyaddr__h33340,
								     pmp_access__h33371 }),
						.fn_pmp_lookup_priv(ma_curr_priv_c),
						.fn_pmp_lookup_pmpcfg({ { pmp_cfg_3,
									  pmp_cfg_2 },
									pmp_cfg_1,
									pmp_cfg_0 }),
						.fn_pmp_lookup_pmpaddr({ { pmp_addr_3,
									   pmp_addr_2 },
									 pmp_addr_1,
									 pmp_addr_0 }),
						.fn_pmp_lookup(fn_pmp_lookup___d251));
  assign IF_ff_core_request_first__5_BITS_71_TO_70_99_E_ETC___d817 =
	     lv_sign__h37978 & y__h109756 ;
  assign IF_ff_core_request_first__5_BITS_74_TO_73_41_E_ETC___d263 =
	     (ff_core_request_D_OUT[74:73] == 2'd0) ? 7'd5 : 7'd7 ;
  assign IF_ff_core_request_first__5_BITS_74_TO_73_41_E_ETC___d905 =
	     (ff_core_request_D_OUT[74:73] == 2'd2 &&
	      ff_core_request_D_OUT[4:1] == 4'b0111) ?
	       rg_reservation_address_88_BIT_64_89_AND_rg_res_ETC___d904 :
	       b__h37051 && wr_fb_response_wget[57] ||
	       b__h37063 && wr_ram_response_wget[57] ;
  assign IF_ff_core_request_first__5_BITS_74_TO_73_41_E_ETC___d906 =
	     (ff_core_request_D_OUT[74:73] == 2'd2 &&
	      ff_core_request_D_OUT[4:1] == 4'b0101) ?
	       b__h37051 && wr_fb_response_wget[58] ||
	       b__h37063 && wr_ram_response_wget[58] :
	       IF_ff_core_request_first__5_BITS_74_TO_73_41_E_ETC___d905 ;
  assign IF_m_iobuffer_mv_io_head__785_BIT_69_852_THEN__ETC___d1869 =
	     op1__h139072 <= op2__h139073 ;
  assign IF_m_iobuffer_mv_io_head__785_BIT_69_852_THEN__ETC___d1874 =
	     (op1__h139072 ^ 64'h8000000000000000) <=
	     (op2__h139073 ^ 64'h8000000000000000) ;
  assign IF_wr_fb_state_whas__66_THEN_wr_fb_state_wget__ETC___d1226 =
	     (b__h37051 && wr_fb_response_wget[58] ||
	      b__h37063 && wr_ram_response_wget[58]) &&
	     NOT_ff_core_request_first__5_BITS_74_TO_73_41__ETC___d1225 ;
  assign IF_wr_fb_state_whas__66_THEN_wr_fb_state_wget__ETC___d368 =
	     CAN_FIRE_RL_rl_fillbuffer_check ? wr_fb_state_wget : 2'd2 ;
  assign IF_wr_ram_state_whas__61_THEN_wr_ram_state_wge_ETC___d1408 =
	     IF_wr_ram_state_whas__61_THEN_wr_ram_state_wge_ETC___d363 ==
	     2'd0 &&
	     IF_wr_fb_state_whas__66_THEN_wr_fb_state_wget__ETC___d368 ==
	     2'd0 &&
	     !m_fillbuffer_mv_fbfull &&
	     !wr_fault_whas &&
	     !rg_handling_miss &&
	     !ff_core_request_D_OUT[76] &&
	     ff_pending_req_FULL_N ;
  assign IF_wr_ram_state_whas__61_THEN_wr_ram_state_wge_ETC___d363 =
	     wr_ram_state_whas ? wr_ram_state_wget : 2'd2 ;
  assign NOT_0_CONCAT_m_tag_mv_tagmatch_resp_ff_from_tl_ETC___d295 =
	     x__h35465 + y__h35466 > 3'd1 ;
  assign NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 =
	     entry_access__h112762 != 2'd0 &&
	     NOT_ff_core_request_first__5_BITS_74_TO_73_41__ETC___d1225 &&
	     IF_wr_ram_state_whas__61_THEN_wr_ram_state_wge_ETC___d363 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign NOT_IF_wr_fb_state_whas__66_THEN_wr_fb_state_w_ETC___d1383 =
	     IF_wr_fb_state_whas__66_THEN_wr_fb_state_wget__ETC___d368 !=
	     2'd1 ||
	     wr_fault_whas ||
	     !wr_fb_response_wget[67] ;
  assign NOT_IF_wr_fb_state_whas__66_THEN_wr_fb_state_w_ETC___d1387 =
	     NOT_IF_wr_fb_state_whas__66_THEN_wr_fb_state_w_ETC___d411 &&
	     NOT_IF_wr_ram_state_whas__61_THEN_wr_ram_state_ETC___d419 &&
	     entry_access__h112762 != 2'd0 &&
	     NOT_IF_wr_fb_state_whas__66_THEN_wr_fb_state_w_ETC___d1383 &&
	     NOT_IF_wr_ram_state_whas__61_THEN_wr_ram_state_ETC___d1385 ;
  assign NOT_IF_wr_fb_state_whas__66_THEN_wr_fb_state_w_ETC___d411 =
	     IF_wr_fb_state_whas__66_THEN_wr_fb_state_wget__ETC___d368 !=
	     2'd1 ||
	     wr_fault_whas ||
	     !wr_fb_response_wget[58] ;
  assign NOT_IF_wr_ram_state_whas__61_THEN_wr_ram_state_ETC___d1385 =
	     IF_wr_ram_state_whas__61_THEN_wr_ram_state_wge_ETC___d363 !=
	     2'd1 &&
	     !wr_fault_whas ||
	     !wr_ram_response_wget[67] ;
  assign NOT_IF_wr_ram_state_whas__61_THEN_wr_ram_state_ETC___d419 =
	     IF_wr_ram_state_whas__61_THEN_wr_ram_state_wge_ETC___d363 !=
	     2'd1 &&
	     !wr_fault_whas ||
	     !wr_ram_response_wget[58] ;
  assign NOT_SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03__ETC___d1697 =
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) &&
	     valid__h121595 == 4'd15 &&
	     (dirty__h121596 == 4'd15 || dirty__h121596 == 4'd0) ;
  assign NOT_ff_core_request_first__5_BITS_74_TO_73_41__ETC___d1225 =
	     ff_core_request_D_OUT[74:73] != 2'd2 ||
	     ff_core_request_D_OUT[4:1] != 4'b0111 ||
	     rg_reservation_address[64] &&
	     rg_reservation_address[63:0] ==
	     { 61'd0, ff_core_request_D_OUT[79:77] } ;
  assign NOT_ff_core_request_first__5_BIT_76_6_09_AND_N_ETC___d225 =
	     !ff_core_request_D_OUT[76] && !rg_handling_miss &&
	     !rg_performing_replay &&
	     !rg_polling_mode &&
	     !m_fillbuffer_mv_fbfull &&
	     !m_iobuffer_mv_io_full &&
	     !rg_release_readphase ;
  assign NOT_ff_core_request_notEmpty__423_424_AND_NOT__ETC___d1434 =
	     !ff_core_request_EMPTY_N && !EN_receive_core_req_put &&
	     !m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1432 ;
  assign NOT_ff_core_response_rv_port0__read__0_BIT_132_ETC___d1921 =
	     !ff_core_response_rv[132] && ff_core_request_FULL_N &&
	     !rg_fence_stall &&
	     !m_fillbuffer_mv_fbfull &&
	     !rg_performing_replay &&
	     !m_storebuffer_mv_sb_full &&
	     !m_storebuffer_mv_sb_busy ;
  assign NOT_ff_from_tlb_rv_port1__read__02_BIT_64_54_5_ETC___d422 =
	     !ff_from_tlb_rv_port1__read[64] && ff_core_request_D_OUT[0] &&
	     NOT_IF_wr_fb_state_whas__66_THEN_wr_fb_state_w_ETC___d411 &&
	     NOT_IF_wr_ram_state_whas__61_THEN_wr_ram_state_ETC___d419 ;
  assign NOT_m_fillbuffer_mv_release_info__81_BIT_1_449_ETC___d1696 =
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) &&
	     (rg_release_readphase ||
	      m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1432) ;
  assign SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 =
	     x__h124219 & y__h124220 ;
  assign _theResult____h21507 =
	     (rg_fence_way == 2'd3) ?
	       { 1'd0, rg_fence_set } + 7'd1 :
	       { 1'd0, rg_fence_set } ;
  assign b__h37051 =
	     IF_wr_fb_state_whas__66_THEN_wr_fb_state_wget__ETC___d368 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign b__h37063 =
	     IF_wr_ram_state_whas__61_THEN_wr_ram_state_wge_ETC___d363 ==
	     2'd1 ||
	     wr_fault_whas ;
  assign entry_access__h112762 =
	     (ff_core_request_D_OUT[74:73] == 2'd2 &&
	      ff_core_request_D_OUT[4:1] == 4'b0101) ?
	       2'd0 :
	       x1_avValue_fst_access__h38249 ;
  assign ff_core_request_first__5_BIT_76_6_AND_rg_fence_ETC___d30 =
	     ff_core_request_D_OUT[76] && rg_fence_stall &&
	     m_fillbuffer_mv_fbempty &&
	     m_storebuffer_mv_sb_empty &&
	     m_iobuffer_mv_io_empty &&
	     !rg_fence_pending &&
	     !rg_performing_replay ;
  assign ff_from_tlb_rv_port1__read__02_BITS_104_TO_73__ETC___d305 =
	     ff_from_tlb_rv_port1__read[104:73] < 32'h80000000 ;
  assign final_address__h17296 =
	     { m_tag_mv_tag_select[31:12], rg_fence_set, 6'd0 } ;
  assign i__h112865 = CAN_FIRE_RL_rl_ram_check ? x__h34897[1:0] : 2'd0 ;
  assign lv_cause__h138366 =
	     (m_iobuffer_mv_io_head[71:70] == 2'd0) ? 7'd5 : 7'd7 ;
  assign lv_cause__h33342 =
	     (ff_from_tlb_rv_port1__read[72] ||
	      ff_from_tlb_rv_port1__read[64]) ?
	       ff_from_tlb_rv_port1__read[71:65] :
	       IF_ff_core_request_first__5_BITS_74_TO_73_41_E_ETC___d263 ;
  assign lv_evict_address__h124696 =
	     { m_tag_mv_tag_select[31:12],
	       m_fillbuffer_mv_release_info[13:8],
	       6'd0 } ;
  assign lv_hitmask__h33411 =
	     m_tag_mv_tagmatch_resp &
	     SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 ;
  assign lv_mem_response_data38405_BITS_31_TO_0__q4 =
	     lv_mem_response_data__h138405[31:0] ;
  assign lv_response_cause__h33778 =
	     (!ff_from_tlb_rv_port1__read[72] &&
	      !ff_from_tlb_rv_port1__read[64] &&
	      fn_pmp_lookup___d251[7]) ?
	       fn_pmp_lookup___d251[6:0] :
	       lv_cause__h33342 ;
  assign lv_response_cause__h38295 =
	     { b__h37051 && wr_fb_response_wget[66] ||
	       b__h37063 && wr_ram_response_wget[66],
	       b__h37051 && wr_fb_response_wget[65] ||
	       b__h37063 && wr_ram_response_wget[65],
	       b__h37051 && wr_fb_response_wget[64] ||
	       b__h37063 && wr_ram_response_wget[64],
	       b__h37051 && wr_fb_response_wget[63] ||
	       b__h37063 && wr_ram_response_wget[63],
	       b__h37051 && wr_fb_response_wget[62] ||
	       b__h37063 && wr_ram_response_wget[62],
	       b__h37051 && wr_fb_response_wget[61] ||
	       b__h37063 && wr_ram_response_wget[61],
	       b__h37051 && wr_fb_response_wget[60] ||
	       b__h37063 && wr_ram_response_wget[60] } ;
  assign lv_response_epochs__h38296 =
	     b__h37051 && wr_fb_response_wget[59] ||
	     b__h37063 && wr_ram_response_wget[59] ;
  assign lv_response_mtval2__h38300 =
	     { b__h37051 && wr_fb_response_wget[55] ||
	       b__h37063 && wr_ram_response_wget[55],
	       b__h37051 && wr_fb_response_wget[54] ||
	       b__h37063 && wr_ram_response_wget[54],
	       b__h37051 && wr_fb_response_wget[53] ||
	       b__h37063 && wr_ram_response_wget[53],
	       b__h37051 && wr_fb_response_wget[52] ||
	       b__h37063 && wr_ram_response_wget[52],
	       b__h37051 && wr_fb_response_wget[51] ||
	       b__h37063 && wr_ram_response_wget[51],
	       b__h37051 && wr_fb_response_wget[50] ||
	       b__h37063 && wr_ram_response_wget[50],
	       b__h37051 && wr_fb_response_wget[49] ||
	       b__h37063 && wr_ram_response_wget[49],
	       b__h37051 && wr_fb_response_wget[48] ||
	       b__h37063 && wr_ram_response_wget[48],
	       b__h37051 && wr_fb_response_wget[47] ||
	       b__h37063 && wr_ram_response_wget[47],
	       b__h37051 && wr_fb_response_wget[46] ||
	       b__h37063 && wr_ram_response_wget[46],
	       b__h37051 && wr_fb_response_wget[45] ||
	       b__h37063 && wr_ram_response_wget[45],
	       b__h37051 && wr_fb_response_wget[44] ||
	       b__h37063 && wr_ram_response_wget[44],
	       b__h37051 && wr_fb_response_wget[43] ||
	       b__h37063 && wr_ram_response_wget[43],
	       b__h37051 && wr_fb_response_wget[42] ||
	       b__h37063 && wr_ram_response_wget[42],
	       b__h37051 && wr_fb_response_wget[41] ||
	       b__h37063 && wr_ram_response_wget[41],
	       b__h37051 && wr_fb_response_wget[40] ||
	       b__h37063 && wr_ram_response_wget[40],
	       b__h37051 && wr_fb_response_wget[39] ||
	       b__h37063 && wr_ram_response_wget[39],
	       b__h37051 && wr_fb_response_wget[38] ||
	       b__h37063 && wr_ram_response_wget[38],
	       b__h37051 && wr_fb_response_wget[37] ||
	       b__h37063 && wr_ram_response_wget[37],
	       b__h37051 && wr_fb_response_wget[36] ||
	       b__h37063 && wr_ram_response_wget[36],
	       b__h37051 && wr_fb_response_wget[35] ||
	       b__h37063 && wr_ram_response_wget[35],
	       b__h37051 && wr_fb_response_wget[34] ||
	       b__h37063 && wr_ram_response_wget[34],
	       b__h37051 && wr_fb_response_wget[33] ||
	       b__h37063 && wr_ram_response_wget[33],
	       b__h37051 && wr_fb_response_wget[32] ||
	       b__h37063 && wr_ram_response_wget[32],
	       b__h37051 && wr_fb_response_wget[31] ||
	       b__h37063 && wr_ram_response_wget[31],
	       b__h37051 && wr_fb_response_wget[30] ||
	       b__h37063 && wr_ram_response_wget[30],
	       b__h37051 && wr_fb_response_wget[29] ||
	       b__h37063 && wr_ram_response_wget[29],
	       b__h37051 && wr_fb_response_wget[28] ||
	       b__h37063 && wr_ram_response_wget[28],
	       b__h37051 && wr_fb_response_wget[27] ||
	       b__h37063 && wr_ram_response_wget[27],
	       b__h37051 && wr_fb_response_wget[26] ||
	       b__h37063 && wr_ram_response_wget[26],
	       b__h37051 && wr_fb_response_wget[25] ||
	       b__h37063 && wr_ram_response_wget[25],
	       b__h37051 && wr_fb_response_wget[24] ||
	       b__h37063 && wr_ram_response_wget[24],
	       b__h37051 && wr_fb_response_wget[23] ||
	       b__h37063 && wr_ram_response_wget[23],
	       b__h37051 && wr_fb_response_wget[22] ||
	       b__h37063 && wr_ram_response_wget[22],
	       b__h37051 && wr_fb_response_wget[21] ||
	       b__h37063 && wr_ram_response_wget[21],
	       b__h37051 && wr_fb_response_wget[20] ||
	       b__h37063 && wr_ram_response_wget[20],
	       b__h37051 && wr_fb_response_wget[19] ||
	       b__h37063 && wr_ram_response_wget[19],
	       b__h37051 && wr_fb_response_wget[18] ||
	       b__h37063 && wr_ram_response_wget[18],
	       b__h37051 && wr_fb_response_wget[17] ||
	       b__h37063 && wr_ram_response_wget[17],
	       b__h37051 && wr_fb_response_wget[16] ||
	       b__h37063 && wr_ram_response_wget[16],
	       b__h37051 && wr_fb_response_wget[15] ||
	       b__h37063 && wr_ram_response_wget[15],
	       b__h37051 && wr_fb_response_wget[14] ||
	       b__h37063 && wr_ram_response_wget[14],
	       b__h37051 && wr_fb_response_wget[13] ||
	       b__h37063 && wr_ram_response_wget[13],
	       b__h37051 && wr_fb_response_wget[12] ||
	       b__h37063 && wr_ram_response_wget[12],
	       b__h37051 && wr_fb_response_wget[11] ||
	       b__h37063 && wr_ram_response_wget[11],
	       b__h37051 && wr_fb_response_wget[10] ||
	       b__h37063 && wr_ram_response_wget[10],
	       b__h37051 && wr_fb_response_wget[9] ||
	       b__h37063 && wr_ram_response_wget[9],
	       b__h37051 && wr_fb_response_wget[8] ||
	       b__h37063 && wr_ram_response_wget[8],
	       b__h37051 && wr_fb_response_wget[7] ||
	       b__h37063 && wr_ram_response_wget[7],
	       b__h37051 && wr_fb_response_wget[6] ||
	       b__h37063 && wr_ram_response_wget[6],
	       b__h37051 && wr_fb_response_wget[5] ||
	       b__h37063 && wr_ram_response_wget[5],
	       b__h37051 && wr_fb_response_wget[4] ||
	       b__h37063 && wr_ram_response_wget[4],
	       b__h37051 && wr_fb_response_wget[3] ||
	       b__h37063 && wr_ram_response_wget[3],
	       b__h37051 && wr_fb_response_wget[2] ||
	       b__h37063 && wr_ram_response_wget[2],
	       b__h37051 && wr_fb_response_wget[1] ||
	       b__h37063 && wr_ram_response_wget[1],
	       b__h37051 && wr_fb_response_wget[0] ||
	       b__h37063 && wr_ram_response_wget[0] } ;
  assign lv_response_word__h138459 =
	     ff_mem_io_resp_D_OUT[0] ?
	       m_iobuffer_mv_io_head[64:1] :
	       ((m_iobuffer_mv_io_head[71:70] == 2'd2) ?
		  rg_atomic_rd_data :
		  lv_mem_response_data__h138405) ;
  assign lv_response_word__h35749 =
	     m_fillbuffer_mav_polling_response[74:11] >> x__h33789 ;
  assign lv_response_word__h38293 =
	     (b__h37051 && wr_fb_response_wget[67] ||
	      b__h37063 && wr_ram_response_wget[67]) ?
	       ff_core_request_D_OUT[140:77] :
	       lv_response_word__h38301 ;
  assign lv_response_word__h38301 = x__h104508 | y__h104509 ;
  assign m_fillbuffer_mv_fbfull__17_OR_rg_fence_stall_7_ETC___d1446 =
	     (m_fillbuffer_mv_fbfull || rg_fence_stall ||
	      NOT_ff_core_request_notEmpty__423_424_AND_NOT__ETC___d1434) &&
	     m_storebuffer_mv_sb_empty &&
	     !m_fillbuffer_mv_fbempty &&
	     (!CAN_FIRE_RL_rl_fillbuffer_check ||
	      !wr_allocating_storebuffer_wget) &&
	     m_fillbuffer_mv_fbhead_valid ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1432 =
	     m_fillbuffer_mv_release_info[13:8] == rg_recent_req ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1561 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd0 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1564 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd1 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1566 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd2 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1568 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd3 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1570 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd4 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1572 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd5 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1574 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd6 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1576 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd7 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1578 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd8 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1580 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd9 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1582 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd10 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1584 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd11 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1586 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd12 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1588 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd13 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1590 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd14 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1592 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd15 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1594 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd16 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1596 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd17 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1598 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd18 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1600 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd19 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1602 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd20 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1604 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd21 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1606 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd22 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1608 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd23 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1610 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd24 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1612 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd25 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1614 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd26 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1616 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd27 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1618 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd28 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1620 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd29 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1622 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd30 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1624 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd31 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1626 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd32 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1628 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd33 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1630 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd34 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1632 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd35 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1634 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd36 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1636 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd37 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1638 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd38 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1640 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd39 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1642 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd40 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1644 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd41 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1646 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd42 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1648 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd43 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1650 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd44 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1652 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd45 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1654 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd46 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1656 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd47 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1658 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd48 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1660 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd49 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1662 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd50 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1664 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd51 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1666 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd52 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1668 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd53 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1670 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd54 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1672 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd55 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1674 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd56 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1676 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd57 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1678 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd58 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1680 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd59 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1682 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd60 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1684 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd61 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1686 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd62 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__81_BITS_13_TO_8__ETC___d1688 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd63 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d1545 ||
	      rg_release_readphase) ;
  assign m_iobuffer_mv_io_head__785_BIT_72_837_EQ_ma_co_ETC___d1928 =
	     m_iobuffer_mv_io_head[72] == ma_commit_io_currepoch ;
  assign m_iobuffermv_io_head_BITS_107_TO_76__q5 =
	     m_iobuffer_mv_io_head[107:76] ;
  assign m_storebuffer_mv_sb_head__770_BIT_70_923_EQ_ma_ETC___d1925 =
	     m_storebuffer_mv_sb_head[70] == ma_commit_store_storecommit[1] ;
  assign mem_response_data38390_BITS_15_TO_0__q2 =
	     mem_response_data__h138390[15:0] ;
  assign mem_response_data38390_BITS_31_TO_0__q3 =
	     mem_response_data__h138390[31:0] ;
  assign mem_response_data38390_BITS_7_TO_0__q1 =
	     mem_response_data__h138390[7:0] ;
  assign mem_response_data__h138390 =
	     ff_mem_io_resp_D_OUT[64:1] >> x__h138522 ;
  assign op1___1__h139130 =
	     { {32{lv_mem_response_data38405_BITS_31_TO_0__q4[31]}},
	       lv_mem_response_data38405_BITS_31_TO_0__q4 } ;
  assign op1__h139072 =
	     m_iobuffer_mv_io_head[69] ?
	       lv_mem_response_data__h138405 :
	       op1___1__h139130 ;
  assign op2___1__h139131 =
	     { {32{m_iobuffermv_io_head_BITS_107_TO_76__q5[31]}},
	       m_iobuffermv_io_head_BITS_107_TO_76__q5 } ;
  assign op2__h139073 =
	     m_iobuffer_mv_io_head[69] ?
	       m_iobuffer_mv_io_head[139:76] :
	       op2___1__h139131 ;
  assign phyaddr__h120936 = { ff_from_tlb_rv_port1__read[104:76], 3'd0 } ;
  assign phyaddr__h33340 = ff_from_tlb_rv_port1__read[104:73] ;
  assign pmp_access__h33371 =
	     (ff_core_request_D_OUT[74:73] == 2'd0) ?
	       ff_core_request_D_OUT[74:73] :
	       2'd1 ;
  assign response_word__h33628 = m_data_mv_word_select[575:512] >> x__h33789 ;
  assign rg_reservation_address_88_BIT_64_89_AND_rg_res_ETC___d904 =
	     rg_reservation_address[64] &&
	     rg_reservation_address[63:0] ==
	     { 61'd0, ff_core_request_D_OUT[79:77] } &&
	     (b__h37051 && wr_fb_response_wget[57] ||
	      b__h37063 && wr_ram_response_wget[57]) ;
  assign v__h121592 =
	     (valid__h121595 == 4'd15 &&
	      (dirty__h121596 == 4'd15 || dirty__h121596 == 4'd0)) ?
	       SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 :
	       ((valid__h121595 == 4'd15 && dirty__h121596 != 4'd15) ?
		  (dirty__h121596[3] ?
		     (dirty__h121596[2] ?
			(dirty__h121596[1] ?
			   (dirty__h121596[0] ? 2'd3 : 2'd0) :
			   2'd1) :
			2'd2) :
		     2'd3) :
		  (valid__h121595[3] ?
		     (valid__h121595[2] ?
			(valid__h121595[1] ?
			   (valid__h121595[0] ? 2'd3 : 2'd0) :
			   2'd1) :
			2'd2) :
		     2'd3)) ;
  assign wayselect__h124582 = 4'd1 << v__h121592 ;
  assign wr_fault_whas__58_AND_wr_fault_wget__59_60_OR__ETC___d370 =
	     wr_fault_whas ||
	     IF_wr_ram_state_whas__61_THEN_wr_ram_state_wge_ETC___d363 ==
	     2'd1 ||
	     IF_wr_fb_state_whas__66_THEN_wr_fb_state_wget__ETC___d368 ==
	     2'd1 ;
  assign x1_avValue_fst_access__h38241 =
	     (rg_reservation_address[64] &&
	      rg_reservation_address[63:0] ==
	      { 61'd0, ff_core_request_D_OUT[79:77] }) ?
	       2'd1 :
	       2'd0 ;
  assign x1_avValue_fst_access__h38249 =
	     (ff_core_request_D_OUT[74:73] == 2'd2 &&
	      ff_core_request_D_OUT[4:1] == 4'b0111) ?
	       x1_avValue_fst_access__h38241 :
	       ff_core_request_D_OUT[74:73] ;
  assign x1_avValue_snd_fst_word__h38359 =
	     (rg_reservation_address[64] &&
	      rg_reservation_address[63:0] ==
	      { 61'd0, ff_core_request_D_OUT[79:77] }) ?
	       64'd0 :
	       64'd1 ;
  assign x1_avValue_snd_fst_word__h38375 =
	     (ff_core_request_D_OUT[74:73] == 2'd2 &&
	      ff_core_request_D_OUT[4:1] == 4'b0111) ?
	       x1_avValue_snd_fst_word__h38359 :
	       y_avValue_snd_word__h38322 ;
  assign x__h104508 = x__h104510 & y__h104511 ;
  assign x__h104510 = x__h104523 | y__h104524 ;
  assign x__h104523 =
	     m_storebuffer_mav_check_sb_hit[127:64] &
	     m_storebuffer_mav_check_sb_hit[63:0] ;
  assign x__h104534 = ~m_storebuffer_mav_check_sb_hit[127:64] ;
  assign x__h114286 = 4'd1 << i__h112865 ;
  assign x__h124219 = valid__h121595[v__h121592] ;
  assign x__h138522 = { m_iobuffer_mv_io_head[142:140], 3'b0 } ;
  assign x__h28192 = rg_fence_way + 2'd1 ;
  assign x__h33789 = { ff_from_tlb_rv_port1__read[75:73], 3'b0 } ;
  assign x__h34897 =
	     lv_hitmask__h33411[0] ?
	       3'd0 :
	       (lv_hitmask__h33411[1] ?
		  3'd1 :
		  (lv_hitmask__h33411[2] ?
		     3'd2 :
		     (lv_hitmask__h33411[3] ? 3'd3 : 3'd4))) ;
  assign x__h35465 = x__h35477 + y__h35478 ;
  assign x__h35477 = x__h35489 + y__h35490 ;
  assign x__h35489 = { 2'd0, lv_hitmask__h33411[3] } ;
  assign x__h37055 = { 1'd0, b__h37063 } ;
  assign x__read__h4493 =
	     CAN_FIRE_RL_rl_send_memory_request && x_wget__h4482 ;
  assign x__read__h4563 =
	     CAN_FIRE_RL_rl_send_memory_request && x_wget__h4552 ;
  assign x__read__h4633 =
	     CAN_FIRE_RL_rl_send_memory_request && x_wget__h4622 ;
  assign x__read__h4703 =
	     CAN_FIRE_RL_rl_send_memory_request && x_wget__h4692 ;
  assign x__read__h4773 =
	     CAN_FIRE_RL_rl_send_memory_request && x_wget__h4762 ;
  assign x__read__h5263 =
	     m_fillbuffer_mav_polling_response[2] ?
	       4'd0 :
	       (m_fillbuffer_mav_polling_response[3] ?
		  4'd1 :
		  (m_fillbuffer_mav_polling_response[4] ?
		     4'd2 :
		     (m_fillbuffer_mav_polling_response[5] ?
			4'd3 :
			(m_fillbuffer_mav_polling_response[6] ?
			   4'd4 :
			   (m_fillbuffer_mav_polling_response[7] ?
			      4'd5 :
			      (m_fillbuffer_mav_polling_response[8] ?
				 4'd6 :
				 (m_fillbuffer_mav_polling_response[9] ?
				    4'd7 :
				    (m_fillbuffer_mav_polling_response[10] ?
				       4'd8 :
				       4'd9)))))))) ;
  assign x_wget__h4482 = ff_core_request_D_OUT[74:73] == 2'd0 ;
  assign x_wget__h4552 = ff_core_request_D_OUT[74:73] == 2'd1 ;
  assign x_wget__h4622 = x_wget__h4482 ;
  assign x_wget__h4692 = x_wget__h4552 ;
  assign x_wget__h4762 = ff_core_request_D_OUT[74:73] == 2'd2 ;
  assign y__h104509 = x__h104633 & y__h104634 ;
  assign y__h104524 = x__h104534 & y__h104535 ;
  assign y__h104535 =
	     (ff_core_request_D_OUT[74:73] == 2'd2 &&
	      ff_core_request_D_OUT[4:1] == 4'b0101) ?
	       y_avValue_snd_word__h38322 :
	       x1_avValue_snd_fst_word__h38375 ;
  assign y__h104634 =
	     {64{IF_ff_core_request_first__5_BITS_71_TO_70_99_E_ETC___d817}} ;
  assign y__h109756 = ~ff_core_request_D_OUT[72] ;
  assign y__h114302 = ~x__h114286 ;
  assign y__h124220 = dirty__h121596[v__h121592] ;
  assign y__h129959 = ~wayselect__h124582 ;
  assign y__h35466 = { 2'd0, lv_hitmask__h33411[0] } ;
  assign y__h35478 = { 2'd0, lv_hitmask__h33411[1] } ;
  assign y__h35490 = { 2'd0, lv_hitmask__h33411[2] } ;
  assign y__h37056 = { 1'd0, b__h37051 } ;
  assign y_avValue_snd_word__h38322 =
	     { b__h37051 && wr_fb_response_wget[131] ||
	       b__h37063 && wr_ram_response_wget[131],
	       b__h37051 && wr_fb_response_wget[130] ||
	       b__h37063 && wr_ram_response_wget[130],
	       b__h37051 && wr_fb_response_wget[129] ||
	       b__h37063 && wr_ram_response_wget[129],
	       b__h37051 && wr_fb_response_wget[128] ||
	       b__h37063 && wr_ram_response_wget[128],
	       b__h37051 && wr_fb_response_wget[127] ||
	       b__h37063 && wr_ram_response_wget[127],
	       b__h37051 && wr_fb_response_wget[126] ||
	       b__h37063 && wr_ram_response_wget[126],
	       b__h37051 && wr_fb_response_wget[125] ||
	       b__h37063 && wr_ram_response_wget[125],
	       b__h37051 && wr_fb_response_wget[124] ||
	       b__h37063 && wr_ram_response_wget[124],
	       b__h37051 && wr_fb_response_wget[123] ||
	       b__h37063 && wr_ram_response_wget[123],
	       b__h37051 && wr_fb_response_wget[122] ||
	       b__h37063 && wr_ram_response_wget[122],
	       b__h37051 && wr_fb_response_wget[121] ||
	       b__h37063 && wr_ram_response_wget[121],
	       b__h37051 && wr_fb_response_wget[120] ||
	       b__h37063 && wr_ram_response_wget[120],
	       b__h37051 && wr_fb_response_wget[119] ||
	       b__h37063 && wr_ram_response_wget[119],
	       b__h37051 && wr_fb_response_wget[118] ||
	       b__h37063 && wr_ram_response_wget[118],
	       b__h37051 && wr_fb_response_wget[117] ||
	       b__h37063 && wr_ram_response_wget[117],
	       b__h37051 && wr_fb_response_wget[116] ||
	       b__h37063 && wr_ram_response_wget[116],
	       b__h37051 && wr_fb_response_wget[115] ||
	       b__h37063 && wr_ram_response_wget[115],
	       b__h37051 && wr_fb_response_wget[114] ||
	       b__h37063 && wr_ram_response_wget[114],
	       b__h37051 && wr_fb_response_wget[113] ||
	       b__h37063 && wr_ram_response_wget[113],
	       b__h37051 && wr_fb_response_wget[112] ||
	       b__h37063 && wr_ram_response_wget[112],
	       b__h37051 && wr_fb_response_wget[111] ||
	       b__h37063 && wr_ram_response_wget[111],
	       b__h37051 && wr_fb_response_wget[110] ||
	       b__h37063 && wr_ram_response_wget[110],
	       b__h37051 && wr_fb_response_wget[109] ||
	       b__h37063 && wr_ram_response_wget[109],
	       b__h37051 && wr_fb_response_wget[108] ||
	       b__h37063 && wr_ram_response_wget[108],
	       b__h37051 && wr_fb_response_wget[107] ||
	       b__h37063 && wr_ram_response_wget[107],
	       b__h37051 && wr_fb_response_wget[106] ||
	       b__h37063 && wr_ram_response_wget[106],
	       b__h37051 && wr_fb_response_wget[105] ||
	       b__h37063 && wr_ram_response_wget[105],
	       b__h37051 && wr_fb_response_wget[104] ||
	       b__h37063 && wr_ram_response_wget[104],
	       b__h37051 && wr_fb_response_wget[103] ||
	       b__h37063 && wr_ram_response_wget[103],
	       b__h37051 && wr_fb_response_wget[102] ||
	       b__h37063 && wr_ram_response_wget[102],
	       b__h37051 && wr_fb_response_wget[101] ||
	       b__h37063 && wr_ram_response_wget[101],
	       b__h37051 && wr_fb_response_wget[100] ||
	       b__h37063 && wr_ram_response_wget[100],
	       b__h37051 && wr_fb_response_wget[99] ||
	       b__h37063 && wr_ram_response_wget[99],
	       b__h37051 && wr_fb_response_wget[98] ||
	       b__h37063 && wr_ram_response_wget[98],
	       b__h37051 && wr_fb_response_wget[97] ||
	       b__h37063 && wr_ram_response_wget[97],
	       b__h37051 && wr_fb_response_wget[96] ||
	       b__h37063 && wr_ram_response_wget[96],
	       b__h37051 && wr_fb_response_wget[95] ||
	       b__h37063 && wr_ram_response_wget[95],
	       b__h37051 && wr_fb_response_wget[94] ||
	       b__h37063 && wr_ram_response_wget[94],
	       b__h37051 && wr_fb_response_wget[93] ||
	       b__h37063 && wr_ram_response_wget[93],
	       b__h37051 && wr_fb_response_wget[92] ||
	       b__h37063 && wr_ram_response_wget[92],
	       b__h37051 && wr_fb_response_wget[91] ||
	       b__h37063 && wr_ram_response_wget[91],
	       b__h37051 && wr_fb_response_wget[90] ||
	       b__h37063 && wr_ram_response_wget[90],
	       b__h37051 && wr_fb_response_wget[89] ||
	       b__h37063 && wr_ram_response_wget[89],
	       b__h37051 && wr_fb_response_wget[88] ||
	       b__h37063 && wr_ram_response_wget[88],
	       b__h37051 && wr_fb_response_wget[87] ||
	       b__h37063 && wr_ram_response_wget[87],
	       b__h37051 && wr_fb_response_wget[86] ||
	       b__h37063 && wr_ram_response_wget[86],
	       b__h37051 && wr_fb_response_wget[85] ||
	       b__h37063 && wr_ram_response_wget[85],
	       b__h37051 && wr_fb_response_wget[84] ||
	       b__h37063 && wr_ram_response_wget[84],
	       b__h37051 && wr_fb_response_wget[83] ||
	       b__h37063 && wr_ram_response_wget[83],
	       b__h37051 && wr_fb_response_wget[82] ||
	       b__h37063 && wr_ram_response_wget[82],
	       b__h37051 && wr_fb_response_wget[81] ||
	       b__h37063 && wr_ram_response_wget[81],
	       b__h37051 && wr_fb_response_wget[80] ||
	       b__h37063 && wr_ram_response_wget[80],
	       b__h37051 && wr_fb_response_wget[79] ||
	       b__h37063 && wr_ram_response_wget[79],
	       b__h37051 && wr_fb_response_wget[78] ||
	       b__h37063 && wr_ram_response_wget[78],
	       b__h37051 && wr_fb_response_wget[77] ||
	       b__h37063 && wr_ram_response_wget[77],
	       b__h37051 && wr_fb_response_wget[76] ||
	       b__h37063 && wr_ram_response_wget[76],
	       b__h37051 && wr_fb_response_wget[75] ||
	       b__h37063 && wr_ram_response_wget[75],
	       b__h37051 && wr_fb_response_wget[74] ||
	       b__h37063 && wr_ram_response_wget[74],
	       b__h37051 && wr_fb_response_wget[73] ||
	       b__h37063 && wr_ram_response_wget[73],
	       b__h37051 && wr_fb_response_wget[72] ||
	       b__h37063 && wr_ram_response_wget[72],
	       b__h37051 && wr_fb_response_wget[71] ||
	       b__h37063 && wr_ram_response_wget[71],
	       b__h37051 && wr_fb_response_wget[70] ||
	       b__h37063 && wr_ram_response_wget[70],
	       b__h37051 && wr_fb_response_wget[69] ||
	       b__h37063 && wr_ram_response_wget[69],
	       b__h37051 && wr_fb_response_wget[68] ||
	       b__h37063 && wr_ram_response_wget[68] } ;
  always@(ff_core_request_D_OUT)
  begin
    case (ff_core_request_D_OUT[71:70])
      2'b0: y__h104511 = 64'h00000000000000FF;
      2'b01: y__h104511 = 64'h000000000000FFFF;
      2'b10: y__h104511 = 64'h00000000FFFFFFFF;
      2'd3: y__h104511 = 64'hFFFFFFFFFFFFFFFF;
    endcase
  end
  always@(ff_core_request_D_OUT)
  begin
    case (ff_core_request_D_OUT[71:70])
      2'b0: x__h104633 = 64'hFFFFFFFFFFFFFF00;
      2'b01: x__h104633 = 64'hFFFFFFFFFFFF0000;
      2'b10: x__h104633 = 64'hFFFFFFFF00000000;
      2'd3: x__h104633 = 64'd0;
    endcase
  end
  always@(m_fillbuffer_mv_release_info or
	  v_reg_dirty_0 or
	  v_reg_dirty_1 or
	  v_reg_dirty_2 or
	  v_reg_dirty_3 or
	  v_reg_dirty_4 or
	  v_reg_dirty_5 or
	  v_reg_dirty_6 or
	  v_reg_dirty_7 or
	  v_reg_dirty_8 or
	  v_reg_dirty_9 or
	  v_reg_dirty_10 or
	  v_reg_dirty_11 or
	  v_reg_dirty_12 or
	  v_reg_dirty_13 or
	  v_reg_dirty_14 or
	  v_reg_dirty_15 or
	  v_reg_dirty_16 or
	  v_reg_dirty_17 or
	  v_reg_dirty_18 or
	  v_reg_dirty_19 or
	  v_reg_dirty_20 or
	  v_reg_dirty_21 or
	  v_reg_dirty_22 or
	  v_reg_dirty_23 or
	  v_reg_dirty_24 or
	  v_reg_dirty_25 or
	  v_reg_dirty_26 or
	  v_reg_dirty_27 or
	  v_reg_dirty_28 or
	  v_reg_dirty_29 or
	  v_reg_dirty_30 or
	  v_reg_dirty_31 or
	  v_reg_dirty_32 or
	  v_reg_dirty_33 or
	  v_reg_dirty_34 or
	  v_reg_dirty_35 or
	  v_reg_dirty_36 or
	  v_reg_dirty_37 or
	  v_reg_dirty_38 or
	  v_reg_dirty_39 or
	  v_reg_dirty_40 or
	  v_reg_dirty_41 or
	  v_reg_dirty_42 or
	  v_reg_dirty_43 or
	  v_reg_dirty_44 or
	  v_reg_dirty_45 or
	  v_reg_dirty_46 or
	  v_reg_dirty_47 or
	  v_reg_dirty_48 or
	  v_reg_dirty_49 or
	  v_reg_dirty_50 or
	  v_reg_dirty_51 or
	  v_reg_dirty_52 or
	  v_reg_dirty_53 or
	  v_reg_dirty_54 or
	  v_reg_dirty_55 or
	  v_reg_dirty_56 or
	  v_reg_dirty_57 or
	  v_reg_dirty_58 or
	  v_reg_dirty_59 or
	  v_reg_dirty_60 or
	  v_reg_dirty_61 or v_reg_dirty_62 or v_reg_dirty_63)
  begin
    case (m_fillbuffer_mv_release_info[13:8])
      6'd0: dirty__h121596 = v_reg_dirty_0;
      6'd1: dirty__h121596 = v_reg_dirty_1;
      6'd2: dirty__h121596 = v_reg_dirty_2;
      6'd3: dirty__h121596 = v_reg_dirty_3;
      6'd4: dirty__h121596 = v_reg_dirty_4;
      6'd5: dirty__h121596 = v_reg_dirty_5;
      6'd6: dirty__h121596 = v_reg_dirty_6;
      6'd7: dirty__h121596 = v_reg_dirty_7;
      6'd8: dirty__h121596 = v_reg_dirty_8;
      6'd9: dirty__h121596 = v_reg_dirty_9;
      6'd10: dirty__h121596 = v_reg_dirty_10;
      6'd11: dirty__h121596 = v_reg_dirty_11;
      6'd12: dirty__h121596 = v_reg_dirty_12;
      6'd13: dirty__h121596 = v_reg_dirty_13;
      6'd14: dirty__h121596 = v_reg_dirty_14;
      6'd15: dirty__h121596 = v_reg_dirty_15;
      6'd16: dirty__h121596 = v_reg_dirty_16;
      6'd17: dirty__h121596 = v_reg_dirty_17;
      6'd18: dirty__h121596 = v_reg_dirty_18;
      6'd19: dirty__h121596 = v_reg_dirty_19;
      6'd20: dirty__h121596 = v_reg_dirty_20;
      6'd21: dirty__h121596 = v_reg_dirty_21;
      6'd22: dirty__h121596 = v_reg_dirty_22;
      6'd23: dirty__h121596 = v_reg_dirty_23;
      6'd24: dirty__h121596 = v_reg_dirty_24;
      6'd25: dirty__h121596 = v_reg_dirty_25;
      6'd26: dirty__h121596 = v_reg_dirty_26;
      6'd27: dirty__h121596 = v_reg_dirty_27;
      6'd28: dirty__h121596 = v_reg_dirty_28;
      6'd29: dirty__h121596 = v_reg_dirty_29;
      6'd30: dirty__h121596 = v_reg_dirty_30;
      6'd31: dirty__h121596 = v_reg_dirty_31;
      6'd32: dirty__h121596 = v_reg_dirty_32;
      6'd33: dirty__h121596 = v_reg_dirty_33;
      6'd34: dirty__h121596 = v_reg_dirty_34;
      6'd35: dirty__h121596 = v_reg_dirty_35;
      6'd36: dirty__h121596 = v_reg_dirty_36;
      6'd37: dirty__h121596 = v_reg_dirty_37;
      6'd38: dirty__h121596 = v_reg_dirty_38;
      6'd39: dirty__h121596 = v_reg_dirty_39;
      6'd40: dirty__h121596 = v_reg_dirty_40;
      6'd41: dirty__h121596 = v_reg_dirty_41;
      6'd42: dirty__h121596 = v_reg_dirty_42;
      6'd43: dirty__h121596 = v_reg_dirty_43;
      6'd44: dirty__h121596 = v_reg_dirty_44;
      6'd45: dirty__h121596 = v_reg_dirty_45;
      6'd46: dirty__h121596 = v_reg_dirty_46;
      6'd47: dirty__h121596 = v_reg_dirty_47;
      6'd48: dirty__h121596 = v_reg_dirty_48;
      6'd49: dirty__h121596 = v_reg_dirty_49;
      6'd50: dirty__h121596 = v_reg_dirty_50;
      6'd51: dirty__h121596 = v_reg_dirty_51;
      6'd52: dirty__h121596 = v_reg_dirty_52;
      6'd53: dirty__h121596 = v_reg_dirty_53;
      6'd54: dirty__h121596 = v_reg_dirty_54;
      6'd55: dirty__h121596 = v_reg_dirty_55;
      6'd56: dirty__h121596 = v_reg_dirty_56;
      6'd57: dirty__h121596 = v_reg_dirty_57;
      6'd58: dirty__h121596 = v_reg_dirty_58;
      6'd59: dirty__h121596 = v_reg_dirty_59;
      6'd60: dirty__h121596 = v_reg_dirty_60;
      6'd61: dirty__h121596 = v_reg_dirty_61;
      6'd62: dirty__h121596 = v_reg_dirty_62;
      6'd63: dirty__h121596 = v_reg_dirty_63;
    endcase
  end
  always@(m_fillbuffer_mv_release_info or
	  v_reg_valid_0 or
	  v_reg_valid_1 or
	  v_reg_valid_2 or
	  v_reg_valid_3 or
	  v_reg_valid_4 or
	  v_reg_valid_5 or
	  v_reg_valid_6 or
	  v_reg_valid_7 or
	  v_reg_valid_8 or
	  v_reg_valid_9 or
	  v_reg_valid_10 or
	  v_reg_valid_11 or
	  v_reg_valid_12 or
	  v_reg_valid_13 or
	  v_reg_valid_14 or
	  v_reg_valid_15 or
	  v_reg_valid_16 or
	  v_reg_valid_17 or
	  v_reg_valid_18 or
	  v_reg_valid_19 or
	  v_reg_valid_20 or
	  v_reg_valid_21 or
	  v_reg_valid_22 or
	  v_reg_valid_23 or
	  v_reg_valid_24 or
	  v_reg_valid_25 or
	  v_reg_valid_26 or
	  v_reg_valid_27 or
	  v_reg_valid_28 or
	  v_reg_valid_29 or
	  v_reg_valid_30 or
	  v_reg_valid_31 or
	  v_reg_valid_32 or
	  v_reg_valid_33 or
	  v_reg_valid_34 or
	  v_reg_valid_35 or
	  v_reg_valid_36 or
	  v_reg_valid_37 or
	  v_reg_valid_38 or
	  v_reg_valid_39 or
	  v_reg_valid_40 or
	  v_reg_valid_41 or
	  v_reg_valid_42 or
	  v_reg_valid_43 or
	  v_reg_valid_44 or
	  v_reg_valid_45 or
	  v_reg_valid_46 or
	  v_reg_valid_47 or
	  v_reg_valid_48 or
	  v_reg_valid_49 or
	  v_reg_valid_50 or
	  v_reg_valid_51 or
	  v_reg_valid_52 or
	  v_reg_valid_53 or
	  v_reg_valid_54 or
	  v_reg_valid_55 or
	  v_reg_valid_56 or
	  v_reg_valid_57 or
	  v_reg_valid_58 or
	  v_reg_valid_59 or
	  v_reg_valid_60 or
	  v_reg_valid_61 or v_reg_valid_62 or v_reg_valid_63)
  begin
    case (m_fillbuffer_mv_release_info[13:8])
      6'd0: valid__h121595 = v_reg_valid_0;
      6'd1: valid__h121595 = v_reg_valid_1;
      6'd2: valid__h121595 = v_reg_valid_2;
      6'd3: valid__h121595 = v_reg_valid_3;
      6'd4: valid__h121595 = v_reg_valid_4;
      6'd5: valid__h121595 = v_reg_valid_5;
      6'd6: valid__h121595 = v_reg_valid_6;
      6'd7: valid__h121595 = v_reg_valid_7;
      6'd8: valid__h121595 = v_reg_valid_8;
      6'd9: valid__h121595 = v_reg_valid_9;
      6'd10: valid__h121595 = v_reg_valid_10;
      6'd11: valid__h121595 = v_reg_valid_11;
      6'd12: valid__h121595 = v_reg_valid_12;
      6'd13: valid__h121595 = v_reg_valid_13;
      6'd14: valid__h121595 = v_reg_valid_14;
      6'd15: valid__h121595 = v_reg_valid_15;
      6'd16: valid__h121595 = v_reg_valid_16;
      6'd17: valid__h121595 = v_reg_valid_17;
      6'd18: valid__h121595 = v_reg_valid_18;
      6'd19: valid__h121595 = v_reg_valid_19;
      6'd20: valid__h121595 = v_reg_valid_20;
      6'd21: valid__h121595 = v_reg_valid_21;
      6'd22: valid__h121595 = v_reg_valid_22;
      6'd23: valid__h121595 = v_reg_valid_23;
      6'd24: valid__h121595 = v_reg_valid_24;
      6'd25: valid__h121595 = v_reg_valid_25;
      6'd26: valid__h121595 = v_reg_valid_26;
      6'd27: valid__h121595 = v_reg_valid_27;
      6'd28: valid__h121595 = v_reg_valid_28;
      6'd29: valid__h121595 = v_reg_valid_29;
      6'd30: valid__h121595 = v_reg_valid_30;
      6'd31: valid__h121595 = v_reg_valid_31;
      6'd32: valid__h121595 = v_reg_valid_32;
      6'd33: valid__h121595 = v_reg_valid_33;
      6'd34: valid__h121595 = v_reg_valid_34;
      6'd35: valid__h121595 = v_reg_valid_35;
      6'd36: valid__h121595 = v_reg_valid_36;
      6'd37: valid__h121595 = v_reg_valid_37;
      6'd38: valid__h121595 = v_reg_valid_38;
      6'd39: valid__h121595 = v_reg_valid_39;
      6'd40: valid__h121595 = v_reg_valid_40;
      6'd41: valid__h121595 = v_reg_valid_41;
      6'd42: valid__h121595 = v_reg_valid_42;
      6'd43: valid__h121595 = v_reg_valid_43;
      6'd44: valid__h121595 = v_reg_valid_44;
      6'd45: valid__h121595 = v_reg_valid_45;
      6'd46: valid__h121595 = v_reg_valid_46;
      6'd47: valid__h121595 = v_reg_valid_47;
      6'd48: valid__h121595 = v_reg_valid_48;
      6'd49: valid__h121595 = v_reg_valid_49;
      6'd50: valid__h121595 = v_reg_valid_50;
      6'd51: valid__h121595 = v_reg_valid_51;
      6'd52: valid__h121595 = v_reg_valid_52;
      6'd53: valid__h121595 = v_reg_valid_53;
      6'd54: valid__h121595 = v_reg_valid_54;
      6'd55: valid__h121595 = v_reg_valid_55;
      6'd56: valid__h121595 = v_reg_valid_56;
      6'd57: valid__h121595 = v_reg_valid_57;
      6'd58: valid__h121595 = v_reg_valid_58;
      6'd59: valid__h121595 = v_reg_valid_59;
      6'd60: valid__h121595 = v_reg_valid_60;
      6'd61: valid__h121595 = v_reg_valid_61;
      6'd62: valid__h121595 = v_reg_valid_62;
      6'd63: valid__h121595 = v_reg_valid_63;
    endcase
  end
  always@(m_iobuffer_mv_io_head or
	  mem_response_data__h138390 or
	  mem_response_data38390_BITS_7_TO_0__q1 or
	  mem_response_data38390_BITS_15_TO_0__q2 or
	  mem_response_data38390_BITS_31_TO_0__q3)
  begin
    case (m_iobuffer_mv_io_head[75:73])
      3'b0:
	  lv_mem_response_data__h138405 =
	      { {56{mem_response_data38390_BITS_7_TO_0__q1[7]}},
		mem_response_data38390_BITS_7_TO_0__q1 };
      3'b001:
	  lv_mem_response_data__h138405 =
	      { {48{mem_response_data38390_BITS_15_TO_0__q2[15]}},
		mem_response_data38390_BITS_15_TO_0__q2 };
      3'b010:
	  lv_mem_response_data__h138405 =
	      { {32{mem_response_data38390_BITS_31_TO_0__q3[31]}},
		mem_response_data38390_BITS_31_TO_0__q3 };
      3'b100:
	  lv_mem_response_data__h138405 =
	      { 56'd0, mem_response_data__h138390[7:0] };
      3'b101:
	  lv_mem_response_data__h138405 =
	      { 48'd0, mem_response_data__h138390[15:0] };
      3'b110:
	  lv_mem_response_data__h138405 =
	      { 32'd0, mem_response_data__h138390[31:0] };
      default: lv_mem_response_data__h138405 = mem_response_data__h138390;
    endcase
  end
  always@(rg_fence_set or
	  v_reg_dirty_0 or
	  v_reg_dirty_1 or
	  v_reg_dirty_2 or
	  v_reg_dirty_3 or
	  v_reg_dirty_4 or
	  v_reg_dirty_5 or
	  v_reg_dirty_6 or
	  v_reg_dirty_7 or
	  v_reg_dirty_8 or
	  v_reg_dirty_9 or
	  v_reg_dirty_10 or
	  v_reg_dirty_11 or
	  v_reg_dirty_12 or
	  v_reg_dirty_13 or
	  v_reg_dirty_14 or
	  v_reg_dirty_15 or
	  v_reg_dirty_16 or
	  v_reg_dirty_17 or
	  v_reg_dirty_18 or
	  v_reg_dirty_19 or
	  v_reg_dirty_20 or
	  v_reg_dirty_21 or
	  v_reg_dirty_22 or
	  v_reg_dirty_23 or
	  v_reg_dirty_24 or
	  v_reg_dirty_25 or
	  v_reg_dirty_26 or
	  v_reg_dirty_27 or
	  v_reg_dirty_28 or
	  v_reg_dirty_29 or
	  v_reg_dirty_30 or
	  v_reg_dirty_31 or
	  v_reg_dirty_32 or
	  v_reg_dirty_33 or
	  v_reg_dirty_34 or
	  v_reg_dirty_35 or
	  v_reg_dirty_36 or
	  v_reg_dirty_37 or
	  v_reg_dirty_38 or
	  v_reg_dirty_39 or
	  v_reg_dirty_40 or
	  v_reg_dirty_41 or
	  v_reg_dirty_42 or
	  v_reg_dirty_43 or
	  v_reg_dirty_44 or
	  v_reg_dirty_45 or
	  v_reg_dirty_46 or
	  v_reg_dirty_47 or
	  v_reg_dirty_48 or
	  v_reg_dirty_49 or
	  v_reg_dirty_50 or
	  v_reg_dirty_51 or
	  v_reg_dirty_52 or
	  v_reg_dirty_53 or
	  v_reg_dirty_54 or
	  v_reg_dirty_55 or
	  v_reg_dirty_56 or
	  v_reg_dirty_57 or
	  v_reg_dirty_58 or
	  v_reg_dirty_59 or
	  v_reg_dirty_60 or
	  v_reg_dirty_61 or v_reg_dirty_62 or v_reg_dirty_63)
  begin
    case (rg_fence_set)
      6'd0: bs__h17345 = v_reg_dirty_0;
      6'd1: bs__h17345 = v_reg_dirty_1;
      6'd2: bs__h17345 = v_reg_dirty_2;
      6'd3: bs__h17345 = v_reg_dirty_3;
      6'd4: bs__h17345 = v_reg_dirty_4;
      6'd5: bs__h17345 = v_reg_dirty_5;
      6'd6: bs__h17345 = v_reg_dirty_6;
      6'd7: bs__h17345 = v_reg_dirty_7;
      6'd8: bs__h17345 = v_reg_dirty_8;
      6'd9: bs__h17345 = v_reg_dirty_9;
      6'd10: bs__h17345 = v_reg_dirty_10;
      6'd11: bs__h17345 = v_reg_dirty_11;
      6'd12: bs__h17345 = v_reg_dirty_12;
      6'd13: bs__h17345 = v_reg_dirty_13;
      6'd14: bs__h17345 = v_reg_dirty_14;
      6'd15: bs__h17345 = v_reg_dirty_15;
      6'd16: bs__h17345 = v_reg_dirty_16;
      6'd17: bs__h17345 = v_reg_dirty_17;
      6'd18: bs__h17345 = v_reg_dirty_18;
      6'd19: bs__h17345 = v_reg_dirty_19;
      6'd20: bs__h17345 = v_reg_dirty_20;
      6'd21: bs__h17345 = v_reg_dirty_21;
      6'd22: bs__h17345 = v_reg_dirty_22;
      6'd23: bs__h17345 = v_reg_dirty_23;
      6'd24: bs__h17345 = v_reg_dirty_24;
      6'd25: bs__h17345 = v_reg_dirty_25;
      6'd26: bs__h17345 = v_reg_dirty_26;
      6'd27: bs__h17345 = v_reg_dirty_27;
      6'd28: bs__h17345 = v_reg_dirty_28;
      6'd29: bs__h17345 = v_reg_dirty_29;
      6'd30: bs__h17345 = v_reg_dirty_30;
      6'd31: bs__h17345 = v_reg_dirty_31;
      6'd32: bs__h17345 = v_reg_dirty_32;
      6'd33: bs__h17345 = v_reg_dirty_33;
      6'd34: bs__h17345 = v_reg_dirty_34;
      6'd35: bs__h17345 = v_reg_dirty_35;
      6'd36: bs__h17345 = v_reg_dirty_36;
      6'd37: bs__h17345 = v_reg_dirty_37;
      6'd38: bs__h17345 = v_reg_dirty_38;
      6'd39: bs__h17345 = v_reg_dirty_39;
      6'd40: bs__h17345 = v_reg_dirty_40;
      6'd41: bs__h17345 = v_reg_dirty_41;
      6'd42: bs__h17345 = v_reg_dirty_42;
      6'd43: bs__h17345 = v_reg_dirty_43;
      6'd44: bs__h17345 = v_reg_dirty_44;
      6'd45: bs__h17345 = v_reg_dirty_45;
      6'd46: bs__h17345 = v_reg_dirty_46;
      6'd47: bs__h17345 = v_reg_dirty_47;
      6'd48: bs__h17345 = v_reg_dirty_48;
      6'd49: bs__h17345 = v_reg_dirty_49;
      6'd50: bs__h17345 = v_reg_dirty_50;
      6'd51: bs__h17345 = v_reg_dirty_51;
      6'd52: bs__h17345 = v_reg_dirty_52;
      6'd53: bs__h17345 = v_reg_dirty_53;
      6'd54: bs__h17345 = v_reg_dirty_54;
      6'd55: bs__h17345 = v_reg_dirty_55;
      6'd56: bs__h17345 = v_reg_dirty_56;
      6'd57: bs__h17345 = v_reg_dirty_57;
      6'd58: bs__h17345 = v_reg_dirty_58;
      6'd59: bs__h17345 = v_reg_dirty_59;
      6'd60: bs__h17345 = v_reg_dirty_60;
      6'd61: bs__h17345 = v_reg_dirty_61;
      6'd62: bs__h17345 = v_reg_dirty_62;
      6'd63: bs__h17345 = v_reg_dirty_63;
    endcase
  end
  always@(rg_fence_set or
	  v_reg_valid_0 or
	  v_reg_valid_1 or
	  v_reg_valid_2 or
	  v_reg_valid_3 or
	  v_reg_valid_4 or
	  v_reg_valid_5 or
	  v_reg_valid_6 or
	  v_reg_valid_7 or
	  v_reg_valid_8 or
	  v_reg_valid_9 or
	  v_reg_valid_10 or
	  v_reg_valid_11 or
	  v_reg_valid_12 or
	  v_reg_valid_13 or
	  v_reg_valid_14 or
	  v_reg_valid_15 or
	  v_reg_valid_16 or
	  v_reg_valid_17 or
	  v_reg_valid_18 or
	  v_reg_valid_19 or
	  v_reg_valid_20 or
	  v_reg_valid_21 or
	  v_reg_valid_22 or
	  v_reg_valid_23 or
	  v_reg_valid_24 or
	  v_reg_valid_25 or
	  v_reg_valid_26 or
	  v_reg_valid_27 or
	  v_reg_valid_28 or
	  v_reg_valid_29 or
	  v_reg_valid_30 or
	  v_reg_valid_31 or
	  v_reg_valid_32 or
	  v_reg_valid_33 or
	  v_reg_valid_34 or
	  v_reg_valid_35 or
	  v_reg_valid_36 or
	  v_reg_valid_37 or
	  v_reg_valid_38 or
	  v_reg_valid_39 or
	  v_reg_valid_40 or
	  v_reg_valid_41 or
	  v_reg_valid_42 or
	  v_reg_valid_43 or
	  v_reg_valid_44 or
	  v_reg_valid_45 or
	  v_reg_valid_46 or
	  v_reg_valid_47 or
	  v_reg_valid_48 or
	  v_reg_valid_49 or
	  v_reg_valid_50 or
	  v_reg_valid_51 or
	  v_reg_valid_52 or
	  v_reg_valid_53 or
	  v_reg_valid_54 or
	  v_reg_valid_55 or
	  v_reg_valid_56 or
	  v_reg_valid_57 or
	  v_reg_valid_58 or
	  v_reg_valid_59 or
	  v_reg_valid_60 or
	  v_reg_valid_61 or v_reg_valid_62 or v_reg_valid_63)
  begin
    case (rg_fence_set)
      6'd0: bs__h19378 = v_reg_valid_0;
      6'd1: bs__h19378 = v_reg_valid_1;
      6'd2: bs__h19378 = v_reg_valid_2;
      6'd3: bs__h19378 = v_reg_valid_3;
      6'd4: bs__h19378 = v_reg_valid_4;
      6'd5: bs__h19378 = v_reg_valid_5;
      6'd6: bs__h19378 = v_reg_valid_6;
      6'd7: bs__h19378 = v_reg_valid_7;
      6'd8: bs__h19378 = v_reg_valid_8;
      6'd9: bs__h19378 = v_reg_valid_9;
      6'd10: bs__h19378 = v_reg_valid_10;
      6'd11: bs__h19378 = v_reg_valid_11;
      6'd12: bs__h19378 = v_reg_valid_12;
      6'd13: bs__h19378 = v_reg_valid_13;
      6'd14: bs__h19378 = v_reg_valid_14;
      6'd15: bs__h19378 = v_reg_valid_15;
      6'd16: bs__h19378 = v_reg_valid_16;
      6'd17: bs__h19378 = v_reg_valid_17;
      6'd18: bs__h19378 = v_reg_valid_18;
      6'd19: bs__h19378 = v_reg_valid_19;
      6'd20: bs__h19378 = v_reg_valid_20;
      6'd21: bs__h19378 = v_reg_valid_21;
      6'd22: bs__h19378 = v_reg_valid_22;
      6'd23: bs__h19378 = v_reg_valid_23;
      6'd24: bs__h19378 = v_reg_valid_24;
      6'd25: bs__h19378 = v_reg_valid_25;
      6'd26: bs__h19378 = v_reg_valid_26;
      6'd27: bs__h19378 = v_reg_valid_27;
      6'd28: bs__h19378 = v_reg_valid_28;
      6'd29: bs__h19378 = v_reg_valid_29;
      6'd30: bs__h19378 = v_reg_valid_30;
      6'd31: bs__h19378 = v_reg_valid_31;
      6'd32: bs__h19378 = v_reg_valid_32;
      6'd33: bs__h19378 = v_reg_valid_33;
      6'd34: bs__h19378 = v_reg_valid_34;
      6'd35: bs__h19378 = v_reg_valid_35;
      6'd36: bs__h19378 = v_reg_valid_36;
      6'd37: bs__h19378 = v_reg_valid_37;
      6'd38: bs__h19378 = v_reg_valid_38;
      6'd39: bs__h19378 = v_reg_valid_39;
      6'd40: bs__h19378 = v_reg_valid_40;
      6'd41: bs__h19378 = v_reg_valid_41;
      6'd42: bs__h19378 = v_reg_valid_42;
      6'd43: bs__h19378 = v_reg_valid_43;
      6'd44: bs__h19378 = v_reg_valid_44;
      6'd45: bs__h19378 = v_reg_valid_45;
      6'd46: bs__h19378 = v_reg_valid_46;
      6'd47: bs__h19378 = v_reg_valid_47;
      6'd48: bs__h19378 = v_reg_valid_48;
      6'd49: bs__h19378 = v_reg_valid_49;
      6'd50: bs__h19378 = v_reg_valid_50;
      6'd51: bs__h19378 = v_reg_valid_51;
      6'd52: bs__h19378 = v_reg_valid_52;
      6'd53: bs__h19378 = v_reg_valid_53;
      6'd54: bs__h19378 = v_reg_valid_54;
      6'd55: bs__h19378 = v_reg_valid_55;
      6'd56: bs__h19378 = v_reg_valid_56;
      6'd57: bs__h19378 = v_reg_valid_57;
      6'd58: bs__h19378 = v_reg_valid_58;
      6'd59: bs__h19378 = v_reg_valid_59;
      6'd60: bs__h19378 = v_reg_valid_60;
      6'd61: bs__h19378 = v_reg_valid_61;
      6'd62: bs__h19378 = v_reg_valid_62;
      6'd63: bs__h19378 = v_reg_valid_63;
    endcase
  end
  always@(m_fillbuffer_mv_release_info or
	  replacement_v_count_0 or
	  replacement_v_count_1 or
	  replacement_v_count_2 or
	  replacement_v_count_3 or
	  replacement_v_count_4 or
	  replacement_v_count_5 or
	  replacement_v_count_6 or
	  replacement_v_count_7 or
	  replacement_v_count_8 or
	  replacement_v_count_9 or
	  replacement_v_count_10 or
	  replacement_v_count_11 or
	  replacement_v_count_12 or
	  replacement_v_count_13 or
	  replacement_v_count_14 or
	  replacement_v_count_15 or
	  replacement_v_count_16 or
	  replacement_v_count_17 or
	  replacement_v_count_18 or
	  replacement_v_count_19 or
	  replacement_v_count_20 or
	  replacement_v_count_21 or
	  replacement_v_count_22 or
	  replacement_v_count_23 or
	  replacement_v_count_24 or
	  replacement_v_count_25 or
	  replacement_v_count_26 or
	  replacement_v_count_27 or
	  replacement_v_count_28 or
	  replacement_v_count_29 or
	  replacement_v_count_30 or
	  replacement_v_count_31 or
	  replacement_v_count_32 or
	  replacement_v_count_33 or
	  replacement_v_count_34 or
	  replacement_v_count_35 or
	  replacement_v_count_36 or
	  replacement_v_count_37 or
	  replacement_v_count_38 or
	  replacement_v_count_39 or
	  replacement_v_count_40 or
	  replacement_v_count_41 or
	  replacement_v_count_42 or
	  replacement_v_count_43 or
	  replacement_v_count_44 or
	  replacement_v_count_45 or
	  replacement_v_count_46 or
	  replacement_v_count_47 or
	  replacement_v_count_48 or
	  replacement_v_count_49 or
	  replacement_v_count_50 or
	  replacement_v_count_51 or
	  replacement_v_count_52 or
	  replacement_v_count_53 or
	  replacement_v_count_54 or
	  replacement_v_count_55 or
	  replacement_v_count_56 or
	  replacement_v_count_57 or
	  replacement_v_count_58 or
	  replacement_v_count_59 or
	  replacement_v_count_60 or
	  replacement_v_count_61 or
	  replacement_v_count_62 or replacement_v_count_63)
  begin
    case (m_fillbuffer_mv_release_info[13:8])
      6'd0:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_0;
      6'd1:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_1;
      6'd2:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_2;
      6'd3:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_3;
      6'd4:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_4;
      6'd5:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_5;
      6'd6:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_6;
      6'd7:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_7;
      6'd8:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_8;
      6'd9:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_9;
      6'd10:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_10;
      6'd11:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_11;
      6'd12:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_12;
      6'd13:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_13;
      6'd14:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_14;
      6'd15:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_15;
      6'd16:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_16;
      6'd17:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_17;
      6'd18:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_18;
      6'd19:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_19;
      6'd20:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_20;
      6'd21:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_21;
      6'd22:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_22;
      6'd23:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_23;
      6'd24:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_24;
      6'd25:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_25;
      6'd26:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_26;
      6'd27:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_27;
      6'd28:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_28;
      6'd29:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_29;
      6'd30:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_30;
      6'd31:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_31;
      6'd32:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_32;
      6'd33:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_33;
      6'd34:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_34;
      6'd35:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_35;
      6'd36:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_36;
      6'd37:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_37;
      6'd38:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_38;
      6'd39:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_39;
      6'd40:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_40;
      6'd41:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_41;
      6'd42:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_42;
      6'd43:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_43;
      6'd44:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_44;
      6'd45:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_45;
      6'd46:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_46;
      6'd47:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_47;
      6'd48:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_48;
      6'd49:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_49;
      6'd50:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_50;
      6'd51:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_51;
      6'd52:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_52;
      6'd53:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_53;
      6'd54:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_54;
      6'd55:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_55;
      6'd56:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_56;
      6'd57:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_57;
      6'd58:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_58;
      6'd59:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_59;
      6'd60:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_60;
      6'd61:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_61;
      6'd62:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_62;
      6'd63:
	  SEL_ARR_replacement_v_count_0_457_replacement__ETC___d1522 =
	      replacement_v_count_63;
    endcase
  end
  always@(m_iobuffer_mv_io_head or
	  op1__h139072 or
	  op2__h139073 or
	  IF_m_iobuffer_mv_io_head__785_BIT_69_852_THEN__ETC___d1874 or
	  IF_m_iobuffer_mv_io_head__785_BIT_69_852_THEN__ETC___d1869)
  begin
    case (m_iobuffer_mv_io_head[68:65])
      4'b0: x_data__h138891 = op1__h139072 + op2__h139073;
      4'b0010: x_data__h138891 = op1__h139072 ^ op2__h139073;
      4'b0011: x_data__h138891 = op2__h139073;
      4'b0100: x_data__h138891 = op1__h139072 | op2__h139073;
      4'b0110: x_data__h138891 = op1__h139072 & op2__h139073;
      4'b1000:
	  x_data__h138891 =
	      IF_m_iobuffer_mv_io_head__785_BIT_69_852_THEN__ETC___d1874 ?
		op1__h139072 :
		op2__h139073;
      4'b1010:
	  x_data__h138891 =
	      IF_m_iobuffer_mv_io_head__785_BIT_69_852_THEN__ETC___d1874 ?
		op2__h139073 :
		op1__h139072;
      4'b1100:
	  x_data__h138891 =
	      IF_m_iobuffer_mv_io_head__785_BIT_69_852_THEN__ETC___d1869 ?
		op1__h139072 :
		op2__h139073;
      4'b1110:
	  x_data__h138891 =
	      IF_m_iobuffer_mv_io_head__785_BIT_69_852_THEN__ETC___d1869 ?
		op2__h139073 :
		op1__h139072;
      default: x_data__h138891 = op1__h139072;
    endcase
  end
  always@(ff_from_tlb_rv_port1__read or
	  v_reg_dirty_0 or
	  v_reg_dirty_1 or
	  v_reg_dirty_2 or
	  v_reg_dirty_3 or
	  v_reg_dirty_4 or
	  v_reg_dirty_5 or
	  v_reg_dirty_6 or
	  v_reg_dirty_7 or
	  v_reg_dirty_8 or
	  v_reg_dirty_9 or
	  v_reg_dirty_10 or
	  v_reg_dirty_11 or
	  v_reg_dirty_12 or
	  v_reg_dirty_13 or
	  v_reg_dirty_14 or
	  v_reg_dirty_15 or
	  v_reg_dirty_16 or
	  v_reg_dirty_17 or
	  v_reg_dirty_18 or
	  v_reg_dirty_19 or
	  v_reg_dirty_20 or
	  v_reg_dirty_21 or
	  v_reg_dirty_22 or
	  v_reg_dirty_23 or
	  v_reg_dirty_24 or
	  v_reg_dirty_25 or
	  v_reg_dirty_26 or
	  v_reg_dirty_27 or
	  v_reg_dirty_28 or
	  v_reg_dirty_29 or
	  v_reg_dirty_30 or
	  v_reg_dirty_31 or
	  v_reg_dirty_32 or
	  v_reg_dirty_33 or
	  v_reg_dirty_34 or
	  v_reg_dirty_35 or
	  v_reg_dirty_36 or
	  v_reg_dirty_37 or
	  v_reg_dirty_38 or
	  v_reg_dirty_39 or
	  v_reg_dirty_40 or
	  v_reg_dirty_41 or
	  v_reg_dirty_42 or
	  v_reg_dirty_43 or
	  v_reg_dirty_44 or
	  v_reg_dirty_45 or
	  v_reg_dirty_46 or
	  v_reg_dirty_47 or
	  v_reg_dirty_48 or
	  v_reg_dirty_49 or
	  v_reg_dirty_50 or
	  v_reg_dirty_51 or
	  v_reg_dirty_52 or
	  v_reg_dirty_53 or
	  v_reg_dirty_54 or
	  v_reg_dirty_55 or
	  v_reg_dirty_56 or
	  v_reg_dirty_57 or
	  v_reg_dirty_58 or
	  v_reg_dirty_59 or
	  v_reg_dirty_60 or
	  v_reg_dirty_61 or v_reg_dirty_62 or v_reg_dirty_63)
  begin
    case (ff_from_tlb_rv_port1__read[84:79])
      6'd0: bs__h112864 = v_reg_dirty_0;
      6'd1: bs__h112864 = v_reg_dirty_1;
      6'd2: bs__h112864 = v_reg_dirty_2;
      6'd3: bs__h112864 = v_reg_dirty_3;
      6'd4: bs__h112864 = v_reg_dirty_4;
      6'd5: bs__h112864 = v_reg_dirty_5;
      6'd6: bs__h112864 = v_reg_dirty_6;
      6'd7: bs__h112864 = v_reg_dirty_7;
      6'd8: bs__h112864 = v_reg_dirty_8;
      6'd9: bs__h112864 = v_reg_dirty_9;
      6'd10: bs__h112864 = v_reg_dirty_10;
      6'd11: bs__h112864 = v_reg_dirty_11;
      6'd12: bs__h112864 = v_reg_dirty_12;
      6'd13: bs__h112864 = v_reg_dirty_13;
      6'd14: bs__h112864 = v_reg_dirty_14;
      6'd15: bs__h112864 = v_reg_dirty_15;
      6'd16: bs__h112864 = v_reg_dirty_16;
      6'd17: bs__h112864 = v_reg_dirty_17;
      6'd18: bs__h112864 = v_reg_dirty_18;
      6'd19: bs__h112864 = v_reg_dirty_19;
      6'd20: bs__h112864 = v_reg_dirty_20;
      6'd21: bs__h112864 = v_reg_dirty_21;
      6'd22: bs__h112864 = v_reg_dirty_22;
      6'd23: bs__h112864 = v_reg_dirty_23;
      6'd24: bs__h112864 = v_reg_dirty_24;
      6'd25: bs__h112864 = v_reg_dirty_25;
      6'd26: bs__h112864 = v_reg_dirty_26;
      6'd27: bs__h112864 = v_reg_dirty_27;
      6'd28: bs__h112864 = v_reg_dirty_28;
      6'd29: bs__h112864 = v_reg_dirty_29;
      6'd30: bs__h112864 = v_reg_dirty_30;
      6'd31: bs__h112864 = v_reg_dirty_31;
      6'd32: bs__h112864 = v_reg_dirty_32;
      6'd33: bs__h112864 = v_reg_dirty_33;
      6'd34: bs__h112864 = v_reg_dirty_34;
      6'd35: bs__h112864 = v_reg_dirty_35;
      6'd36: bs__h112864 = v_reg_dirty_36;
      6'd37: bs__h112864 = v_reg_dirty_37;
      6'd38: bs__h112864 = v_reg_dirty_38;
      6'd39: bs__h112864 = v_reg_dirty_39;
      6'd40: bs__h112864 = v_reg_dirty_40;
      6'd41: bs__h112864 = v_reg_dirty_41;
      6'd42: bs__h112864 = v_reg_dirty_42;
      6'd43: bs__h112864 = v_reg_dirty_43;
      6'd44: bs__h112864 = v_reg_dirty_44;
      6'd45: bs__h112864 = v_reg_dirty_45;
      6'd46: bs__h112864 = v_reg_dirty_46;
      6'd47: bs__h112864 = v_reg_dirty_47;
      6'd48: bs__h112864 = v_reg_dirty_48;
      6'd49: bs__h112864 = v_reg_dirty_49;
      6'd50: bs__h112864 = v_reg_dirty_50;
      6'd51: bs__h112864 = v_reg_dirty_51;
      6'd52: bs__h112864 = v_reg_dirty_52;
      6'd53: bs__h112864 = v_reg_dirty_53;
      6'd54: bs__h112864 = v_reg_dirty_54;
      6'd55: bs__h112864 = v_reg_dirty_55;
      6'd56: bs__h112864 = v_reg_dirty_56;
      6'd57: bs__h112864 = v_reg_dirty_57;
      6'd58: bs__h112864 = v_reg_dirty_58;
      6'd59: bs__h112864 = v_reg_dirty_59;
      6'd60: bs__h112864 = v_reg_dirty_60;
      6'd61: bs__h112864 = v_reg_dirty_61;
      6'd62: bs__h112864 = v_reg_dirty_62;
      6'd63: bs__h112864 = v_reg_dirty_63;
    endcase
  end
  always@(ff_from_tlb_rv_port1__read or
	  v_reg_valid_0 or
	  v_reg_valid_1 or
	  v_reg_valid_2 or
	  v_reg_valid_3 or
	  v_reg_valid_4 or
	  v_reg_valid_5 or
	  v_reg_valid_6 or
	  v_reg_valid_7 or
	  v_reg_valid_8 or
	  v_reg_valid_9 or
	  v_reg_valid_10 or
	  v_reg_valid_11 or
	  v_reg_valid_12 or
	  v_reg_valid_13 or
	  v_reg_valid_14 or
	  v_reg_valid_15 or
	  v_reg_valid_16 or
	  v_reg_valid_17 or
	  v_reg_valid_18 or
	  v_reg_valid_19 or
	  v_reg_valid_20 or
	  v_reg_valid_21 or
	  v_reg_valid_22 or
	  v_reg_valid_23 or
	  v_reg_valid_24 or
	  v_reg_valid_25 or
	  v_reg_valid_26 or
	  v_reg_valid_27 or
	  v_reg_valid_28 or
	  v_reg_valid_29 or
	  v_reg_valid_30 or
	  v_reg_valid_31 or
	  v_reg_valid_32 or
	  v_reg_valid_33 or
	  v_reg_valid_34 or
	  v_reg_valid_35 or
	  v_reg_valid_36 or
	  v_reg_valid_37 or
	  v_reg_valid_38 or
	  v_reg_valid_39 or
	  v_reg_valid_40 or
	  v_reg_valid_41 or
	  v_reg_valid_42 or
	  v_reg_valid_43 or
	  v_reg_valid_44 or
	  v_reg_valid_45 or
	  v_reg_valid_46 or
	  v_reg_valid_47 or
	  v_reg_valid_48 or
	  v_reg_valid_49 or
	  v_reg_valid_50 or
	  v_reg_valid_51 or
	  v_reg_valid_52 or
	  v_reg_valid_53 or
	  v_reg_valid_54 or
	  v_reg_valid_55 or
	  v_reg_valid_56 or
	  v_reg_valid_57 or
	  v_reg_valid_58 or
	  v_reg_valid_59 or
	  v_reg_valid_60 or
	  v_reg_valid_61 or v_reg_valid_62 or v_reg_valid_63)
  begin
    case (ff_from_tlb_rv_port1__read[84:79])
      6'd0:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_0;
      6'd1:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_1;
      6'd2:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_2;
      6'd3:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_3;
      6'd4:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_4;
      6'd5:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_5;
      6'd6:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_6;
      6'd7:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_7;
      6'd8:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_8;
      6'd9:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_9;
      6'd10:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_10;
      6'd11:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_11;
      6'd12:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_12;
      6'd13:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_13;
      6'd14:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_14;
      6'd15:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_15;
      6'd16:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_16;
      6'd17:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_17;
      6'd18:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_18;
      6'd19:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_19;
      6'd20:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_20;
      6'd21:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_21;
      6'd22:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_22;
      6'd23:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_23;
      6'd24:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_24;
      6'd25:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_25;
      6'd26:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_26;
      6'd27:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_27;
      6'd28:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_28;
      6'd29:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_29;
      6'd30:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_30;
      6'd31:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_31;
      6'd32:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_32;
      6'd33:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_33;
      6'd34:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_34;
      6'd35:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_35;
      6'd36:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_36;
      6'd37:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_37;
      6'd38:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_38;
      6'd39:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_39;
      6'd40:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_40;
      6'd41:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_41;
      6'd42:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_42;
      6'd43:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_43;
      6'd44:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_44;
      6'd45:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_45;
      6'd46:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_46;
      6'd47:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_47;
      6'd48:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_48;
      6'd49:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_49;
      6'd50:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_50;
      6'd51:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_51;
      6'd52:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_52;
      6'd53:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_53;
      6'd54:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_54;
      6'd55:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_55;
      6'd56:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_56;
      6'd57:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_57;
      6'd58:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_58;
      6'd59:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_59;
      6'd60:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_60;
      6'd61:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_61;
      6'd62:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_62;
      6'd63:
	  SEL_ARR_v_reg_valid_0_02_v_reg_valid_1_03_v_re_ETC___d234 =
	      v_reg_valid_63;
    endcase
  end
  always@(ff_core_request_D_OUT or x__h104510)
  begin
    case (ff_core_request_D_OUT[71:70])
      2'b0: lv_sign__h37978 = x__h104510[7];
      2'b01: lv_sign__h37978 = x__h104510[15];
      default: lv_sign__h37978 = x__h104510[31];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ff_core_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      132'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_from_tlb_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      105'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_hold_request_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      141'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_mem_rd_resp_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_mem_wr_resp_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'bx /* unspecified value */  };
	ff_ptw_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      132'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	replacement_v_count_0 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_1 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_10 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_11 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_12 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_13 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_14 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_15 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_16 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_17 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_18 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_19 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_2 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_20 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_21 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_22 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_23 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_24 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_25 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_26 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_27 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_28 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_29 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_3 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_30 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_31 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_32 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_33 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_34 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_35 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_36 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_37 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_38 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_39 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_4 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_40 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_41 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_42 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_43 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_44 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_45 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_46 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_47 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_48 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_49 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_5 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_50 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_51 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_52 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_53 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_54 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_55 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_56 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_57 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_58 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_59 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_6 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_60 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_61 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_62 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_63 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_7 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_8 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_9 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	rg_atomic_rd_data <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_core_io_response <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      132'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	rg_fence_pending <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_fence_set <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_fence_stall <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_fence_way <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_globaldirty <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_handling_miss <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_io_atomic_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_io_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_performing_replay <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_polling_mode <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_recent_req <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_release_readphase <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_reservation_address <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	rg_wEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_reg_dirty_0 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_10 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_11 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_12 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_13 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_14 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_15 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_16 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_17 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_18 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_19 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_2 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_20 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_21 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_22 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_23 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_24 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_25 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_26 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_27 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_28 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_29 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_3 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_30 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_31 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_32 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_33 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_34 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_35 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_36 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_37 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_38 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_39 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_4 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_40 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_41 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_42 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_43 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_44 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_45 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_46 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_47 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_48 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_49 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_5 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_50 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_51 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_52 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_53 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_54 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_55 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_56 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_57 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_58 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_59 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_6 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_60 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_61 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_62 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_63 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_7 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_8 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_9 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_0 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_10 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_11 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_12 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_13 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_14 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_15 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_16 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_17 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_18 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_19 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_2 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_20 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_21 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_22 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_23 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_24 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_25 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_26 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_27 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_28 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_29 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_3 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_30 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_31 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_32 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_33 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_34 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_35 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_36 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_37 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_38 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_39 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_4 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_40 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_41 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_42 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_43 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_44 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_45 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_46 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_47 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_48 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_49 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_5 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_50 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_51 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_52 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_53 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_54 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_55 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_56 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_57 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_58 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_59 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_6 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_60 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_61 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_62 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_63 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_7 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_8 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_9 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (ff_core_response_rv_EN)
	  ff_core_response_rv <= `BSV_ASSIGNMENT_DELAY
	      ff_core_response_rv_D_IN;
	if (ff_from_tlb_rv_EN)
	  ff_from_tlb_rv <= `BSV_ASSIGNMENT_DELAY ff_from_tlb_rv_D_IN;
	if (ff_hold_request_rv_EN)
	  ff_hold_request_rv <= `BSV_ASSIGNMENT_DELAY ff_hold_request_rv_D_IN;
	if (ff_mem_rd_resp_rv_EN)
	  ff_mem_rd_resp_rv <= `BSV_ASSIGNMENT_DELAY ff_mem_rd_resp_rv_D_IN;
	if (ff_mem_wr_resp_rv_EN)
	  ff_mem_wr_resp_rv <= `BSV_ASSIGNMENT_DELAY ff_mem_wr_resp_rv_D_IN;
	if (ff_ptw_response_rv_EN)
	  ff_ptw_response_rv <= `BSV_ASSIGNMENT_DELAY ff_ptw_response_rv_D_IN;
	if (replacement_v_count_0_EN)
	  replacement_v_count_0 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_0_D_IN;
	if (replacement_v_count_1_EN)
	  replacement_v_count_1 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_1_D_IN;
	if (replacement_v_count_10_EN)
	  replacement_v_count_10 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_10_D_IN;
	if (replacement_v_count_11_EN)
	  replacement_v_count_11 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_11_D_IN;
	if (replacement_v_count_12_EN)
	  replacement_v_count_12 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_12_D_IN;
	if (replacement_v_count_13_EN)
	  replacement_v_count_13 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_13_D_IN;
	if (replacement_v_count_14_EN)
	  replacement_v_count_14 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_14_D_IN;
	if (replacement_v_count_15_EN)
	  replacement_v_count_15 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_15_D_IN;
	if (replacement_v_count_16_EN)
	  replacement_v_count_16 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_16_D_IN;
	if (replacement_v_count_17_EN)
	  replacement_v_count_17 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_17_D_IN;
	if (replacement_v_count_18_EN)
	  replacement_v_count_18 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_18_D_IN;
	if (replacement_v_count_19_EN)
	  replacement_v_count_19 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_19_D_IN;
	if (replacement_v_count_2_EN)
	  replacement_v_count_2 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_2_D_IN;
	if (replacement_v_count_20_EN)
	  replacement_v_count_20 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_20_D_IN;
	if (replacement_v_count_21_EN)
	  replacement_v_count_21 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_21_D_IN;
	if (replacement_v_count_22_EN)
	  replacement_v_count_22 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_22_D_IN;
	if (replacement_v_count_23_EN)
	  replacement_v_count_23 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_23_D_IN;
	if (replacement_v_count_24_EN)
	  replacement_v_count_24 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_24_D_IN;
	if (replacement_v_count_25_EN)
	  replacement_v_count_25 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_25_D_IN;
	if (replacement_v_count_26_EN)
	  replacement_v_count_26 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_26_D_IN;
	if (replacement_v_count_27_EN)
	  replacement_v_count_27 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_27_D_IN;
	if (replacement_v_count_28_EN)
	  replacement_v_count_28 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_28_D_IN;
	if (replacement_v_count_29_EN)
	  replacement_v_count_29 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_29_D_IN;
	if (replacement_v_count_3_EN)
	  replacement_v_count_3 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_3_D_IN;
	if (replacement_v_count_30_EN)
	  replacement_v_count_30 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_30_D_IN;
	if (replacement_v_count_31_EN)
	  replacement_v_count_31 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_31_D_IN;
	if (replacement_v_count_32_EN)
	  replacement_v_count_32 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_32_D_IN;
	if (replacement_v_count_33_EN)
	  replacement_v_count_33 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_33_D_IN;
	if (replacement_v_count_34_EN)
	  replacement_v_count_34 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_34_D_IN;
	if (replacement_v_count_35_EN)
	  replacement_v_count_35 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_35_D_IN;
	if (replacement_v_count_36_EN)
	  replacement_v_count_36 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_36_D_IN;
	if (replacement_v_count_37_EN)
	  replacement_v_count_37 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_37_D_IN;
	if (replacement_v_count_38_EN)
	  replacement_v_count_38 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_38_D_IN;
	if (replacement_v_count_39_EN)
	  replacement_v_count_39 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_39_D_IN;
	if (replacement_v_count_4_EN)
	  replacement_v_count_4 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_4_D_IN;
	if (replacement_v_count_40_EN)
	  replacement_v_count_40 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_40_D_IN;
	if (replacement_v_count_41_EN)
	  replacement_v_count_41 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_41_D_IN;
	if (replacement_v_count_42_EN)
	  replacement_v_count_42 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_42_D_IN;
	if (replacement_v_count_43_EN)
	  replacement_v_count_43 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_43_D_IN;
	if (replacement_v_count_44_EN)
	  replacement_v_count_44 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_44_D_IN;
	if (replacement_v_count_45_EN)
	  replacement_v_count_45 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_45_D_IN;
	if (replacement_v_count_46_EN)
	  replacement_v_count_46 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_46_D_IN;
	if (replacement_v_count_47_EN)
	  replacement_v_count_47 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_47_D_IN;
	if (replacement_v_count_48_EN)
	  replacement_v_count_48 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_48_D_IN;
	if (replacement_v_count_49_EN)
	  replacement_v_count_49 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_49_D_IN;
	if (replacement_v_count_5_EN)
	  replacement_v_count_5 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_5_D_IN;
	if (replacement_v_count_50_EN)
	  replacement_v_count_50 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_50_D_IN;
	if (replacement_v_count_51_EN)
	  replacement_v_count_51 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_51_D_IN;
	if (replacement_v_count_52_EN)
	  replacement_v_count_52 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_52_D_IN;
	if (replacement_v_count_53_EN)
	  replacement_v_count_53 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_53_D_IN;
	if (replacement_v_count_54_EN)
	  replacement_v_count_54 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_54_D_IN;
	if (replacement_v_count_55_EN)
	  replacement_v_count_55 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_55_D_IN;
	if (replacement_v_count_56_EN)
	  replacement_v_count_56 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_56_D_IN;
	if (replacement_v_count_57_EN)
	  replacement_v_count_57 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_57_D_IN;
	if (replacement_v_count_58_EN)
	  replacement_v_count_58 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_58_D_IN;
	if (replacement_v_count_59_EN)
	  replacement_v_count_59 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_59_D_IN;
	if (replacement_v_count_6_EN)
	  replacement_v_count_6 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_6_D_IN;
	if (replacement_v_count_60_EN)
	  replacement_v_count_60 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_60_D_IN;
	if (replacement_v_count_61_EN)
	  replacement_v_count_61 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_61_D_IN;
	if (replacement_v_count_62_EN)
	  replacement_v_count_62 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_62_D_IN;
	if (replacement_v_count_63_EN)
	  replacement_v_count_63 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_63_D_IN;
	if (replacement_v_count_7_EN)
	  replacement_v_count_7 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_7_D_IN;
	if (replacement_v_count_8_EN)
	  replacement_v_count_8 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_8_D_IN;
	if (replacement_v_count_9_EN)
	  replacement_v_count_9 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_9_D_IN;
	if (rg_atomic_rd_data_EN)
	  rg_atomic_rd_data <= `BSV_ASSIGNMENT_DELAY rg_atomic_rd_data_D_IN;
	if (rg_core_io_response_EN)
	  rg_core_io_response <= `BSV_ASSIGNMENT_DELAY
	      rg_core_io_response_D_IN;
	if (rg_fence_pending_EN)
	  rg_fence_pending <= `BSV_ASSIGNMENT_DELAY rg_fence_pending_D_IN;
	if (rg_fence_set_EN)
	  rg_fence_set <= `BSV_ASSIGNMENT_DELAY rg_fence_set_D_IN;
	if (rg_fence_stall_EN)
	  rg_fence_stall <= `BSV_ASSIGNMENT_DELAY rg_fence_stall_D_IN;
	if (rg_fence_way_EN)
	  rg_fence_way <= `BSV_ASSIGNMENT_DELAY rg_fence_way_D_IN;
	if (rg_globaldirty_EN)
	  rg_globaldirty <= `BSV_ASSIGNMENT_DELAY rg_globaldirty_D_IN;
	if (rg_handling_miss_EN)
	  rg_handling_miss <= `BSV_ASSIGNMENT_DELAY rg_handling_miss_D_IN;
	if (rg_io_atomic_done_EN)
	  rg_io_atomic_done <= `BSV_ASSIGNMENT_DELAY rg_io_atomic_done_D_IN;
	if (rg_io_busy_EN)
	  rg_io_busy <= `BSV_ASSIGNMENT_DELAY rg_io_busy_D_IN;
	if (rg_performing_replay_EN)
	  rg_performing_replay <= `BSV_ASSIGNMENT_DELAY
	      rg_performing_replay_D_IN;
	if (rg_polling_mode_EN)
	  rg_polling_mode <= `BSV_ASSIGNMENT_DELAY rg_polling_mode_D_IN;
	if (rg_recent_req_EN)
	  rg_recent_req <= `BSV_ASSIGNMENT_DELAY rg_recent_req_D_IN;
	if (rg_release_readphase_EN)
	  rg_release_readphase <= `BSV_ASSIGNMENT_DELAY
	      rg_release_readphase_D_IN;
	if (rg_reservation_address_EN)
	  rg_reservation_address <= `BSV_ASSIGNMENT_DELAY
	      rg_reservation_address_D_IN;
	if (rg_wEpoch_EN) rg_wEpoch <= `BSV_ASSIGNMENT_DELAY rg_wEpoch_D_IN;
	if (v_reg_dirty_0_EN)
	  v_reg_dirty_0 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_0_D_IN;
	if (v_reg_dirty_1_EN)
	  v_reg_dirty_1 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_1_D_IN;
	if (v_reg_dirty_10_EN)
	  v_reg_dirty_10 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_10_D_IN;
	if (v_reg_dirty_11_EN)
	  v_reg_dirty_11 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_11_D_IN;
	if (v_reg_dirty_12_EN)
	  v_reg_dirty_12 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_12_D_IN;
	if (v_reg_dirty_13_EN)
	  v_reg_dirty_13 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_13_D_IN;
	if (v_reg_dirty_14_EN)
	  v_reg_dirty_14 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_14_D_IN;
	if (v_reg_dirty_15_EN)
	  v_reg_dirty_15 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_15_D_IN;
	if (v_reg_dirty_16_EN)
	  v_reg_dirty_16 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_16_D_IN;
	if (v_reg_dirty_17_EN)
	  v_reg_dirty_17 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_17_D_IN;
	if (v_reg_dirty_18_EN)
	  v_reg_dirty_18 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_18_D_IN;
	if (v_reg_dirty_19_EN)
	  v_reg_dirty_19 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_19_D_IN;
	if (v_reg_dirty_2_EN)
	  v_reg_dirty_2 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_2_D_IN;
	if (v_reg_dirty_20_EN)
	  v_reg_dirty_20 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_20_D_IN;
	if (v_reg_dirty_21_EN)
	  v_reg_dirty_21 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_21_D_IN;
	if (v_reg_dirty_22_EN)
	  v_reg_dirty_22 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_22_D_IN;
	if (v_reg_dirty_23_EN)
	  v_reg_dirty_23 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_23_D_IN;
	if (v_reg_dirty_24_EN)
	  v_reg_dirty_24 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_24_D_IN;
	if (v_reg_dirty_25_EN)
	  v_reg_dirty_25 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_25_D_IN;
	if (v_reg_dirty_26_EN)
	  v_reg_dirty_26 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_26_D_IN;
	if (v_reg_dirty_27_EN)
	  v_reg_dirty_27 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_27_D_IN;
	if (v_reg_dirty_28_EN)
	  v_reg_dirty_28 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_28_D_IN;
	if (v_reg_dirty_29_EN)
	  v_reg_dirty_29 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_29_D_IN;
	if (v_reg_dirty_3_EN)
	  v_reg_dirty_3 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_3_D_IN;
	if (v_reg_dirty_30_EN)
	  v_reg_dirty_30 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_30_D_IN;
	if (v_reg_dirty_31_EN)
	  v_reg_dirty_31 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_31_D_IN;
	if (v_reg_dirty_32_EN)
	  v_reg_dirty_32 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_32_D_IN;
	if (v_reg_dirty_33_EN)
	  v_reg_dirty_33 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_33_D_IN;
	if (v_reg_dirty_34_EN)
	  v_reg_dirty_34 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_34_D_IN;
	if (v_reg_dirty_35_EN)
	  v_reg_dirty_35 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_35_D_IN;
	if (v_reg_dirty_36_EN)
	  v_reg_dirty_36 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_36_D_IN;
	if (v_reg_dirty_37_EN)
	  v_reg_dirty_37 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_37_D_IN;
	if (v_reg_dirty_38_EN)
	  v_reg_dirty_38 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_38_D_IN;
	if (v_reg_dirty_39_EN)
	  v_reg_dirty_39 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_39_D_IN;
	if (v_reg_dirty_4_EN)
	  v_reg_dirty_4 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_4_D_IN;
	if (v_reg_dirty_40_EN)
	  v_reg_dirty_40 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_40_D_IN;
	if (v_reg_dirty_41_EN)
	  v_reg_dirty_41 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_41_D_IN;
	if (v_reg_dirty_42_EN)
	  v_reg_dirty_42 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_42_D_IN;
	if (v_reg_dirty_43_EN)
	  v_reg_dirty_43 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_43_D_IN;
	if (v_reg_dirty_44_EN)
	  v_reg_dirty_44 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_44_D_IN;
	if (v_reg_dirty_45_EN)
	  v_reg_dirty_45 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_45_D_IN;
	if (v_reg_dirty_46_EN)
	  v_reg_dirty_46 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_46_D_IN;
	if (v_reg_dirty_47_EN)
	  v_reg_dirty_47 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_47_D_IN;
	if (v_reg_dirty_48_EN)
	  v_reg_dirty_48 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_48_D_IN;
	if (v_reg_dirty_49_EN)
	  v_reg_dirty_49 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_49_D_IN;
	if (v_reg_dirty_5_EN)
	  v_reg_dirty_5 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_5_D_IN;
	if (v_reg_dirty_50_EN)
	  v_reg_dirty_50 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_50_D_IN;
	if (v_reg_dirty_51_EN)
	  v_reg_dirty_51 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_51_D_IN;
	if (v_reg_dirty_52_EN)
	  v_reg_dirty_52 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_52_D_IN;
	if (v_reg_dirty_53_EN)
	  v_reg_dirty_53 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_53_D_IN;
	if (v_reg_dirty_54_EN)
	  v_reg_dirty_54 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_54_D_IN;
	if (v_reg_dirty_55_EN)
	  v_reg_dirty_55 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_55_D_IN;
	if (v_reg_dirty_56_EN)
	  v_reg_dirty_56 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_56_D_IN;
	if (v_reg_dirty_57_EN)
	  v_reg_dirty_57 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_57_D_IN;
	if (v_reg_dirty_58_EN)
	  v_reg_dirty_58 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_58_D_IN;
	if (v_reg_dirty_59_EN)
	  v_reg_dirty_59 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_59_D_IN;
	if (v_reg_dirty_6_EN)
	  v_reg_dirty_6 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_6_D_IN;
	if (v_reg_dirty_60_EN)
	  v_reg_dirty_60 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_60_D_IN;
	if (v_reg_dirty_61_EN)
	  v_reg_dirty_61 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_61_D_IN;
	if (v_reg_dirty_62_EN)
	  v_reg_dirty_62 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_62_D_IN;
	if (v_reg_dirty_63_EN)
	  v_reg_dirty_63 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_63_D_IN;
	if (v_reg_dirty_7_EN)
	  v_reg_dirty_7 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_7_D_IN;
	if (v_reg_dirty_8_EN)
	  v_reg_dirty_8 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_8_D_IN;
	if (v_reg_dirty_9_EN)
	  v_reg_dirty_9 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_9_D_IN;
	if (v_reg_valid_0_EN)
	  v_reg_valid_0 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_0_D_IN;
	if (v_reg_valid_1_EN)
	  v_reg_valid_1 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_1_D_IN;
	if (v_reg_valid_10_EN)
	  v_reg_valid_10 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_10_D_IN;
	if (v_reg_valid_11_EN)
	  v_reg_valid_11 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_11_D_IN;
	if (v_reg_valid_12_EN)
	  v_reg_valid_12 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_12_D_IN;
	if (v_reg_valid_13_EN)
	  v_reg_valid_13 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_13_D_IN;
	if (v_reg_valid_14_EN)
	  v_reg_valid_14 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_14_D_IN;
	if (v_reg_valid_15_EN)
	  v_reg_valid_15 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_15_D_IN;
	if (v_reg_valid_16_EN)
	  v_reg_valid_16 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_16_D_IN;
	if (v_reg_valid_17_EN)
	  v_reg_valid_17 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_17_D_IN;
	if (v_reg_valid_18_EN)
	  v_reg_valid_18 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_18_D_IN;
	if (v_reg_valid_19_EN)
	  v_reg_valid_19 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_19_D_IN;
	if (v_reg_valid_2_EN)
	  v_reg_valid_2 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_2_D_IN;
	if (v_reg_valid_20_EN)
	  v_reg_valid_20 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_20_D_IN;
	if (v_reg_valid_21_EN)
	  v_reg_valid_21 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_21_D_IN;
	if (v_reg_valid_22_EN)
	  v_reg_valid_22 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_22_D_IN;
	if (v_reg_valid_23_EN)
	  v_reg_valid_23 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_23_D_IN;
	if (v_reg_valid_24_EN)
	  v_reg_valid_24 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_24_D_IN;
	if (v_reg_valid_25_EN)
	  v_reg_valid_25 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_25_D_IN;
	if (v_reg_valid_26_EN)
	  v_reg_valid_26 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_26_D_IN;
	if (v_reg_valid_27_EN)
	  v_reg_valid_27 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_27_D_IN;
	if (v_reg_valid_28_EN)
	  v_reg_valid_28 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_28_D_IN;
	if (v_reg_valid_29_EN)
	  v_reg_valid_29 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_29_D_IN;
	if (v_reg_valid_3_EN)
	  v_reg_valid_3 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_3_D_IN;
	if (v_reg_valid_30_EN)
	  v_reg_valid_30 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_30_D_IN;
	if (v_reg_valid_31_EN)
	  v_reg_valid_31 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_31_D_IN;
	if (v_reg_valid_32_EN)
	  v_reg_valid_32 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_32_D_IN;
	if (v_reg_valid_33_EN)
	  v_reg_valid_33 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_33_D_IN;
	if (v_reg_valid_34_EN)
	  v_reg_valid_34 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_34_D_IN;
	if (v_reg_valid_35_EN)
	  v_reg_valid_35 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_35_D_IN;
	if (v_reg_valid_36_EN)
	  v_reg_valid_36 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_36_D_IN;
	if (v_reg_valid_37_EN)
	  v_reg_valid_37 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_37_D_IN;
	if (v_reg_valid_38_EN)
	  v_reg_valid_38 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_38_D_IN;
	if (v_reg_valid_39_EN)
	  v_reg_valid_39 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_39_D_IN;
	if (v_reg_valid_4_EN)
	  v_reg_valid_4 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_4_D_IN;
	if (v_reg_valid_40_EN)
	  v_reg_valid_40 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_40_D_IN;
	if (v_reg_valid_41_EN)
	  v_reg_valid_41 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_41_D_IN;
	if (v_reg_valid_42_EN)
	  v_reg_valid_42 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_42_D_IN;
	if (v_reg_valid_43_EN)
	  v_reg_valid_43 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_43_D_IN;
	if (v_reg_valid_44_EN)
	  v_reg_valid_44 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_44_D_IN;
	if (v_reg_valid_45_EN)
	  v_reg_valid_45 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_45_D_IN;
	if (v_reg_valid_46_EN)
	  v_reg_valid_46 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_46_D_IN;
	if (v_reg_valid_47_EN)
	  v_reg_valid_47 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_47_D_IN;
	if (v_reg_valid_48_EN)
	  v_reg_valid_48 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_48_D_IN;
	if (v_reg_valid_49_EN)
	  v_reg_valid_49 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_49_D_IN;
	if (v_reg_valid_5_EN)
	  v_reg_valid_5 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_5_D_IN;
	if (v_reg_valid_50_EN)
	  v_reg_valid_50 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_50_D_IN;
	if (v_reg_valid_51_EN)
	  v_reg_valid_51 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_51_D_IN;
	if (v_reg_valid_52_EN)
	  v_reg_valid_52 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_52_D_IN;
	if (v_reg_valid_53_EN)
	  v_reg_valid_53 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_53_D_IN;
	if (v_reg_valid_54_EN)
	  v_reg_valid_54 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_54_D_IN;
	if (v_reg_valid_55_EN)
	  v_reg_valid_55 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_55_D_IN;
	if (v_reg_valid_56_EN)
	  v_reg_valid_56 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_56_D_IN;
	if (v_reg_valid_57_EN)
	  v_reg_valid_57 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_57_D_IN;
	if (v_reg_valid_58_EN)
	  v_reg_valid_58 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_58_D_IN;
	if (v_reg_valid_59_EN)
	  v_reg_valid_59 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_59_D_IN;
	if (v_reg_valid_6_EN)
	  v_reg_valid_6 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_6_D_IN;
	if (v_reg_valid_60_EN)
	  v_reg_valid_60 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_60_D_IN;
	if (v_reg_valid_61_EN)
	  v_reg_valid_61 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_61_D_IN;
	if (v_reg_valid_62_EN)
	  v_reg_valid_62 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_62_D_IN;
	if (v_reg_valid_63_EN)
	  v_reg_valid_63 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_63_D_IN;
	if (v_reg_valid_7_EN)
	  v_reg_valid_7 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_7_D_IN;
	if (v_reg_valid_8_EN)
	  v_reg_valid_8 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_8_D_IN;
	if (v_reg_valid_9_EN)
	  v_reg_valid_9 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_9_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ff_core_response_rv = 133'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ff_from_tlb_rv = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    ff_hold_request_rv = 142'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ff_mem_rd_resp_rv = 67'h2AAAAAAAAAAAAAAAA;
    ff_mem_wr_resp_rv = 2'h2;
    ff_ptw_response_rv = 133'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    replacement_v_count_0 = 2'h2;
    replacement_v_count_1 = 2'h2;
    replacement_v_count_10 = 2'h2;
    replacement_v_count_11 = 2'h2;
    replacement_v_count_12 = 2'h2;
    replacement_v_count_13 = 2'h2;
    replacement_v_count_14 = 2'h2;
    replacement_v_count_15 = 2'h2;
    replacement_v_count_16 = 2'h2;
    replacement_v_count_17 = 2'h2;
    replacement_v_count_18 = 2'h2;
    replacement_v_count_19 = 2'h2;
    replacement_v_count_2 = 2'h2;
    replacement_v_count_20 = 2'h2;
    replacement_v_count_21 = 2'h2;
    replacement_v_count_22 = 2'h2;
    replacement_v_count_23 = 2'h2;
    replacement_v_count_24 = 2'h2;
    replacement_v_count_25 = 2'h2;
    replacement_v_count_26 = 2'h2;
    replacement_v_count_27 = 2'h2;
    replacement_v_count_28 = 2'h2;
    replacement_v_count_29 = 2'h2;
    replacement_v_count_3 = 2'h2;
    replacement_v_count_30 = 2'h2;
    replacement_v_count_31 = 2'h2;
    replacement_v_count_32 = 2'h2;
    replacement_v_count_33 = 2'h2;
    replacement_v_count_34 = 2'h2;
    replacement_v_count_35 = 2'h2;
    replacement_v_count_36 = 2'h2;
    replacement_v_count_37 = 2'h2;
    replacement_v_count_38 = 2'h2;
    replacement_v_count_39 = 2'h2;
    replacement_v_count_4 = 2'h2;
    replacement_v_count_40 = 2'h2;
    replacement_v_count_41 = 2'h2;
    replacement_v_count_42 = 2'h2;
    replacement_v_count_43 = 2'h2;
    replacement_v_count_44 = 2'h2;
    replacement_v_count_45 = 2'h2;
    replacement_v_count_46 = 2'h2;
    replacement_v_count_47 = 2'h2;
    replacement_v_count_48 = 2'h2;
    replacement_v_count_49 = 2'h2;
    replacement_v_count_5 = 2'h2;
    replacement_v_count_50 = 2'h2;
    replacement_v_count_51 = 2'h2;
    replacement_v_count_52 = 2'h2;
    replacement_v_count_53 = 2'h2;
    replacement_v_count_54 = 2'h2;
    replacement_v_count_55 = 2'h2;
    replacement_v_count_56 = 2'h2;
    replacement_v_count_57 = 2'h2;
    replacement_v_count_58 = 2'h2;
    replacement_v_count_59 = 2'h2;
    replacement_v_count_6 = 2'h2;
    replacement_v_count_60 = 2'h2;
    replacement_v_count_61 = 2'h2;
    replacement_v_count_62 = 2'h2;
    replacement_v_count_63 = 2'h2;
    replacement_v_count_7 = 2'h2;
    replacement_v_count_8 = 2'h2;
    replacement_v_count_9 = 2'h2;
    rg_atomic_rd_data = 64'hAAAAAAAAAAAAAAAA;
    rg_core_io_response = 133'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_fence_pending = 1'h0;
    rg_fence_set = 6'h2A;
    rg_fence_stall = 1'h0;
    rg_fence_way = 2'h2;
    rg_globaldirty = 1'h0;
    rg_handling_miss = 1'h0;
    rg_io_atomic_done = 1'h0;
    rg_io_busy = 1'h0;
    rg_performing_replay = 1'h0;
    rg_polling_mode = 1'h0;
    rg_recent_req = 6'h2A;
    rg_release_readphase = 1'h0;
    rg_reservation_address = 65'h0AAAAAAAAAAAAAAAA;
    rg_wEpoch = 1'h0;
    v_reg_dirty_0 = 4'hA;
    v_reg_dirty_1 = 4'hA;
    v_reg_dirty_10 = 4'hA;
    v_reg_dirty_11 = 4'hA;
    v_reg_dirty_12 = 4'hA;
    v_reg_dirty_13 = 4'hA;
    v_reg_dirty_14 = 4'hA;
    v_reg_dirty_15 = 4'hA;
    v_reg_dirty_16 = 4'hA;
    v_reg_dirty_17 = 4'hA;
    v_reg_dirty_18 = 4'hA;
    v_reg_dirty_19 = 4'hA;
    v_reg_dirty_2 = 4'hA;
    v_reg_dirty_20 = 4'hA;
    v_reg_dirty_21 = 4'hA;
    v_reg_dirty_22 = 4'hA;
    v_reg_dirty_23 = 4'hA;
    v_reg_dirty_24 = 4'hA;
    v_reg_dirty_25 = 4'hA;
    v_reg_dirty_26 = 4'hA;
    v_reg_dirty_27 = 4'hA;
    v_reg_dirty_28 = 4'hA;
    v_reg_dirty_29 = 4'hA;
    v_reg_dirty_3 = 4'hA;
    v_reg_dirty_30 = 4'hA;
    v_reg_dirty_31 = 4'hA;
    v_reg_dirty_32 = 4'hA;
    v_reg_dirty_33 = 4'hA;
    v_reg_dirty_34 = 4'hA;
    v_reg_dirty_35 = 4'hA;
    v_reg_dirty_36 = 4'hA;
    v_reg_dirty_37 = 4'hA;
    v_reg_dirty_38 = 4'hA;
    v_reg_dirty_39 = 4'hA;
    v_reg_dirty_4 = 4'hA;
    v_reg_dirty_40 = 4'hA;
    v_reg_dirty_41 = 4'hA;
    v_reg_dirty_42 = 4'hA;
    v_reg_dirty_43 = 4'hA;
    v_reg_dirty_44 = 4'hA;
    v_reg_dirty_45 = 4'hA;
    v_reg_dirty_46 = 4'hA;
    v_reg_dirty_47 = 4'hA;
    v_reg_dirty_48 = 4'hA;
    v_reg_dirty_49 = 4'hA;
    v_reg_dirty_5 = 4'hA;
    v_reg_dirty_50 = 4'hA;
    v_reg_dirty_51 = 4'hA;
    v_reg_dirty_52 = 4'hA;
    v_reg_dirty_53 = 4'hA;
    v_reg_dirty_54 = 4'hA;
    v_reg_dirty_55 = 4'hA;
    v_reg_dirty_56 = 4'hA;
    v_reg_dirty_57 = 4'hA;
    v_reg_dirty_58 = 4'hA;
    v_reg_dirty_59 = 4'hA;
    v_reg_dirty_6 = 4'hA;
    v_reg_dirty_60 = 4'hA;
    v_reg_dirty_61 = 4'hA;
    v_reg_dirty_62 = 4'hA;
    v_reg_dirty_63 = 4'hA;
    v_reg_dirty_7 = 4'hA;
    v_reg_dirty_8 = 4'hA;
    v_reg_dirty_9 = 4'hA;
    v_reg_valid_0 = 4'hA;
    v_reg_valid_1 = 4'hA;
    v_reg_valid_10 = 4'hA;
    v_reg_valid_11 = 4'hA;
    v_reg_valid_12 = 4'hA;
    v_reg_valid_13 = 4'hA;
    v_reg_valid_14 = 4'hA;
    v_reg_valid_15 = 4'hA;
    v_reg_valid_16 = 4'hA;
    v_reg_valid_17 = 4'hA;
    v_reg_valid_18 = 4'hA;
    v_reg_valid_19 = 4'hA;
    v_reg_valid_2 = 4'hA;
    v_reg_valid_20 = 4'hA;
    v_reg_valid_21 = 4'hA;
    v_reg_valid_22 = 4'hA;
    v_reg_valid_23 = 4'hA;
    v_reg_valid_24 = 4'hA;
    v_reg_valid_25 = 4'hA;
    v_reg_valid_26 = 4'hA;
    v_reg_valid_27 = 4'hA;
    v_reg_valid_28 = 4'hA;
    v_reg_valid_29 = 4'hA;
    v_reg_valid_3 = 4'hA;
    v_reg_valid_30 = 4'hA;
    v_reg_valid_31 = 4'hA;
    v_reg_valid_32 = 4'hA;
    v_reg_valid_33 = 4'hA;
    v_reg_valid_34 = 4'hA;
    v_reg_valid_35 = 4'hA;
    v_reg_valid_36 = 4'hA;
    v_reg_valid_37 = 4'hA;
    v_reg_valid_38 = 4'hA;
    v_reg_valid_39 = 4'hA;
    v_reg_valid_4 = 4'hA;
    v_reg_valid_40 = 4'hA;
    v_reg_valid_41 = 4'hA;
    v_reg_valid_42 = 4'hA;
    v_reg_valid_43 = 4'hA;
    v_reg_valid_44 = 4'hA;
    v_reg_valid_45 = 4'hA;
    v_reg_valid_46 = 4'hA;
    v_reg_valid_47 = 4'hA;
    v_reg_valid_48 = 4'hA;
    v_reg_valid_49 = 4'hA;
    v_reg_valid_5 = 4'hA;
    v_reg_valid_50 = 4'hA;
    v_reg_valid_51 = 4'hA;
    v_reg_valid_52 = 4'hA;
    v_reg_valid_53 = 4'hA;
    v_reg_valid_54 = 4'hA;
    v_reg_valid_55 = 4'hA;
    v_reg_valid_56 = 4'hA;
    v_reg_valid_57 = 4'hA;
    v_reg_valid_58 = 4'hA;
    v_reg_valid_59 = 4'hA;
    v_reg_valid_6 = 4'hA;
    v_reg_valid_60 = 4'hA;
    v_reg_valid_61 = 4'hA;
    v_reg_valid_62 = 4'hA;
    v_reg_valid_63 = 4'hA;
    v_reg_valid_7 = 4'hA;
    v_reg_valid_8 = 4'hA;
    v_reg_valid_9 = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_store && !m_storebuffer_mv_sb_head_valid)
	$display("Dynamic assertion failed: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 1269, column 52\nSB Commit to invalid Entry");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_store && !m_storebuffer_mv_sb_head_valid)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_0_CONCAT_m_tag_mv_tagmatch_resp_ff_from_tl_ETC___d295)
	$display("Dynamic assertion failed: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 727, column 48\nDCACHE: More than one way is a hit in the cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_0_CONCAT_m_tag_mv_tagmatch_resp_ff_from_tl_ETC___d295)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  WILL_FIRE_RL_rl_release_from_fillbuffer)
	$display("Error: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 240, column 53: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_ram_check] and\n  [RL_rl_release_from_fillbuffer] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io && m_iobuffer_mv_io_head_valid)
	$display("Dynamic assertion failed: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 1284, column 50\nIO Head is already ready to commit.");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_commit_io && m_iobuffer_mv_io_head_valid) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && !wr_fault_whas &&
	  x__h37055 + y__h37056 != 2'd1)
	$display("Dynamic assertion failed: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 820, column 51\nMore than one data structure shows a hit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && !wr_fault_whas &&
	  x__h37055 + y__h37056 != 2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240 &&
	  _ma_perform_release_RL_rl_release_from_fillbuffer_EN_m_fillbuffer_wget)
	$display("Error: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 790, column 10: (R0002)\n  Conflict-free rules RL_rl_response_to_core and RL_rl_release_from_fillbuffer\n  called conflicting methods mav_allocate_line and ma_perform_release of\n  module instance m_fillbuffer.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  WILL_FIRE_RL_rl_send_memory_request &&
	  NOT_IF_ff_core_request_first__5_BITS_74_TO_73__ETC___d1240)
	$display("Error: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 790, column 10: (R0002)\n  Conflict-free rules RL_rl_response_to_core and RL_rl_send_memory_request\n  called conflicting methods mav_allocate_line and mav_allocate_line of module\n  instance m_fillbuffer.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  WILL_FIRE_RL_rl_send_memory_request &&
	  IF_wr_fb_state_whas__66_THEN_wr_fb_state_wget__ETC___d368 == 2'd1 &&
	  !wr_fault_whas &&
	  (ff_core_request_D_OUT[74:73] == 2'd2 ||
	   ff_core_request_D_OUT[74:73] == 2'd1 ||
	   ff_core_request_D_OUT[74:73] == 2'd0))
	$display("Error: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 790, column 10: (R0002)\n  Conflict-free rules RL_rl_response_to_core and RL_rl_send_memory_request\n  called conflicting methods read and write of module instance\n  rg_handling_miss.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_response && WILL_FIRE_RL_rl_response_to_core &&
	  ff_mem_io_resp_EMPTY_N &&
	  ff_mem_io_request_FULL_N &&
	  m_iobuffer_RDY_mv_io_head &&
	  rg_io_busy &&
	  NOT_ff_from_tlb_rv_port1__read__02_BIT_64_54_5_ETC___d422)
	$display("Error: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 1180, column 10: (R0002)\n  Conflict-free rules RL_rl_io_response and RL_rl_response_to_core called\n  conflicting methods port0__read and port0__write of module instance\n  ff_ptw_response_rv.\n");
  end
  // synopsys translate_on
endmodule  // mkdcache

