//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
//
// On Tue Jul 29 14:27:56 +04 2025
//
//
// Ports:
// Name                         I/O  size props
// RDY_put_core_request_put       O     1
// get_core_response_get          O    40 reg
// RDY_get_core_response_get      O     1 reg
// get_request_to_ptw_get         O    68 reg
// RDY_get_request_to_ptw_get     O     1 reg
// RDY_put_response_frm_ptw_put   O     1
// RDY_ma_satp_from_csr           O     1 const
// RDY_ma_curr_priv               O     1 const
// mv_perf_counters               O     1
// RDY_mv_perf_counters           O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_core_request_put           I    65
// put_response_frm_ptw_put       I   174
// ma_satp_from_csr_s             I    64
// ma_curr_priv_c                 I     2
// EN_put_core_request_put        I     1
// EN_put_response_frm_ptw_put    I     1
// EN_ma_satp_from_csr            I     1
// EN_ma_curr_priv                I     1
// EN_get_core_response_get       I     1
// EN_get_request_to_ptw_get      I     1
//
// Combinational paths from inputs to outputs:
//   (put_core_request_put,
//    ma_satp_from_csr_s,
//    ma_curr_priv_c,
//    EN_put_core_request_put,
//    EN_ma_satp_from_csr,
//    EN_ma_curr_priv) -> mv_perf_counters
//   (EN_ma_satp_from_csr, EN_ma_curr_priv) -> RDY_put_core_request_put
//   EN_ma_satp_from_csr -> RDY_put_response_frm_ptw_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfa_itlb(CLK,
		 RST_N,

		 put_core_request_put,
		 EN_put_core_request_put,
		 RDY_put_core_request_put,

		 EN_get_core_response_get,
		 get_core_response_get,
		 RDY_get_core_response_get,

		 EN_get_request_to_ptw_get,
		 get_request_to_ptw_get,
		 RDY_get_request_to_ptw_get,

		 put_response_frm_ptw_put,
		 EN_put_response_frm_ptw_put,
		 RDY_put_response_frm_ptw_put,

		 ma_satp_from_csr_s,
		 EN_ma_satp_from_csr,
		 RDY_ma_satp_from_csr,

		 ma_curr_priv_c,
		 EN_ma_curr_priv,
		 RDY_ma_curr_priv,

		 mv_perf_counters,
		 RDY_mv_perf_counters);
  parameter [31 : 0] hartid = 32'b0;
  input  CLK;
  input  RST_N;

  // action method put_core_request_put
  input  [64 : 0] put_core_request_put;
  input  EN_put_core_request_put;
  output RDY_put_core_request_put;

  // actionvalue method get_core_response_get
  input  EN_get_core_response_get;
  output [39 : 0] get_core_response_get;
  output RDY_get_core_response_get;

  // actionvalue method get_request_to_ptw_get
  input  EN_get_request_to_ptw_get;
  output [67 : 0] get_request_to_ptw_get;
  output RDY_get_request_to_ptw_get;

  // action method put_response_frm_ptw_put
  input  [173 : 0] put_response_frm_ptw_put;
  input  EN_put_response_frm_ptw_put;
  output RDY_put_response_frm_ptw_put;

  // action method ma_satp_from_csr
  input  [63 : 0] ma_satp_from_csr_s;
  input  EN_ma_satp_from_csr;
  output RDY_ma_satp_from_csr;

  // action method ma_curr_priv
  input  [1 : 0] ma_curr_priv_c;
  input  EN_ma_curr_priv;
  output RDY_ma_curr_priv;

  // value method mv_perf_counters
  output mv_perf_counters;
  output RDY_mv_perf_counters;

  // signals for module outputs
  wire [67 : 0] get_request_to_ptw_get;
  wire [39 : 0] get_core_response_get;
  wire RDY_get_core_response_get,
       RDY_get_request_to_ptw_get,
       RDY_ma_curr_priv,
       RDY_ma_satp_from_csr,
       RDY_mv_perf_counters,
       RDY_put_core_request_put,
       RDY_put_response_frm_ptw_put,
       mv_perf_counters;

  // register rg_miss_queue
  reg [63 : 0] rg_miss_queue;
  wire [63 : 0] rg_miss_queue_D_IN;
  wire rg_miss_queue_EN;

  // register rg_replace
  reg [1 : 0] rg_replace;
  wire [1 : 0] rg_replace_D_IN;
  wire rg_replace_EN;

  // register rg_sfence
  reg rg_sfence;
  wire rg_sfence_D_IN, rg_sfence_EN;

  // register rg_tlb_miss
  reg rg_tlb_miss;
  wire rg_tlb_miss_D_IN, rg_tlb_miss_EN;

  // register v_vpn_tag_0
  reg [112 : 0] v_vpn_tag_0;
  wire [112 : 0] v_vpn_tag_0_D_IN;
  wire v_vpn_tag_0_EN;

  // register v_vpn_tag_1
  reg [112 : 0] v_vpn_tag_1;
  wire [112 : 0] v_vpn_tag_1_D_IN;
  wire v_vpn_tag_1_EN;

  // register v_vpn_tag_2
  reg [112 : 0] v_vpn_tag_2;
  wire [112 : 0] v_vpn_tag_2_D_IN;
  wire v_vpn_tag_2_EN;

  // register v_vpn_tag_3
  reg [112 : 0] v_vpn_tag_3;
  wire [112 : 0] v_vpn_tag_3_D_IN;
  wire v_vpn_tag_3_EN;

  // ports of submodule ff_core_respone
  wire [39 : 0] ff_core_respone_D_IN, ff_core_respone_D_OUT;
  wire ff_core_respone_CLR,
       ff_core_respone_DEQ,
       ff_core_respone_EMPTY_N,
       ff_core_respone_ENQ,
       ff_core_respone_FULL_N;

  // ports of submodule ff_request_to_ptw
  wire [67 : 0] ff_request_to_ptw_D_IN, ff_request_to_ptw_D_OUT;
  wire ff_request_to_ptw_CLR,
       ff_request_to_ptw_DEQ,
       ff_request_to_ptw_EMPTY_N,
       ff_request_to_ptw_ENQ,
       ff_request_to_ptw_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_fence,
       CAN_FIRE_get_core_response_get,
       CAN_FIRE_get_request_to_ptw_get,
       CAN_FIRE_ma_curr_priv,
       CAN_FIRE_ma_satp_from_csr,
       CAN_FIRE_put_core_request_put,
       CAN_FIRE_put_response_frm_ptw_put,
       WILL_FIRE_RL_rl_fence,
       WILL_FIRE_get_core_response_get,
       WILL_FIRE_get_request_to_ptw_get,
       WILL_FIRE_ma_curr_priv,
       WILL_FIRE_ma_satp_from_csr,
       WILL_FIRE_put_core_request_put,
       WILL_FIRE_put_response_frm_ptw_put;

  // inputs to muxes for submodule ports
  wire [112 : 0] MUX_v_vpn_tag_0_write_1__VAL_1;
  wire [39 : 0] MUX_ff_core_respone_enq_1__VAL_1,
		MUX_ff_core_respone_enq_1__VAL_2;
  wire [1 : 0] MUX_rg_replace_write_1__VAL_1;
  wire MUX_ff_core_respone_enq_1__SEL_1,
       MUX_rg_replace_write_1__SEL_1,
       MUX_rg_sfence_write_1__SEL_1,
       MUX_rg_tlb_miss_write_1__SEL_1,
       MUX_v_vpn_tag_0_write_1__SEL_1,
       MUX_v_vpn_tag_1_write_1__SEL_1,
       MUX_v_vpn_tag_2_write_1__SEL_1,
       MUX_v_vpn_tag_3_write_1__SEL_1;

  // remaining internal signals
  wire [43 : 0] IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d103,
		x__h3240;
  wire [31 : 0] x_address__h3232, x_address__h3936;
  wire [26 : 0] tag_vpn__h4210;
  wire [17 : 0] IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d107,
		lower_pa__h3049,
		lower_pa__h3917,
		mask__h3046,
		mask__h3914,
		x__h3256,
		x__h3268,
		x__h3981,
		x__h4017,
		y__h3257,
		y__h3982;
  wire [9 : 0] _9_MUL_0_CONCAT_put_response_frm_ptw_put_BITS_9_ETC___d195;
  wire IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d126,
       IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d137,
       IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d148,
       IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d151,
       IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d153,
       IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d156,
       IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d164,
       IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d165,
       IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d88,
       IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d89,
       IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d90,
       NOT_put_core_request_put_BIT_0_AND_IF_wr_satp__ETC___d92,
       NOT_put_core_request_put_BIT_0_AND_NOT_IF_wr_s_ETC___d180,
       NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d178,
       NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d32,
       NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d50,
       NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d68,
       _511_CONCAT_v_vpn_tag_1_3_BITS_61_TO_44_6_7_AND_ETC___d40,
       _511_CONCAT_v_vpn_tag_2_1_BITS_61_TO_44_4_5_AND_ETC___d58,
       _511_CONCAT_v_vpn_tag_3_9_BITS_61_TO_44_1_2_AND_ETC___d75,
       v_vpn_tag_1_3_BITS_77_TO_62_3_EQ_IF_wr_satp_wh_ETC___d44,
       v_vpn_tag_2_1_BITS_77_TO_62_1_EQ_IF_wr_satp_wh_ETC___d62,
       v_vpn_tag_3_9_BITS_77_TO_62_7_EQ_IF_wr_satp_wh_ETC___d78;

  // action method put_core_request_put
  assign RDY_put_core_request_put =
	     !rg_sfence && !rg_tlb_miss && EN_ma_satp_from_csr &&
	     EN_ma_curr_priv &&
	     ff_core_respone_FULL_N &&
	     ff_request_to_ptw_FULL_N ;
  assign CAN_FIRE_put_core_request_put = RDY_put_core_request_put ;
  assign WILL_FIRE_put_core_request_put = EN_put_core_request_put ;

  // actionvalue method get_core_response_get
  assign get_core_response_get = ff_core_respone_D_OUT ;
  assign RDY_get_core_response_get = ff_core_respone_EMPTY_N ;
  assign CAN_FIRE_get_core_response_get = ff_core_respone_EMPTY_N ;
  assign WILL_FIRE_get_core_response_get = EN_get_core_response_get ;

  // actionvalue method get_request_to_ptw_get
  assign get_request_to_ptw_get = ff_request_to_ptw_D_OUT ;
  assign RDY_get_request_to_ptw_get = ff_request_to_ptw_EMPTY_N ;
  assign CAN_FIRE_get_request_to_ptw_get = ff_request_to_ptw_EMPTY_N ;
  assign WILL_FIRE_get_request_to_ptw_get = EN_get_request_to_ptw_get ;

  // action method put_response_frm_ptw_put
  assign RDY_put_response_frm_ptw_put =
	     rg_tlb_miss && !rg_sfence && ff_core_respone_FULL_N &&
	     EN_ma_satp_from_csr ;
  assign CAN_FIRE_put_response_frm_ptw_put =
	     rg_tlb_miss && !rg_sfence && ff_core_respone_FULL_N &&
	     EN_ma_satp_from_csr ;
  assign WILL_FIRE_put_response_frm_ptw_put = EN_put_response_frm_ptw_put ;

  // action method ma_satp_from_csr
  assign RDY_ma_satp_from_csr = 1'd1 ;
  assign CAN_FIRE_ma_satp_from_csr = 1'd1 ;
  assign WILL_FIRE_ma_satp_from_csr = EN_ma_satp_from_csr ;

  // action method ma_curr_priv
  assign RDY_ma_curr_priv = 1'd1 ;
  assign CAN_FIRE_ma_curr_priv = 1'd1 ;
  assign WILL_FIRE_ma_curr_priv = EN_ma_curr_priv ;

  // value method mv_perf_counters
  assign mv_perf_counters = MUX_rg_tlb_miss_write_1__SEL_1 ;
  assign RDY_mv_perf_counters = 1'd1 ;

  // submodule ff_core_respone
  FIFO2 #(.width(32'd40), .guarded(1'd1)) ff_core_respone(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(ff_core_respone_D_IN),
							  .ENQ(ff_core_respone_ENQ),
							  .DEQ(ff_core_respone_DEQ),
							  .CLR(ff_core_respone_CLR),
							  .D_OUT(ff_core_respone_D_OUT),
							  .FULL_N(ff_core_respone_FULL_N),
							  .EMPTY_N(ff_core_respone_EMPTY_N));

  // submodule ff_request_to_ptw
  FIFO2 #(.width(32'd68), .guarded(1'd1)) ff_request_to_ptw(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ff_request_to_ptw_D_IN),
							    .ENQ(ff_request_to_ptw_ENQ),
							    .DEQ(ff_request_to_ptw_DEQ),
							    .CLR(ff_request_to_ptw_CLR),
							    .D_OUT(ff_request_to_ptw_D_OUT),
							    .FULL_N(ff_request_to_ptw_FULL_N),
							    .EMPTY_N(ff_request_to_ptw_EMPTY_N));

  // rule RL_rl_fence
  assign CAN_FIRE_RL_rl_fence = rg_sfence ;
  assign WILL_FIRE_RL_rl_fence = rg_sfence ;

  // inputs to muxes for submodule ports
  assign MUX_ff_core_respone_enq_1__SEL_1 =
	     EN_put_core_request_put &&
	     NOT_put_core_request_put_BIT_0_AND_IF_wr_satp__ETC___d92 ;
  assign MUX_rg_replace_write_1__SEL_1 =
	     EN_put_response_frm_ptw_put && !put_response_frm_ptw_put[7] ;
  assign MUX_rg_sfence_write_1__SEL_1 =
	     EN_put_core_request_put && put_core_request_put[0] ;
  assign MUX_rg_tlb_miss_write_1__SEL_1 =
	     EN_put_core_request_put &&
	     NOT_put_core_request_put_BIT_0_AND_NOT_IF_wr_s_ETC___d180 ;
  assign MUX_v_vpn_tag_0_write_1__SEL_1 =
	     EN_put_response_frm_ptw_put && rg_replace == 2'd0 &&
	     !put_response_frm_ptw_put[7] ;
  assign MUX_v_vpn_tag_1_write_1__SEL_1 =
	     EN_put_response_frm_ptw_put && rg_replace == 2'd1 &&
	     !put_response_frm_ptw_put[7] ;
  assign MUX_v_vpn_tag_2_write_1__SEL_1 =
	     EN_put_response_frm_ptw_put && rg_replace == 2'd2 &&
	     !put_response_frm_ptw_put[7] ;
  assign MUX_v_vpn_tag_3_write_1__SEL_1 =
	     EN_put_response_frm_ptw_put && rg_replace == 2'd3 &&
	     !put_response_frm_ptw_put[7] ;
  assign MUX_ff_core_respone_enq_1__VAL_1 =
	     (ma_satp_from_csr_s[63:60] == 4'd0 || ma_curr_priv_c == 2'd3) ?
	       { put_core_request_put[32:1],
		 put_core_request_put[64:33] != 32'd0,
		 7'd1 } :
	       { x_address__h3232,
		 IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d165,
		 7'd12 } ;
  assign MUX_ff_core_respone_enq_1__VAL_2 =
	     { x_address__h3936, put_response_frm_ptw_put[7:0] } ;
  assign MUX_rg_replace_write_1__VAL_1 = rg_replace + 2'd1 ;
  assign MUX_v_vpn_tag_0_write_1__VAL_1 =
	     { put_response_frm_ptw_put[127:120],
	       tag_vpn__h4210,
	       ma_satp_from_csr_s[59:44],
	       mask__h3914,
	       put_response_frm_ptw_put[173:130] } ;

  // register rg_miss_queue
  assign rg_miss_queue_D_IN = put_core_request_put[64:1] ;
  assign rg_miss_queue_EN = MUX_rg_tlb_miss_write_1__SEL_1 ;

  // register rg_replace
  assign rg_replace_D_IN =
	     MUX_rg_replace_write_1__SEL_1 ?
	       MUX_rg_replace_write_1__VAL_1 :
	       2'd0 ;
  assign rg_replace_EN =
	     EN_put_response_frm_ptw_put && !put_response_frm_ptw_put[7] ||
	     rg_sfence ;

  // register rg_sfence
  assign rg_sfence_D_IN = MUX_rg_sfence_write_1__SEL_1 ;
  assign rg_sfence_EN =
	     EN_put_core_request_put && put_core_request_put[0] || rg_sfence ;

  // register rg_tlb_miss
  assign rg_tlb_miss_D_IN = MUX_rg_tlb_miss_write_1__SEL_1 ;
  assign rg_tlb_miss_EN =
	     EN_put_core_request_put &&
	     NOT_put_core_request_put_BIT_0_AND_NOT_IF_wr_s_ETC___d180 ||
	     rg_sfence ||
	     EN_put_response_frm_ptw_put ;

  // register v_vpn_tag_0
  assign v_vpn_tag_0_D_IN =
	     MUX_v_vpn_tag_0_write_1__SEL_1 ?
	       MUX_v_vpn_tag_0_write_1__VAL_1 :
	       113'd0 ;
  assign v_vpn_tag_0_EN =
	     EN_put_response_frm_ptw_put && rg_replace == 2'd0 &&
	     !put_response_frm_ptw_put[7] ||
	     rg_sfence ;

  // register v_vpn_tag_1
  assign v_vpn_tag_1_D_IN =
	     MUX_v_vpn_tag_1_write_1__SEL_1 ?
	       MUX_v_vpn_tag_0_write_1__VAL_1 :
	       113'd0 ;
  assign v_vpn_tag_1_EN =
	     EN_put_response_frm_ptw_put && rg_replace == 2'd1 &&
	     !put_response_frm_ptw_put[7] ||
	     rg_sfence ;

  // register v_vpn_tag_2
  assign v_vpn_tag_2_D_IN =
	     MUX_v_vpn_tag_2_write_1__SEL_1 ?
	       MUX_v_vpn_tag_0_write_1__VAL_1 :
	       113'd0 ;
  assign v_vpn_tag_2_EN =
	     EN_put_response_frm_ptw_put && rg_replace == 2'd2 &&
	     !put_response_frm_ptw_put[7] ||
	     rg_sfence ;

  // register v_vpn_tag_3
  assign v_vpn_tag_3_D_IN =
	     MUX_v_vpn_tag_3_write_1__SEL_1 ?
	       MUX_v_vpn_tag_0_write_1__VAL_1 :
	       113'd0 ;
  assign v_vpn_tag_3_EN =
	     EN_put_response_frm_ptw_put && rg_replace == 2'd3 &&
	     !put_response_frm_ptw_put[7] ||
	     rg_sfence ;

  // submodule ff_core_respone
  assign ff_core_respone_D_IN =
	     MUX_ff_core_respone_enq_1__SEL_1 ?
	       MUX_ff_core_respone_enq_1__VAL_1 :
	       MUX_ff_core_respone_enq_1__VAL_2 ;
  assign ff_core_respone_ENQ =
	     EN_put_core_request_put &&
	     NOT_put_core_request_put_BIT_0_AND_IF_wr_satp__ETC___d92 ||
	     EN_put_response_frm_ptw_put ;
  assign ff_core_respone_DEQ = EN_get_core_response_get ;
  assign ff_core_respone_CLR = 1'b0 ;

  // submodule ff_request_to_ptw
  assign ff_request_to_ptw_D_IN =
	     { put_core_request_put[64:1],
	       2'd3,
	       2'bxx /* unspecified value */  } ;
  assign ff_request_to_ptw_ENQ = MUX_rg_tlb_miss_write_1__SEL_1 ;
  assign ff_request_to_ptw_DEQ = EN_get_request_to_ptw_get ;
  assign ff_request_to_ptw_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d103 =
	     NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d50 ?
	       v_vpn_tag_2[43:0] :
	       (NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d32 ?
		  v_vpn_tag_1[43:0] :
		  v_vpn_tag_0[43:0]) ;
  assign IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d107 =
	     NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d50 ?
	       v_vpn_tag_2[61:44] :
	       (NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d32 ?
		  v_vpn_tag_1[61:44] :
		  v_vpn_tag_0[61:44]) ;
  assign IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d126 =
	     NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d50 ?
	       !v_vpn_tag_2[108] :
	       (NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d32 ?
		  !v_vpn_tag_1[108] :
		  !v_vpn_tag_0[108]) ;
  assign IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d137 =
	     NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d50 ?
	       !v_vpn_tag_2[111] :
	       (NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d32 ?
		  !v_vpn_tag_1[111] :
		  !v_vpn_tag_0[111]) ;
  assign IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d148 =
	     NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d50 ?
	       !v_vpn_tag_2[109] :
	       (NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d32 ?
		  !v_vpn_tag_1[109] :
		  !v_vpn_tag_0[109]) ;
  assign IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d151 =
	     (NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d68 ?
		!v_vpn_tag_3[109] :
		IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d148) &&
	     ma_curr_priv_c == 2'd0 ;
  assign IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d153 =
	     NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d50 ?
	       v_vpn_tag_2[109] :
	       (NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d32 ?
		  v_vpn_tag_1[109] :
		  v_vpn_tag_0[109]) ;
  assign IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d156 =
	     (NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d68 ?
		v_vpn_tag_3[109] :
		IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d153) &&
	     ma_curr_priv_c == 2'd1 ;
  assign IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d164 =
	     (NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d68 ?
		!v_vpn_tag_3[111] :
		IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d137) ||
	     IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d151 ||
	     IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d156 ||
	     put_core_request_put[64:40] != {25{put_core_request_put[39]}} ;
  assign IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d165 =
	     (NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d68 ?
		!v_vpn_tag_3[108] :
		IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d126) ||
	     IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d164 ;
  assign IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d88 =
	     NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d32 ?
	       v_vpn_tag_1[105] &&
	       _511_CONCAT_v_vpn_tag_1_3_BITS_61_TO_44_6_7_AND_ETC___d40 &&
	       (v_vpn_tag_1_3_BITS_77_TO_62_3_EQ_IF_wr_satp_wh_ETC___d44 ||
		v_vpn_tag_1[110]) :
	       v_vpn_tag_0[105] ;
  assign IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d89 =
	     NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d50 ?
	       v_vpn_tag_2[105] &&
	       _511_CONCAT_v_vpn_tag_2_1_BITS_61_TO_44_4_5_AND_ETC___d58 &&
	       (v_vpn_tag_2_1_BITS_77_TO_62_1_EQ_IF_wr_satp_wh_ETC___d62 ||
		v_vpn_tag_2[110]) :
	       IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d88 ;
  assign IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d90 =
	     NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d68 ?
	       v_vpn_tag_3[105] &&
	       _511_CONCAT_v_vpn_tag_3_9_BITS_61_TO_44_1_2_AND_ETC___d75 &&
	       (v_vpn_tag_3_9_BITS_77_TO_62_7_EQ_IF_wr_satp_wh_ETC___d78 ||
		v_vpn_tag_3[110]) :
	       IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d89 ;
  assign NOT_put_core_request_put_BIT_0_AND_IF_wr_satp__ETC___d92 =
	     !put_core_request_put[0] &&
	     (ma_satp_from_csr_s[63:60] == 4'd0 || ma_curr_priv_c == 2'd3 ||
	      IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d90) ;
  assign NOT_put_core_request_put_BIT_0_AND_NOT_IF_wr_s_ETC___d180 =
	     !put_core_request_put[0] && ma_satp_from_csr_s[63:60] != 4'd0 &&
	     ma_curr_priv_c != 2'd3 &&
	     NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d178 ;
  assign NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d178 =
	     NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d68 &&
	     (!v_vpn_tag_3[105] ||
	      !_511_CONCAT_v_vpn_tag_3_9_BITS_61_TO_44_1_2_AND_ETC___d75 ||
	      !v_vpn_tag_3_9_BITS_77_TO_62_7_EQ_IF_wr_satp_wh_ETC___d78 &&
	      !v_vpn_tag_3[110]) ;
  assign NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d32 =
	     !v_vpn_tag_0[105] ||
	     ({ 9'd511, v_vpn_tag_0[61:44] } & put_core_request_put[39:13]) !=
	     v_vpn_tag_0[104:78] ||
	     v_vpn_tag_0[77:62] != ma_satp_from_csr_s[59:44] &&
	     !v_vpn_tag_0[110] ;
  assign NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d50 =
	     NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d32 &&
	     (!v_vpn_tag_1[105] ||
	      !_511_CONCAT_v_vpn_tag_1_3_BITS_61_TO_44_6_7_AND_ETC___d40 ||
	      !v_vpn_tag_1_3_BITS_77_TO_62_3_EQ_IF_wr_satp_wh_ETC___d44 &&
	      !v_vpn_tag_1[110]) ;
  assign NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d68 =
	     NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d50 &&
	     (!v_vpn_tag_2[105] ||
	      !_511_CONCAT_v_vpn_tag_2_1_BITS_61_TO_44_4_5_AND_ETC___d58 ||
	      !v_vpn_tag_2_1_BITS_77_TO_62_1_EQ_IF_wr_satp_wh_ETC___d62 &&
	      !v_vpn_tag_2[110]) ;
  assign _511_CONCAT_v_vpn_tag_1_3_BITS_61_TO_44_6_7_AND_ETC___d40 =
	     ({ 9'd511, v_vpn_tag_1[61:44] } & put_core_request_put[39:13]) ==
	     v_vpn_tag_1[104:78] ;
  assign _511_CONCAT_v_vpn_tag_2_1_BITS_61_TO_44_4_5_AND_ETC___d58 =
	     ({ 9'd511, v_vpn_tag_2[61:44] } & put_core_request_put[39:13]) ==
	     v_vpn_tag_2[104:78] ;
  assign _511_CONCAT_v_vpn_tag_3_9_BITS_61_TO_44_1_2_AND_ETC___d75 =
	     ({ 9'd511, v_vpn_tag_3[61:44] } & put_core_request_put[39:13]) ==
	     v_vpn_tag_3[104:78] ;
  assign _9_MUL_0_CONCAT_put_response_frm_ptw_put_BITS_9_ETC___d195 =
	     5'd9 * { 3'd0, put_response_frm_ptw_put[9:8] } ;
  assign lower_pa__h3049 = x__h3256 | y__h3257 ;
  assign lower_pa__h3917 = x__h3981 | y__h3982 ;
  assign mask__h3046 =
	     NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d68 ?
	       v_vpn_tag_3[61:44] :
	       IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d107 ;
  assign mask__h3914 =
	     18'd262143 <<
	     _9_MUL_0_CONCAT_put_response_frm_ptw_put_BITS_9_ETC___d195[4:0] ;
  assign tag_vpn__h4210 = { 9'd511, mask__h3914 } & rg_miss_queue[38:12] ;
  assign v_vpn_tag_1_3_BITS_77_TO_62_3_EQ_IF_wr_satp_wh_ETC___d44 =
	     v_vpn_tag_1[77:62] == ma_satp_from_csr_s[59:44] ;
  assign v_vpn_tag_2_1_BITS_77_TO_62_1_EQ_IF_wr_satp_wh_ETC___d62 =
	     v_vpn_tag_2[77:62] == ma_satp_from_csr_s[59:44] ;
  assign v_vpn_tag_3_9_BITS_77_TO_62_7_EQ_IF_wr_satp_wh_ETC___d78 =
	     v_vpn_tag_3[77:62] == ma_satp_from_csr_s[59:44] ;
  assign x__h3240 =
	     NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CONCA_ETC___d68 ?
	       v_vpn_tag_3[43:0] :
	       IF_NOT_v_vpn_tag_0_4_BIT_105_5_6_OR_NOT_511_CO_ETC___d103 ;
  assign x__h3256 = mask__h3046 & x__h3240[17:0] ;
  assign x__h3268 = ~mask__h3046 ;
  assign x__h3981 = mask__h3914 & put_response_frm_ptw_put[147:130] ;
  assign x__h4017 = ~mask__h3914 ;
  assign x_address__h3232 =
	     { x__h3240[19:18],
	       lower_pa__h3049,
	       put_core_request_put[12:1] } ;
  assign x_address__h3936 =
	     { put_response_frm_ptw_put[149:148],
	       lower_pa__h3917,
	       rg_miss_queue[11:0] } ;
  assign y__h3257 = x__h3268 & put_core_request_put[30:13] ;
  assign y__h3982 = x__h4017 & rg_miss_queue[29:12] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_miss_queue <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_replace <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_sfence <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_tlb_miss <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_vpn_tag_0 <= `BSV_ASSIGNMENT_DELAY 113'd0;
	v_vpn_tag_1 <= `BSV_ASSIGNMENT_DELAY 113'd0;
	v_vpn_tag_2 <= `BSV_ASSIGNMENT_DELAY 113'd0;
	v_vpn_tag_3 <= `BSV_ASSIGNMENT_DELAY 113'd0;
      end
    else
      begin
        if (rg_miss_queue_EN)
	  rg_miss_queue <= `BSV_ASSIGNMENT_DELAY rg_miss_queue_D_IN;
	if (rg_replace_EN)
	  rg_replace <= `BSV_ASSIGNMENT_DELAY rg_replace_D_IN;
	if (rg_sfence_EN) rg_sfence <= `BSV_ASSIGNMENT_DELAY rg_sfence_D_IN;
	if (rg_tlb_miss_EN)
	  rg_tlb_miss <= `BSV_ASSIGNMENT_DELAY rg_tlb_miss_D_IN;
	if (v_vpn_tag_0_EN)
	  v_vpn_tag_0 <= `BSV_ASSIGNMENT_DELAY v_vpn_tag_0_D_IN;
	if (v_vpn_tag_1_EN)
	  v_vpn_tag_1 <= `BSV_ASSIGNMENT_DELAY v_vpn_tag_1_D_IN;
	if (v_vpn_tag_2_EN)
	  v_vpn_tag_2 <= `BSV_ASSIGNMENT_DELAY v_vpn_tag_2_D_IN;
	if (v_vpn_tag_3_EN)
	  v_vpn_tag_3 <= `BSV_ASSIGNMENT_DELAY v_vpn_tag_3_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_miss_queue = 64'hAAAAAAAAAAAAAAAA;
    rg_replace = 2'h2;
    rg_sfence = 1'h0;
    rg_tlb_miss = 1'h0;
    v_vpn_tag_0 = 113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    v_vpn_tag_1 = 113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    v_vpn_tag_2 = 113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    v_vpn_tag_3 = 113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkfa_itlb

