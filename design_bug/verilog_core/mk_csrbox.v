//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
//
// On Tue Jul 29 14:28:08 +04 2025
//
//
// Ports:
// Name                         I/O  size props
// sbread_mv_csr_misa             O    64
// RDY_sbread_mv_csr_misa         O     1 const
// sbread_mv_csr_mvendorid        O    32 const
// RDY_sbread_mv_csr_mvendorid    O     1 const
// sbread_mv_csr_stvec            O    64 reg
// RDY_sbread_mv_csr_stvec        O     1 const
// sbread_mv_csr_mtvec            O    64 reg
// RDY_sbread_mv_csr_mtvec        O     1 const
// sbread_mv_csr_mstatus          O    64
// RDY_sbread_mv_csr_mstatus      O     1 const
// sbread_mv_csr_marchid          O    64 const
// RDY_sbread_mv_csr_marchid      O     1 const
// sbread_mv_csr_mimpid           O    64 const
// RDY_sbread_mv_csr_mimpid       O     1 const
// sbread_mv_csr_mhartid          O    64 const
// RDY_sbread_mv_csr_mhartid      O     1 const
// sbread_mv_csr_mip              O    64
// RDY_sbread_mv_csr_mip          O     1 const
// sbread_mv_csr_sip              O    64
// RDY_sbread_mv_csr_sip          O     1 const
// sbread_mv_csr_mie              O    64
// RDY_sbread_mv_csr_mie          O     1 const
// sbread_mv_csr_sie              O    64
// RDY_sbread_mv_csr_sie          O     1 const
// sbread_mv_csr_mscratch         O    64 reg
// RDY_sbread_mv_csr_mscratch     O     1 const
// sbread_mv_csr_sscratch         O    64 reg
// RDY_sbread_mv_csr_sscratch     O     1 const
// sbread_mv_csr_sepc             O    64 reg
// RDY_sbread_mv_csr_sepc         O     1 const
// sbread_mv_csr_stval            O    64 reg
// RDY_sbread_mv_csr_stval        O     1 const
// sbread_mv_csr_scause           O    64
// RDY_sbread_mv_csr_scause       O     1 const
// sbread_mv_csr_mepc             O    64 reg
// RDY_sbread_mv_csr_mepc         O     1 const
// sbread_mv_csr_mtval            O    64 reg
// RDY_sbread_mv_csr_mtval        O     1 const
// sbread_mv_csr_mcause           O    64
// RDY_sbread_mv_csr_mcause       O     1 const
// sbread_mv_csr_mcycle           O    64
// RDY_sbread_mv_csr_mcycle       O     1 const
// sbread_mv_csr_minstret         O    64
// RDY_sbread_mv_csr_minstret     O     1 const
// sbread_mv_csr_fcsr             O    64
// RDY_sbread_mv_csr_fcsr         O     1 const
// sbread_mv_csr_time             O    64 reg
// RDY_sbread_mv_csr_time         O     1 const
// sbread_mv_csr_mideleg          O    64 reg
// RDY_sbread_mv_csr_mideleg      O     1 const
// sbread_mv_csr_medeleg          O    64 reg
// RDY_sbread_mv_csr_medeleg      O     1 const
// sbread_mv_csr_pmpcfg0          O    64
// RDY_sbread_mv_csr_pmpcfg0      O     1 const
// sbread_mv_csr_pmpaddr0         O    30
// RDY_sbread_mv_csr_pmpaddr0     O     1 const
// sbread_mv_csr_pmpaddr1         O    30
// RDY_sbread_mv_csr_pmpaddr1     O     1 const
// sbread_mv_csr_pmpaddr2         O    30
// RDY_sbread_mv_csr_pmpaddr2     O     1 const
// sbread_mv_csr_pmpaddr3         O    30
// RDY_sbread_mv_csr_pmpaddr3     O     1 const
// sbread_mv_csr_mcounteren       O    32 reg
// RDY_sbread_mv_csr_mcounteren   O     1 const
// sbread_mv_csr_scounteren       O    32 reg
// RDY_sbread_mv_csr_scounteren   O     1 const
// sbread_mv_csr_menvcfg          O    64
// RDY_sbread_mv_csr_menvcfg      O     1 const
// sbread_mv_csr_senvcfg          O    64
// RDY_sbread_mv_csr_senvcfg      O     1 const
// sbread_mv_csr_satp             O    64 reg
// RDY_sbread_mv_csr_satp         O     1 const
// sbread_mv_csr_mcountinhibit    O    32 const
// RDY_sbread_mv_csr_mcountinhibit  O     1 const
// sbread_mv_csr_fflags           O     5 reg
// RDY_sbread_mv_csr_fflags       O     1 const
// sbread_mv_csr_frm              O     3 reg
// RDY_sbread_mv_csr_frm          O     1 const
// sbread_mv_csr_customcontrol    O    64 const
// RDY_sbread_mv_csr_customcontrol  O     1 const
// sbread_mv_csr_mhpmcounter3     O    64 reg
// RDY_sbread_mv_csr_mhpmcounter3  O     1 const
// sbread_mv_csr_mhpmcounter4     O    64 reg
// RDY_sbread_mv_csr_mhpmcounter4  O     1 const
// sbread_mv_csr_mhpmcounter5     O    64 reg
// RDY_sbread_mv_csr_mhpmcounter5  O     1 const
// sbread_mv_csr_mhpmcounter6     O    64 reg
// RDY_sbread_mv_csr_mhpmcounter6  O     1 const
// sbread_mv_csr_mhpmevent3       O    64 reg
// RDY_sbread_mv_csr_mhpmevent3   O     1 const
// sbread_mv_csr_mhpmevent4       O    64 reg
// RDY_sbread_mv_csr_mhpmevent4   O     1 const
// sbread_mv_csr_mhpmevent5       O    64 reg
// RDY_sbread_mv_csr_mhpmevent5   O     1 const
// sbread_mv_csr_mhpmevent6       O    64 reg
// RDY_sbread_mv_csr_mhpmevent6   O     1 const
// sbread_mv_csr_dcsr             O    64
// RDY_sbread_mv_csr_dcsr         O     1 const
// sbread_mv_csr_dpc              O    64 reg
// RDY_sbread_mv_csr_dpc          O     1 const
// sbread_mv_csr_dscratch0        O    64 reg
// RDY_sbread_mv_csr_dscratch0    O     1 const
// sbread_mv_csr_dscratch1        O    64 reg
// RDY_sbread_mv_csr_dscratch1    O     1 const
// RDY_ma_stop_count              O     1 const
// RDY_ma_events                  O     1 const
// mv_pmpcfg                      O    32 reg
// RDY_mv_pmpcfg                  O     1 const
// mv_pmpaddr                     O   128
// RDY_mv_pmpaddr                 O     1 const
// RDY_ma_set_mip_meip            O     1 const
// RDY_ma_set_mip_mtip            O     1 const
// RDY_ma_set_mip_msip            O     1 const
// RDY_ma_set_mip_seip            O     1 const
// RDY_ma_incr_minstret           O     1 const
// RDY_ma_set_time                O     1 const
// RDY_ma_set_fflags              O     1 const
// RDY_ma_set_mip_debug_interrupt  O     1 const
// mv_debug_mode                  O     1 reg
// RDY_mv_debug_mode              O     1 const
// mv_stop_count                  O     1
// RDY_mv_stop_count              O     1 const
// mv_stop_timer                  O     1
// RDY_mv_stop_timer              O     1 const
// RDY_ma_core_req                O     1 reg
// mv_core_resp                   O    66
// RDY_mv_core_resp               O     1 const
// mav_upd_on_ret                 O    64
// RDY_mav_upd_on_ret             O     1 const
// mav_upd_on_trap                O    64
// RDY_mav_upd_on_trap            O     1 const
// mv_prv                         O     2 reg
// RDY_mv_prv                     O     1 const
// mv_virtual                     O     1 reg
// RDY_mv_virtual                 O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ma_stop_count__stop            I     1
// ma_events_events               I    32
// ma_set_mip_meip__meip          I     1
// ma_set_mip_mtip__mtip          I     1
// ma_set_mip_msip__msip          I     1
// ma_set_mip_seip__seip          I     1
// ma_incr_minstret_incr          I    64
// ma_set_time__time              I    64 reg
// ma_set_fflags__fflags          I     5
// ma_set_fflags_rdtype           I     1
// ma_set_mip_debug_interrupt__debug_interrupt  I     1
// ma_core_req_req                I    79
// mav_upd_on_ret_retype          I     8
// mav_upd_on_trap_cause          I     7
// mav_upd_on_trap_pc             I    64
// mav_upd_on_trap_tval           I    64
// EN_ma_stop_count               I     1
// EN_ma_events                   I     1
// EN_ma_set_mip_meip             I     1
// EN_ma_set_mip_mtip             I     1
// EN_ma_set_mip_msip             I     1
// EN_ma_set_mip_seip             I     1
// EN_ma_incr_minstret            I     1
// EN_ma_set_time                 I     1
// EN_ma_set_fflags               I     1
// EN_ma_set_mip_debug_interrupt  I     1
// EN_ma_core_req                 I     1
// EN_mav_upd_on_ret              I     1
// EN_mav_upd_on_trap             I     1
//
// Combinational paths from inputs to outputs:
//   (ma_stop_count__stop, EN_ma_stop_count) -> sbread_mv_csr_mcycle
//   (ma_stop_count__stop,
//    ma_set_mip_meip__meip,
//    ma_set_mip_mtip__mtip,
//    ma_set_mip_msip__msip,
//    ma_set_mip_seip__seip,
//    ma_set_mip_debug_interrupt__debug_interrupt,
//    ma_core_req_req,
//    EN_ma_stop_count,
//    EN_ma_set_mip_meip,
//    EN_ma_set_mip_mtip,
//    EN_ma_set_mip_msip,
//    EN_ma_set_mip_seip,
//    EN_ma_set_mip_debug_interrupt,
//    EN_ma_core_req) -> mv_core_resp
//   (ma_set_mip_meip__meip,
//    ma_set_mip_mtip__mtip,
//    ma_set_mip_msip__msip,
//    ma_set_mip_seip__seip,
//    ma_set_mip_debug_interrupt__debug_interrupt,
//    EN_ma_set_mip_meip,
//    EN_ma_set_mip_mtip,
//    EN_ma_set_mip_msip,
//    EN_ma_set_mip_seip,
//    EN_ma_set_mip_debug_interrupt) -> sbread_mv_csr_mip
//   (ma_set_mip_seip__seip, EN_ma_set_mip_seip) -> sbread_mv_csr_sip
//   (ma_core_req_req, EN_ma_core_req) -> sbread_mv_csr_minstret
//   mav_upd_on_ret_retype -> mav_upd_on_ret
//   mav_upd_on_trap_cause -> mav_upd_on_trap
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mk_csrbox(CLK,
		 RST_N,

		 sbread_mv_csr_misa,
		 RDY_sbread_mv_csr_misa,

		 sbread_mv_csr_mvendorid,
		 RDY_sbread_mv_csr_mvendorid,

		 sbread_mv_csr_stvec,
		 RDY_sbread_mv_csr_stvec,

		 sbread_mv_csr_mtvec,
		 RDY_sbread_mv_csr_mtvec,

		 sbread_mv_csr_mstatus,
		 RDY_sbread_mv_csr_mstatus,

		 sbread_mv_csr_marchid,
		 RDY_sbread_mv_csr_marchid,

		 sbread_mv_csr_mimpid,
		 RDY_sbread_mv_csr_mimpid,

		 sbread_mv_csr_mhartid,
		 RDY_sbread_mv_csr_mhartid,

		 sbread_mv_csr_mip,
		 RDY_sbread_mv_csr_mip,

		 sbread_mv_csr_sip,
		 RDY_sbread_mv_csr_sip,

		 sbread_mv_csr_mie,
		 RDY_sbread_mv_csr_mie,

		 sbread_mv_csr_sie,
		 RDY_sbread_mv_csr_sie,

		 sbread_mv_csr_mscratch,
		 RDY_sbread_mv_csr_mscratch,

		 sbread_mv_csr_sscratch,
		 RDY_sbread_mv_csr_sscratch,

		 sbread_mv_csr_sepc,
		 RDY_sbread_mv_csr_sepc,

		 sbread_mv_csr_stval,
		 RDY_sbread_mv_csr_stval,

		 sbread_mv_csr_scause,
		 RDY_sbread_mv_csr_scause,

		 sbread_mv_csr_mepc,
		 RDY_sbread_mv_csr_mepc,

		 sbread_mv_csr_mtval,
		 RDY_sbread_mv_csr_mtval,

		 sbread_mv_csr_mcause,
		 RDY_sbread_mv_csr_mcause,

		 sbread_mv_csr_mcycle,
		 RDY_sbread_mv_csr_mcycle,

		 sbread_mv_csr_minstret,
		 RDY_sbread_mv_csr_minstret,

		 sbread_mv_csr_fcsr,
		 RDY_sbread_mv_csr_fcsr,

		 sbread_mv_csr_time,
		 RDY_sbread_mv_csr_time,

		 sbread_mv_csr_mideleg,
		 RDY_sbread_mv_csr_mideleg,

		 sbread_mv_csr_medeleg,
		 RDY_sbread_mv_csr_medeleg,

		 sbread_mv_csr_pmpcfg0,
		 RDY_sbread_mv_csr_pmpcfg0,

		 sbread_mv_csr_pmpaddr0,
		 RDY_sbread_mv_csr_pmpaddr0,

		 sbread_mv_csr_pmpaddr1,
		 RDY_sbread_mv_csr_pmpaddr1,

		 sbread_mv_csr_pmpaddr2,
		 RDY_sbread_mv_csr_pmpaddr2,

		 sbread_mv_csr_pmpaddr3,
		 RDY_sbread_mv_csr_pmpaddr3,

		 sbread_mv_csr_mcounteren,
		 RDY_sbread_mv_csr_mcounteren,

		 sbread_mv_csr_scounteren,
		 RDY_sbread_mv_csr_scounteren,

		 sbread_mv_csr_menvcfg,
		 RDY_sbread_mv_csr_menvcfg,

		 sbread_mv_csr_senvcfg,
		 RDY_sbread_mv_csr_senvcfg,

		 sbread_mv_csr_satp,
		 RDY_sbread_mv_csr_satp,

		 sbread_mv_csr_mcountinhibit,
		 RDY_sbread_mv_csr_mcountinhibit,

		 sbread_mv_csr_fflags,
		 RDY_sbread_mv_csr_fflags,

		 sbread_mv_csr_frm,
		 RDY_sbread_mv_csr_frm,

		 sbread_mv_csr_customcontrol,
		 RDY_sbread_mv_csr_customcontrol,

		 sbread_mv_csr_mhpmcounter3,
		 RDY_sbread_mv_csr_mhpmcounter3,

		 sbread_mv_csr_mhpmcounter4,
		 RDY_sbread_mv_csr_mhpmcounter4,

		 sbread_mv_csr_mhpmcounter5,
		 RDY_sbread_mv_csr_mhpmcounter5,

		 sbread_mv_csr_mhpmcounter6,
		 RDY_sbread_mv_csr_mhpmcounter6,

		 sbread_mv_csr_mhpmevent3,
		 RDY_sbread_mv_csr_mhpmevent3,

		 sbread_mv_csr_mhpmevent4,
		 RDY_sbread_mv_csr_mhpmevent4,

		 sbread_mv_csr_mhpmevent5,
		 RDY_sbread_mv_csr_mhpmevent5,

		 sbread_mv_csr_mhpmevent6,
		 RDY_sbread_mv_csr_mhpmevent6,

		 sbread_mv_csr_dcsr,
		 RDY_sbread_mv_csr_dcsr,

		 sbread_mv_csr_dpc,
		 RDY_sbread_mv_csr_dpc,

		 sbread_mv_csr_dscratch0,
		 RDY_sbread_mv_csr_dscratch0,

		 sbread_mv_csr_dscratch1,
		 RDY_sbread_mv_csr_dscratch1,

		 ma_stop_count__stop,
		 EN_ma_stop_count,
		 RDY_ma_stop_count,

		 ma_events_events,
		 EN_ma_events,
		 RDY_ma_events,

		 mv_pmpcfg,
		 RDY_mv_pmpcfg,

		 mv_pmpaddr,
		 RDY_mv_pmpaddr,

		 ma_set_mip_meip__meip,
		 EN_ma_set_mip_meip,
		 RDY_ma_set_mip_meip,

		 ma_set_mip_mtip__mtip,
		 EN_ma_set_mip_mtip,
		 RDY_ma_set_mip_mtip,

		 ma_set_mip_msip__msip,
		 EN_ma_set_mip_msip,
		 RDY_ma_set_mip_msip,

		 ma_set_mip_seip__seip,
		 EN_ma_set_mip_seip,
		 RDY_ma_set_mip_seip,

		 ma_incr_minstret_incr,
		 EN_ma_incr_minstret,
		 RDY_ma_incr_minstret,

		 ma_set_time__time,
		 EN_ma_set_time,
		 RDY_ma_set_time,

		 ma_set_fflags__fflags,
		 ma_set_fflags_rdtype,
		 EN_ma_set_fflags,
		 RDY_ma_set_fflags,

		 ma_set_mip_debug_interrupt__debug_interrupt,
		 EN_ma_set_mip_debug_interrupt,
		 RDY_ma_set_mip_debug_interrupt,

		 mv_debug_mode,
		 RDY_mv_debug_mode,

		 mv_stop_count,
		 RDY_mv_stop_count,

		 mv_stop_timer,
		 RDY_mv_stop_timer,

		 ma_core_req_req,
		 EN_ma_core_req,
		 RDY_ma_core_req,

		 mv_core_resp,
		 RDY_mv_core_resp,

		 mav_upd_on_ret_retype,
		 EN_mav_upd_on_ret,
		 mav_upd_on_ret,
		 RDY_mav_upd_on_ret,

		 mav_upd_on_trap_cause,
		 mav_upd_on_trap_pc,
		 mav_upd_on_trap_tval,
		 EN_mav_upd_on_trap,
		 mav_upd_on_trap,
		 RDY_mav_upd_on_trap,

		 mv_prv,
		 RDY_mv_prv,

		 mv_virtual,
		 RDY_mv_virtual);
  input  CLK;
  input  RST_N;

  // value method sbread_mv_csr_misa
  output [63 : 0] sbread_mv_csr_misa;
  output RDY_sbread_mv_csr_misa;

  // value method sbread_mv_csr_mvendorid
  output [31 : 0] sbread_mv_csr_mvendorid;
  output RDY_sbread_mv_csr_mvendorid;

  // value method sbread_mv_csr_stvec
  output [63 : 0] sbread_mv_csr_stvec;
  output RDY_sbread_mv_csr_stvec;

  // value method sbread_mv_csr_mtvec
  output [63 : 0] sbread_mv_csr_mtvec;
  output RDY_sbread_mv_csr_mtvec;

  // value method sbread_mv_csr_mstatus
  output [63 : 0] sbread_mv_csr_mstatus;
  output RDY_sbread_mv_csr_mstatus;

  // value method sbread_mv_csr_marchid
  output [63 : 0] sbread_mv_csr_marchid;
  output RDY_sbread_mv_csr_marchid;

  // value method sbread_mv_csr_mimpid
  output [63 : 0] sbread_mv_csr_mimpid;
  output RDY_sbread_mv_csr_mimpid;

  // value method sbread_mv_csr_mhartid
  output [63 : 0] sbread_mv_csr_mhartid;
  output RDY_sbread_mv_csr_mhartid;

  // value method sbread_mv_csr_mip
  output [63 : 0] sbread_mv_csr_mip;
  output RDY_sbread_mv_csr_mip;

  // value method sbread_mv_csr_sip
  output [63 : 0] sbread_mv_csr_sip;
  output RDY_sbread_mv_csr_sip;

  // value method sbread_mv_csr_mie
  output [63 : 0] sbread_mv_csr_mie;
  output RDY_sbread_mv_csr_mie;

  // value method sbread_mv_csr_sie
  output [63 : 0] sbread_mv_csr_sie;
  output RDY_sbread_mv_csr_sie;

  // value method sbread_mv_csr_mscratch
  output [63 : 0] sbread_mv_csr_mscratch;
  output RDY_sbread_mv_csr_mscratch;

  // value method sbread_mv_csr_sscratch
  output [63 : 0] sbread_mv_csr_sscratch;
  output RDY_sbread_mv_csr_sscratch;

  // value method sbread_mv_csr_sepc
  output [63 : 0] sbread_mv_csr_sepc;
  output RDY_sbread_mv_csr_sepc;

  // value method sbread_mv_csr_stval
  output [63 : 0] sbread_mv_csr_stval;
  output RDY_sbread_mv_csr_stval;

  // value method sbread_mv_csr_scause
  output [63 : 0] sbread_mv_csr_scause;
  output RDY_sbread_mv_csr_scause;

  // value method sbread_mv_csr_mepc
  output [63 : 0] sbread_mv_csr_mepc;
  output RDY_sbread_mv_csr_mepc;

  // value method sbread_mv_csr_mtval
  output [63 : 0] sbread_mv_csr_mtval;
  output RDY_sbread_mv_csr_mtval;

  // value method sbread_mv_csr_mcause
  output [63 : 0] sbread_mv_csr_mcause;
  output RDY_sbread_mv_csr_mcause;

  // value method sbread_mv_csr_mcycle
  output [63 : 0] sbread_mv_csr_mcycle;
  output RDY_sbread_mv_csr_mcycle;

  // value method sbread_mv_csr_minstret
  output [63 : 0] sbread_mv_csr_minstret;
  output RDY_sbread_mv_csr_minstret;

  // value method sbread_mv_csr_fcsr
  output [63 : 0] sbread_mv_csr_fcsr;
  output RDY_sbread_mv_csr_fcsr;

  // value method sbread_mv_csr_time
  output [63 : 0] sbread_mv_csr_time;
  output RDY_sbread_mv_csr_time;

  // value method sbread_mv_csr_mideleg
  output [63 : 0] sbread_mv_csr_mideleg;
  output RDY_sbread_mv_csr_mideleg;

  // value method sbread_mv_csr_medeleg
  output [63 : 0] sbread_mv_csr_medeleg;
  output RDY_sbread_mv_csr_medeleg;

  // value method sbread_mv_csr_pmpcfg0
  output [63 : 0] sbread_mv_csr_pmpcfg0;
  output RDY_sbread_mv_csr_pmpcfg0;

  // value method sbread_mv_csr_pmpaddr0
  output [29 : 0] sbread_mv_csr_pmpaddr0;
  output RDY_sbread_mv_csr_pmpaddr0;

  // value method sbread_mv_csr_pmpaddr1
  output [29 : 0] sbread_mv_csr_pmpaddr1;
  output RDY_sbread_mv_csr_pmpaddr1;

  // value method sbread_mv_csr_pmpaddr2
  output [29 : 0] sbread_mv_csr_pmpaddr2;
  output RDY_sbread_mv_csr_pmpaddr2;

  // value method sbread_mv_csr_pmpaddr3
  output [29 : 0] sbread_mv_csr_pmpaddr3;
  output RDY_sbread_mv_csr_pmpaddr3;

  // value method sbread_mv_csr_mcounteren
  output [31 : 0] sbread_mv_csr_mcounteren;
  output RDY_sbread_mv_csr_mcounteren;

  // value method sbread_mv_csr_scounteren
  output [31 : 0] sbread_mv_csr_scounteren;
  output RDY_sbread_mv_csr_scounteren;

  // value method sbread_mv_csr_menvcfg
  output [63 : 0] sbread_mv_csr_menvcfg;
  output RDY_sbread_mv_csr_menvcfg;

  // value method sbread_mv_csr_senvcfg
  output [63 : 0] sbread_mv_csr_senvcfg;
  output RDY_sbread_mv_csr_senvcfg;

  // value method sbread_mv_csr_satp
  output [63 : 0] sbread_mv_csr_satp;
  output RDY_sbread_mv_csr_satp;

  // value method sbread_mv_csr_mcountinhibit
  output [31 : 0] sbread_mv_csr_mcountinhibit;
  output RDY_sbread_mv_csr_mcountinhibit;

  // value method sbread_mv_csr_fflags
  output [4 : 0] sbread_mv_csr_fflags;
  output RDY_sbread_mv_csr_fflags;

  // value method sbread_mv_csr_frm
  output [2 : 0] sbread_mv_csr_frm;
  output RDY_sbread_mv_csr_frm;

  // value method sbread_mv_csr_customcontrol
  output [63 : 0] sbread_mv_csr_customcontrol;
  output RDY_sbread_mv_csr_customcontrol;

  // value method sbread_mv_csr_mhpmcounter3
  output [63 : 0] sbread_mv_csr_mhpmcounter3;
  output RDY_sbread_mv_csr_mhpmcounter3;

  // value method sbread_mv_csr_mhpmcounter4
  output [63 : 0] sbread_mv_csr_mhpmcounter4;
  output RDY_sbread_mv_csr_mhpmcounter4;

  // value method sbread_mv_csr_mhpmcounter5
  output [63 : 0] sbread_mv_csr_mhpmcounter5;
  output RDY_sbread_mv_csr_mhpmcounter5;

  // value method sbread_mv_csr_mhpmcounter6
  output [63 : 0] sbread_mv_csr_mhpmcounter6;
  output RDY_sbread_mv_csr_mhpmcounter6;

  // value method sbread_mv_csr_mhpmevent3
  output [63 : 0] sbread_mv_csr_mhpmevent3;
  output RDY_sbread_mv_csr_mhpmevent3;

  // value method sbread_mv_csr_mhpmevent4
  output [63 : 0] sbread_mv_csr_mhpmevent4;
  output RDY_sbread_mv_csr_mhpmevent4;

  // value method sbread_mv_csr_mhpmevent5
  output [63 : 0] sbread_mv_csr_mhpmevent5;
  output RDY_sbread_mv_csr_mhpmevent5;

  // value method sbread_mv_csr_mhpmevent6
  output [63 : 0] sbread_mv_csr_mhpmevent6;
  output RDY_sbread_mv_csr_mhpmevent6;

  // value method sbread_mv_csr_dcsr
  output [63 : 0] sbread_mv_csr_dcsr;
  output RDY_sbread_mv_csr_dcsr;

  // value method sbread_mv_csr_dpc
  output [63 : 0] sbread_mv_csr_dpc;
  output RDY_sbread_mv_csr_dpc;

  // value method sbread_mv_csr_dscratch0
  output [63 : 0] sbread_mv_csr_dscratch0;
  output RDY_sbread_mv_csr_dscratch0;

  // value method sbread_mv_csr_dscratch1
  output [63 : 0] sbread_mv_csr_dscratch1;
  output RDY_sbread_mv_csr_dscratch1;

  // action method ma_stop_count
  input  ma_stop_count__stop;
  input  EN_ma_stop_count;
  output RDY_ma_stop_count;

  // action method ma_events
  input  [31 : 0] ma_events_events;
  input  EN_ma_events;
  output RDY_ma_events;

  // value method mv_pmpcfg
  output [31 : 0] mv_pmpcfg;
  output RDY_mv_pmpcfg;

  // value method mv_pmpaddr
  output [127 : 0] mv_pmpaddr;
  output RDY_mv_pmpaddr;

  // action method ma_set_mip_meip
  input  ma_set_mip_meip__meip;
  input  EN_ma_set_mip_meip;
  output RDY_ma_set_mip_meip;

  // action method ma_set_mip_mtip
  input  ma_set_mip_mtip__mtip;
  input  EN_ma_set_mip_mtip;
  output RDY_ma_set_mip_mtip;

  // action method ma_set_mip_msip
  input  ma_set_mip_msip__msip;
  input  EN_ma_set_mip_msip;
  output RDY_ma_set_mip_msip;

  // action method ma_set_mip_seip
  input  ma_set_mip_seip__seip;
  input  EN_ma_set_mip_seip;
  output RDY_ma_set_mip_seip;

  // action method ma_incr_minstret
  input  [63 : 0] ma_incr_minstret_incr;
  input  EN_ma_incr_minstret;
  output RDY_ma_incr_minstret;

  // action method ma_set_time
  input  [63 : 0] ma_set_time__time;
  input  EN_ma_set_time;
  output RDY_ma_set_time;

  // action method ma_set_fflags
  input  [4 : 0] ma_set_fflags__fflags;
  input  ma_set_fflags_rdtype;
  input  EN_ma_set_fflags;
  output RDY_ma_set_fflags;

  // action method ma_set_mip_debug_interrupt
  input  ma_set_mip_debug_interrupt__debug_interrupt;
  input  EN_ma_set_mip_debug_interrupt;
  output RDY_ma_set_mip_debug_interrupt;

  // value method mv_debug_mode
  output mv_debug_mode;
  output RDY_mv_debug_mode;

  // value method mv_stop_count
  output mv_stop_count;
  output RDY_mv_stop_count;

  // value method mv_stop_timer
  output mv_stop_timer;
  output RDY_mv_stop_timer;

  // action method ma_core_req
  input  [78 : 0] ma_core_req_req;
  input  EN_ma_core_req;
  output RDY_ma_core_req;

  // value method mv_core_resp
  output [65 : 0] mv_core_resp;
  output RDY_mv_core_resp;

  // actionvalue method mav_upd_on_ret
  input  [7 : 0] mav_upd_on_ret_retype;
  input  EN_mav_upd_on_ret;
  output [63 : 0] mav_upd_on_ret;
  output RDY_mav_upd_on_ret;

  // actionvalue method mav_upd_on_trap
  input  [6 : 0] mav_upd_on_trap_cause;
  input  [63 : 0] mav_upd_on_trap_pc;
  input  [63 : 0] mav_upd_on_trap_tval;
  input  EN_mav_upd_on_trap;
  output [63 : 0] mav_upd_on_trap;
  output RDY_mav_upd_on_trap;

  // value method mv_prv
  output [1 : 0] mv_prv;
  output RDY_mv_prv;

  // value method mv_virtual
  output mv_virtual;
  output RDY_mv_virtual;

  // signals for module outputs
  wire [127 : 0] mv_pmpaddr;
  wire [65 : 0] mv_core_resp;
  wire [63 : 0] mav_upd_on_ret,
		mav_upd_on_trap,
		sbread_mv_csr_customcontrol,
		sbread_mv_csr_dcsr,
		sbread_mv_csr_dpc,
		sbread_mv_csr_dscratch0,
		sbread_mv_csr_dscratch1,
		sbread_mv_csr_fcsr,
		sbread_mv_csr_marchid,
		sbread_mv_csr_mcause,
		sbread_mv_csr_mcycle,
		sbread_mv_csr_medeleg,
		sbread_mv_csr_menvcfg,
		sbread_mv_csr_mepc,
		sbread_mv_csr_mhartid,
		sbread_mv_csr_mhpmcounter3,
		sbread_mv_csr_mhpmcounter4,
		sbread_mv_csr_mhpmcounter5,
		sbread_mv_csr_mhpmcounter6,
		sbread_mv_csr_mhpmevent3,
		sbread_mv_csr_mhpmevent4,
		sbread_mv_csr_mhpmevent5,
		sbread_mv_csr_mhpmevent6,
		sbread_mv_csr_mideleg,
		sbread_mv_csr_mie,
		sbread_mv_csr_mimpid,
		sbread_mv_csr_minstret,
		sbread_mv_csr_mip,
		sbread_mv_csr_misa,
		sbread_mv_csr_mscratch,
		sbread_mv_csr_mstatus,
		sbread_mv_csr_mtval,
		sbread_mv_csr_mtvec,
		sbread_mv_csr_pmpcfg0,
		sbread_mv_csr_satp,
		sbread_mv_csr_scause,
		sbread_mv_csr_senvcfg,
		sbread_mv_csr_sepc,
		sbread_mv_csr_sie,
		sbread_mv_csr_sip,
		sbread_mv_csr_sscratch,
		sbread_mv_csr_stval,
		sbread_mv_csr_stvec,
		sbread_mv_csr_time;
  wire [31 : 0] mv_pmpcfg,
		sbread_mv_csr_mcounteren,
		sbread_mv_csr_mcountinhibit,
		sbread_mv_csr_mvendorid,
		sbread_mv_csr_scounteren;
  wire [29 : 0] sbread_mv_csr_pmpaddr0,
		sbread_mv_csr_pmpaddr1,
		sbread_mv_csr_pmpaddr2,
		sbread_mv_csr_pmpaddr3;
  wire [4 : 0] sbread_mv_csr_fflags;
  wire [2 : 0] sbread_mv_csr_frm;
  wire [1 : 0] mv_prv;
  wire RDY_ma_core_req,
       RDY_ma_events,
       RDY_ma_incr_minstret,
       RDY_ma_set_fflags,
       RDY_ma_set_mip_debug_interrupt,
       RDY_ma_set_mip_meip,
       RDY_ma_set_mip_msip,
       RDY_ma_set_mip_mtip,
       RDY_ma_set_mip_seip,
       RDY_ma_set_time,
       RDY_ma_stop_count,
       RDY_mav_upd_on_ret,
       RDY_mav_upd_on_trap,
       RDY_mv_core_resp,
       RDY_mv_debug_mode,
       RDY_mv_pmpaddr,
       RDY_mv_pmpcfg,
       RDY_mv_prv,
       RDY_mv_stop_count,
       RDY_mv_stop_timer,
       RDY_mv_virtual,
       RDY_sbread_mv_csr_customcontrol,
       RDY_sbread_mv_csr_dcsr,
       RDY_sbread_mv_csr_dpc,
       RDY_sbread_mv_csr_dscratch0,
       RDY_sbread_mv_csr_dscratch1,
       RDY_sbread_mv_csr_fcsr,
       RDY_sbread_mv_csr_fflags,
       RDY_sbread_mv_csr_frm,
       RDY_sbread_mv_csr_marchid,
       RDY_sbread_mv_csr_mcause,
       RDY_sbread_mv_csr_mcounteren,
       RDY_sbread_mv_csr_mcountinhibit,
       RDY_sbread_mv_csr_mcycle,
       RDY_sbread_mv_csr_medeleg,
       RDY_sbread_mv_csr_menvcfg,
       RDY_sbread_mv_csr_mepc,
       RDY_sbread_mv_csr_mhartid,
       RDY_sbread_mv_csr_mhpmcounter3,
       RDY_sbread_mv_csr_mhpmcounter4,
       RDY_sbread_mv_csr_mhpmcounter5,
       RDY_sbread_mv_csr_mhpmcounter6,
       RDY_sbread_mv_csr_mhpmevent3,
       RDY_sbread_mv_csr_mhpmevent4,
       RDY_sbread_mv_csr_mhpmevent5,
       RDY_sbread_mv_csr_mhpmevent6,
       RDY_sbread_mv_csr_mideleg,
       RDY_sbread_mv_csr_mie,
       RDY_sbread_mv_csr_mimpid,
       RDY_sbread_mv_csr_minstret,
       RDY_sbread_mv_csr_mip,
       RDY_sbread_mv_csr_misa,
       RDY_sbread_mv_csr_mscratch,
       RDY_sbread_mv_csr_mstatus,
       RDY_sbread_mv_csr_mtval,
       RDY_sbread_mv_csr_mtvec,
       RDY_sbread_mv_csr_mvendorid,
       RDY_sbread_mv_csr_pmpaddr0,
       RDY_sbread_mv_csr_pmpaddr1,
       RDY_sbread_mv_csr_pmpaddr2,
       RDY_sbread_mv_csr_pmpaddr3,
       RDY_sbread_mv_csr_pmpcfg0,
       RDY_sbread_mv_csr_satp,
       RDY_sbread_mv_csr_scause,
       RDY_sbread_mv_csr_scounteren,
       RDY_sbread_mv_csr_senvcfg,
       RDY_sbread_mv_csr_sepc,
       RDY_sbread_mv_csr_sie,
       RDY_sbread_mv_csr_sip,
       RDY_sbread_mv_csr_sscratch,
       RDY_sbread_mv_csr_stval,
       RDY_sbread_mv_csr_stvec,
       RDY_sbread_mv_csr_time,
       mv_debug_mode,
       mv_stop_count,
       mv_stop_timer,
       mv_virtual;

  // inlined wires
  reg [65 : 0] grp1_rg_resp_to_core_wget, grp2_rg_resp_to_core_wget;
  reg [63 : 0] grp1_rg_mcycle_port1__write_1, grp1_rg_minstret_port0__write_1;
  wire [63 : 0] grp1_rg_mcycle_port0__write_1,
		grp1_rg_mcycle_port2__read,
		grp1_rg_minstret_port1__write_1,
		grp1_rg_minstret_port2__read;
  wire grp1_rg_mcycle_EN_port1__write,
       grp1_rg_minstret_EN_port0__write,
       grp1_rg_minstret_EN_port1__write;

  // register grp1_rg_fcsr_fflags_warl
  reg [4 : 0] grp1_rg_fcsr_fflags_warl;
  wire [4 : 0] grp1_rg_fcsr_fflags_warl_D_IN;
  wire grp1_rg_fcsr_fflags_warl_EN;

  // register grp1_rg_fcsr_frm_warl
  reg [2 : 0] grp1_rg_fcsr_frm_warl;
  wire [2 : 0] grp1_rg_fcsr_frm_warl_D_IN;
  wire grp1_rg_fcsr_frm_warl_EN;

  // register grp1_rg_mcause_exception_code_wlrl
  reg [4 : 0] grp1_rg_mcause_exception_code_wlrl;
  wire [4 : 0] grp1_rg_mcause_exception_code_wlrl_D_IN;
  wire grp1_rg_mcause_exception_code_wlrl_EN;

  // register grp1_rg_mcause_interrupt
  reg grp1_rg_mcause_interrupt;
  wire grp1_rg_mcause_interrupt_D_IN, grp1_rg_mcause_interrupt_EN;

  // register grp1_rg_mcounteren_warl
  reg [31 : 0] grp1_rg_mcounteren_warl;
  wire [31 : 0] grp1_rg_mcounteren_warl_D_IN;
  wire grp1_rg_mcounteren_warl_EN;

  // register grp1_rg_mcycle
  reg [63 : 0] grp1_rg_mcycle;
  wire [63 : 0] grp1_rg_mcycle_D_IN;
  wire grp1_rg_mcycle_EN;

  // register grp1_rg_medeleg_warl
  reg [63 : 0] grp1_rg_medeleg_warl;
  wire [63 : 0] grp1_rg_medeleg_warl_D_IN;
  wire grp1_rg_medeleg_warl_EN;

  // register grp1_rg_menvcfg_cbcfe
  reg grp1_rg_menvcfg_cbcfe;
  wire grp1_rg_menvcfg_cbcfe_D_IN, grp1_rg_menvcfg_cbcfe_EN;

  // register grp1_rg_menvcfg_cbie_warl
  reg [1 : 0] grp1_rg_menvcfg_cbie_warl;
  wire [1 : 0] grp1_rg_menvcfg_cbie_warl_D_IN;
  wire grp1_rg_menvcfg_cbie_warl_EN;

  // register grp1_rg_menvcfg_cbze
  reg grp1_rg_menvcfg_cbze;
  wire grp1_rg_menvcfg_cbze_D_IN, grp1_rg_menvcfg_cbze_EN;

  // register grp1_rg_mepc_warl
  reg [63 : 0] grp1_rg_mepc_warl;
  wire [63 : 0] grp1_rg_mepc_warl_D_IN;
  wire grp1_rg_mepc_warl_EN;

  // register grp1_rg_mideleg_warl
  reg [63 : 0] grp1_rg_mideleg_warl;
  wire [63 : 0] grp1_rg_mideleg_warl_D_IN;
  wire grp1_rg_mideleg_warl_EN;

  // register grp1_rg_mie_debug_interrupt
  reg grp1_rg_mie_debug_interrupt;
  wire grp1_rg_mie_debug_interrupt_D_IN, grp1_rg_mie_debug_interrupt_EN;

  // register grp1_rg_mie_meie
  reg grp1_rg_mie_meie;
  wire grp1_rg_mie_meie_D_IN, grp1_rg_mie_meie_EN;

  // register grp1_rg_mie_msie
  reg grp1_rg_mie_msie;
  wire grp1_rg_mie_msie_D_IN, grp1_rg_mie_msie_EN;

  // register grp1_rg_mie_mtie
  reg grp1_rg_mie_mtie;
  wire grp1_rg_mie_mtie_D_IN, grp1_rg_mie_mtie_EN;

  // register grp1_rg_mie_seie
  reg grp1_rg_mie_seie;
  wire grp1_rg_mie_seie_D_IN, grp1_rg_mie_seie_EN;

  // register grp1_rg_mie_ssie
  reg grp1_rg_mie_ssie;
  wire grp1_rg_mie_ssie_D_IN, grp1_rg_mie_ssie_EN;

  // register grp1_rg_mie_stie
  reg grp1_rg_mie_stie;
  wire grp1_rg_mie_stie_D_IN, grp1_rg_mie_stie_EN;

  // register grp1_rg_mie_vseie_warl
  reg grp1_rg_mie_vseie_warl;
  wire grp1_rg_mie_vseie_warl_D_IN, grp1_rg_mie_vseie_warl_EN;

  // register grp1_rg_mie_vssie_warl
  reg grp1_rg_mie_vssie_warl;
  wire grp1_rg_mie_vssie_warl_D_IN, grp1_rg_mie_vssie_warl_EN;

  // register grp1_rg_mie_vstie_warl
  reg grp1_rg_mie_vstie_warl;
  wire grp1_rg_mie_vstie_warl_D_IN, grp1_rg_mie_vstie_warl_EN;

  // register grp1_rg_minstret
  reg [63 : 0] grp1_rg_minstret;
  wire [63 : 0] grp1_rg_minstret_D_IN;
  wire grp1_rg_minstret_EN;

  // register grp1_rg_mip_seip
  reg grp1_rg_mip_seip;
  wire grp1_rg_mip_seip_D_IN, grp1_rg_mip_seip_EN;

  // register grp1_rg_mip_ssip
  reg grp1_rg_mip_ssip;
  wire grp1_rg_mip_ssip_D_IN, grp1_rg_mip_ssip_EN;

  // register grp1_rg_mip_stip
  reg grp1_rg_mip_stip;
  wire grp1_rg_mip_stip_D_IN, grp1_rg_mip_stip_EN;

  // register grp1_rg_mip_vseip_warl
  reg grp1_rg_mip_vseip_warl;
  wire grp1_rg_mip_vseip_warl_D_IN, grp1_rg_mip_vseip_warl_EN;

  // register grp1_rg_mip_vssip_warl
  reg grp1_rg_mip_vssip_warl;
  wire grp1_rg_mip_vssip_warl_D_IN, grp1_rg_mip_vssip_warl_EN;

  // register grp1_rg_mip_vstip_warl
  reg grp1_rg_mip_vstip_warl;
  wire grp1_rg_mip_vstip_warl_D_IN, grp1_rg_mip_vstip_warl_EN;

  // register grp1_rg_misa_extensions_warl
  reg [25 : 0] grp1_rg_misa_extensions_warl;
  wire [25 : 0] grp1_rg_misa_extensions_warl_D_IN;
  wire grp1_rg_misa_extensions_warl_EN;

  // register grp1_rg_misa_mxl_warl
  reg [1 : 0] grp1_rg_misa_mxl_warl;
  wire [1 : 0] grp1_rg_misa_mxl_warl_D_IN;
  wire grp1_rg_misa_mxl_warl_EN;

  // register grp1_rg_mscratch_warl
  reg [63 : 0] grp1_rg_mscratch_warl;
  reg [63 : 0] grp1_rg_mscratch_warl_D_IN;
  wire grp1_rg_mscratch_warl_EN;

  // register grp1_rg_mstatus_fs_warl
  reg [1 : 0] grp1_rg_mstatus_fs_warl;
  wire [1 : 0] grp1_rg_mstatus_fs_warl_D_IN;
  wire grp1_rg_mstatus_fs_warl_EN;

  // register grp1_rg_mstatus_mie
  reg grp1_rg_mstatus_mie;
  reg grp1_rg_mstatus_mie_D_IN;
  wire grp1_rg_mstatus_mie_EN;

  // register grp1_rg_mstatus_mpie
  reg grp1_rg_mstatus_mpie;
  reg grp1_rg_mstatus_mpie_D_IN;
  wire grp1_rg_mstatus_mpie_EN;

  // register grp1_rg_mstatus_mpp_warl
  reg [1 : 0] grp1_rg_mstatus_mpp_warl;
  reg [1 : 0] grp1_rg_mstatus_mpp_warl_D_IN;
  wire grp1_rg_mstatus_mpp_warl_EN;

  // register grp1_rg_mstatus_mprv_warl
  reg grp1_rg_mstatus_mprv_warl;
  wire grp1_rg_mstatus_mprv_warl_D_IN, grp1_rg_mstatus_mprv_warl_EN;

  // register grp1_rg_mstatus_mxr
  reg grp1_rg_mstatus_mxr;
  wire grp1_rg_mstatus_mxr_D_IN, grp1_rg_mstatus_mxr_EN;

  // register grp1_rg_mstatus_sie
  reg grp1_rg_mstatus_sie;
  reg grp1_rg_mstatus_sie_D_IN;
  wire grp1_rg_mstatus_sie_EN;

  // register grp1_rg_mstatus_spie
  reg grp1_rg_mstatus_spie;
  reg grp1_rg_mstatus_spie_D_IN;
  wire grp1_rg_mstatus_spie_EN;

  // register grp1_rg_mstatus_spp
  reg grp1_rg_mstatus_spp;
  reg grp1_rg_mstatus_spp_D_IN;
  wire grp1_rg_mstatus_spp_EN;

  // register grp1_rg_mstatus_sum
  reg grp1_rg_mstatus_sum;
  wire grp1_rg_mstatus_sum_D_IN, grp1_rg_mstatus_sum_EN;

  // register grp1_rg_mstatus_tsr
  reg grp1_rg_mstatus_tsr;
  wire grp1_rg_mstatus_tsr_D_IN, grp1_rg_mstatus_tsr_EN;

  // register grp1_rg_mstatus_tvm
  reg grp1_rg_mstatus_tvm;
  wire grp1_rg_mstatus_tvm_D_IN, grp1_rg_mstatus_tvm_EN;

  // register grp1_rg_mstatus_tw
  reg grp1_rg_mstatus_tw;
  wire grp1_rg_mstatus_tw_D_IN, grp1_rg_mstatus_tw_EN;

  // register grp1_rg_mtval_warl
  reg [63 : 0] grp1_rg_mtval_warl;
  wire [63 : 0] grp1_rg_mtval_warl_D_IN;
  wire grp1_rg_mtval_warl_EN;

  // register grp1_rg_mtvec_base_warl
  reg [61 : 0] grp1_rg_mtvec_base_warl;
  wire [61 : 0] grp1_rg_mtvec_base_warl_D_IN;
  wire grp1_rg_mtvec_base_warl_EN;

  // register grp1_rg_mtvec_mode_warl
  reg [1 : 0] grp1_rg_mtvec_mode_warl;
  wire [1 : 0] grp1_rg_mtvec_mode_warl_D_IN;
  wire grp1_rg_mtvec_mode_warl_EN;

  // register grp1_rg_pmpaddr0_warl
  reg [29 : 0] grp1_rg_pmpaddr0_warl;
  wire [29 : 0] grp1_rg_pmpaddr0_warl_D_IN;
  wire grp1_rg_pmpaddr0_warl_EN;

  // register grp1_rg_pmpaddr1_warl
  reg [29 : 0] grp1_rg_pmpaddr1_warl;
  wire [29 : 0] grp1_rg_pmpaddr1_warl_D_IN;
  wire grp1_rg_pmpaddr1_warl_EN;

  // register grp1_rg_pmpaddr2_warl
  reg [29 : 0] grp1_rg_pmpaddr2_warl;
  wire [29 : 0] grp1_rg_pmpaddr2_warl_D_IN;
  wire grp1_rg_pmpaddr2_warl_EN;

  // register grp1_rg_pmpaddr3_warl
  reg [29 : 0] grp1_rg_pmpaddr3_warl;
  wire [29 : 0] grp1_rg_pmpaddr3_warl_D_IN;
  wire grp1_rg_pmpaddr3_warl_EN;

  // register grp1_rg_pmpcfg0_pmp0cfg_warl
  reg [7 : 0] grp1_rg_pmpcfg0_pmp0cfg_warl;
  wire [7 : 0] grp1_rg_pmpcfg0_pmp0cfg_warl_D_IN;
  wire grp1_rg_pmpcfg0_pmp0cfg_warl_EN;

  // register grp1_rg_pmpcfg0_pmp1cfg_warl
  reg [7 : 0] grp1_rg_pmpcfg0_pmp1cfg_warl;
  wire [7 : 0] grp1_rg_pmpcfg0_pmp1cfg_warl_D_IN;
  wire grp1_rg_pmpcfg0_pmp1cfg_warl_EN;

  // register grp1_rg_pmpcfg0_pmp2cfg_warl
  reg [7 : 0] grp1_rg_pmpcfg0_pmp2cfg_warl;
  wire [7 : 0] grp1_rg_pmpcfg0_pmp2cfg_warl_D_IN;
  wire grp1_rg_pmpcfg0_pmp2cfg_warl_EN;

  // register grp1_rg_pmpcfg0_pmp3cfg_warl
  reg [7 : 0] grp1_rg_pmpcfg0_pmp3cfg_warl;
  wire [7 : 0] grp1_rg_pmpcfg0_pmp3cfg_warl_D_IN;
  wire grp1_rg_pmpcfg0_pmp3cfg_warl_EN;

  // register grp1_rg_satp_asid_warl
  reg [15 : 0] grp1_rg_satp_asid_warl;
  wire [15 : 0] grp1_rg_satp_asid_warl_D_IN;
  wire grp1_rg_satp_asid_warl_EN;

  // register grp1_rg_satp_mode_warl
  reg [3 : 0] grp1_rg_satp_mode_warl;
  wire [3 : 0] grp1_rg_satp_mode_warl_D_IN;
  wire grp1_rg_satp_mode_warl_EN;

  // register grp1_rg_satp_ppn_warl
  reg [43 : 0] grp1_rg_satp_ppn_warl;
  wire [43 : 0] grp1_rg_satp_ppn_warl_D_IN;
  wire grp1_rg_satp_ppn_warl_EN;

  // register grp1_rg_scause_exception_code_wlrl
  reg [4 : 0] grp1_rg_scause_exception_code_wlrl;
  wire [4 : 0] grp1_rg_scause_exception_code_wlrl_D_IN;
  wire grp1_rg_scause_exception_code_wlrl_EN;

  // register grp1_rg_scause_interrupt
  reg grp1_rg_scause_interrupt;
  wire grp1_rg_scause_interrupt_D_IN, grp1_rg_scause_interrupt_EN;

  // register grp1_rg_scounteren_warl
  reg [31 : 0] grp1_rg_scounteren_warl;
  wire [31 : 0] grp1_rg_scounteren_warl_D_IN;
  wire grp1_rg_scounteren_warl_EN;

  // register grp1_rg_senvcfg_cbcfe
  reg grp1_rg_senvcfg_cbcfe;
  wire grp1_rg_senvcfg_cbcfe_D_IN, grp1_rg_senvcfg_cbcfe_EN;

  // register grp1_rg_senvcfg_cbie_warl
  reg [1 : 0] grp1_rg_senvcfg_cbie_warl;
  wire [1 : 0] grp1_rg_senvcfg_cbie_warl_D_IN;
  wire grp1_rg_senvcfg_cbie_warl_EN;

  // register grp1_rg_senvcfg_cbze
  reg grp1_rg_senvcfg_cbze;
  wire grp1_rg_senvcfg_cbze_D_IN, grp1_rg_senvcfg_cbze_EN;

  // register grp1_rg_sepc_warl
  reg [63 : 0] grp1_rg_sepc_warl;
  wire [63 : 0] grp1_rg_sepc_warl_D_IN;
  wire grp1_rg_sepc_warl_EN;

  // register grp1_rg_sscratch_warl
  reg [63 : 0] grp1_rg_sscratch_warl;
  reg [63 : 0] grp1_rg_sscratch_warl_D_IN;
  wire grp1_rg_sscratch_warl_EN;

  // register grp1_rg_stval_warl
  reg [63 : 0] grp1_rg_stval_warl;
  wire [63 : 0] grp1_rg_stval_warl_D_IN;
  wire grp1_rg_stval_warl_EN;

  // register grp1_rg_stvec_base_warl
  reg [61 : 0] grp1_rg_stvec_base_warl;
  wire [61 : 0] grp1_rg_stvec_base_warl_D_IN;
  wire grp1_rg_stvec_base_warl_EN;

  // register grp1_rg_stvec_mode_warl
  reg [1 : 0] grp1_rg_stvec_mode_warl;
  wire [1 : 0] grp1_rg_stvec_mode_warl_D_IN;
  wire grp1_rg_stvec_mode_warl_EN;

  // register grp1_rg_time
  reg [63 : 0] grp1_rg_time;
  wire [63 : 0] grp1_rg_time_D_IN;
  wire grp1_rg_time_EN;

  // register grp2_rg_dcsr_cause
  reg [2 : 0] grp2_rg_dcsr_cause;
  wire [2 : 0] grp2_rg_dcsr_cause_D_IN;
  wire grp2_rg_dcsr_cause_EN;

  // register grp2_rg_dcsr_ebreakm_warl
  reg grp2_rg_dcsr_ebreakm_warl;
  wire grp2_rg_dcsr_ebreakm_warl_D_IN, grp2_rg_dcsr_ebreakm_warl_EN;

  // register grp2_rg_dcsr_ebreaks_warl
  reg grp2_rg_dcsr_ebreaks_warl;
  wire grp2_rg_dcsr_ebreaks_warl_D_IN, grp2_rg_dcsr_ebreaks_warl_EN;

  // register grp2_rg_dcsr_ebreaku_warl
  reg grp2_rg_dcsr_ebreaku_warl;
  wire grp2_rg_dcsr_ebreaku_warl_D_IN, grp2_rg_dcsr_ebreaku_warl_EN;

  // register grp2_rg_dcsr_mprven_warl
  reg grp2_rg_dcsr_mprven_warl;
  wire grp2_rg_dcsr_mprven_warl_D_IN, grp2_rg_dcsr_mprven_warl_EN;

  // register grp2_rg_dcsr_nmip
  reg grp2_rg_dcsr_nmip;
  wire grp2_rg_dcsr_nmip_D_IN, grp2_rg_dcsr_nmip_EN;

  // register grp2_rg_dcsr_prv_warl
  reg [1 : 0] grp2_rg_dcsr_prv_warl;
  wire [1 : 0] grp2_rg_dcsr_prv_warl_D_IN;
  wire grp2_rg_dcsr_prv_warl_EN;

  // register grp2_rg_dcsr_step_warl
  reg grp2_rg_dcsr_step_warl;
  wire grp2_rg_dcsr_step_warl_D_IN, grp2_rg_dcsr_step_warl_EN;

  // register grp2_rg_dcsr_stepie_warl
  reg grp2_rg_dcsr_stepie_warl;
  wire grp2_rg_dcsr_stepie_warl_D_IN, grp2_rg_dcsr_stepie_warl_EN;

  // register grp2_rg_dcsr_stopcount_warl
  reg grp2_rg_dcsr_stopcount_warl;
  wire grp2_rg_dcsr_stopcount_warl_D_IN, grp2_rg_dcsr_stopcount_warl_EN;

  // register grp2_rg_dcsr_stoptime_warl
  reg grp2_rg_dcsr_stoptime_warl;
  wire grp2_rg_dcsr_stoptime_warl_D_IN, grp2_rg_dcsr_stoptime_warl_EN;

  // register grp2_rg_dpc_warl
  reg [63 : 0] grp2_rg_dpc_warl;
  wire [63 : 0] grp2_rg_dpc_warl_D_IN;
  wire grp2_rg_dpc_warl_EN;

  // register grp2_rg_dscratch0_warl
  reg [63 : 0] grp2_rg_dscratch0_warl;
  reg [63 : 0] grp2_rg_dscratch0_warl_D_IN;
  wire grp2_rg_dscratch0_warl_EN;

  // register grp2_rg_dscratch1_warl
  reg [63 : 0] grp2_rg_dscratch1_warl;
  reg [63 : 0] grp2_rg_dscratch1_warl_D_IN;
  wire grp2_rg_dscratch1_warl_EN;

  // register grp2_rg_mhpmcounter3_warl
  reg [63 : 0] grp2_rg_mhpmcounter3_warl;
  wire [63 : 0] grp2_rg_mhpmcounter3_warl_D_IN;
  wire grp2_rg_mhpmcounter3_warl_EN;

  // register grp2_rg_mhpmcounter4_warl
  reg [63 : 0] grp2_rg_mhpmcounter4_warl;
  wire [63 : 0] grp2_rg_mhpmcounter4_warl_D_IN;
  wire grp2_rg_mhpmcounter4_warl_EN;

  // register grp2_rg_mhpmcounter5_warl
  reg [63 : 0] grp2_rg_mhpmcounter5_warl;
  wire [63 : 0] grp2_rg_mhpmcounter5_warl_D_IN;
  wire grp2_rg_mhpmcounter5_warl_EN;

  // register grp2_rg_mhpmcounter6_warl
  reg [63 : 0] grp2_rg_mhpmcounter6_warl;
  wire [63 : 0] grp2_rg_mhpmcounter6_warl_D_IN;
  wire grp2_rg_mhpmcounter6_warl_EN;

  // register grp2_rg_mhpmevent3_warl
  reg [63 : 0] grp2_rg_mhpmevent3_warl;
  wire [63 : 0] grp2_rg_mhpmevent3_warl_D_IN;
  wire grp2_rg_mhpmevent3_warl_EN;

  // register grp2_rg_mhpmevent4_warl
  reg [63 : 0] grp2_rg_mhpmevent4_warl;
  wire [63 : 0] grp2_rg_mhpmevent4_warl_D_IN;
  wire grp2_rg_mhpmevent4_warl_EN;

  // register grp2_rg_mhpmevent5_warl
  reg [63 : 0] grp2_rg_mhpmevent5_warl;
  wire [63 : 0] grp2_rg_mhpmevent5_warl_D_IN;
  wire grp2_rg_mhpmevent5_warl_EN;

  // register grp2_rg_mhpmevent6_warl
  reg [63 : 0] grp2_rg_mhpmevent6_warl;
  wire [63 : 0] grp2_rg_mhpmevent6_warl_D_IN;
  wire grp2_rg_mhpmevent6_warl_EN;

  // register rg_debug_mode
  reg rg_debug_mode;
  wire rg_debug_mode_D_IN, rg_debug_mode_EN;

  // register rg_prv
  reg [1 : 0] rg_prv;
  wire [1 : 0] rg_prv_D_IN;
  wire rg_prv_EN;

  // register rg_virtual
  reg rg_virtual;
  wire rg_virtual_D_IN, rg_virtual_EN;

  // ports of submodule grp1_ff_fwd_request
  wire [78 : 0] grp1_ff_fwd_request_D_IN, grp1_ff_fwd_request_D_OUT;
  wire grp1_ff_fwd_request_CLR,
       grp1_ff_fwd_request_DEQ,
       grp1_ff_fwd_request_EMPTY_N,
       grp1_ff_fwd_request_ENQ,
       grp1_ff_fwd_request_FULL_N;

  // ports of submodule grp2_ff_fwd_request
  wire [78 : 0] grp2_ff_fwd_request_D_IN;
  wire grp2_ff_fwd_request_CLR,
       grp2_ff_fwd_request_DEQ,
       grp2_ff_fwd_request_ENQ;

  // rule scheduling signals
  wire CAN_FIRE_RL_grp1_rl_increment_cycle,
       CAN_FIRE_RL_grp2_rl_increment_mhpmc3,
       CAN_FIRE_RL_grp2_rl_increment_mhpmc4,
       CAN_FIRE_RL_grp2_rl_increment_mhpmc5,
       CAN_FIRE_RL_grp2_rl_increment_mhpmc6,
       CAN_FIRE_RL_mkConnectionVtoAf,
       CAN_FIRE_RL_mkConnectionVtoAf_1,
       CAN_FIRE_RL_mkConnectionVtoAf_2,
       CAN_FIRE_RL_mkConnectionVtoAf_3,
       CAN_FIRE_RL_mkConnectionVtoAf_4,
       CAN_FIRE_RL_mkConnectionVtoAf_5,
       CAN_FIRE_RL_mkConnectionVtoAf_6,
       CAN_FIRE_RL_mkConnectionVtoAf_7,
       CAN_FIRE_RL_mkConnectionVtoAf_8,
       CAN_FIRE_RL_mkConnectionVtoAf_9,
       CAN_FIRE_RL_x0_mkConnectionAVtoAf,
       CAN_FIRE_ma_core_req,
       CAN_FIRE_ma_events,
       CAN_FIRE_ma_incr_minstret,
       CAN_FIRE_ma_set_fflags,
       CAN_FIRE_ma_set_mip_debug_interrupt,
       CAN_FIRE_ma_set_mip_meip,
       CAN_FIRE_ma_set_mip_msip,
       CAN_FIRE_ma_set_mip_mtip,
       CAN_FIRE_ma_set_mip_seip,
       CAN_FIRE_ma_set_time,
       CAN_FIRE_ma_stop_count,
       CAN_FIRE_mav_upd_on_ret,
       CAN_FIRE_mav_upd_on_trap,
       WILL_FIRE_RL_grp1_rl_increment_cycle,
       WILL_FIRE_RL_grp2_rl_increment_mhpmc3,
       WILL_FIRE_RL_grp2_rl_increment_mhpmc4,
       WILL_FIRE_RL_grp2_rl_increment_mhpmc5,
       WILL_FIRE_RL_grp2_rl_increment_mhpmc6,
       WILL_FIRE_RL_mkConnectionVtoAf,
       WILL_FIRE_RL_mkConnectionVtoAf_1,
       WILL_FIRE_RL_mkConnectionVtoAf_2,
       WILL_FIRE_RL_mkConnectionVtoAf_3,
       WILL_FIRE_RL_mkConnectionVtoAf_4,
       WILL_FIRE_RL_mkConnectionVtoAf_5,
       WILL_FIRE_RL_mkConnectionVtoAf_6,
       WILL_FIRE_RL_mkConnectionVtoAf_7,
       WILL_FIRE_RL_mkConnectionVtoAf_8,
       WILL_FIRE_RL_mkConnectionVtoAf_9,
       WILL_FIRE_RL_x0_mkConnectionAVtoAf,
       WILL_FIRE_ma_core_req,
       WILL_FIRE_ma_events,
       WILL_FIRE_ma_incr_minstret,
       WILL_FIRE_ma_set_fflags,
       WILL_FIRE_ma_set_mip_debug_interrupt,
       WILL_FIRE_ma_set_mip_meip,
       WILL_FIRE_ma_set_mip_msip,
       WILL_FIRE_ma_set_mip_mtip,
       WILL_FIRE_ma_set_mip_seip,
       WILL_FIRE_ma_set_time,
       WILL_FIRE_ma_stop_count,
       WILL_FIRE_mav_upd_on_ret,
       WILL_FIRE_mav_upd_on_trap;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_grp1_rg_mtval_warl_write_1__VAL_1,
	       MUX_grp1_rg_stval_warl_write_1__VAL_1,
	       MUX_grp2_rg_dpc_warl_write_1__VAL_1,
	       MUX_grp2_rg_mhpmcounter3_warl_write_1__VAL_1,
	       MUX_grp2_rg_mhpmcounter4_warl_write_1__VAL_1,
	       MUX_grp2_rg_mhpmcounter5_warl_write_1__VAL_1,
	       MUX_grp2_rg_mhpmcounter6_warl_write_1__VAL_1;
  reg [1 : 0] MUX_grp1_rg_mstatus_fs_warl_write_1__VAL_2;
  wire [63 : 0] MUX_grp1_rg_mepc_warl_write_1__VAL_1,
		MUX_grp1_rg_mepc_warl_write_1__VAL_2,
		MUX_grp1_rg_sepc_warl_write_1__VAL_1,
		MUX_grp2_rg_mhpmcounter3_warl_write_1__VAL_2,
		MUX_grp2_rg_mhpmcounter4_warl_write_1__VAL_2,
		MUX_grp2_rg_mhpmcounter5_warl_write_1__VAL_2,
		MUX_grp2_rg_mhpmcounter6_warl_write_1__VAL_2;
  wire [4 : 0] MUX_grp1_rg_fcsr_fflags_warl_write_1__VAL_2;
  wire [1 : 0] MUX_grp1_rg_mstatus_mpp_warl_write_1__VAL_2,
	       MUX_rg_prv_write_1__VAL_1,
	       MUX_rg_prv_write_1__VAL_2;
  wire MUX_grp1_rg_fcsr_fflags_warl_write_1__SEL_1,
       MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_1,
       MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_2,
       MUX_grp1_rg_mepc_warl_write_1__SEL_1,
       MUX_grp1_rg_mstatus_fs_warl_write_1__SEL_1,
       MUX_grp1_rg_mstatus_mie_write_1__SEL_1,
       MUX_grp1_rg_mstatus_mie_write_1__SEL_2,
       MUX_grp1_rg_mstatus_mpp_warl_write_1__SEL_1,
       MUX_grp1_rg_mstatus_mpp_warl_write_1__SEL_3,
       MUX_grp1_rg_mstatus_sie_write_1__SEL_1,
       MUX_grp1_rg_mstatus_sie_write_1__SEL_2,
       MUX_grp1_rg_mstatus_sie_write_1__SEL_3,
       MUX_grp1_rg_mstatus_sie_write_1__VAL_2,
       MUX_grp1_rg_mstatus_spie_write_1__VAL_2,
       MUX_grp1_rg_mstatus_spp_write_1__VAL_2,
       MUX_grp1_rg_mtval_warl_write_1__SEL_1,
       MUX_grp1_rg_scause_exception_code_wlrl_write_1__SEL_1,
       MUX_grp1_rg_sepc_warl_write_1__SEL_1,
       MUX_grp1_rg_stval_warl_write_1__SEL_1,
       MUX_grp2_rg_dcsr_prv_warl_write_1__SEL_1,
       MUX_grp2_rg_dpc_warl_write_1__SEL_1,
       MUX_grp2_rg_dpc_warl_write_1__SEL_2,
       MUX_grp2_rg_mhpmcounter3_warl_write_1__SEL_1,
       MUX_grp2_rg_mhpmcounter4_warl_write_1__SEL_1,
       MUX_grp2_rg_mhpmcounter5_warl_write_1__SEL_1,
       MUX_grp2_rg_mhpmcounter6_warl_write_1__SEL_1,
       MUX_rg_debug_mode_write_1__SEL_1,
       MUX_rg_prv_write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q1,
	       CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q2,
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d1090,
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d438,
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d921,
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d940,
	       word__h15269,
	       word__h16014,
	       word__h18152,
	       word__h19935,
	       word__h20097,
	       word__h20254,
	       word__h20411,
	       word__h20568,
	       word__h20702,
	       word__h21668,
	       word__h21743,
	       x__h13365,
	       x__h13506,
	       x__h13647,
	       x__h14668,
	       x__h16307,
	       x__h17073,
	       x__h17628,
	       x__h17873,
	       x__h18813,
	       x__h20832,
	       x__h21097,
	       x__h6757,
	       x__h6859,
	       x__h6961,
	       x__h7063,
	       x__h7163;
  wire [63 : 0] anydata__h5594,
		lv_tvec___1__h23686,
		lv_tvec___1__h24795,
		lv_tvec__h24717,
		new_value_data__h12651,
		new_value_data__h12674,
		readdata__h11478,
		readdata__h11500,
		readdata__h11510,
		readdata__h11520,
		readdata__h11530,
		readdata__h11587,
		readdata__h11597,
		readdata__h11647,
		readdata__h11677,
		readdata__h11707,
		readdata__h11746,
		readdata__h11756,
		readdata__h11766,
		readdata__h11776,
		readdata__h11786,
		readdata__h11796,
		readdata__h11806,
		readdata__h11816,
		readdata__h11826,
		readdata__h11836,
		readdata__h11856,
		readdata__h11866,
		readdata__h11876,
		readdata__h6058,
		rg_mip__read__h9258,
		rg_sip__read__h9385,
		x1_avValue_fst__h24214,
		x__h21803,
		x__h23729,
		x__h23769,
		x__h6596,
		x__read_data__h22105,
		x__read_data__h22125,
		x_port1__read__h9631,
		y__h5165,
		y__h5275,
		y__h5351,
		y__h5425,
		y_avValue_fst__h24708,
		y_avValue_fst__h24730,
		y_avValue_fst__h24744;
  wire [62 : 0] r1__read__h12594,
		r1__read__h9090,
		r1__read__h9260,
		r1__read__h9387,
		r1__read__h9462,
		r1__read__h9546,
		result__h23251,
		rg_mcause_exception_code__read__h9602,
		rg_scause_exception_code__read__h9584,
		v__h22162,
		v__h22453;
  wire [61 : 0] r1__read__h12596,
		r1__read__h6385,
		r1__read__h9092,
		r1__read__h9262,
		r1__read__h9389,
		r1__read__h9464,
		r1__read__h9548;
  wire [60 : 0] r1__read__h6387,
		r1__read__h9094,
		r1__read__h9264,
		r1__read__h9466;
  wire [59 : 0] r1__read__h12598,
		r1__read__h6389,
		r1__read__h9096,
		r1__read__h9266,
		r1__read__h9391,
		r1__read__h9468,
		r1__read__h9550,
		r1__read__h9902,
		r1__read__h9931;
  wire [58 : 0] r1__read__h12600,
		r1__read__h6391,
		r1__read__h9098,
		r1__read__h9268,
		r1__read__h9393,
		r1__read__h9470,
		r1__read__h9552,
		r1__read__h9643;
  wire [57 : 0] r1__read__h12602,
		r1__read__h6393,
		r1__read__h9100,
		r1__read__h9270,
		r1__read__h9395,
		r1__read__h9472,
		r1__read__h9554,
		r1__read__h9904,
		r1__read__h9933;
  wire [56 : 0] r1__read__h9102,
		r1__read__h9272,
		r1__read__h9474,
		r1__read__h9906,
		r1__read__h9935;
  wire [55 : 0] r1__read__h12604,
		r1__read__h9104,
		r1__read__h9274,
		r1__read__h9397,
		r1__read__h9476,
		r1__read__h9556,
		r1__read__h9685;
  wire [54 : 0] r1__read__h12606,
		r1__read__h6395,
		r1__read__h9106,
		r1__read__h9276,
		r1__read__h9399,
		r1__read__h9478,
		r1__read__h9558;
  wire [53 : 0] r1__read__h6397, r1__read__h9278, r1__read__h9480;
  wire [52 : 0] r1__read__h6399,
		r1__read__h9108,
		r1__read__h9280,
		r1__read__h9482;
  wire [51 : 0] r1__read__h6401, r1__read__h9282, r1__read__h9484;
  wire [50 : 0] r1__read__h12608,
		r1__read__h6403,
		r1__read__h9110,
		r1__read__h9284,
		r1__read__h9486;
  wire [49 : 0] r1__read__h6405;
  wire [48 : 0] r1__read__h12610, r1__read__h6407, r1__read__h9112;
  wire [47 : 0] r1__read__h9286, r1__read__h9488, r1__read__h9687;
  wire [46 : 0] r1__read__h12612, r1__read__h9114;
  wire [45 : 0] r1__read__h12614, r1__read__h9116;
  wire [44 : 0] r1__read__h12616, r1__read__h9118;
  wire [43 : 0] r1__read__h12618, r1__read__h9120;
  wire [42 : 0] r1__read__h9122;
  wire [41 : 0] r1__read__h9124;
  wire [40 : 0] r1__read__h9126;
  wire [39 : 0] r1__read__h9689;
  wire [37 : 0] r1__read__h8969;
  wire [31 : 0] r1__read__h12620, r1__read__h9128;
  wire [29 : 0] IF_grp1_rg_pmpcfg0_pmp0cfg_warl_73_BIT_4_75_TH_ETC___d379,
		IF_grp1_rg_pmpcfg0_pmp1cfg_warl_71_BIT_4_80_TH_ETC___d384,
		IF_grp1_rg_pmpcfg0_pmp2cfg_warl_69_BIT_4_85_TH_ETC___d389,
		IF_grp1_rg_pmpcfg0_pmp3cfg_warl_67_BIT_4_90_TH_ETC___d394,
		r1__read__h12622,
		r1__read__h9130;
  wire [27 : 0] r1__read__h9132;
  wire [25 : 0] r1__read__h9134;
  wire [24 : 0] r1__read__h9136;
  wire [23 : 0] r1__read__h9138;
  wire [19 : 0] r1__read__h9952;
  wire [4 : 0] x__h11289;
  wire [1 : 0] lv_trapmode__h24718, x1_avValue_snd__h24215;
  wire NOT_grp1_rg_mideleg_warl_65_SRL_mav_upd_on_tra_ETC___d1259,
       NOT_ma_set_fflags__fflags_OR_grp1_rg_fcsr_ffla_ETC___d422,
       NOT_mav_upd_on_trap_cause_BIT_6_200_201_AND_ma_ETC___d1227,
       NOT_mav_upd_on_trap_cause_BIT_6_200_201_AND_ma_ETC___d1236,
       _dfoo1,
       _dfoo3,
       _dfoo5,
       grp1_rg_medeleg_warl_66_SRL_mav_upd_on_trap_ca_ETC___d1220,
       grp1_rg_mideleg_warl_65_SRL_mav_upd_on_trap_ca_ETC___d1216,
       grp1_rg_mideleg_warl_65_SRL_mav_upd_on_trap_ca_ETC___d1225,
       mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1248,
       mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1261,
       mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1264,
       r__h9141,
       r__h9288,
       r__h9300,
       r__h9315,
       r__h9330,
       rg_prv_11_ULE_1___d1222,
       x__h5172,
       x__h5183,
       x__h5277,
       x__h5278,
       x__h5353,
       x__h5354,
       x__h5427,
       x__h5428,
       x__read__h495,
       x_wget__h555,
       y__h23768,
       y__h5184,
       y__h5279,
       y__h5355,
       y__h5429;

  // value method sbread_mv_csr_misa
  assign sbread_mv_csr_misa =
	     { r1__read__h8969, grp1_rg_misa_extensions_warl } ;
  assign RDY_sbread_mv_csr_misa = 1'd1 ;

  // value method sbread_mv_csr_mvendorid
  assign sbread_mv_csr_mvendorid = 32'd0 ;
  assign RDY_sbread_mv_csr_mvendorid = 1'd1 ;

  // value method sbread_mv_csr_stvec
  assign sbread_mv_csr_stvec =
	     { grp1_rg_stvec_base_warl, grp1_rg_stvec_mode_warl } ;
  assign RDY_sbread_mv_csr_stvec = 1'd1 ;

  // value method sbread_mv_csr_mtvec
  assign sbread_mv_csr_mtvec =
	     { grp1_rg_mtvec_base_warl, grp1_rg_mtvec_mode_warl } ;
  assign RDY_sbread_mv_csr_mtvec = 1'd1 ;

  // value method sbread_mv_csr_mstatus
  assign sbread_mv_csr_mstatus = { r1__read__h9090, 1'd0 } ;
  assign RDY_sbread_mv_csr_mstatus = 1'd1 ;

  // value method sbread_mv_csr_marchid
  assign sbread_mv_csr_marchid = 64'd5 ;
  assign RDY_sbread_mv_csr_marchid = 1'd1 ;

  // value method sbread_mv_csr_mimpid
  assign sbread_mv_csr_mimpid = 64'd0 ;
  assign RDY_sbread_mv_csr_mimpid = 1'd1 ;

  // value method sbread_mv_csr_mhartid
  assign sbread_mv_csr_mhartid = 64'd0 ;
  assign RDY_sbread_mv_csr_mhartid = 1'd1 ;

  // value method sbread_mv_csr_mip
  assign sbread_mv_csr_mip =
	     rg_mip__read__h9258 | { 54'd0, x__read__h495, 9'd0 } ;
  assign RDY_sbread_mv_csr_mip = 1'd1 ;

  // value method sbread_mv_csr_sip
  assign sbread_mv_csr_sip =
	     rg_sip__read__h9385 | { 54'd0, x__read__h495, 9'd0 } ;
  assign RDY_sbread_mv_csr_sip = 1'd1 ;

  // value method sbread_mv_csr_mie
  assign sbread_mv_csr_mie = { r1__read__h9462, 1'd0 } ;
  assign RDY_sbread_mv_csr_mie = 1'd1 ;

  // value method sbread_mv_csr_sie
  assign sbread_mv_csr_sie = { r1__read__h9546, 1'd0 } ;
  assign RDY_sbread_mv_csr_sie = 1'd1 ;

  // value method sbread_mv_csr_mscratch
  assign sbread_mv_csr_mscratch = grp1_rg_mscratch_warl ;
  assign RDY_sbread_mv_csr_mscratch = 1'd1 ;

  // value method sbread_mv_csr_sscratch
  assign sbread_mv_csr_sscratch = grp1_rg_sscratch_warl ;
  assign RDY_sbread_mv_csr_sscratch = 1'd1 ;

  // value method sbread_mv_csr_sepc
  assign sbread_mv_csr_sepc = grp1_rg_sepc_warl ;
  assign RDY_sbread_mv_csr_sepc = 1'd1 ;

  // value method sbread_mv_csr_stval
  assign sbread_mv_csr_stval = grp1_rg_stval_warl ;
  assign RDY_sbread_mv_csr_stval = 1'd1 ;

  // value method sbread_mv_csr_scause
  assign sbread_mv_csr_scause =
	     { grp1_rg_scause_interrupt,
	       rg_scause_exception_code__read__h9584 } ;
  assign RDY_sbread_mv_csr_scause = 1'd1 ;

  // value method sbread_mv_csr_mepc
  assign sbread_mv_csr_mepc = grp1_rg_mepc_warl ;
  assign RDY_sbread_mv_csr_mepc = 1'd1 ;

  // value method sbread_mv_csr_mtval
  assign sbread_mv_csr_mtval = grp1_rg_mtval_warl ;
  assign RDY_sbread_mv_csr_mtval = 1'd1 ;

  // value method sbread_mv_csr_mcause
  assign sbread_mv_csr_mcause =
	     { grp1_rg_mcause_interrupt,
	       rg_mcause_exception_code__read__h9602 } ;
  assign RDY_sbread_mv_csr_mcause = 1'd1 ;

  // value method sbread_mv_csr_mcycle
  assign sbread_mv_csr_mcycle =
	     (!x_wget__h555) ?
	       grp1_rg_mcycle_port0__write_1 :
	       grp1_rg_mcycle ;
  assign RDY_sbread_mv_csr_mcycle = 1'd1 ;

  // value method sbread_mv_csr_minstret
  assign sbread_mv_csr_minstret =
	     grp1_rg_minstret_EN_port0__write ?
	       grp1_rg_minstret_port0__write_1 :
	       grp1_rg_minstret ;
  assign RDY_sbread_mv_csr_minstret = 1'd1 ;

  // value method sbread_mv_csr_fcsr
  assign sbread_mv_csr_fcsr = { r1__read__h9643, grp1_rg_fcsr_fflags_warl } ;
  assign RDY_sbread_mv_csr_fcsr = 1'd1 ;

  // value method sbread_mv_csr_time
  assign sbread_mv_csr_time = grp1_rg_time ;
  assign RDY_sbread_mv_csr_time = 1'd1 ;

  // value method sbread_mv_csr_mideleg
  assign sbread_mv_csr_mideleg = grp1_rg_mideleg_warl ;
  assign RDY_sbread_mv_csr_mideleg = 1'd1 ;

  // value method sbread_mv_csr_medeleg
  assign sbread_mv_csr_medeleg = grp1_rg_medeleg_warl ;
  assign RDY_sbread_mv_csr_medeleg = 1'd1 ;

  // value method sbread_mv_csr_pmpcfg0
  assign sbread_mv_csr_pmpcfg0 =
	     { r1__read__h9685, grp1_rg_pmpcfg0_pmp0cfg_warl } ;
  assign RDY_sbread_mv_csr_pmpcfg0 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr0
  assign sbread_mv_csr_pmpaddr0 =
	     grp1_rg_pmpcfg0_pmp0cfg_warl[4] ?
	       grp1_rg_pmpaddr0_warl :
	       { grp1_rg_pmpaddr0_warl[29:1], 1'd0 } ;
  assign RDY_sbread_mv_csr_pmpaddr0 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr1
  assign sbread_mv_csr_pmpaddr1 =
	     grp1_rg_pmpcfg0_pmp1cfg_warl[4] ?
	       grp1_rg_pmpaddr1_warl :
	       { grp1_rg_pmpaddr1_warl[29:1], 1'd0 } ;
  assign RDY_sbread_mv_csr_pmpaddr1 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr2
  assign sbread_mv_csr_pmpaddr2 =
	     grp1_rg_pmpcfg0_pmp2cfg_warl[4] ?
	       grp1_rg_pmpaddr2_warl :
	       { grp1_rg_pmpaddr2_warl[29:1], 1'd0 } ;
  assign RDY_sbread_mv_csr_pmpaddr2 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr3
  assign sbread_mv_csr_pmpaddr3 =
	     grp1_rg_pmpcfg0_pmp3cfg_warl[4] ?
	       grp1_rg_pmpaddr3_warl :
	       { grp1_rg_pmpaddr3_warl[29:1], 1'd0 } ;
  assign RDY_sbread_mv_csr_pmpaddr3 = 1'd1 ;

  // value method sbread_mv_csr_mcounteren
  assign sbread_mv_csr_mcounteren = grp1_rg_mcounteren_warl ;
  assign RDY_sbread_mv_csr_mcounteren = 1'd1 ;

  // value method sbread_mv_csr_scounteren
  assign sbread_mv_csr_scounteren = grp1_rg_scounteren_warl ;
  assign RDY_sbread_mv_csr_scounteren = 1'd1 ;

  // value method sbread_mv_csr_menvcfg
  assign sbread_mv_csr_menvcfg = { r1__read__h9902, 4'd0 } ;
  assign RDY_sbread_mv_csr_menvcfg = 1'd1 ;

  // value method sbread_mv_csr_senvcfg
  assign sbread_mv_csr_senvcfg = { r1__read__h9931, 4'd0 } ;
  assign RDY_sbread_mv_csr_senvcfg = 1'd1 ;

  // value method sbread_mv_csr_satp
  assign sbread_mv_csr_satp = { r1__read__h9952, grp1_rg_satp_ppn_warl } ;
  assign RDY_sbread_mv_csr_satp = 1'd1 ;

  // value method sbread_mv_csr_mcountinhibit
  assign sbread_mv_csr_mcountinhibit = 32'd0 ;
  assign RDY_sbread_mv_csr_mcountinhibit = 1'd1 ;

  // value method sbread_mv_csr_fflags
  assign sbread_mv_csr_fflags = grp1_rg_fcsr_fflags_warl ;
  assign RDY_sbread_mv_csr_fflags = 1'd1 ;

  // value method sbread_mv_csr_frm
  assign sbread_mv_csr_frm = grp1_rg_fcsr_frm_warl ;
  assign RDY_sbread_mv_csr_frm = 1'd1 ;

  // value method sbread_mv_csr_customcontrol
  assign sbread_mv_csr_customcontrol = 64'd23 ;
  assign RDY_sbread_mv_csr_customcontrol = 1'd1 ;

  // value method sbread_mv_csr_mhpmcounter3
  assign sbread_mv_csr_mhpmcounter3 = grp2_rg_mhpmcounter3_warl ;
  assign RDY_sbread_mv_csr_mhpmcounter3 = 1'd1 ;

  // value method sbread_mv_csr_mhpmcounter4
  assign sbread_mv_csr_mhpmcounter4 = grp2_rg_mhpmcounter4_warl ;
  assign RDY_sbread_mv_csr_mhpmcounter4 = 1'd1 ;

  // value method sbread_mv_csr_mhpmcounter5
  assign sbread_mv_csr_mhpmcounter5 = grp2_rg_mhpmcounter5_warl ;
  assign RDY_sbread_mv_csr_mhpmcounter5 = 1'd1 ;

  // value method sbread_mv_csr_mhpmcounter6
  assign sbread_mv_csr_mhpmcounter6 = grp2_rg_mhpmcounter6_warl ;
  assign RDY_sbread_mv_csr_mhpmcounter6 = 1'd1 ;

  // value method sbread_mv_csr_mhpmevent3
  assign sbread_mv_csr_mhpmevent3 = grp2_rg_mhpmevent3_warl ;
  assign RDY_sbread_mv_csr_mhpmevent3 = 1'd1 ;

  // value method sbread_mv_csr_mhpmevent4
  assign sbread_mv_csr_mhpmevent4 = grp2_rg_mhpmevent4_warl ;
  assign RDY_sbread_mv_csr_mhpmevent4 = 1'd1 ;

  // value method sbread_mv_csr_mhpmevent5
  assign sbread_mv_csr_mhpmevent5 = grp2_rg_mhpmevent5_warl ;
  assign RDY_sbread_mv_csr_mhpmevent5 = 1'd1 ;

  // value method sbread_mv_csr_mhpmevent6
  assign sbread_mv_csr_mhpmevent6 = grp2_rg_mhpmevent6_warl ;
  assign RDY_sbread_mv_csr_mhpmevent6 = 1'd1 ;

  // value method sbread_mv_csr_dcsr
  assign sbread_mv_csr_dcsr = { r1__read__h6385, grp2_rg_dcsr_prv_warl } ;
  assign RDY_sbread_mv_csr_dcsr = 1'd1 ;

  // value method sbread_mv_csr_dpc
  assign sbread_mv_csr_dpc = grp2_rg_dpc_warl ;
  assign RDY_sbread_mv_csr_dpc = 1'd1 ;

  // value method sbread_mv_csr_dscratch0
  assign sbread_mv_csr_dscratch0 = grp2_rg_dscratch0_warl ;
  assign RDY_sbread_mv_csr_dscratch0 = 1'd1 ;

  // value method sbread_mv_csr_dscratch1
  assign sbread_mv_csr_dscratch1 = grp2_rg_dscratch1_warl ;
  assign RDY_sbread_mv_csr_dscratch1 = 1'd1 ;

  // action method ma_stop_count
  assign RDY_ma_stop_count = 1'd1 ;
  assign CAN_FIRE_ma_stop_count = 1'd1 ;
  assign WILL_FIRE_ma_stop_count = EN_ma_stop_count ;

  // action method ma_events
  assign RDY_ma_events = 1'd1 ;
  assign CAN_FIRE_ma_events = 1'd1 ;
  assign WILL_FIRE_ma_events = EN_ma_events ;

  // value method mv_pmpcfg
  assign mv_pmpcfg =
	     { grp1_rg_pmpcfg0_pmp3cfg_warl,
	       grp1_rg_pmpcfg0_pmp2cfg_warl,
	       grp1_rg_pmpcfg0_pmp1cfg_warl,
	       grp1_rg_pmpcfg0_pmp0cfg_warl } ;
  assign RDY_mv_pmpcfg = 1'd1 ;

  // value method mv_pmpaddr
  assign mv_pmpaddr =
	     { IF_grp1_rg_pmpcfg0_pmp3cfg_warl_67_BIT_4_90_TH_ETC___d394,
	       2'b0,
	       IF_grp1_rg_pmpcfg0_pmp2cfg_warl_69_BIT_4_85_TH_ETC___d389,
	       2'b0,
	       IF_grp1_rg_pmpcfg0_pmp1cfg_warl_71_BIT_4_80_TH_ETC___d384,
	       2'b0,
	       IF_grp1_rg_pmpcfg0_pmp0cfg_warl_73_BIT_4_75_TH_ETC___d379,
	       2'b0 } ;
  assign RDY_mv_pmpaddr = 1'd1 ;

  // action method ma_set_mip_meip
  assign RDY_ma_set_mip_meip = 1'd1 ;
  assign CAN_FIRE_ma_set_mip_meip = 1'd1 ;
  assign WILL_FIRE_ma_set_mip_meip = EN_ma_set_mip_meip ;

  // action method ma_set_mip_mtip
  assign RDY_ma_set_mip_mtip = 1'd1 ;
  assign CAN_FIRE_ma_set_mip_mtip = 1'd1 ;
  assign WILL_FIRE_ma_set_mip_mtip = EN_ma_set_mip_mtip ;

  // action method ma_set_mip_msip
  assign RDY_ma_set_mip_msip = 1'd1 ;
  assign CAN_FIRE_ma_set_mip_msip = 1'd1 ;
  assign WILL_FIRE_ma_set_mip_msip = EN_ma_set_mip_msip ;

  // action method ma_set_mip_seip
  assign RDY_ma_set_mip_seip = 1'd1 ;
  assign CAN_FIRE_ma_set_mip_seip = 1'd1 ;
  assign WILL_FIRE_ma_set_mip_seip = EN_ma_set_mip_seip ;

  // action method ma_incr_minstret
  assign RDY_ma_incr_minstret = 1'd1 ;
  assign CAN_FIRE_ma_incr_minstret = 1'd1 ;
  assign WILL_FIRE_ma_incr_minstret = EN_ma_incr_minstret ;

  // action method ma_set_time
  assign RDY_ma_set_time = 1'd1 ;
  assign CAN_FIRE_ma_set_time = 1'd1 ;
  assign WILL_FIRE_ma_set_time = EN_ma_set_time ;

  // action method ma_set_fflags
  assign RDY_ma_set_fflags = 1'd1 ;
  assign CAN_FIRE_ma_set_fflags = 1'd1 ;
  assign WILL_FIRE_ma_set_fflags = EN_ma_set_fflags ;

  // action method ma_set_mip_debug_interrupt
  assign RDY_ma_set_mip_debug_interrupt = 1'd1 ;
  assign CAN_FIRE_ma_set_mip_debug_interrupt = 1'd1 ;
  assign WILL_FIRE_ma_set_mip_debug_interrupt =
	     EN_ma_set_mip_debug_interrupt ;

  // value method mv_debug_mode
  assign mv_debug_mode = rg_debug_mode ;
  assign RDY_mv_debug_mode = 1'd1 ;

  // value method mv_stop_count
  assign mv_stop_count = rg_debug_mode & grp2_rg_dcsr_stopcount_warl ;
  assign RDY_mv_stop_count = 1'd1 ;

  // value method mv_stop_timer
  assign mv_stop_timer = rg_debug_mode & grp2_rg_dcsr_stoptime_warl ;
  assign RDY_mv_stop_timer = 1'd1 ;

  // action method ma_core_req
  assign RDY_ma_core_req = grp1_ff_fwd_request_FULL_N ;
  assign CAN_FIRE_ma_core_req = grp1_ff_fwd_request_FULL_N ;
  assign WILL_FIRE_ma_core_req = EN_ma_core_req ;

  // value method mv_core_resp
  assign mv_core_resp =
	     { EN_ma_core_req && grp1_rg_resp_to_core_wget[65] ||
	       grp1_ff_fwd_request_EMPTY_N && grp2_rg_resp_to_core_wget[65],
	       anydata__h5594,
	       EN_ma_core_req && grp1_rg_resp_to_core_wget[0] ||
	       grp1_ff_fwd_request_EMPTY_N && grp2_rg_resp_to_core_wget[0] } ;
  assign RDY_mv_core_resp = 1'd1 ;

  // actionvalue method mav_upd_on_ret
  assign mav_upd_on_ret =
	     { grp1_rg_misa_extensions_warl[2] ? v__h22162 : result__h23251,
	       1'b0 } ;
  assign RDY_mav_upd_on_ret = 1'd1 ;
  assign CAN_FIRE_mav_upd_on_ret = 1'd1 ;
  assign WILL_FIRE_mav_upd_on_ret = EN_mav_upd_on_ret ;

  // actionvalue method mav_upd_on_trap
  assign mav_upd_on_trap =
	     (!mav_upd_on_trap_cause[6] &&
	      (mav_upd_on_trap_cause[5:0] == 6'd25 ||
	       mav_upd_on_trap_cause[5:0] == 6'd26 ||
	       mav_upd_on_trap_cause[5:0] == 6'd28 ||
	       mav_upd_on_trap_cause[5:0] == 6'd29) ||
	      mav_upd_on_trap_cause[6] &&
	      mav_upd_on_trap_cause[5:0] == 6'd16) ?
	       64'd2048 :
	       y_avValue_fst__h24744 ;
  assign RDY_mav_upd_on_trap = 1'd1 ;
  assign CAN_FIRE_mav_upd_on_trap = 1'd1 ;
  assign WILL_FIRE_mav_upd_on_trap = EN_mav_upd_on_trap ;

  // value method mv_prv
  assign mv_prv = rg_prv ;
  assign RDY_mv_prv = 1'd1 ;

  // value method mv_virtual
  assign mv_virtual = rg_virtual ;
  assign RDY_mv_virtual = 1'd1 ;

  // submodule grp1_ff_fwd_request
  FIFO2 #(.width(32'd79), .guarded(1'd1)) grp1_ff_fwd_request(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(grp1_ff_fwd_request_D_IN),
							      .ENQ(grp1_ff_fwd_request_ENQ),
							      .DEQ(grp1_ff_fwd_request_DEQ),
							      .CLR(grp1_ff_fwd_request_CLR),
							      .D_OUT(grp1_ff_fwd_request_D_OUT),
							      .FULL_N(grp1_ff_fwd_request_FULL_N),
							      .EMPTY_N(grp1_ff_fwd_request_EMPTY_N));

  // submodule grp2_ff_fwd_request
  FIFO2 #(.width(32'd79), .guarded(1'd1)) grp2_ff_fwd_request(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(grp2_ff_fwd_request_D_IN),
							      .ENQ(grp2_ff_fwd_request_ENQ),
							      .DEQ(grp2_ff_fwd_request_DEQ),
							      .CLR(grp2_ff_fwd_request_CLR),
							      .D_OUT(),
							      .FULL_N(),
							      .EMPTY_N());

  // rule RL_mkConnectionVtoAf
  assign CAN_FIRE_RL_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf = 1'd1 ;

  // rule RL_mkConnectionVtoAf_1
  assign CAN_FIRE_RL_mkConnectionVtoAf_1 = EN_ma_events ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_1 = EN_ma_events ;

  // rule RL_mkConnectionVtoAf_2
  assign CAN_FIRE_RL_mkConnectionVtoAf_2 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_2 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_3
  assign CAN_FIRE_RL_mkConnectionVtoAf_3 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_3 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_4
  assign CAN_FIRE_RL_mkConnectionVtoAf_4 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_4 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_5
  assign CAN_FIRE_RL_mkConnectionVtoAf_5 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_5 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_6
  assign CAN_FIRE_RL_mkConnectionVtoAf_6 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_6 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_7
  assign CAN_FIRE_RL_mkConnectionVtoAf_7 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_7 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_8
  assign CAN_FIRE_RL_mkConnectionVtoAf_8 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_8 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_9
  assign CAN_FIRE_RL_mkConnectionVtoAf_9 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_9 = 1'd1 ;

  // rule RL_grp1_rl_increment_cycle
  assign CAN_FIRE_RL_grp1_rl_increment_cycle = 1'd1 ;
  assign WILL_FIRE_RL_grp1_rl_increment_cycle = 1'd1 ;

  // rule RL_grp2_rl_increment_mhpmc3
  assign CAN_FIRE_RL_grp2_rl_increment_mhpmc3 = EN_ma_events ;
  assign WILL_FIRE_RL_grp2_rl_increment_mhpmc3 =
	     EN_ma_events && !grp1_ff_fwd_request_EMPTY_N ;

  // rule RL_grp2_rl_increment_mhpmc4
  assign CAN_FIRE_RL_grp2_rl_increment_mhpmc4 = EN_ma_events ;
  assign WILL_FIRE_RL_grp2_rl_increment_mhpmc4 =
	     WILL_FIRE_RL_grp2_rl_increment_mhpmc3 ;

  // rule RL_grp2_rl_increment_mhpmc5
  assign CAN_FIRE_RL_grp2_rl_increment_mhpmc5 = EN_ma_events ;
  assign WILL_FIRE_RL_grp2_rl_increment_mhpmc5 =
	     WILL_FIRE_RL_grp2_rl_increment_mhpmc3 ;

  // rule RL_grp2_rl_increment_mhpmc6
  assign CAN_FIRE_RL_grp2_rl_increment_mhpmc6 = EN_ma_events ;
  assign WILL_FIRE_RL_grp2_rl_increment_mhpmc6 =
	     WILL_FIRE_RL_grp2_rl_increment_mhpmc3 ;

  // rule RL_x0_mkConnectionAVtoAf
  assign CAN_FIRE_RL_x0_mkConnectionAVtoAf = grp1_ff_fwd_request_EMPTY_N ;
  assign WILL_FIRE_RL_x0_mkConnectionAVtoAf = grp1_ff_fwd_request_EMPTY_N ;

  // inputs to muxes for submodule ports
  assign MUX_grp1_rg_fcsr_fflags_warl_write_1__SEL_1 =
	     EN_ma_set_fflags &&
	     NOT_ma_set_fflags__fflags_OR_grp1_rg_fcsr_ffla_ETC___d422 ;
  assign MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h342 ;
  assign MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_2 =
	     EN_mav_upd_on_trap &&
	     mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1261 ;
  assign MUX_grp1_rg_mepc_warl_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h341 ;
  assign MUX_grp1_rg_mstatus_fs_warl_write_1__SEL_1 =
	     EN_ma_set_fflags &&
	     (ma_set_fflags__fflags != 5'd0 || ma_set_fflags_rdtype) ;
  assign MUX_grp1_rg_mstatus_mie_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h300 ;
  assign MUX_grp1_rg_mstatus_mie_write_1__SEL_2 =
	     EN_mav_upd_on_ret && mav_upd_on_ret_retype[3:0] != 4'hB &&
	     mav_upd_on_ret_retype[5:4] == 2'd3 ;
  assign MUX_grp1_rg_mstatus_mpp_warl_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h300 &&
	     (x__h13647[12:11] == 2'd0 || x__h13647[12:11] == 2'd1 ||
	      x__h13647[12:11] == 2'd3) ;
  assign MUX_grp1_rg_mstatus_mpp_warl_write_1__SEL_3 =
	     EN_mav_upd_on_trap &&
	     mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1264 ;
  assign MUX_grp1_rg_mstatus_sie_write_1__SEL_1 =
	     EN_mav_upd_on_ret && mav_upd_on_ret_retype[3:0] != 4'hB &&
	     mav_upd_on_ret_retype[5:4] == 2'd1 ;
  assign MUX_grp1_rg_mstatus_sie_write_1__SEL_2 =
	     EN_ma_core_req &&
	     (ma_core_req_req[78:67] == 12'h300 ||
	      ma_core_req_req[78:67] == 12'h100) ;
  assign MUX_grp1_rg_mstatus_sie_write_1__SEL_3 =
	     EN_mav_upd_on_trap &&
	     mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1248 ;
  assign MUX_grp1_rg_mtval_warl_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h343 ;
  assign MUX_grp1_rg_scause_exception_code_wlrl_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h142 ;
  assign MUX_grp1_rg_sepc_warl_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h141 ;
  assign MUX_grp1_rg_stval_warl_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h143 ;
  assign MUX_grp2_rg_dcsr_prv_warl_write_1__SEL_1 =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'h7B0 &&
	     (x__h7163[1:0] == 2'd0 || x__h7163[1:0] == 2'd1 ||
	      x__h7163[1:0] == 2'd3) ;
  assign MUX_grp2_rg_dpc_warl_write_1__SEL_1 =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'h7B1 ;
  assign MUX_grp2_rg_dpc_warl_write_1__SEL_2 =
	     EN_mav_upd_on_trap &&
	     (!mav_upd_on_trap_cause[6] &&
	      (mav_upd_on_trap_cause[5:0] == 6'd25 ||
	       mav_upd_on_trap_cause[5:0] == 6'd26 ||
	       mav_upd_on_trap_cause[5:0] == 6'd28 ||
	       mav_upd_on_trap_cause[5:0] == 6'd29) ||
	      mav_upd_on_trap_cause[6] &&
	      mav_upd_on_trap_cause[5:0] == 6'd16) ;
  assign MUX_grp2_rg_mhpmcounter3_warl_write_1__SEL_1 =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'hB03 ;
  assign MUX_grp2_rg_mhpmcounter4_warl_write_1__SEL_1 =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'hB04 ;
  assign MUX_grp2_rg_mhpmcounter5_warl_write_1__SEL_1 =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'hB05 ;
  assign MUX_grp2_rg_mhpmcounter6_warl_write_1__SEL_1 =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'hB06 ;
  assign MUX_rg_debug_mode_write_1__SEL_1 =
	     EN_mav_upd_on_ret && mav_upd_on_ret_retype[3:0] == 4'hB ;
  assign MUX_rg_prv_write_1__SEL_1 = EN_mav_upd_on_ret && _dfoo3 ;
  assign MUX_grp1_rg_fcsr_fflags_warl_write_1__VAL_2 =
	     (ma_core_req_req[78:67] == 12'h003) ?
	       word__h18152[4:0] :
	       word__h21668[4:0] ;
  assign MUX_grp1_rg_mepc_warl_write_1__VAL_1 =
	     { CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q1[63:1],
	       1'd0 } ;
  assign MUX_grp1_rg_mepc_warl_write_1__VAL_2 =
	     { mav_upd_on_trap_pc[63:1], 1'd0 } ;
  always@(ma_core_req_req or x__h14668 or x__h13647)
  begin
    case (ma_core_req_req[78:67])
      12'h100: MUX_grp1_rg_mstatus_fs_warl_write_1__VAL_2 = x__h14668[14:13];
      12'h300: MUX_grp1_rg_mstatus_fs_warl_write_1__VAL_2 = x__h13647[14:13];
      default: MUX_grp1_rg_mstatus_fs_warl_write_1__VAL_2 = 2'b11;
    endcase
  end
  assign MUX_grp1_rg_mstatus_mpp_warl_write_1__VAL_2 =
	     grp1_rg_misa_extensions_warl[20] ? 2'd0 : 2'd3 ;
  assign MUX_grp1_rg_mstatus_sie_write_1__VAL_2 =
	     (ma_core_req_req[78:67] == 12'h300) ?
	       x__h13647[1] :
	       x__h14668[1] ;
  assign MUX_grp1_rg_mstatus_spie_write_1__VAL_2 =
	     (ma_core_req_req[78:67] == 12'h300) ?
	       x__h13647[5] :
	       x__h14668[5] ;
  assign MUX_grp1_rg_mstatus_spp_write_1__VAL_2 =
	     (ma_core_req_req[78:67] == 12'h300) ?
	       x__h13647[8] :
	       x__h14668[8] ;
  always@(ma_core_req_req or x__h21803 or grp1_rg_mtval_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1: MUX_grp1_rg_mtval_warl_write_1__VAL_1 = ma_core_req_req[66:3];
      2'd2:
	  MUX_grp1_rg_mtval_warl_write_1__VAL_1 =
	      ma_core_req_req[66:3] | grp1_rg_mtval_warl;
      default: MUX_grp1_rg_mtval_warl_write_1__VAL_1 =
		   x__h21803 & grp1_rg_mtval_warl;
    endcase
  end
  assign MUX_grp1_rg_sepc_warl_write_1__VAL_1 =
	     { CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q2[63:1],
	       1'd0 } ;
  always@(ma_core_req_req or x__h21803 or grp1_rg_stval_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1: MUX_grp1_rg_stval_warl_write_1__VAL_1 = ma_core_req_req[66:3];
      2'd2:
	  MUX_grp1_rg_stval_warl_write_1__VAL_1 =
	      ma_core_req_req[66:3] | grp1_rg_stval_warl;
      default: MUX_grp1_rg_stval_warl_write_1__VAL_1 =
		   x__h21803 & grp1_rg_stval_warl;
    endcase
  end
  always@(grp1_ff_fwd_request_D_OUT or x__h6596 or grp2_rg_dpc_warl)
  begin
    case (grp1_ff_fwd_request_D_OUT[2:1])
      2'd1:
	  MUX_grp2_rg_dpc_warl_write_1__VAL_1 =
	      grp1_ff_fwd_request_D_OUT[66:3];
      2'd2:
	  MUX_grp2_rg_dpc_warl_write_1__VAL_1 =
	      grp1_ff_fwd_request_D_OUT[66:3] | grp2_rg_dpc_warl;
      default: MUX_grp2_rg_dpc_warl_write_1__VAL_1 =
		   x__h6596 & grp2_rg_dpc_warl;
    endcase
  end
  always@(grp1_ff_fwd_request_D_OUT or x__h6596 or grp2_rg_mhpmcounter3_warl)
  begin
    case (grp1_ff_fwd_request_D_OUT[2:1])
      2'd1:
	  MUX_grp2_rg_mhpmcounter3_warl_write_1__VAL_1 =
	      grp1_ff_fwd_request_D_OUT[66:3];
      2'd2:
	  MUX_grp2_rg_mhpmcounter3_warl_write_1__VAL_1 =
	      grp1_ff_fwd_request_D_OUT[66:3] | grp2_rg_mhpmcounter3_warl;
      default: MUX_grp2_rg_mhpmcounter3_warl_write_1__VAL_1 =
		   x__h6596 & grp2_rg_mhpmcounter3_warl;
    endcase
  end
  assign MUX_grp2_rg_mhpmcounter3_warl_write_1__VAL_2 =
	     grp2_rg_mhpmcounter3_warl + y__h5165 ;
  always@(grp1_ff_fwd_request_D_OUT or x__h6596 or grp2_rg_mhpmcounter4_warl)
  begin
    case (grp1_ff_fwd_request_D_OUT[2:1])
      2'd1:
	  MUX_grp2_rg_mhpmcounter4_warl_write_1__VAL_1 =
	      grp1_ff_fwd_request_D_OUT[66:3];
      2'd2:
	  MUX_grp2_rg_mhpmcounter4_warl_write_1__VAL_1 =
	      grp1_ff_fwd_request_D_OUT[66:3] | grp2_rg_mhpmcounter4_warl;
      default: MUX_grp2_rg_mhpmcounter4_warl_write_1__VAL_1 =
		   x__h6596 & grp2_rg_mhpmcounter4_warl;
    endcase
  end
  assign MUX_grp2_rg_mhpmcounter4_warl_write_1__VAL_2 =
	     grp2_rg_mhpmcounter4_warl + y__h5275 ;
  always@(grp1_ff_fwd_request_D_OUT or x__h6596 or grp2_rg_mhpmcounter5_warl)
  begin
    case (grp1_ff_fwd_request_D_OUT[2:1])
      2'd1:
	  MUX_grp2_rg_mhpmcounter5_warl_write_1__VAL_1 =
	      grp1_ff_fwd_request_D_OUT[66:3];
      2'd2:
	  MUX_grp2_rg_mhpmcounter5_warl_write_1__VAL_1 =
	      grp1_ff_fwd_request_D_OUT[66:3] | grp2_rg_mhpmcounter5_warl;
      default: MUX_grp2_rg_mhpmcounter5_warl_write_1__VAL_1 =
		   x__h6596 & grp2_rg_mhpmcounter5_warl;
    endcase
  end
  assign MUX_grp2_rg_mhpmcounter5_warl_write_1__VAL_2 =
	     grp2_rg_mhpmcounter5_warl + y__h5351 ;
  always@(grp1_ff_fwd_request_D_OUT or x__h6596 or grp2_rg_mhpmcounter6_warl)
  begin
    case (grp1_ff_fwd_request_D_OUT[2:1])
      2'd1:
	  MUX_grp2_rg_mhpmcounter6_warl_write_1__VAL_1 =
	      grp1_ff_fwd_request_D_OUT[66:3];
      2'd2:
	  MUX_grp2_rg_mhpmcounter6_warl_write_1__VAL_1 =
	      grp1_ff_fwd_request_D_OUT[66:3] | grp2_rg_mhpmcounter6_warl;
      default: MUX_grp2_rg_mhpmcounter6_warl_write_1__VAL_1 =
		   x__h6596 & grp2_rg_mhpmcounter6_warl;
    endcase
  end
  assign MUX_grp2_rg_mhpmcounter6_warl_write_1__VAL_2 =
	     grp2_rg_mhpmcounter6_warl + y__h5425 ;
  assign MUX_rg_prv_write_1__VAL_1 =
	     (mav_upd_on_ret_retype[3:0] == 4'hB ||
	      mav_upd_on_ret_retype[5:4] == 2'd1) ?
	       ((mav_upd_on_ret_retype[3:0] == 4'hB) ?
		  grp2_rg_dcsr_prv_warl :
		  { 1'd0, grp1_rg_mstatus_spp }) :
	       grp1_rg_mstatus_mpp_warl ;
  assign MUX_rg_prv_write_1__VAL_2 =
	     NOT_mav_upd_on_trap_cause_BIT_6_200_201_AND_ma_ETC___d1227 ?
	       ((!mav_upd_on_trap_cause[6] &&
		 (mav_upd_on_trap_cause[5:0] == 6'd25 ||
		  mav_upd_on_trap_cause[5:0] == 6'd26 ||
		  mav_upd_on_trap_cause[5:0] == 6'd28 ||
		  mav_upd_on_trap_cause[5:0] == 6'd29) ||
		 mav_upd_on_trap_cause[6] &&
		 mav_upd_on_trap_cause[5:0] == 6'd16) ?
		  2'd3 :
		  2'd1) :
	       2'd3 ;

  // inlined wires
  always@(ma_core_req_req or
	  readdata__h11856 or
	  readdata__h11866 or
	  readdata__h11707 or
	  readdata__h11530 or
	  readdata__h11597 or
	  readdata__h11500 or
	  readdata__h11806 or
	  readdata__h11826 or
	  grp1_rg_sscratch_warl or
	  grp1_rg_sepc_warl or
	  readdata__h11647 or
	  grp1_rg_stval_warl or
	  new_value_data__h12674 or
	  readdata__h11836 or
	  readdata__h11520 or
	  readdata__h11478 or
	  grp1_rg_misa_extensions_warl or
	  IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d438 or
	  grp1_rg_medeleg_warl or
	  grp1_rg_mideleg_warl or
	  readdata__h11587 or
	  readdata__h11510 or
	  readdata__h11796 or
	  readdata__h11816 or
	  grp1_rg_mscratch_warl or
	  grp1_rg_mepc_warl or
	  readdata__h11677 or
	  grp1_rg_mtval_warl or
	  new_value_data__h12651 or
	  readdata__h11746 or
	  readdata__h11756 or
	  readdata__h11766 or
	  readdata__h11776 or
	  readdata__h11786 or
	  readdata__h11876 or grp1_rg_minstret or grp1_rg_time)
  begin
    case (ma_core_req_req[78:67])
      12'h001: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11856, 1'd1 };
      12'h002: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11866, 1'd1 };
      12'h003: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11707, 1'd1 };
      12'h100: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11530, 1'd1 };
      12'h104: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11597, 1'd1 };
      12'h105: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11500, 1'd1 };
      12'h106: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11806, 1'd1 };
      12'h10A: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11826, 1'd1 };
      12'h140:
	  grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_sscratch_warl, 1'd1 };
      12'h141: grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_sepc_warl, 1'd1 };
      12'h142: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11647, 1'd1 };
      12'h143: grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_stval_warl, 1'd1 };
      12'h144:
	  grp1_rg_resp_to_core_wget = { 1'd1, new_value_data__h12674, 1'd1 };
      12'h180: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11836, 1'd1 };
      12'h300: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11520, 1'd1 };
      12'h301:
	  grp1_rg_resp_to_core_wget =
	      { 1'd1,
		readdata__h11478,
		!grp1_rg_misa_extensions_warl[2] ||
		IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d438[2] ||
		!ma_core_req_req[0] };
      12'h302:
	  grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_medeleg_warl, 1'd1 };
      12'h303:
	  grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_mideleg_warl, 1'd1 };
      12'h304: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11587, 1'd1 };
      12'h305: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11510, 1'd1 };
      12'h306: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11796, 1'd1 };
      12'h30A: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11816, 1'd1 };
      12'h320: grp1_rg_resp_to_core_wget = 66'h20000000000000001;
      12'h340:
	  grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_mscratch_warl, 1'd1 };
      12'h341: grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_mepc_warl, 1'd1 };
      12'h342: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11677, 1'd1 };
      12'h343: grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_mtval_warl, 1'd1 };
      12'h344:
	  grp1_rg_resp_to_core_wget = { 1'd1, new_value_data__h12651, 1'd1 };
      12'h3A0: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11746, 1'd1 };
      12'h3B0: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11756, 1'd1 };
      12'h3B1: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11766, 1'd1 };
      12'h3B2: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11776, 1'd1 };
      12'h3B3: grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11786, 1'd1 };
      12'h800: grp1_rg_resp_to_core_wget = 66'h2000000000000002F;
      12'hB00, 12'hC00:
	  grp1_rg_resp_to_core_wget = { 1'd1, readdata__h11876, 1'd1 };
      12'hB02, 12'hC02:
	  grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_minstret, 1'd1 };
      12'hC01: grp1_rg_resp_to_core_wget = { 1'd1, grp1_rg_time, 1'd1 };
      12'hF11, 12'hF13, 12'hF14:
	  grp1_rg_resp_to_core_wget = 66'h20000000000000000;
      12'hF12: grp1_rg_resp_to_core_wget = 66'h2000000000000000A;
      default: grp1_rg_resp_to_core_wget = 66'd0;
    endcase
  end
  always@(grp1_ff_fwd_request_D_OUT or
	  grp2_rg_mhpmevent3_warl or
	  grp2_rg_mhpmevent4_warl or
	  grp2_rg_mhpmevent5_warl or
	  grp2_rg_mhpmevent6_warl or
	  readdata__h6058 or
	  grp2_rg_dpc_warl or
	  grp2_rg_dscratch0_warl or
	  grp2_rg_dscratch1_warl or
	  grp2_rg_mhpmcounter3_warl or
	  grp2_rg_mhpmcounter4_warl or
	  grp2_rg_mhpmcounter5_warl or grp2_rg_mhpmcounter6_warl)
  begin
    case (grp1_ff_fwd_request_D_OUT[78:67])
      12'h323:
	  grp2_rg_resp_to_core_wget = { 1'd1, grp2_rg_mhpmevent3_warl, 1'd1 };
      12'h324:
	  grp2_rg_resp_to_core_wget = { 1'd1, grp2_rg_mhpmevent4_warl, 1'd1 };
      12'h325:
	  grp2_rg_resp_to_core_wget = { 1'd1, grp2_rg_mhpmevent5_warl, 1'd1 };
      12'h326:
	  grp2_rg_resp_to_core_wget = { 1'd1, grp2_rg_mhpmevent6_warl, 1'd1 };
      12'h7B0: grp2_rg_resp_to_core_wget = { 1'd1, readdata__h6058, 1'd1 };
      12'h7B1: grp2_rg_resp_to_core_wget = { 1'd1, grp2_rg_dpc_warl, 1'd1 };
      12'h7B2:
	  grp2_rg_resp_to_core_wget = { 1'd1, grp2_rg_dscratch0_warl, 1'd1 };
      12'h7B3:
	  grp2_rg_resp_to_core_wget = { 1'd1, grp2_rg_dscratch1_warl, 1'd1 };
      12'hB03, 12'hC03:
	  grp2_rg_resp_to_core_wget =
	      { 1'd1, grp2_rg_mhpmcounter3_warl, 1'd1 };
      12'hB04, 12'hC04:
	  grp2_rg_resp_to_core_wget =
	      { 1'd1, grp2_rg_mhpmcounter4_warl, 1'd1 };
      12'hB05, 12'hC05:
	  grp2_rg_resp_to_core_wget =
	      { 1'd1, grp2_rg_mhpmcounter5_warl, 1'd1 };
      12'hB06, 12'hC06:
	  grp2_rg_resp_to_core_wget =
	      { 1'd1, grp2_rg_mhpmcounter6_warl, 1'd1 };
      default: grp2_rg_resp_to_core_wget = 66'h20000000000000000;
    endcase
  end
  assign grp1_rg_mcycle_port0__write_1 = grp1_rg_mcycle + 64'd1 ;
  assign grp1_rg_mcycle_EN_port1__write =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'hB00 ;
  always@(ma_core_req_req or x__h21803 or readdata__h11876)
  begin
    case (ma_core_req_req[2:1])
      2'd1: grp1_rg_mcycle_port1__write_1 = ma_core_req_req[66:3];
      2'd2:
	  grp1_rg_mcycle_port1__write_1 =
	      ma_core_req_req[66:3] | readdata__h11876;
      default: grp1_rg_mcycle_port1__write_1 = x__h21803 & readdata__h11876;
    endcase
  end
  assign grp1_rg_mcycle_port2__read =
	     grp1_rg_mcycle_EN_port1__write ?
	       grp1_rg_mcycle_port1__write_1 :
	       sbread_mv_csr_mcycle ;
  assign grp1_rg_minstret_EN_port0__write =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'hB02 ;
  always@(ma_core_req_req or x__h21803 or grp1_rg_minstret)
  begin
    case (ma_core_req_req[2:1])
      2'd1: grp1_rg_minstret_port0__write_1 = ma_core_req_req[66:3];
      2'd2:
	  grp1_rg_minstret_port0__write_1 =
	      ma_core_req_req[66:3] | grp1_rg_minstret;
      default: grp1_rg_minstret_port0__write_1 = x__h21803 & grp1_rg_minstret;
    endcase
  end
  assign grp1_rg_minstret_EN_port1__write =
	     EN_ma_incr_minstret && !x_wget__h555 ;
  assign grp1_rg_minstret_port1__write_1 =
	     x_port1__read__h9631 + ma_incr_minstret_incr ;
  assign grp1_rg_minstret_port2__read =
	     grp1_rg_minstret_EN_port1__write ?
	       grp1_rg_minstret_port1__write_1 :
	       sbread_mv_csr_minstret ;

  // register grp1_rg_fcsr_fflags_warl
  assign grp1_rg_fcsr_fflags_warl_D_IN =
	     MUX_grp1_rg_fcsr_fflags_warl_write_1__SEL_1 ?
	       x__h11289 :
	       MUX_grp1_rg_fcsr_fflags_warl_write_1__VAL_2 ;
  assign grp1_rg_fcsr_fflags_warl_EN =
	     EN_ma_set_fflags &&
	     NOT_ma_set_fflags__fflags_OR_grp1_rg_fcsr_ffla_ETC___d422 ||
	     EN_ma_core_req &&
	     (ma_core_req_req[78:67] == 12'h003 ||
	      ma_core_req_req[78:67] == 12'h001) ;

  // register grp1_rg_fcsr_frm_warl
  assign grp1_rg_fcsr_frm_warl_D_IN =
	     (ma_core_req_req[78:67] == 12'h003) ?
	       word__h18152[7:5] :
	       word__h21743[2:0] ;
  assign grp1_rg_fcsr_frm_warl_EN =
	     EN_ma_core_req &&
	     (ma_core_req_req[78:67] == 12'h003 ||
	      ma_core_req_req[78:67] == 12'h002) ;

  // register grp1_rg_mcause_exception_code_wlrl
  assign grp1_rg_mcause_exception_code_wlrl_D_IN =
	     MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_1 ?
	       x__h17873[4:0] :
	       mav_upd_on_trap_cause[4:0] ;
  assign grp1_rg_mcause_exception_code_wlrl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h342 ||
	     EN_mav_upd_on_trap &&
	     mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1261 ;

  // register grp1_rg_mcause_interrupt
  assign grp1_rg_mcause_interrupt_D_IN =
	     MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_1 ?
	       x__h17873[63] :
	       mav_upd_on_trap_cause[6] ;
  assign grp1_rg_mcause_interrupt_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h342 ||
	     EN_mav_upd_on_trap &&
	     mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1261 ;

  // register grp1_rg_mcounteren_warl
  assign grp1_rg_mcounteren_warl_D_IN = { 27'd0, word__h20568[4:0] } ;
  assign grp1_rg_mcounteren_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h306 ;

  // register grp1_rg_mcycle
  assign grp1_rg_mcycle_D_IN = grp1_rg_mcycle_port2__read ;
  assign grp1_rg_mcycle_EN = 1'b1 ;

  // register grp1_rg_medeleg_warl
  assign grp1_rg_medeleg_warl_D_IN =
	     { 48'd0,
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d940[15:12],
	       1'd0,
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d940[10:0] } ;
  assign grp1_rg_medeleg_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h302 ;

  // register grp1_rg_menvcfg_cbcfe
  assign grp1_rg_menvcfg_cbcfe_D_IN = x__h20832[6] ;
  assign grp1_rg_menvcfg_cbcfe_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h30A ;

  // register grp1_rg_menvcfg_cbie_warl
  assign grp1_rg_menvcfg_cbie_warl_D_IN = x__h20832[5:4] ;
  assign grp1_rg_menvcfg_cbie_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h30A &&
	     (x__h20832[5:4] == 2'd0 || x__h20832[5:4] == 2'd1 ||
	      x__h20832[5:4] == 2'd3) ;

  // register grp1_rg_menvcfg_cbze
  assign grp1_rg_menvcfg_cbze_D_IN = x__h20832[7] ;
  assign grp1_rg_menvcfg_cbze_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h30A ;

  // register grp1_rg_mepc_warl
  assign grp1_rg_mepc_warl_D_IN =
	     MUX_grp1_rg_mepc_warl_write_1__SEL_1 ?
	       MUX_grp1_rg_mepc_warl_write_1__VAL_1 :
	       MUX_grp1_rg_mepc_warl_write_1__VAL_2 ;
  assign grp1_rg_mepc_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h341 ||
	     EN_mav_upd_on_trap &&
	     mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1261 ;

  // register grp1_rg_mideleg_warl
  assign grp1_rg_mideleg_warl_D_IN =
	     { 48'd0,
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d921[15:12],
	       1'd0,
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d921[10] |
	       grp1_rg_misa_extensions_warl[7],
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d921[9:7],
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d921[6] |
	       grp1_rg_misa_extensions_warl[7],
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d921[5:3],
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d921[2] |
	       grp1_rg_misa_extensions_warl[7],
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d921[1:0] } ;
  assign grp1_rg_mideleg_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h303 ;

  // register grp1_rg_mie_debug_interrupt
  assign grp1_rg_mie_debug_interrupt_D_IN = x__h16307[16] ;
  assign grp1_rg_mie_debug_interrupt_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h304 ;

  // register grp1_rg_mie_meie
  assign grp1_rg_mie_meie_D_IN = x__h16307[11] ;
  assign grp1_rg_mie_meie_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h304 ;

  // register grp1_rg_mie_msie
  assign grp1_rg_mie_msie_D_IN = x__h16307[3] ;
  assign grp1_rg_mie_msie_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h304 ;

  // register grp1_rg_mie_mtie
  assign grp1_rg_mie_mtie_D_IN = x__h16307[7] ;
  assign grp1_rg_mie_mtie_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h304 ;

  // register grp1_rg_mie_seie
  assign grp1_rg_mie_seie_D_IN =
	     (ma_core_req_req[78:67] == 12'h304) ?
	       x__h16307[9] :
	       x__h17073[9] ;
  assign grp1_rg_mie_seie_EN =
	     EN_ma_core_req &&
	     (ma_core_req_req[78:67] == 12'h304 ||
	      ma_core_req_req[78:67] == 12'h104) ;

  // register grp1_rg_mie_ssie
  assign grp1_rg_mie_ssie_D_IN =
	     (ma_core_req_req[78:67] == 12'h304) ?
	       x__h16307[1] :
	       x__h17073[1] ;
  assign grp1_rg_mie_ssie_EN =
	     EN_ma_core_req &&
	     (ma_core_req_req[78:67] == 12'h304 ||
	      ma_core_req_req[78:67] == 12'h104) ;

  // register grp1_rg_mie_stie
  assign grp1_rg_mie_stie_D_IN =
	     (ma_core_req_req[78:67] == 12'h304) ?
	       x__h16307[5] :
	       x__h17073[5] ;
  assign grp1_rg_mie_stie_EN =
	     EN_ma_core_req &&
	     (ma_core_req_req[78:67] == 12'h304 ||
	      ma_core_req_req[78:67] == 12'h104) ;

  // register grp1_rg_mie_vseie_warl
  assign grp1_rg_mie_vseie_warl_D_IN = x__h16307[10] ;
  assign grp1_rg_mie_vseie_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h304 ;

  // register grp1_rg_mie_vssie_warl
  assign grp1_rg_mie_vssie_warl_D_IN = x__h16307[2] ;
  assign grp1_rg_mie_vssie_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h304 ;

  // register grp1_rg_mie_vstie_warl
  assign grp1_rg_mie_vstie_warl_D_IN = x__h16307[6] ;
  assign grp1_rg_mie_vstie_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h304 ;

  // register grp1_rg_minstret
  assign grp1_rg_minstret_D_IN = grp1_rg_minstret_port2__read ;
  assign grp1_rg_minstret_EN = 1'b1 ;

  // register grp1_rg_mip_seip
  assign grp1_rg_mip_seip_D_IN = word__h15269[9] ;
  assign grp1_rg_mip_seip_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h344 ;

  // register grp1_rg_mip_ssip
  assign grp1_rg_mip_ssip_D_IN =
	     (ma_core_req_req[78:67] == 12'h344) ?
	       word__h15269[1] :
	       word__h16014[1] ;
  assign grp1_rg_mip_ssip_EN =
	     EN_ma_core_req &&
	     (ma_core_req_req[78:67] == 12'h344 ||
	      ma_core_req_req[78:67] == 12'h144) ;

  // register grp1_rg_mip_stip
  assign grp1_rg_mip_stip_D_IN = word__h15269[5] ;
  assign grp1_rg_mip_stip_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h344 ;

  // register grp1_rg_mip_vseip_warl
  assign grp1_rg_mip_vseip_warl_D_IN = word__h15269[10] ;
  assign grp1_rg_mip_vseip_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h344 ;

  // register grp1_rg_mip_vssip_warl
  assign grp1_rg_mip_vssip_warl_D_IN = word__h15269[2] ;
  assign grp1_rg_mip_vssip_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h344 ;

  // register grp1_rg_mip_vstip_warl
  assign grp1_rg_mip_vstip_warl_D_IN = word__h15269[6] ;
  assign grp1_rg_mip_vstip_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h344 ;

  // register grp1_rg_misa_extensions_warl
  assign grp1_rg_misa_extensions_warl_D_IN =
	     { 5'd0,
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d438[20],
	       1'd0,
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d438[18],
	       5'd0,
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d438[12],
	       3'd0,
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d438[8],
	       2'd0,
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d438[5],
	       1'd0,
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d438[3] &
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d438[5],
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d438[2],
	       1'd0,
	       IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d438[0] } ;
  assign grp1_rg_misa_extensions_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h301 &&
	     (!grp1_rg_misa_extensions_warl[2] ||
	      IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d438[2] ||
	      !ma_core_req_req[0]) ;

  // register grp1_rg_misa_mxl_warl
  assign grp1_rg_misa_mxl_warl_D_IN =
	     IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d438[63:62] ;
  assign grp1_rg_misa_mxl_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h301 &&
	     (!grp1_rg_misa_extensions_warl[2] ||
	      IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d438[2] ||
	      !ma_core_req_req[0]) &&
	     IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d438[63:62] ==
	     2'd2 ;

  // register grp1_rg_mscratch_warl
  always@(ma_core_req_req or x__h21803 or grp1_rg_mscratch_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1: grp1_rg_mscratch_warl_D_IN = ma_core_req_req[66:3];
      2'd2:
	  grp1_rg_mscratch_warl_D_IN =
	      ma_core_req_req[66:3] | grp1_rg_mscratch_warl;
      default: grp1_rg_mscratch_warl_D_IN = x__h21803 & grp1_rg_mscratch_warl;
    endcase
  end
  assign grp1_rg_mscratch_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h340 ;

  // register grp1_rg_mstatus_fs_warl
  assign grp1_rg_mstatus_fs_warl_D_IN =
	     MUX_grp1_rg_mstatus_fs_warl_write_1__SEL_1 ?
	       2'b11 :
	       MUX_grp1_rg_mstatus_fs_warl_write_1__VAL_2 ;
  assign grp1_rg_mstatus_fs_warl_EN =
	     EN_ma_set_fflags &&
	     (ma_set_fflags__fflags != 5'd0 || ma_set_fflags_rdtype) ||
	     EN_ma_core_req &&
	     (ma_core_req_req[78:67] == 12'h300 ||
	      ma_core_req_req[78:67] == 12'h100 ||
	      ma_core_req_req[78:67] == 12'h003 ||
	      ma_core_req_req[78:67] == 12'h001 ||
	      ma_core_req_req[78:67] == 12'h002) ;

  // register grp1_rg_mstatus_mie
  always@(MUX_grp1_rg_mstatus_mie_write_1__SEL_1 or
	  x__h13647 or
	  MUX_grp1_rg_mstatus_mie_write_1__SEL_2 or
	  grp1_rg_mstatus_mpie or
	  MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_grp1_rg_mstatus_mie_write_1__SEL_1:
	  grp1_rg_mstatus_mie_D_IN = x__h13647[3];
      MUX_grp1_rg_mstatus_mie_write_1__SEL_2:
	  grp1_rg_mstatus_mie_D_IN = grp1_rg_mstatus_mpie;
      MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_2:
	  grp1_rg_mstatus_mie_D_IN = 1'b0;
      default: grp1_rg_mstatus_mie_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign grp1_rg_mstatus_mie_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h300 ||
	     EN_mav_upd_on_ret && mav_upd_on_ret_retype[3:0] != 4'hB &&
	     mav_upd_on_ret_retype[5:4] == 2'd3 ||
	     EN_mav_upd_on_trap &&
	     mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1261 ;

  // register grp1_rg_mstatus_mpie
  always@(MUX_grp1_rg_mstatus_mie_write_1__SEL_1 or
	  x__h13647 or
	  MUX_grp1_rg_mstatus_mie_write_1__SEL_2 or
	  MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_2 or
	  grp1_rg_mstatus_mie)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_grp1_rg_mstatus_mie_write_1__SEL_1:
	  grp1_rg_mstatus_mpie_D_IN = x__h13647[7];
      MUX_grp1_rg_mstatus_mie_write_1__SEL_2:
	  grp1_rg_mstatus_mpie_D_IN = 1'b1;
      MUX_grp1_rg_mcause_exception_code_wlrl_write_1__SEL_2:
	  grp1_rg_mstatus_mpie_D_IN = grp1_rg_mstatus_mie;
      default: grp1_rg_mstatus_mpie_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign grp1_rg_mstatus_mpie_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h300 ||
	     EN_mav_upd_on_ret && mav_upd_on_ret_retype[3:0] != 4'hB &&
	     mav_upd_on_ret_retype[5:4] == 2'd3 ||
	     EN_mav_upd_on_trap &&
	     mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1261 ;

  // register grp1_rg_mstatus_mpp_warl
  always@(MUX_grp1_rg_mstatus_mpp_warl_write_1__SEL_1 or
	  x__h13647 or
	  MUX_grp1_rg_mstatus_mie_write_1__SEL_2 or
	  MUX_grp1_rg_mstatus_mpp_warl_write_1__VAL_2 or
	  MUX_grp1_rg_mstatus_mpp_warl_write_1__SEL_3 or rg_prv)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_grp1_rg_mstatus_mpp_warl_write_1__SEL_1:
	  grp1_rg_mstatus_mpp_warl_D_IN = x__h13647[12:11];
      MUX_grp1_rg_mstatus_mie_write_1__SEL_2:
	  grp1_rg_mstatus_mpp_warl_D_IN =
	      MUX_grp1_rg_mstatus_mpp_warl_write_1__VAL_2;
      MUX_grp1_rg_mstatus_mpp_warl_write_1__SEL_3:
	  grp1_rg_mstatus_mpp_warl_D_IN = rg_prv;
      default: grp1_rg_mstatus_mpp_warl_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign grp1_rg_mstatus_mpp_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h300 &&
	     (x__h13647[12:11] == 2'd0 || x__h13647[12:11] == 2'd1 ||
	      x__h13647[12:11] == 2'd3) ||
	     EN_mav_upd_on_ret && mav_upd_on_ret_retype[3:0] != 4'hB &&
	     mav_upd_on_ret_retype[5:4] == 2'd3 ||
	     EN_mav_upd_on_trap &&
	     mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1264 ;

  // register grp1_rg_mstatus_mprv_warl
  assign grp1_rg_mstatus_mprv_warl_D_IN =
	     MUX_grp1_rg_mstatus_mie_write_1__SEL_1 && x__h13647[17] ;
  assign grp1_rg_mstatus_mprv_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h300 ||
	     EN_mav_upd_on_ret && _dfoo1 ;

  // register grp1_rg_mstatus_mxr
  assign grp1_rg_mstatus_mxr_D_IN =
	     (ma_core_req_req[78:67] == 12'h300) ?
	       x__h13647[19] :
	       x__h14668[19] ;
  assign grp1_rg_mstatus_mxr_EN = MUX_grp1_rg_mstatus_sie_write_1__SEL_2 ;

  // register grp1_rg_mstatus_sie
  always@(MUX_grp1_rg_mstatus_sie_write_1__SEL_1 or
	  grp1_rg_mstatus_spie or
	  MUX_grp1_rg_mstatus_sie_write_1__SEL_2 or
	  MUX_grp1_rg_mstatus_sie_write_1__VAL_2 or
	  MUX_grp1_rg_mstatus_sie_write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_grp1_rg_mstatus_sie_write_1__SEL_1:
	  grp1_rg_mstatus_sie_D_IN = grp1_rg_mstatus_spie;
      MUX_grp1_rg_mstatus_sie_write_1__SEL_2:
	  grp1_rg_mstatus_sie_D_IN = MUX_grp1_rg_mstatus_sie_write_1__VAL_2;
      MUX_grp1_rg_mstatus_sie_write_1__SEL_3: grp1_rg_mstatus_sie_D_IN = 1'd0;
      default: grp1_rg_mstatus_sie_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign grp1_rg_mstatus_sie_EN =
	     EN_mav_upd_on_ret && mav_upd_on_ret_retype[3:0] != 4'hB &&
	     mav_upd_on_ret_retype[5:4] == 2'd1 ||
	     EN_ma_core_req &&
	     (ma_core_req_req[78:67] == 12'h300 ||
	      ma_core_req_req[78:67] == 12'h100) ||
	     EN_mav_upd_on_trap &&
	     mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1248 ;

  // register grp1_rg_mstatus_spie
  always@(MUX_grp1_rg_mstatus_sie_write_1__SEL_1 or
	  MUX_grp1_rg_mstatus_sie_write_1__SEL_2 or
	  MUX_grp1_rg_mstatus_spie_write_1__VAL_2 or
	  MUX_grp1_rg_mstatus_sie_write_1__SEL_3 or grp1_rg_mstatus_sie)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_grp1_rg_mstatus_sie_write_1__SEL_1:
	  grp1_rg_mstatus_spie_D_IN = 1'b1;
      MUX_grp1_rg_mstatus_sie_write_1__SEL_2:
	  grp1_rg_mstatus_spie_D_IN = MUX_grp1_rg_mstatus_spie_write_1__VAL_2;
      MUX_grp1_rg_mstatus_sie_write_1__SEL_3:
	  grp1_rg_mstatus_spie_D_IN = grp1_rg_mstatus_sie;
      default: grp1_rg_mstatus_spie_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign grp1_rg_mstatus_spie_EN =
	     EN_mav_upd_on_ret && mav_upd_on_ret_retype[3:0] != 4'hB &&
	     mav_upd_on_ret_retype[5:4] == 2'd1 ||
	     EN_ma_core_req &&
	     (ma_core_req_req[78:67] == 12'h300 ||
	      ma_core_req_req[78:67] == 12'h100) ||
	     EN_mav_upd_on_trap &&
	     mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1248 ;

  // register grp1_rg_mstatus_spp
  always@(MUX_grp1_rg_mstatus_sie_write_1__SEL_1 or
	  grp1_rg_misa_extensions_warl or
	  MUX_grp1_rg_mstatus_sie_write_1__SEL_2 or
	  MUX_grp1_rg_mstatus_spp_write_1__VAL_2 or
	  MUX_grp1_rg_mstatus_sie_write_1__SEL_3 or rg_prv)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_grp1_rg_mstatus_sie_write_1__SEL_1:
	  grp1_rg_mstatus_spp_D_IN = !grp1_rg_misa_extensions_warl[20];
      MUX_grp1_rg_mstatus_sie_write_1__SEL_2:
	  grp1_rg_mstatus_spp_D_IN = MUX_grp1_rg_mstatus_spp_write_1__VAL_2;
      MUX_grp1_rg_mstatus_sie_write_1__SEL_3:
	  grp1_rg_mstatus_spp_D_IN = rg_prv[0];
      default: grp1_rg_mstatus_spp_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign grp1_rg_mstatus_spp_EN =
	     EN_mav_upd_on_ret && mav_upd_on_ret_retype[3:0] != 4'hB &&
	     mav_upd_on_ret_retype[5:4] == 2'd1 ||
	     EN_ma_core_req &&
	     (ma_core_req_req[78:67] == 12'h300 ||
	      ma_core_req_req[78:67] == 12'h100) ||
	     EN_mav_upd_on_trap &&
	     mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1248 ;

  // register grp1_rg_mstatus_sum
  assign grp1_rg_mstatus_sum_D_IN =
	     (ma_core_req_req[78:67] == 12'h300) ?
	       x__h13647[18] :
	       x__h14668[18] ;
  assign grp1_rg_mstatus_sum_EN = MUX_grp1_rg_mstatus_sie_write_1__SEL_2 ;

  // register grp1_rg_mstatus_tsr
  assign grp1_rg_mstatus_tsr_D_IN = x__h13647[22] ;
  assign grp1_rg_mstatus_tsr_EN = MUX_grp1_rg_mstatus_mie_write_1__SEL_1 ;

  // register grp1_rg_mstatus_tvm
  assign grp1_rg_mstatus_tvm_D_IN = x__h13647[20] ;
  assign grp1_rg_mstatus_tvm_EN = MUX_grp1_rg_mstatus_mie_write_1__SEL_1 ;

  // register grp1_rg_mstatus_tw
  assign grp1_rg_mstatus_tw_D_IN = x__h13647[21] ;
  assign grp1_rg_mstatus_tw_EN = MUX_grp1_rg_mstatus_mie_write_1__SEL_1 ;

  // register grp1_rg_mtval_warl
  assign grp1_rg_mtval_warl_D_IN =
	     MUX_grp1_rg_mtval_warl_write_1__SEL_1 ?
	       MUX_grp1_rg_mtval_warl_write_1__VAL_1 :
	       mav_upd_on_trap_tval ;
  assign grp1_rg_mtval_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h343 ||
	     EN_mav_upd_on_trap &&
	     mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1261 ;

  // register grp1_rg_mtvec_base_warl
  assign grp1_rg_mtvec_base_warl_D_IN = x__h13506[63:2] ;
  assign grp1_rg_mtvec_base_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h305 ;

  // register grp1_rg_mtvec_mode_warl
  assign grp1_rg_mtvec_mode_warl_D_IN = x__h13506[1:0] ;
  assign grp1_rg_mtvec_mode_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h305 &&
	     x__h13506[1:0] <= 2'd1 ;

  // register grp1_rg_pmpaddr0_warl
  assign grp1_rg_pmpaddr0_warl_D_IN = { word__h19935[29:1], 1'd0 } ;
  assign grp1_rg_pmpaddr0_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h3B0 &&
	     !grp1_rg_pmpcfg0_pmp0cfg_warl[7] ;

  // register grp1_rg_pmpaddr1_warl
  assign grp1_rg_pmpaddr1_warl_D_IN = { word__h20097[29:1], 1'd0 } ;
  assign grp1_rg_pmpaddr1_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h3B1 &&
	     !grp1_rg_pmpcfg0_pmp1cfg_warl[7] ;

  // register grp1_rg_pmpaddr2_warl
  assign grp1_rg_pmpaddr2_warl_D_IN = { word__h20254[29:1], 1'd0 } ;
  assign grp1_rg_pmpaddr2_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h3B2 &&
	     !grp1_rg_pmpcfg0_pmp2cfg_warl[7] ;

  // register grp1_rg_pmpaddr3_warl
  assign grp1_rg_pmpaddr3_warl_D_IN = { word__h20411[29:1], 1'd0 } ;
  assign grp1_rg_pmpaddr3_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h3B3 &&
	     !grp1_rg_pmpcfg0_pmp3cfg_warl[7] ;

  // register grp1_rg_pmpcfg0_pmp0cfg_warl
  assign grp1_rg_pmpcfg0_pmp0cfg_warl_D_IN = x__h18813[7:0] ;
  assign grp1_rg_pmpcfg0_pmp0cfg_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h3A0 &&
	     !grp1_rg_pmpcfg0_pmp0cfg_warl[7] &&
	     x__h18813[6:5] == 2'd0 &&
	     x__h18813[4:3] != 2'd2 &&
	     x__h18813[2:0] != 3'd2 &&
	     x__h18813[2:0] != 3'd6 ;

  // register grp1_rg_pmpcfg0_pmp1cfg_warl
  assign grp1_rg_pmpcfg0_pmp1cfg_warl_D_IN = x__h18813[15:8] ;
  assign grp1_rg_pmpcfg0_pmp1cfg_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h3A0 &&
	     !grp1_rg_pmpcfg0_pmp1cfg_warl[7] &&
	     x__h18813[14:13] == 2'd0 &&
	     x__h18813[12:11] != 2'd2 &&
	     x__h18813[10:8] != 3'd2 &&
	     x__h18813[10:8] != 3'd6 ;

  // register grp1_rg_pmpcfg0_pmp2cfg_warl
  assign grp1_rg_pmpcfg0_pmp2cfg_warl_D_IN = x__h18813[23:16] ;
  assign grp1_rg_pmpcfg0_pmp2cfg_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h3A0 &&
	     !grp1_rg_pmpcfg0_pmp2cfg_warl[7] &&
	     x__h18813[22:21] == 2'd0 &&
	     x__h18813[20:19] != 2'd2 &&
	     x__h18813[18:16] != 3'd2 &&
	     x__h18813[18:16] != 3'd6 ;

  // register grp1_rg_pmpcfg0_pmp3cfg_warl
  assign grp1_rg_pmpcfg0_pmp3cfg_warl_D_IN = x__h18813[31:24] ;
  assign grp1_rg_pmpcfg0_pmp3cfg_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h3A0 &&
	     !grp1_rg_pmpcfg0_pmp3cfg_warl[7] &&
	     x__h18813[30:29] == 2'd0 &&
	     x__h18813[28:27] != 2'd2 &&
	     x__h18813[26:24] != 3'd2 &&
	     x__h18813[26:24] != 3'd6 ;

  // register grp1_rg_satp_asid_warl
  assign grp1_rg_satp_asid_warl_D_IN =
	     IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d1090[59:44] ;
  assign grp1_rg_satp_asid_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h180 &&
	     (IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d1090[63:60] ==
	      4'd0 ||
	      IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d1090[63:60] ==
	      4'd8) &&
	     IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d1090[59:44] <=
	     16'd255 ;

  // register grp1_rg_satp_mode_warl
  assign grp1_rg_satp_mode_warl_D_IN =
	     IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d1090[63:60] ;
  assign grp1_rg_satp_mode_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h180 &&
	     (IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d1090[63:60] ==
	      4'd0 ||
	      IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d1090[63:60] ==
	      4'd8) ;

  // register grp1_rg_satp_ppn_warl
  assign grp1_rg_satp_ppn_warl_D_IN =
	     IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d1090[43:0] ;
  assign grp1_rg_satp_ppn_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h180 &&
	     (IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d1090[63:60] ==
	      4'd0 ||
	      IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d1090[63:60] ==
	      4'd8) ;

  // register grp1_rg_scause_exception_code_wlrl
  assign grp1_rg_scause_exception_code_wlrl_D_IN =
	     MUX_grp1_rg_scause_exception_code_wlrl_write_1__SEL_1 ?
	       x__h17628[4:0] :
	       mav_upd_on_trap_cause[4:0] ;
  assign grp1_rg_scause_exception_code_wlrl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h142 ||
	     EN_mav_upd_on_trap &&
	     mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1248 ;

  // register grp1_rg_scause_interrupt
  assign grp1_rg_scause_interrupt_D_IN =
	     MUX_grp1_rg_scause_exception_code_wlrl_write_1__SEL_1 ?
	       x__h17628[63] :
	       mav_upd_on_trap_cause[6] ;
  assign grp1_rg_scause_interrupt_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h142 ||
	     EN_mav_upd_on_trap &&
	     mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1248 ;

  // register grp1_rg_scounteren_warl
  assign grp1_rg_scounteren_warl_D_IN = { 27'd0, word__h20702[4:0] } ;
  assign grp1_rg_scounteren_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h106 ;

  // register grp1_rg_senvcfg_cbcfe
  assign grp1_rg_senvcfg_cbcfe_D_IN = x__h21097[6] ;
  assign grp1_rg_senvcfg_cbcfe_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h10A ;

  // register grp1_rg_senvcfg_cbie_warl
  assign grp1_rg_senvcfg_cbie_warl_D_IN = x__h21097[5:4] ;
  assign grp1_rg_senvcfg_cbie_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h10A &&
	     (x__h21097[5:4] == 2'd0 || x__h21097[5:4] == 2'd1 ||
	      x__h21097[5:4] == 2'd3) ;

  // register grp1_rg_senvcfg_cbze
  assign grp1_rg_senvcfg_cbze_D_IN = x__h21097[7] ;
  assign grp1_rg_senvcfg_cbze_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h10A ;

  // register grp1_rg_sepc_warl
  assign grp1_rg_sepc_warl_D_IN =
	     MUX_grp1_rg_sepc_warl_write_1__SEL_1 ?
	       MUX_grp1_rg_sepc_warl_write_1__VAL_1 :
	       MUX_grp1_rg_mepc_warl_write_1__VAL_2 ;
  assign grp1_rg_sepc_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h141 ||
	     EN_mav_upd_on_trap &&
	     mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1248 ;

  // register grp1_rg_sscratch_warl
  always@(ma_core_req_req or x__h21803 or grp1_rg_sscratch_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1: grp1_rg_sscratch_warl_D_IN = ma_core_req_req[66:3];
      2'd2:
	  grp1_rg_sscratch_warl_D_IN =
	      ma_core_req_req[66:3] | grp1_rg_sscratch_warl;
      default: grp1_rg_sscratch_warl_D_IN = x__h21803 & grp1_rg_sscratch_warl;
    endcase
  end
  assign grp1_rg_sscratch_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h140 ;

  // register grp1_rg_stval_warl
  assign grp1_rg_stval_warl_D_IN =
	     MUX_grp1_rg_stval_warl_write_1__SEL_1 ?
	       MUX_grp1_rg_stval_warl_write_1__VAL_1 :
	       mav_upd_on_trap_tval ;
  assign grp1_rg_stval_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h143 ||
	     EN_mav_upd_on_trap &&
	     mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1248 ;

  // register grp1_rg_stvec_base_warl
  assign grp1_rg_stvec_base_warl_D_IN = x__h13365[63:2] ;
  assign grp1_rg_stvec_base_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h105 ;

  // register grp1_rg_stvec_mode_warl
  assign grp1_rg_stvec_mode_warl_D_IN = x__h13365[1:0] ;
  assign grp1_rg_stvec_mode_warl_EN =
	     EN_ma_core_req && ma_core_req_req[78:67] == 12'h105 &&
	     x__h13365[1:0] <= 2'd1 ;

  // register grp1_rg_time
  assign grp1_rg_time_D_IN = ma_set_time__time ;
  assign grp1_rg_time_EN = EN_ma_set_time ;

  // register grp2_rg_dcsr_cause
  assign grp2_rg_dcsr_cause_D_IN =
	     mav_upd_on_trap_cause[6] ? 3'd3 : mav_upd_on_trap_cause[2:0] ;
  assign grp2_rg_dcsr_cause_EN = MUX_grp2_rg_dpc_warl_write_1__SEL_2 ;

  // register grp2_rg_dcsr_ebreakm_warl
  assign grp2_rg_dcsr_ebreakm_warl_D_IN = x__h7163[15] ;
  assign grp2_rg_dcsr_ebreakm_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'h7B0 ;

  // register grp2_rg_dcsr_ebreaks_warl
  assign grp2_rg_dcsr_ebreaks_warl_D_IN = x__h7163[13] ;
  assign grp2_rg_dcsr_ebreaks_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'h7B0 ;

  // register grp2_rg_dcsr_ebreaku_warl
  assign grp2_rg_dcsr_ebreaku_warl_D_IN = x__h7163[12] ;
  assign grp2_rg_dcsr_ebreaku_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'h7B0 ;

  // register grp2_rg_dcsr_mprven_warl
  assign grp2_rg_dcsr_mprven_warl_D_IN = x__h7163[4] ;
  assign grp2_rg_dcsr_mprven_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'h7B0 ;

  // register grp2_rg_dcsr_nmip
  assign grp2_rg_dcsr_nmip_D_IN = 1'b0 ;
  assign grp2_rg_dcsr_nmip_EN = 1'b0 ;

  // register grp2_rg_dcsr_prv_warl
  assign grp2_rg_dcsr_prv_warl_D_IN =
	     MUX_grp2_rg_dcsr_prv_warl_write_1__SEL_1 ?
	       x__h7163[1:0] :
	       rg_prv ;
  assign grp2_rg_dcsr_prv_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'h7B0 &&
	     (x__h7163[1:0] == 2'd0 || x__h7163[1:0] == 2'd1 ||
	      x__h7163[1:0] == 2'd3) ||
	     EN_mav_upd_on_trap &&
	     NOT_mav_upd_on_trap_cause_BIT_6_200_201_AND_ma_ETC___d1236 ;

  // register grp2_rg_dcsr_step_warl
  assign grp2_rg_dcsr_step_warl_D_IN = x__h7163[2] ;
  assign grp2_rg_dcsr_step_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'h7B0 ;

  // register grp2_rg_dcsr_stepie_warl
  assign grp2_rg_dcsr_stepie_warl_D_IN = x__h7163[11] ;
  assign grp2_rg_dcsr_stepie_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'h7B0 ;

  // register grp2_rg_dcsr_stopcount_warl
  assign grp2_rg_dcsr_stopcount_warl_D_IN = x__h7163[10] ;
  assign grp2_rg_dcsr_stopcount_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'h7B0 ;

  // register grp2_rg_dcsr_stoptime_warl
  assign grp2_rg_dcsr_stoptime_warl_D_IN = x__h7163[9] ;
  assign grp2_rg_dcsr_stoptime_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'h7B0 ;

  // register grp2_rg_dpc_warl
  assign grp2_rg_dpc_warl_D_IN =
	     MUX_grp2_rg_dpc_warl_write_1__SEL_1 ?
	       MUX_grp2_rg_dpc_warl_write_1__VAL_1 :
	       mav_upd_on_trap_pc ;
  assign grp2_rg_dpc_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'h7B1 ||
	     EN_mav_upd_on_trap &&
	     (!mav_upd_on_trap_cause[6] &&
	      (mav_upd_on_trap_cause[5:0] == 6'd25 ||
	       mav_upd_on_trap_cause[5:0] == 6'd26 ||
	       mav_upd_on_trap_cause[5:0] == 6'd28 ||
	       mav_upd_on_trap_cause[5:0] == 6'd29) ||
	      mav_upd_on_trap_cause[6] &&
	      mav_upd_on_trap_cause[5:0] == 6'd16) ;

  // register grp2_rg_dscratch0_warl
  always@(grp1_ff_fwd_request_D_OUT or x__h6596 or grp2_rg_dscratch0_warl)
  begin
    case (grp1_ff_fwd_request_D_OUT[2:1])
      2'd1: grp2_rg_dscratch0_warl_D_IN = grp1_ff_fwd_request_D_OUT[66:3];
      2'd2:
	  grp2_rg_dscratch0_warl_D_IN =
	      grp1_ff_fwd_request_D_OUT[66:3] | grp2_rg_dscratch0_warl;
      default: grp2_rg_dscratch0_warl_D_IN =
		   x__h6596 & grp2_rg_dscratch0_warl;
    endcase
  end
  assign grp2_rg_dscratch0_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'h7B2 ;

  // register grp2_rg_dscratch1_warl
  always@(grp1_ff_fwd_request_D_OUT or x__h6596 or grp2_rg_dscratch1_warl)
  begin
    case (grp1_ff_fwd_request_D_OUT[2:1])
      2'd1: grp2_rg_dscratch1_warl_D_IN = grp1_ff_fwd_request_D_OUT[66:3];
      2'd2:
	  grp2_rg_dscratch1_warl_D_IN =
	      grp1_ff_fwd_request_D_OUT[66:3] | grp2_rg_dscratch1_warl;
      default: grp2_rg_dscratch1_warl_D_IN =
		   x__h6596 & grp2_rg_dscratch1_warl;
    endcase
  end
  assign grp2_rg_dscratch1_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'h7B3 ;

  // register grp2_rg_mhpmcounter3_warl
  assign grp2_rg_mhpmcounter3_warl_D_IN =
	     MUX_grp2_rg_mhpmcounter3_warl_write_1__SEL_1 ?
	       MUX_grp2_rg_mhpmcounter3_warl_write_1__VAL_1 :
	       MUX_grp2_rg_mhpmcounter3_warl_write_1__VAL_2 ;
  assign grp2_rg_mhpmcounter3_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'hB03 ||
	     WILL_FIRE_RL_grp2_rl_increment_mhpmc3 && !x_wget__h555 ;

  // register grp2_rg_mhpmcounter4_warl
  assign grp2_rg_mhpmcounter4_warl_D_IN =
	     MUX_grp2_rg_mhpmcounter4_warl_write_1__SEL_1 ?
	       MUX_grp2_rg_mhpmcounter4_warl_write_1__VAL_1 :
	       MUX_grp2_rg_mhpmcounter4_warl_write_1__VAL_2 ;
  assign grp2_rg_mhpmcounter4_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'hB04 ||
	     WILL_FIRE_RL_grp2_rl_increment_mhpmc4 && !x_wget__h555 ;

  // register grp2_rg_mhpmcounter5_warl
  assign grp2_rg_mhpmcounter5_warl_D_IN =
	     MUX_grp2_rg_mhpmcounter5_warl_write_1__SEL_1 ?
	       MUX_grp2_rg_mhpmcounter5_warl_write_1__VAL_1 :
	       MUX_grp2_rg_mhpmcounter5_warl_write_1__VAL_2 ;
  assign grp2_rg_mhpmcounter5_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'hB05 ||
	     WILL_FIRE_RL_grp2_rl_increment_mhpmc5 && !x_wget__h555 ;

  // register grp2_rg_mhpmcounter6_warl
  assign grp2_rg_mhpmcounter6_warl_D_IN =
	     MUX_grp2_rg_mhpmcounter6_warl_write_1__SEL_1 ?
	       MUX_grp2_rg_mhpmcounter6_warl_write_1__VAL_1 :
	       MUX_grp2_rg_mhpmcounter6_warl_write_1__VAL_2 ;
  assign grp2_rg_mhpmcounter6_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'hB06 ||
	     WILL_FIRE_RL_grp2_rl_increment_mhpmc6 && !x_wget__h555 ;

  // register grp2_rg_mhpmevent3_warl
  assign grp2_rg_mhpmevent3_warl_D_IN = x__h6757 ;
  assign grp2_rg_mhpmevent3_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'h323 &&
	     x__h6757 <= 64'd31 ;

  // register grp2_rg_mhpmevent4_warl
  assign grp2_rg_mhpmevent4_warl_D_IN = x__h6859 ;
  assign grp2_rg_mhpmevent4_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'h324 &&
	     x__h6859 <= 64'd31 ;

  // register grp2_rg_mhpmevent5_warl
  assign grp2_rg_mhpmevent5_warl_D_IN = x__h6961 ;
  assign grp2_rg_mhpmevent5_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'h325 &&
	     x__h6961 <= 64'd31 ;

  // register grp2_rg_mhpmevent6_warl
  assign grp2_rg_mhpmevent6_warl_D_IN = x__h7063 ;
  assign grp2_rg_mhpmevent6_warl_EN =
	     grp1_ff_fwd_request_EMPTY_N &&
	     grp1_ff_fwd_request_D_OUT[78:67] == 12'h326 &&
	     x__h7063 <= 64'd31 ;

  // register rg_debug_mode
  assign rg_debug_mode_D_IN = !MUX_rg_debug_mode_write_1__SEL_1 ;
  assign rg_debug_mode_EN =
	     EN_mav_upd_on_ret && mav_upd_on_ret_retype[3:0] == 4'hB ||
	     EN_mav_upd_on_trap &&
	     (!mav_upd_on_trap_cause[6] &&
	      (mav_upd_on_trap_cause[5:0] == 6'd25 ||
	       mav_upd_on_trap_cause[5:0] == 6'd26 ||
	       mav_upd_on_trap_cause[5:0] == 6'd28 ||
	       mav_upd_on_trap_cause[5:0] == 6'd29) ||
	      mav_upd_on_trap_cause[6] &&
	      mav_upd_on_trap_cause[5:0] == 6'd16) ;

  // register rg_prv
  assign rg_prv_D_IN =
	     MUX_rg_prv_write_1__SEL_1 ?
	       MUX_rg_prv_write_1__VAL_1 :
	       MUX_rg_prv_write_1__VAL_2 ;
  assign rg_prv_EN =
	     EN_mav_upd_on_ret && _dfoo3 || EN_mav_upd_on_trap && _dfoo5 ;

  // register rg_virtual
  assign rg_virtual_D_IN = 1'b0 ;
  assign rg_virtual_EN = 1'b0 ;

  // submodule grp1_ff_fwd_request
  assign grp1_ff_fwd_request_D_IN = ma_core_req_req ;
  assign grp1_ff_fwd_request_ENQ =
	     EN_ma_core_req && ma_core_req_req[78:67] != 12'h301 &&
	     ma_core_req_req[78:67] != 12'hF11 &&
	     ma_core_req_req[78:67] != 12'h105 &&
	     ma_core_req_req[78:67] != 12'h305 &&
	     ma_core_req_req[78:67] != 12'h300 &&
	     ma_core_req_req[78:67] != 12'h100 &&
	     ma_core_req_req[78:67] != 12'hF12 &&
	     ma_core_req_req[78:67] != 12'hF13 &&
	     ma_core_req_req[78:67] != 12'hF14 &&
	     ma_core_req_req[78:67] != 12'h344 &&
	     ma_core_req_req[78:67] != 12'h144 &&
	     ma_core_req_req[78:67] != 12'h304 &&
	     ma_core_req_req[78:67] != 12'h104 &&
	     ma_core_req_req[78:67] != 12'h340 &&
	     ma_core_req_req[78:67] != 12'h140 &&
	     ma_core_req_req[78:67] != 12'h141 &&
	     ma_core_req_req[78:67] != 12'h143 &&
	     ma_core_req_req[78:67] != 12'h142 &&
	     ma_core_req_req[78:67] != 12'h341 &&
	     ma_core_req_req[78:67] != 12'h343 &&
	     ma_core_req_req[78:67] != 12'h342 &&
	     ma_core_req_req[78:67] != 12'hB00 &&
	     ma_core_req_req[78:67] != 12'hB02 &&
	     ma_core_req_req[78:67] != 12'h003 &&
	     ma_core_req_req[78:67] != 12'hC01 &&
	     ma_core_req_req[78:67] != 12'h303 &&
	     ma_core_req_req[78:67] != 12'h302 &&
	     ma_core_req_req[78:67] != 12'h3A0 &&
	     ma_core_req_req[78:67] != 12'h3B0 &&
	     ma_core_req_req[78:67] != 12'h3B1 &&
	     ma_core_req_req[78:67] != 12'h3B2 &&
	     ma_core_req_req[78:67] != 12'h3B3 &&
	     ma_core_req_req[78:67] != 12'h306 &&
	     ma_core_req_req[78:67] != 12'h106 &&
	     ma_core_req_req[78:67] != 12'h30A &&
	     ma_core_req_req[78:67] != 12'h10A &&
	     ma_core_req_req[78:67] != 12'h180 &&
	     ma_core_req_req[78:67] != 12'h320 &&
	     ma_core_req_req[78:67] != 12'h001 &&
	     ma_core_req_req[78:67] != 12'h002 &&
	     ma_core_req_req[78:67] != 12'hC00 &&
	     ma_core_req_req[78:67] != 12'hC02 &&
	     ma_core_req_req[78:67] != 12'h800 ;
  assign grp1_ff_fwd_request_DEQ = grp1_ff_fwd_request_EMPTY_N ;
  assign grp1_ff_fwd_request_CLR = 1'b0 ;

  // submodule grp2_ff_fwd_request
  assign grp2_ff_fwd_request_D_IN = 79'h0 ;
  assign grp2_ff_fwd_request_ENQ = 1'b0 ;
  assign grp2_ff_fwd_request_DEQ = 1'b0 ;
  assign grp2_ff_fwd_request_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_grp1_rg_pmpcfg0_pmp0cfg_warl_73_BIT_4_75_TH_ETC___d379 =
	     grp1_rg_pmpcfg0_pmp0cfg_warl[4] ?
	       grp1_rg_pmpaddr0_warl :
	       { grp1_rg_pmpaddr0_warl[29:1], 1'd0 } ;
  assign IF_grp1_rg_pmpcfg0_pmp1cfg_warl_71_BIT_4_80_TH_ETC___d384 =
	     grp1_rg_pmpcfg0_pmp1cfg_warl[4] ?
	       grp1_rg_pmpaddr1_warl :
	       { grp1_rg_pmpaddr1_warl[29:1], 1'd0 } ;
  assign IF_grp1_rg_pmpcfg0_pmp2cfg_warl_69_BIT_4_85_TH_ETC___d389 =
	     grp1_rg_pmpcfg0_pmp2cfg_warl[4] ?
	       grp1_rg_pmpaddr2_warl :
	       { grp1_rg_pmpaddr2_warl[29:1], 1'd0 } ;
  assign IF_grp1_rg_pmpcfg0_pmp3cfg_warl_67_BIT_4_90_TH_ETC___d394 =
	     grp1_rg_pmpcfg0_pmp3cfg_warl[4] ?
	       grp1_rg_pmpaddr3_warl :
	       { grp1_rg_pmpaddr3_warl[29:1], 1'd0 } ;
  assign NOT_grp1_rg_mideleg_warl_65_SRL_mav_upd_on_tra_ETC___d1259 =
	     !grp1_rg_mideleg_warl_65_SRL_mav_upd_on_trap_ca_ETC___d1216 &&
	     !grp1_rg_medeleg_warl_66_SRL_mav_upd_on_trap_ca_ETC___d1220 ||
	     !rg_prv_11_ULE_1___d1222 ||
	     !grp1_rg_misa_extensions_warl[18] ;
  assign NOT_ma_set_fflags__fflags_OR_grp1_rg_fcsr_ffla_ETC___d422 =
	     x__h11289 != grp1_rg_fcsr_fflags_warl ;
  assign NOT_mav_upd_on_trap_cause_BIT_6_200_201_AND_ma_ETC___d1227 =
	     !mav_upd_on_trap_cause[6] &&
	     (mav_upd_on_trap_cause[5:0] == 6'd25 ||
	      mav_upd_on_trap_cause[5:0] == 6'd26 ||
	      mav_upd_on_trap_cause[5:0] == 6'd28 ||
	      mav_upd_on_trap_cause[5:0] == 6'd29) ||
	     mav_upd_on_trap_cause[6] &&
	     mav_upd_on_trap_cause[5:0] == 6'd16 ||
	     !rg_debug_mode &&
	     grp1_rg_mideleg_warl_65_SRL_mav_upd_on_trap_ca_ETC___d1225 ;
  assign NOT_mav_upd_on_trap_cause_BIT_6_200_201_AND_ma_ETC___d1236 =
	     (!mav_upd_on_trap_cause[6] &&
	      (mav_upd_on_trap_cause[5:0] == 6'd25 ||
	       mav_upd_on_trap_cause[5:0] == 6'd26 ||
	       mav_upd_on_trap_cause[5:0] == 6'd28 ||
	       mav_upd_on_trap_cause[5:0] == 6'd29) ||
	      mav_upd_on_trap_cause[6] &&
	      mav_upd_on_trap_cause[5:0] == 6'd16) &&
	     (rg_prv == 2'd0 || rg_prv == 2'd1 || rg_prv == 2'd3) ;
  assign _dfoo1 =
	     mav_upd_on_ret_retype[3:0] == 4'hB &&
	     grp2_rg_dcsr_prv_warl != 2'd3 ||
	     mav_upd_on_ret_retype[3:0] != 4'hB &&
	     (mav_upd_on_ret_retype[5:4] == 2'd1 ||
	      mav_upd_on_ret_retype[5:4] == 2'd3 &&
	      grp1_rg_mstatus_mpp_warl != 2'd3) ;
  assign _dfoo3 =
	     mav_upd_on_ret_retype[3:0] == 4'hB ||
	     mav_upd_on_ret_retype[5:4] == 2'd1 ||
	     mav_upd_on_ret_retype[5:4] == 2'd3 ;
  assign _dfoo5 =
	     NOT_mav_upd_on_trap_cause_BIT_6_200_201_AND_ma_ETC___d1227 ||
	     mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1261 ;
  assign anydata__h5594 = x__read_data__h22105 | x__read_data__h22125 ;
  assign grp1_rg_medeleg_warl_66_SRL_mav_upd_on_trap_ca_ETC___d1220 =
	     x__h23769[0] & y__h23768 ;
  assign grp1_rg_mideleg_warl_65_SRL_mav_upd_on_trap_ca_ETC___d1216 =
	     x__h23729[0] & mav_upd_on_trap_cause[6] ;
  assign grp1_rg_mideleg_warl_65_SRL_mav_upd_on_trap_ca_ETC___d1225 =
	     (grp1_rg_mideleg_warl_65_SRL_mav_upd_on_trap_ca_ETC___d1216 ||
	      grp1_rg_medeleg_warl_66_SRL_mav_upd_on_trap_ca_ETC___d1220) &&
	     rg_prv_11_ULE_1___d1222 &&
	     grp1_rg_misa_extensions_warl[18] ;
  assign lv_trapmode__h24718 =
	     NOT_grp1_rg_mideleg_warl_65_SRL_mav_upd_on_tra_ETC___d1259 ?
	       grp1_rg_mtvec_mode_warl :
	       x1_avValue_snd__h24215 ;
  assign lv_tvec___1__h23686 =
	     (mav_upd_on_trap_cause[5:0] == 6'd3 &&
	      !mav_upd_on_trap_cause[6]) ?
	       64'd2048 :
	       64'd2056 ;
  assign lv_tvec___1__h24795 =
	     lv_tvec__h24717 + { 56'd0, mav_upd_on_trap_cause[5:0], 2'b0 } ;
  assign lv_tvec__h24717 =
	     NOT_grp1_rg_mideleg_warl_65_SRL_mav_upd_on_tra_ETC___d1259 ?
	       y_avValue_fst__h24708 :
	       x1_avValue_fst__h24214 ;
  assign mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1248 =
	     (mav_upd_on_trap_cause[6] ||
	      mav_upd_on_trap_cause[5:0] != 6'd25 &&
	      mav_upd_on_trap_cause[5:0] != 6'd26 &&
	      mav_upd_on_trap_cause[5:0] != 6'd28 &&
	      mav_upd_on_trap_cause[5:0] != 6'd29) &&
	     (!mav_upd_on_trap_cause[6] ||
	      mav_upd_on_trap_cause[5:0] != 6'd16) &&
	     !rg_debug_mode &&
	     grp1_rg_mideleg_warl_65_SRL_mav_upd_on_trap_ca_ETC___d1225 ;
  assign mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1261 =
	     (mav_upd_on_trap_cause[6] ||
	      mav_upd_on_trap_cause[5:0] != 6'd25 &&
	      mav_upd_on_trap_cause[5:0] != 6'd26 &&
	      mav_upd_on_trap_cause[5:0] != 6'd28 &&
	      mav_upd_on_trap_cause[5:0] != 6'd29) &&
	     (!mav_upd_on_trap_cause[6] ||
	      mav_upd_on_trap_cause[5:0] != 6'd16) &&
	     !rg_debug_mode &&
	     NOT_grp1_rg_mideleg_warl_65_SRL_mav_upd_on_tra_ETC___d1259 ;
  assign mav_upd_on_trap_cause_BIT_6_200_OR_NOT_mav_upd_ETC___d1264 =
	     (mav_upd_on_trap_cause[6] ||
	      mav_upd_on_trap_cause[5:0] != 6'd25 &&
	      mav_upd_on_trap_cause[5:0] != 6'd26 &&
	      mav_upd_on_trap_cause[5:0] != 6'd28 &&
	      mav_upd_on_trap_cause[5:0] != 6'd29) &&
	     (!mav_upd_on_trap_cause[6] ||
	      mav_upd_on_trap_cause[5:0] != 6'd16) &&
	     !rg_debug_mode &&
	     NOT_grp1_rg_mideleg_warl_65_SRL_mav_upd_on_tra_ETC___d1259 &&
	     (rg_prv == 2'd0 || rg_prv == 2'd1 || rg_prv == 2'd3) ;
  assign new_value_data__h12651 =
	     rg_mip__read__h9258 | { 54'd0, x__read__h495, 9'd0 } ;
  assign new_value_data__h12674 =
	     rg_sip__read__h9385 | { 54'd0, x__read__h495, 9'd0 } ;
  assign r1__read__h12594 = { r1__read__h12596, grp1_rg_mstatus_sie } ;
  assign r1__read__h12596 = { r1__read__h12598, 2'd0 } ;
  assign r1__read__h12598 = { r1__read__h12600, 1'd0 } ;
  assign r1__read__h12600 = { r1__read__h12602, grp1_rg_mstatus_spie } ;
  assign r1__read__h12602 = { r1__read__h12604, 2'd0 } ;
  assign r1__read__h12604 = { r1__read__h12606, grp1_rg_mstatus_spp } ;
  assign r1__read__h12606 = { r1__read__h12608, 4'd0 } ;
  assign r1__read__h12608 = { r1__read__h12610, grp1_rg_mstatus_fs_warl } ;
  assign r1__read__h12610 = { r1__read__h12612, 2'd0 } ;
  assign r1__read__h12612 = { r1__read__h12614, 1'd0 } ;
  assign r1__read__h12614 = { r1__read__h12616, grp1_rg_mstatus_sum } ;
  assign r1__read__h12616 = { r1__read__h12618, grp1_rg_mstatus_mxr } ;
  assign r1__read__h12618 = { r1__read__h12620, 12'd0 } ;
  assign r1__read__h12620 = { r1__read__h12622, 2'd2 } ;
  assign r1__read__h12622 = { r__h9141, 29'd0 } ;
  assign r1__read__h6385 = { r1__read__h6387, grp2_rg_dcsr_step_warl } ;
  assign r1__read__h6387 = { r1__read__h6389, grp2_rg_dcsr_nmip } ;
  assign r1__read__h6389 = { r1__read__h6391, grp2_rg_dcsr_mprven_warl } ;
  assign r1__read__h6391 = { r1__read__h6393, 1'd0 } ;
  assign r1__read__h6393 = { r1__read__h6395, grp2_rg_dcsr_cause } ;
  assign r1__read__h6395 = { r1__read__h6397, grp2_rg_dcsr_stoptime_warl } ;
  assign r1__read__h6397 = { r1__read__h6399, grp2_rg_dcsr_stopcount_warl } ;
  assign r1__read__h6399 = { r1__read__h6401, grp2_rg_dcsr_stepie_warl } ;
  assign r1__read__h6401 = { r1__read__h6403, grp2_rg_dcsr_ebreaku_warl } ;
  assign r1__read__h6403 = { r1__read__h6405, grp2_rg_dcsr_ebreaks_warl } ;
  assign r1__read__h6405 = { r1__read__h6407, 1'd0 } ;
  assign r1__read__h6407 = { 48'd16384, grp2_rg_dcsr_ebreakm_warl } ;
  assign r1__read__h8969 = { grp1_rg_misa_mxl_warl, 36'd0 } ;
  assign r1__read__h9090 = { r1__read__h9092, grp1_rg_mstatus_sie } ;
  assign r1__read__h9092 = { r1__read__h9094, 1'd0 } ;
  assign r1__read__h9094 = { r1__read__h9096, grp1_rg_mstatus_mie } ;
  assign r1__read__h9096 = { r1__read__h9098, 1'd0 } ;
  assign r1__read__h9098 = { r1__read__h9100, grp1_rg_mstatus_spie } ;
  assign r1__read__h9100 = { r1__read__h9102, 1'd0 } ;
  assign r1__read__h9102 = { r1__read__h9104, grp1_rg_mstatus_mpie } ;
  assign r1__read__h9104 = { r1__read__h9106, grp1_rg_mstatus_spp } ;
  assign r1__read__h9106 = { r1__read__h9108, 2'd0 } ;
  assign r1__read__h9108 = { r1__read__h9110, grp1_rg_mstatus_mpp_warl } ;
  assign r1__read__h9110 = { r1__read__h9112, grp1_rg_mstatus_fs_warl } ;
  assign r1__read__h9112 = { r1__read__h9114, 2'd0 } ;
  assign r1__read__h9114 = { r1__read__h9116, grp1_rg_mstatus_mprv_warl } ;
  assign r1__read__h9116 = { r1__read__h9118, grp1_rg_mstatus_sum } ;
  assign r1__read__h9118 = { r1__read__h9120, grp1_rg_mstatus_mxr } ;
  assign r1__read__h9120 = { r1__read__h9122, grp1_rg_mstatus_tvm } ;
  assign r1__read__h9122 = { r1__read__h9124, grp1_rg_mstatus_tw } ;
  assign r1__read__h9124 = { r1__read__h9126, grp1_rg_mstatus_tsr } ;
  assign r1__read__h9126 = { r1__read__h9128, 9'd0 } ;
  assign r1__read__h9128 = { r1__read__h9130, 2'd2 } ;
  assign r1__read__h9130 = { r1__read__h9132, 2'd2 } ;
  assign r1__read__h9132 = { r1__read__h9134, 2'd0 } ;
  assign r1__read__h9134 = { r1__read__h9136, 1'd0 } ;
  assign r1__read__h9136 = { r1__read__h9138, 1'd0 } ;
  assign r1__read__h9138 = { r__h9141, 23'd0 } ;
  assign r1__read__h9260 = { r1__read__h9262, grp1_rg_mip_ssip } ;
  assign r1__read__h9262 = { r1__read__h9264, grp1_rg_mip_vssip_warl } ;
  assign r1__read__h9264 = { r1__read__h9266, r__h9330 } ;
  assign r1__read__h9266 = { r1__read__h9268, 1'd0 } ;
  assign r1__read__h9268 = { r1__read__h9270, grp1_rg_mip_stip } ;
  assign r1__read__h9270 = { r1__read__h9272, grp1_rg_mip_vstip_warl } ;
  assign r1__read__h9272 = { r1__read__h9274, r__h9315 } ;
  assign r1__read__h9274 = { r1__read__h9276, 1'd0 } ;
  assign r1__read__h9276 = { r1__read__h9278, grp1_rg_mip_seip } ;
  assign r1__read__h9278 = { r1__read__h9280, grp1_rg_mip_vseip_warl } ;
  assign r1__read__h9280 = { r1__read__h9282, r__h9300 } ;
  assign r1__read__h9282 = { r1__read__h9284, 1'd0 } ;
  assign r1__read__h9284 = { r1__read__h9286, 3'd0 } ;
  assign r1__read__h9286 = { 47'd0, r__h9288 } ;
  assign r1__read__h9387 = { r1__read__h9389, grp1_rg_mip_ssip } ;
  assign r1__read__h9389 = { r1__read__h9391, 2'd0 } ;
  assign r1__read__h9391 = { r1__read__h9393, 1'd0 } ;
  assign r1__read__h9393 = { r1__read__h9395, grp1_rg_mip_stip } ;
  assign r1__read__h9395 = { r1__read__h9397, 2'd0 } ;
  assign r1__read__h9397 = { r1__read__h9399, 1'd0 } ;
  assign r1__read__h9399 = { 54'd0, grp1_rg_mip_seip } ;
  assign r1__read__h9462 = { r1__read__h9464, grp1_rg_mie_ssie } ;
  assign r1__read__h9464 = { r1__read__h9466, grp1_rg_mie_vssie_warl } ;
  assign r1__read__h9466 = { r1__read__h9468, grp1_rg_mie_msie } ;
  assign r1__read__h9468 = { r1__read__h9470, 1'd0 } ;
  assign r1__read__h9470 = { r1__read__h9472, grp1_rg_mie_stie } ;
  assign r1__read__h9472 = { r1__read__h9474, grp1_rg_mie_vstie_warl } ;
  assign r1__read__h9474 = { r1__read__h9476, grp1_rg_mie_mtie } ;
  assign r1__read__h9476 = { r1__read__h9478, 1'd0 } ;
  assign r1__read__h9478 = { r1__read__h9480, grp1_rg_mie_seie } ;
  assign r1__read__h9480 = { r1__read__h9482, grp1_rg_mie_vseie_warl } ;
  assign r1__read__h9482 = { r1__read__h9484, grp1_rg_mie_meie } ;
  assign r1__read__h9484 = { r1__read__h9486, 1'd0 } ;
  assign r1__read__h9486 = { r1__read__h9488, 3'd0 } ;
  assign r1__read__h9488 = { 47'd0, grp1_rg_mie_debug_interrupt } ;
  assign r1__read__h9546 = { r1__read__h9548, grp1_rg_mie_ssie } ;
  assign r1__read__h9548 = { r1__read__h9550, 2'd0 } ;
  assign r1__read__h9550 = { r1__read__h9552, 1'd0 } ;
  assign r1__read__h9552 = { r1__read__h9554, grp1_rg_mie_stie } ;
  assign r1__read__h9554 = { r1__read__h9556, 2'd0 } ;
  assign r1__read__h9556 = { r1__read__h9558, 1'd0 } ;
  assign r1__read__h9558 = { 54'd0, grp1_rg_mie_seie } ;
  assign r1__read__h9643 = { 56'd0, grp1_rg_fcsr_frm_warl } ;
  assign r1__read__h9685 = { r1__read__h9687, grp1_rg_pmpcfg0_pmp1cfg_warl } ;
  assign r1__read__h9687 = { r1__read__h9689, grp1_rg_pmpcfg0_pmp2cfg_warl } ;
  assign r1__read__h9689 = { 32'd0, grp1_rg_pmpcfg0_pmp3cfg_warl } ;
  assign r1__read__h9902 = { r1__read__h9904, grp1_rg_menvcfg_cbie_warl } ;
  assign r1__read__h9904 = { r1__read__h9906, grp1_rg_menvcfg_cbcfe } ;
  assign r1__read__h9906 = { 56'd0, grp1_rg_menvcfg_cbze } ;
  assign r1__read__h9931 = { r1__read__h9933, grp1_rg_senvcfg_cbie_warl } ;
  assign r1__read__h9933 = { r1__read__h9935, grp1_rg_senvcfg_cbcfe } ;
  assign r1__read__h9935 = { 56'd0, grp1_rg_senvcfg_cbze } ;
  assign r1__read__h9952 =
	     { grp1_rg_satp_mode_warl, grp1_rg_satp_asid_warl } ;
  assign r__h9141 = grp1_rg_mstatus_fs_warl == 2'b11 ;
  assign r__h9288 =
	     EN_ma_set_mip_debug_interrupt &&
	     ma_set_mip_debug_interrupt__debug_interrupt ;
  assign r__h9300 = EN_ma_set_mip_meip && ma_set_mip_meip__meip ;
  assign r__h9315 = EN_ma_set_mip_mtip && ma_set_mip_mtip__mtip ;
  assign r__h9330 = EN_ma_set_mip_msip && ma_set_mip_msip__msip ;
  assign readdata__h11478 =
	     { r1__read__h8969, grp1_rg_misa_extensions_warl } ;
  assign readdata__h11500 =
	     { grp1_rg_stvec_base_warl, grp1_rg_stvec_mode_warl } ;
  assign readdata__h11510 =
	     { grp1_rg_mtvec_base_warl, grp1_rg_mtvec_mode_warl } ;
  assign readdata__h11520 = { r1__read__h9090, 1'd0 } ;
  assign readdata__h11530 = { r1__read__h12594, 1'd0 } ;
  assign readdata__h11587 = { r1__read__h9462, 1'd0 } ;
  assign readdata__h11597 = { r1__read__h9546, 1'd0 } ;
  assign readdata__h11647 =
	     { grp1_rg_scause_interrupt,
	       rg_scause_exception_code__read__h9584 } ;
  assign readdata__h11677 =
	     { grp1_rg_mcause_interrupt,
	       rg_mcause_exception_code__read__h9602 } ;
  assign readdata__h11707 = { r1__read__h9643, grp1_rg_fcsr_fflags_warl } ;
  assign readdata__h11746 =
	     { r1__read__h9685, grp1_rg_pmpcfg0_pmp0cfg_warl } ;
  assign readdata__h11756 =
	     { 34'd0,
	       IF_grp1_rg_pmpcfg0_pmp0cfg_warl_73_BIT_4_75_TH_ETC___d379 } ;
  assign readdata__h11766 =
	     { 34'd0,
	       IF_grp1_rg_pmpcfg0_pmp1cfg_warl_71_BIT_4_80_TH_ETC___d384 } ;
  assign readdata__h11776 =
	     { 34'd0,
	       IF_grp1_rg_pmpcfg0_pmp2cfg_warl_69_BIT_4_85_TH_ETC___d389 } ;
  assign readdata__h11786 =
	     { 34'd0,
	       IF_grp1_rg_pmpcfg0_pmp3cfg_warl_67_BIT_4_90_TH_ETC___d394 } ;
  assign readdata__h11796 = { 32'd0, grp1_rg_mcounteren_warl } ;
  assign readdata__h11806 = { 32'd0, grp1_rg_scounteren_warl } ;
  assign readdata__h11816 = { r1__read__h9902, 4'd0 } ;
  assign readdata__h11826 = { r1__read__h9931, 4'd0 } ;
  assign readdata__h11836 = { r1__read__h9952, grp1_rg_satp_ppn_warl } ;
  assign readdata__h11856 = { 59'd0, grp1_rg_fcsr_fflags_warl } ;
  assign readdata__h11866 = { 61'd0, grp1_rg_fcsr_frm_warl } ;
  assign readdata__h11876 = sbread_mv_csr_mcycle ;
  assign readdata__h6058 = { r1__read__h6385, grp2_rg_dcsr_prv_warl } ;
  assign result__h23251 = { v__h22162[62:1], 1'd0 } ;
  assign rg_mcause_exception_code__read__h9602 =
	     { 58'd0, grp1_rg_mcause_exception_code_wlrl } ;
  assign rg_mip__read__h9258 = { r1__read__h9260, 1'd0 } ;
  assign rg_prv_11_ULE_1___d1222 = rg_prv <= 2'd1 ;
  assign rg_scause_exception_code__read__h9584 =
	     { 58'd0, grp1_rg_scause_exception_code_wlrl } ;
  assign rg_sip__read__h9385 = { r1__read__h9387, 1'd0 } ;
  assign v__h22162 =
	     (mav_upd_on_ret_retype[3:0] == 4'hB) ?
	       grp2_rg_dpc_warl[63:1] :
	       v__h22453 ;
  assign v__h22453 =
	     (mav_upd_on_ret_retype[5:4] == 2'd3) ?
	       grp1_rg_mepc_warl[63:1] :
	       grp1_rg_sepc_warl[63:1] ;
  assign x1_avValue_fst__h24214 = { grp1_rg_stvec_base_warl, 2'b0 } ;
  assign x1_avValue_snd__h24215 =
	     grp1_rg_mideleg_warl_65_SRL_mav_upd_on_trap_ca_ETC___d1225 ?
	       grp1_rg_stvec_mode_warl :
	       2'd0 ;
  assign x__h11289 = ma_set_fflags__fflags | grp1_rg_fcsr_fflags_warl ;
  assign x__h21803 = ~ma_core_req_req[66:3] ;
  assign x__h23729 = grp1_rg_mideleg_warl >> mav_upd_on_trap_cause[5:0] ;
  assign x__h23769 = grp1_rg_medeleg_warl >> mav_upd_on_trap_cause[5:0] ;
  assign x__h5172 = x__h5183 & y__h5184 ;
  assign x__h5183 = ~1'b0 ;
  assign x__h5277 = x__h5278 & y__h5279 ;
  assign x__h5278 = x__h5183 ;
  assign x__h5353 = x__h5354 & y__h5355 ;
  assign x__h5354 = x__h5183 ;
  assign x__h5427 = x__h5428 & y__h5429 ;
  assign x__h5428 = x__h5183 ;
  assign x__h6596 = ~grp1_ff_fwd_request_D_OUT[66:3] ;
  assign x__read__h495 = EN_ma_set_mip_seip && ma_set_mip_seip__seip ;
  assign x__read_data__h22105 =
	     EN_ma_core_req ? grp1_rg_resp_to_core_wget[64:1] : 64'd0 ;
  assign x__read_data__h22125 =
	     grp1_ff_fwd_request_EMPTY_N ?
	       grp2_rg_resp_to_core_wget[64:1] :
	       64'd0 ;
  assign x_port1__read__h9631 = sbread_mv_csr_minstret ;
  assign x_wget__h555 = EN_ma_stop_count && ma_stop_count__stop ;
  assign y__h23768 = ~mav_upd_on_trap_cause[6] ;
  assign y__h5165 = { 63'd0, x__h5172 } ;
  assign y__h5184 = ma_events_events[grp2_rg_mhpmevent3_warl[4:0]] ;
  assign y__h5275 = { 63'd0, x__h5277 } ;
  assign y__h5279 = ma_events_events[grp2_rg_mhpmevent4_warl[4:0]] ;
  assign y__h5351 = { 63'd0, x__h5353 } ;
  assign y__h5355 = ma_events_events[grp2_rg_mhpmevent5_warl[4:0]] ;
  assign y__h5425 = { 63'd0, x__h5427 } ;
  assign y__h5429 = ma_events_events[grp2_rg_mhpmevent6_warl[4:0]] ;
  assign y_avValue_fst__h24708 = { grp1_rg_mtvec_base_warl, 2'b0 } ;
  assign y_avValue_fst__h24730 =
	     (lv_trapmode__h24718 == 2'd1 && mav_upd_on_trap_cause[6]) ?
	       lv_tvec___1__h24795 :
	       lv_tvec__h24717 ;
  assign y_avValue_fst__h24744 =
	     rg_debug_mode ? lv_tvec___1__h23686 : y_avValue_fst__h24730 ;
  always@(grp1_ff_fwd_request_D_OUT or x__h6596 or grp2_rg_mhpmevent3_warl)
  begin
    case (grp1_ff_fwd_request_D_OUT[2:1])
      2'd1: x__h6757 = grp1_ff_fwd_request_D_OUT[66:3];
      2'd2:
	  x__h6757 =
	      grp1_ff_fwd_request_D_OUT[66:3] | grp2_rg_mhpmevent3_warl;
      default: x__h6757 = x__h6596 & grp2_rg_mhpmevent3_warl;
    endcase
  end
  always@(grp1_ff_fwd_request_D_OUT or x__h6596 or grp2_rg_mhpmevent4_warl)
  begin
    case (grp1_ff_fwd_request_D_OUT[2:1])
      2'd1: x__h6859 = grp1_ff_fwd_request_D_OUT[66:3];
      2'd2:
	  x__h6859 =
	      grp1_ff_fwd_request_D_OUT[66:3] | grp2_rg_mhpmevent4_warl;
      default: x__h6859 = x__h6596 & grp2_rg_mhpmevent4_warl;
    endcase
  end
  always@(grp1_ff_fwd_request_D_OUT or x__h6596 or grp2_rg_mhpmevent5_warl)
  begin
    case (grp1_ff_fwd_request_D_OUT[2:1])
      2'd1: x__h6961 = grp1_ff_fwd_request_D_OUT[66:3];
      2'd2:
	  x__h6961 =
	      grp1_ff_fwd_request_D_OUT[66:3] | grp2_rg_mhpmevent5_warl;
      default: x__h6961 = x__h6596 & grp2_rg_mhpmevent5_warl;
    endcase
  end
  always@(grp1_ff_fwd_request_D_OUT or x__h6596 or grp2_rg_mhpmevent6_warl)
  begin
    case (grp1_ff_fwd_request_D_OUT[2:1])
      2'd1: x__h7063 = grp1_ff_fwd_request_D_OUT[66:3];
      2'd2:
	  x__h7063 =
	      grp1_ff_fwd_request_D_OUT[66:3] | grp2_rg_mhpmevent6_warl;
      default: x__h7063 = x__h6596 & grp2_rg_mhpmevent6_warl;
    endcase
  end
  always@(grp1_ff_fwd_request_D_OUT or x__h6596 or readdata__h6058)
  begin
    case (grp1_ff_fwd_request_D_OUT[2:1])
      2'd1: x__h7163 = grp1_ff_fwd_request_D_OUT[66:3];
      2'd2: x__h7163 = grp1_ff_fwd_request_D_OUT[66:3] | readdata__h6058;
      default: x__h7163 = x__h6596 & readdata__h6058;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11500)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h13365 = ma_core_req_req[66:3];
      2'd2: x__h13365 = ma_core_req_req[66:3] | readdata__h11500;
      default: x__h13365 = x__h21803 & readdata__h11500;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11510)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h13506 = ma_core_req_req[66:3];
      2'd2: x__h13506 = ma_core_req_req[66:3] | readdata__h11510;
      default: x__h13506 = x__h21803 & readdata__h11510;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11520)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h13647 = ma_core_req_req[66:3];
      2'd2: x__h13647 = ma_core_req_req[66:3] | readdata__h11520;
      default: x__h13647 = x__h21803 & readdata__h11520;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11530)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h14668 = ma_core_req_req[66:3];
      2'd2: x__h14668 = ma_core_req_req[66:3] | readdata__h11530;
      default: x__h14668 = x__h21803 & readdata__h11530;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or rg_mip__read__h9258)
  begin
    case (ma_core_req_req[2:1])
      2'd1: word__h15269 = ma_core_req_req[66:3];
      2'd2: word__h15269 = ma_core_req_req[66:3] | rg_mip__read__h9258;
      default: word__h15269 = x__h21803 & rg_mip__read__h9258;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or rg_sip__read__h9385)
  begin
    case (ma_core_req_req[2:1])
      2'd1: word__h16014 = ma_core_req_req[66:3];
      2'd2: word__h16014 = ma_core_req_req[66:3] | rg_sip__read__h9385;
      default: word__h16014 = x__h21803 & rg_sip__read__h9385;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11587)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h16307 = ma_core_req_req[66:3];
      2'd2: x__h16307 = ma_core_req_req[66:3] | readdata__h11587;
      default: x__h16307 = x__h21803 & readdata__h11587;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11597)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h17073 = ma_core_req_req[66:3];
      2'd2: x__h17073 = ma_core_req_req[66:3] | readdata__h11597;
      default: x__h17073 = x__h21803 & readdata__h11597;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11647)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h17628 = ma_core_req_req[66:3];
      2'd2: x__h17628 = ma_core_req_req[66:3] | readdata__h11647;
      default: x__h17628 = x__h21803 & readdata__h11647;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11677)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h17873 = ma_core_req_req[66:3];
      2'd2: x__h17873 = ma_core_req_req[66:3] | readdata__h11677;
      default: x__h17873 = x__h21803 & readdata__h11677;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11707)
  begin
    case (ma_core_req_req[2:1])
      2'd1: word__h18152 = ma_core_req_req[66:3];
      2'd2: word__h18152 = ma_core_req_req[66:3] | readdata__h11707;
      default: word__h18152 = x__h21803 & readdata__h11707;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11746)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h18813 = ma_core_req_req[66:3];
      2'd2: x__h18813 = ma_core_req_req[66:3] | readdata__h11746;
      default: x__h18813 = x__h21803 & readdata__h11746;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11796)
  begin
    case (ma_core_req_req[2:1])
      2'd1: word__h20568 = ma_core_req_req[66:3];
      2'd2: word__h20568 = ma_core_req_req[66:3] | readdata__h11796;
      default: word__h20568 = x__h21803 & readdata__h11796;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11806)
  begin
    case (ma_core_req_req[2:1])
      2'd1: word__h20702 = ma_core_req_req[66:3];
      2'd2: word__h20702 = ma_core_req_req[66:3] | readdata__h11806;
      default: word__h20702 = x__h21803 & readdata__h11806;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11816)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h20832 = ma_core_req_req[66:3];
      2'd2: x__h20832 = ma_core_req_req[66:3] | readdata__h11816;
      default: x__h20832 = x__h21803 & readdata__h11816;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11826)
  begin
    case (ma_core_req_req[2:1])
      2'd1: x__h21097 = ma_core_req_req[66:3];
      2'd2: x__h21097 = ma_core_req_req[66:3] | readdata__h11826;
      default: x__h21097 = x__h21803 & readdata__h11826;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11856)
  begin
    case (ma_core_req_req[2:1])
      2'd1: word__h21668 = ma_core_req_req[66:3];
      2'd2: word__h21668 = ma_core_req_req[66:3] | readdata__h11856;
      default: word__h21668 = x__h21803 & readdata__h11856;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11866)
  begin
    case (ma_core_req_req[2:1])
      2'd1: word__h21743 = ma_core_req_req[66:3];
      2'd2: word__h21743 = ma_core_req_req[66:3] | readdata__h11866;
      default: word__h21743 = x__h21803 & readdata__h11866;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11766)
  begin
    case (ma_core_req_req[2:1])
      2'd1: word__h20097 = ma_core_req_req[66:3];
      2'd2: word__h20097 = ma_core_req_req[66:3] | readdata__h11766;
      default: word__h20097 = x__h21803 & readdata__h11766;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11478)
  begin
    case (ma_core_req_req[2:1])
      2'd1:
	  IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d438 =
	      ma_core_req_req[66:3];
      2'd2:
	  IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d438 =
	      ma_core_req_req[66:3] | readdata__h11478;
      default: IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d438 =
		   x__h21803 & readdata__h11478;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11756)
  begin
    case (ma_core_req_req[2:1])
      2'd1: word__h19935 = ma_core_req_req[66:3];
      2'd2: word__h19935 = ma_core_req_req[66:3] | readdata__h11756;
      default: word__h19935 = x__h21803 & readdata__h11756;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11776)
  begin
    case (ma_core_req_req[2:1])
      2'd1: word__h20254 = ma_core_req_req[66:3];
      2'd2: word__h20254 = ma_core_req_req[66:3] | readdata__h11776;
      default: word__h20254 = x__h21803 & readdata__h11776;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11786)
  begin
    case (ma_core_req_req[2:1])
      2'd1: word__h20411 = ma_core_req_req[66:3];
      2'd2: word__h20411 = ma_core_req_req[66:3] | readdata__h11786;
      default: word__h20411 = x__h21803 & readdata__h11786;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or grp1_rg_mideleg_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1:
	  IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d921 =
	      ma_core_req_req[66:3];
      2'd2:
	  IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d921 =
	      ma_core_req_req[66:3] | grp1_rg_mideleg_warl;
      default: IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d921 =
		   x__h21803 & grp1_rg_mideleg_warl;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or grp1_rg_medeleg_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1:
	  IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d940 =
	      ma_core_req_req[66:3];
      2'd2:
	  IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d940 =
	      ma_core_req_req[66:3] | grp1_rg_medeleg_warl;
      default: IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d940 =
		   x__h21803 & grp1_rg_medeleg_warl;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or readdata__h11836)
  begin
    case (ma_core_req_req[2:1])
      2'd1:
	  IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d1090 =
	      ma_core_req_req[66:3];
      2'd2:
	  IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d1090 =
	      ma_core_req_req[66:3] | readdata__h11836;
      default: IF_ma_core_req_req_BITS_2_TO_1_30_EQ_1_31_THEN_ETC___d1090 =
		   x__h21803 & readdata__h11836;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or grp1_rg_mepc_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1:
	  CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q1 =
	      ma_core_req_req[66:3];
      2'd2:
	  CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q1 =
	      ma_core_req_req[66:3] | grp1_rg_mepc_warl;
      default: CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q1 =
		   x__h21803 & grp1_rg_mepc_warl;
    endcase
  end
  always@(ma_core_req_req or x__h21803 or grp1_rg_sepc_warl)
  begin
    case (ma_core_req_req[2:1])
      2'd1:
	  CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q2 =
	      ma_core_req_req[66:3];
      2'd2:
	  CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q2 =
	      ma_core_req_req[66:3] | grp1_rg_sepc_warl;
      default: CASE_ma_core_req_req_BITS_2_TO_1_1_ma_core_req_ETC__q2 =
		   x__h21803 & grp1_rg_sepc_warl;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        grp1_rg_fcsr_fflags_warl <= `BSV_ASSIGNMENT_DELAY 5'd0;
	grp1_rg_fcsr_frm_warl <= `BSV_ASSIGNMENT_DELAY 3'd0;
	grp1_rg_mcause_exception_code_wlrl <= `BSV_ASSIGNMENT_DELAY 5'd0;
	grp1_rg_mcause_interrupt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mcounteren_warl <= `BSV_ASSIGNMENT_DELAY 32'd0;
	grp1_rg_mcycle <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_medeleg_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_menvcfg_cbcfe <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_menvcfg_cbie_warl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	grp1_rg_menvcfg_cbze <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mepc_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_mideleg_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_mie_debug_interrupt <= `BSV_ASSIGNMENT_DELAY 1'd1;
	grp1_rg_mie_meie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mie_msie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mie_mtie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mie_seie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mie_ssie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mie_stie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mie_vseie_warl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mie_vssie_warl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mie_vstie_warl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_minstret <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_mip_seip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mip_ssip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mip_stip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mip_vseip_warl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mip_vssip_warl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mip_vstip_warl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_misa_extensions_warl <= `BSV_ASSIGNMENT_DELAY 26'd1315117;
	grp1_rg_misa_mxl_warl <= `BSV_ASSIGNMENT_DELAY 2'd2;
	grp1_rg_mscratch_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_mstatus_fs_warl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	grp1_rg_mstatus_mie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_mpie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_mpp_warl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	grp1_rg_mstatus_mprv_warl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_mxr <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_sie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_spie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_spp <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_sum <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_tsr <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_tvm <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mstatus_tw <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_mtval_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_mtvec_base_warl <= `BSV_ASSIGNMENT_DELAY 62'd0;
	grp1_rg_mtvec_mode_warl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	grp1_rg_pmpaddr0_warl <= `BSV_ASSIGNMENT_DELAY 30'd1073741822;
	grp1_rg_pmpaddr1_warl <= `BSV_ASSIGNMENT_DELAY 30'd0;
	grp1_rg_pmpaddr2_warl <= `BSV_ASSIGNMENT_DELAY 30'd0;
	grp1_rg_pmpaddr3_warl <= `BSV_ASSIGNMENT_DELAY 30'd0;
	grp1_rg_pmpcfg0_pmp0cfg_warl <= `BSV_ASSIGNMENT_DELAY 8'd15;
	grp1_rg_pmpcfg0_pmp1cfg_warl <= `BSV_ASSIGNMENT_DELAY 8'd0;
	grp1_rg_pmpcfg0_pmp2cfg_warl <= `BSV_ASSIGNMENT_DELAY 8'd0;
	grp1_rg_pmpcfg0_pmp3cfg_warl <= `BSV_ASSIGNMENT_DELAY 8'd0;
	grp1_rg_satp_asid_warl <= `BSV_ASSIGNMENT_DELAY 16'd0;
	grp1_rg_satp_mode_warl <= `BSV_ASSIGNMENT_DELAY 4'd0;
	grp1_rg_satp_ppn_warl <= `BSV_ASSIGNMENT_DELAY 44'd0;
	grp1_rg_scause_exception_code_wlrl <= `BSV_ASSIGNMENT_DELAY 5'd0;
	grp1_rg_scause_interrupt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_scounteren_warl <= `BSV_ASSIGNMENT_DELAY 32'd0;
	grp1_rg_senvcfg_cbcfe <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_senvcfg_cbie_warl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	grp1_rg_senvcfg_cbze <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp1_rg_sepc_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_sscratch_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_stval_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp1_rg_stvec_base_warl <= `BSV_ASSIGNMENT_DELAY 62'd0;
	grp1_rg_stvec_mode_warl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	grp1_rg_time <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp2_rg_dcsr_cause <= `BSV_ASSIGNMENT_DELAY 3'd0;
	grp2_rg_dcsr_ebreakm_warl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp2_rg_dcsr_ebreaks_warl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp2_rg_dcsr_ebreaku_warl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp2_rg_dcsr_mprven_warl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp2_rg_dcsr_nmip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp2_rg_dcsr_prv_warl <= `BSV_ASSIGNMENT_DELAY 2'd3;
	grp2_rg_dcsr_step_warl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp2_rg_dcsr_stepie_warl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp2_rg_dcsr_stopcount_warl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp2_rg_dcsr_stoptime_warl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	grp2_rg_dpc_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp2_rg_dscratch0_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp2_rg_dscratch1_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp2_rg_mhpmcounter3_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp2_rg_mhpmcounter4_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp2_rg_mhpmcounter5_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp2_rg_mhpmcounter6_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp2_rg_mhpmevent3_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp2_rg_mhpmevent4_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp2_rg_mhpmevent5_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	grp2_rg_mhpmevent6_warl <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_debug_mode <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_prv <= `BSV_ASSIGNMENT_DELAY 2'd3;
	rg_virtual <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (grp1_rg_fcsr_fflags_warl_EN)
	  grp1_rg_fcsr_fflags_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_fcsr_fflags_warl_D_IN;
	if (grp1_rg_fcsr_frm_warl_EN)
	  grp1_rg_fcsr_frm_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_fcsr_frm_warl_D_IN;
	if (grp1_rg_mcause_exception_code_wlrl_EN)
	  grp1_rg_mcause_exception_code_wlrl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mcause_exception_code_wlrl_D_IN;
	if (grp1_rg_mcause_interrupt_EN)
	  grp1_rg_mcause_interrupt <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mcause_interrupt_D_IN;
	if (grp1_rg_mcounteren_warl_EN)
	  grp1_rg_mcounteren_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mcounteren_warl_D_IN;
	if (grp1_rg_mcycle_EN)
	  grp1_rg_mcycle <= `BSV_ASSIGNMENT_DELAY grp1_rg_mcycle_D_IN;
	if (grp1_rg_medeleg_warl_EN)
	  grp1_rg_medeleg_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_medeleg_warl_D_IN;
	if (grp1_rg_menvcfg_cbcfe_EN)
	  grp1_rg_menvcfg_cbcfe <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_menvcfg_cbcfe_D_IN;
	if (grp1_rg_menvcfg_cbie_warl_EN)
	  grp1_rg_menvcfg_cbie_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_menvcfg_cbie_warl_D_IN;
	if (grp1_rg_menvcfg_cbze_EN)
	  grp1_rg_menvcfg_cbze <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_menvcfg_cbze_D_IN;
	if (grp1_rg_mepc_warl_EN)
	  grp1_rg_mepc_warl <= `BSV_ASSIGNMENT_DELAY grp1_rg_mepc_warl_D_IN;
	if (grp1_rg_mideleg_warl_EN)
	  grp1_rg_mideleg_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mideleg_warl_D_IN;
	if (grp1_rg_mie_debug_interrupt_EN)
	  grp1_rg_mie_debug_interrupt <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mie_debug_interrupt_D_IN;
	if (grp1_rg_mie_meie_EN)
	  grp1_rg_mie_meie <= `BSV_ASSIGNMENT_DELAY grp1_rg_mie_meie_D_IN;
	if (grp1_rg_mie_msie_EN)
	  grp1_rg_mie_msie <= `BSV_ASSIGNMENT_DELAY grp1_rg_mie_msie_D_IN;
	if (grp1_rg_mie_mtie_EN)
	  grp1_rg_mie_mtie <= `BSV_ASSIGNMENT_DELAY grp1_rg_mie_mtie_D_IN;
	if (grp1_rg_mie_seie_EN)
	  grp1_rg_mie_seie <= `BSV_ASSIGNMENT_DELAY grp1_rg_mie_seie_D_IN;
	if (grp1_rg_mie_ssie_EN)
	  grp1_rg_mie_ssie <= `BSV_ASSIGNMENT_DELAY grp1_rg_mie_ssie_D_IN;
	if (grp1_rg_mie_stie_EN)
	  grp1_rg_mie_stie <= `BSV_ASSIGNMENT_DELAY grp1_rg_mie_stie_D_IN;
	if (grp1_rg_mie_vseie_warl_EN)
	  grp1_rg_mie_vseie_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mie_vseie_warl_D_IN;
	if (grp1_rg_mie_vssie_warl_EN)
	  grp1_rg_mie_vssie_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mie_vssie_warl_D_IN;
	if (grp1_rg_mie_vstie_warl_EN)
	  grp1_rg_mie_vstie_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mie_vstie_warl_D_IN;
	if (grp1_rg_minstret_EN)
	  grp1_rg_minstret <= `BSV_ASSIGNMENT_DELAY grp1_rg_minstret_D_IN;
	if (grp1_rg_mip_seip_EN)
	  grp1_rg_mip_seip <= `BSV_ASSIGNMENT_DELAY grp1_rg_mip_seip_D_IN;
	if (grp1_rg_mip_ssip_EN)
	  grp1_rg_mip_ssip <= `BSV_ASSIGNMENT_DELAY grp1_rg_mip_ssip_D_IN;
	if (grp1_rg_mip_stip_EN)
	  grp1_rg_mip_stip <= `BSV_ASSIGNMENT_DELAY grp1_rg_mip_stip_D_IN;
	if (grp1_rg_mip_vseip_warl_EN)
	  grp1_rg_mip_vseip_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mip_vseip_warl_D_IN;
	if (grp1_rg_mip_vssip_warl_EN)
	  grp1_rg_mip_vssip_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mip_vssip_warl_D_IN;
	if (grp1_rg_mip_vstip_warl_EN)
	  grp1_rg_mip_vstip_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mip_vstip_warl_D_IN;
	if (grp1_rg_misa_extensions_warl_EN)
	  grp1_rg_misa_extensions_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_misa_extensions_warl_D_IN;
	if (grp1_rg_misa_mxl_warl_EN)
	  grp1_rg_misa_mxl_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_misa_mxl_warl_D_IN;
	if (grp1_rg_mscratch_warl_EN)
	  grp1_rg_mscratch_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mscratch_warl_D_IN;
	if (grp1_rg_mstatus_fs_warl_EN)
	  grp1_rg_mstatus_fs_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_fs_warl_D_IN;
	if (grp1_rg_mstatus_mie_EN)
	  grp1_rg_mstatus_mie <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_mie_D_IN;
	if (grp1_rg_mstatus_mpie_EN)
	  grp1_rg_mstatus_mpie <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_mpie_D_IN;
	if (grp1_rg_mstatus_mpp_warl_EN)
	  grp1_rg_mstatus_mpp_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_mpp_warl_D_IN;
	if (grp1_rg_mstatus_mprv_warl_EN)
	  grp1_rg_mstatus_mprv_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_mprv_warl_D_IN;
	if (grp1_rg_mstatus_mxr_EN)
	  grp1_rg_mstatus_mxr <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_mxr_D_IN;
	if (grp1_rg_mstatus_sie_EN)
	  grp1_rg_mstatus_sie <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_sie_D_IN;
	if (grp1_rg_mstatus_spie_EN)
	  grp1_rg_mstatus_spie <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_spie_D_IN;
	if (grp1_rg_mstatus_spp_EN)
	  grp1_rg_mstatus_spp <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_spp_D_IN;
	if (grp1_rg_mstatus_sum_EN)
	  grp1_rg_mstatus_sum <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_sum_D_IN;
	if (grp1_rg_mstatus_tsr_EN)
	  grp1_rg_mstatus_tsr <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_tsr_D_IN;
	if (grp1_rg_mstatus_tvm_EN)
	  grp1_rg_mstatus_tvm <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mstatus_tvm_D_IN;
	if (grp1_rg_mstatus_tw_EN)
	  grp1_rg_mstatus_tw <= `BSV_ASSIGNMENT_DELAY grp1_rg_mstatus_tw_D_IN;
	if (grp1_rg_mtval_warl_EN)
	  grp1_rg_mtval_warl <= `BSV_ASSIGNMENT_DELAY grp1_rg_mtval_warl_D_IN;
	if (grp1_rg_mtvec_base_warl_EN)
	  grp1_rg_mtvec_base_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mtvec_base_warl_D_IN;
	if (grp1_rg_mtvec_mode_warl_EN)
	  grp1_rg_mtvec_mode_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_mtvec_mode_warl_D_IN;
	if (grp1_rg_pmpaddr0_warl_EN)
	  grp1_rg_pmpaddr0_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_pmpaddr0_warl_D_IN;
	if (grp1_rg_pmpaddr1_warl_EN)
	  grp1_rg_pmpaddr1_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_pmpaddr1_warl_D_IN;
	if (grp1_rg_pmpaddr2_warl_EN)
	  grp1_rg_pmpaddr2_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_pmpaddr2_warl_D_IN;
	if (grp1_rg_pmpaddr3_warl_EN)
	  grp1_rg_pmpaddr3_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_pmpaddr3_warl_D_IN;
	if (grp1_rg_pmpcfg0_pmp0cfg_warl_EN)
	  grp1_rg_pmpcfg0_pmp0cfg_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_pmpcfg0_pmp0cfg_warl_D_IN;
	if (grp1_rg_pmpcfg0_pmp1cfg_warl_EN)
	  grp1_rg_pmpcfg0_pmp1cfg_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_pmpcfg0_pmp1cfg_warl_D_IN;
	if (grp1_rg_pmpcfg0_pmp2cfg_warl_EN)
	  grp1_rg_pmpcfg0_pmp2cfg_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_pmpcfg0_pmp2cfg_warl_D_IN;
	if (grp1_rg_pmpcfg0_pmp3cfg_warl_EN)
	  grp1_rg_pmpcfg0_pmp3cfg_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_pmpcfg0_pmp3cfg_warl_D_IN;
	if (grp1_rg_satp_asid_warl_EN)
	  grp1_rg_satp_asid_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_satp_asid_warl_D_IN;
	if (grp1_rg_satp_mode_warl_EN)
	  grp1_rg_satp_mode_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_satp_mode_warl_D_IN;
	if (grp1_rg_satp_ppn_warl_EN)
	  grp1_rg_satp_ppn_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_satp_ppn_warl_D_IN;
	if (grp1_rg_scause_exception_code_wlrl_EN)
	  grp1_rg_scause_exception_code_wlrl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_scause_exception_code_wlrl_D_IN;
	if (grp1_rg_scause_interrupt_EN)
	  grp1_rg_scause_interrupt <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_scause_interrupt_D_IN;
	if (grp1_rg_scounteren_warl_EN)
	  grp1_rg_scounteren_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_scounteren_warl_D_IN;
	if (grp1_rg_senvcfg_cbcfe_EN)
	  grp1_rg_senvcfg_cbcfe <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_senvcfg_cbcfe_D_IN;
	if (grp1_rg_senvcfg_cbie_warl_EN)
	  grp1_rg_senvcfg_cbie_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_senvcfg_cbie_warl_D_IN;
	if (grp1_rg_senvcfg_cbze_EN)
	  grp1_rg_senvcfg_cbze <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_senvcfg_cbze_D_IN;
	if (grp1_rg_sepc_warl_EN)
	  grp1_rg_sepc_warl <= `BSV_ASSIGNMENT_DELAY grp1_rg_sepc_warl_D_IN;
	if (grp1_rg_sscratch_warl_EN)
	  grp1_rg_sscratch_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_sscratch_warl_D_IN;
	if (grp1_rg_stval_warl_EN)
	  grp1_rg_stval_warl <= `BSV_ASSIGNMENT_DELAY grp1_rg_stval_warl_D_IN;
	if (grp1_rg_stvec_base_warl_EN)
	  grp1_rg_stvec_base_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_stvec_base_warl_D_IN;
	if (grp1_rg_stvec_mode_warl_EN)
	  grp1_rg_stvec_mode_warl <= `BSV_ASSIGNMENT_DELAY
	      grp1_rg_stvec_mode_warl_D_IN;
	if (grp1_rg_time_EN)
	  grp1_rg_time <= `BSV_ASSIGNMENT_DELAY grp1_rg_time_D_IN;
	if (grp2_rg_dcsr_cause_EN)
	  grp2_rg_dcsr_cause <= `BSV_ASSIGNMENT_DELAY grp2_rg_dcsr_cause_D_IN;
	if (grp2_rg_dcsr_ebreakm_warl_EN)
	  grp2_rg_dcsr_ebreakm_warl <= `BSV_ASSIGNMENT_DELAY
	      grp2_rg_dcsr_ebreakm_warl_D_IN;
	if (grp2_rg_dcsr_ebreaks_warl_EN)
	  grp2_rg_dcsr_ebreaks_warl <= `BSV_ASSIGNMENT_DELAY
	      grp2_rg_dcsr_ebreaks_warl_D_IN;
	if (grp2_rg_dcsr_ebreaku_warl_EN)
	  grp2_rg_dcsr_ebreaku_warl <= `BSV_ASSIGNMENT_DELAY
	      grp2_rg_dcsr_ebreaku_warl_D_IN;
	if (grp2_rg_dcsr_mprven_warl_EN)
	  grp2_rg_dcsr_mprven_warl <= `BSV_ASSIGNMENT_DELAY
	      grp2_rg_dcsr_mprven_warl_D_IN;
	if (grp2_rg_dcsr_nmip_EN)
	  grp2_rg_dcsr_nmip <= `BSV_ASSIGNMENT_DELAY grp2_rg_dcsr_nmip_D_IN;
	if (grp2_rg_dcsr_prv_warl_EN)
	  grp2_rg_dcsr_prv_warl <= `BSV_ASSIGNMENT_DELAY
	      grp2_rg_dcsr_prv_warl_D_IN;
	if (grp2_rg_dcsr_step_warl_EN)
	  grp2_rg_dcsr_step_warl <= `BSV_ASSIGNMENT_DELAY
	      grp2_rg_dcsr_step_warl_D_IN;
	if (grp2_rg_dcsr_stepie_warl_EN)
	  grp2_rg_dcsr_stepie_warl <= `BSV_ASSIGNMENT_DELAY
	      grp2_rg_dcsr_stepie_warl_D_IN;
	if (grp2_rg_dcsr_stopcount_warl_EN)
	  grp2_rg_dcsr_stopcount_warl <= `BSV_ASSIGNMENT_DELAY
	      grp2_rg_dcsr_stopcount_warl_D_IN;
	if (grp2_rg_dcsr_stoptime_warl_EN)
	  grp2_rg_dcsr_stoptime_warl <= `BSV_ASSIGNMENT_DELAY
	      grp2_rg_dcsr_stoptime_warl_D_IN;
	if (grp2_rg_dpc_warl_EN)
	  grp2_rg_dpc_warl <= `BSV_ASSIGNMENT_DELAY grp2_rg_dpc_warl_D_IN;
	if (grp2_rg_dscratch0_warl_EN)
	  grp2_rg_dscratch0_warl <= `BSV_ASSIGNMENT_DELAY
	      grp2_rg_dscratch0_warl_D_IN;
	if (grp2_rg_dscratch1_warl_EN)
	  grp2_rg_dscratch1_warl <= `BSV_ASSIGNMENT_DELAY
	      grp2_rg_dscratch1_warl_D_IN;
	if (grp2_rg_mhpmcounter3_warl_EN)
	  grp2_rg_mhpmcounter3_warl <= `BSV_ASSIGNMENT_DELAY
	      grp2_rg_mhpmcounter3_warl_D_IN;
	if (grp2_rg_mhpmcounter4_warl_EN)
	  grp2_rg_mhpmcounter4_warl <= `BSV_ASSIGNMENT_DELAY
	      grp2_rg_mhpmcounter4_warl_D_IN;
	if (grp2_rg_mhpmcounter5_warl_EN)
	  grp2_rg_mhpmcounter5_warl <= `BSV_ASSIGNMENT_DELAY
	      grp2_rg_mhpmcounter5_warl_D_IN;
	if (grp2_rg_mhpmcounter6_warl_EN)
	  grp2_rg_mhpmcounter6_warl <= `BSV_ASSIGNMENT_DELAY
	      grp2_rg_mhpmcounter6_warl_D_IN;
	if (grp2_rg_mhpmevent3_warl_EN)
	  grp2_rg_mhpmevent3_warl <= `BSV_ASSIGNMENT_DELAY
	      grp2_rg_mhpmevent3_warl_D_IN;
	if (grp2_rg_mhpmevent4_warl_EN)
	  grp2_rg_mhpmevent4_warl <= `BSV_ASSIGNMENT_DELAY
	      grp2_rg_mhpmevent4_warl_D_IN;
	if (grp2_rg_mhpmevent5_warl_EN)
	  grp2_rg_mhpmevent5_warl <= `BSV_ASSIGNMENT_DELAY
	      grp2_rg_mhpmevent5_warl_D_IN;
	if (grp2_rg_mhpmevent6_warl_EN)
	  grp2_rg_mhpmevent6_warl <= `BSV_ASSIGNMENT_DELAY
	      grp2_rg_mhpmevent6_warl_D_IN;
	if (rg_debug_mode_EN)
	  rg_debug_mode <= `BSV_ASSIGNMENT_DELAY rg_debug_mode_D_IN;
	if (rg_prv_EN) rg_prv <= `BSV_ASSIGNMENT_DELAY rg_prv_D_IN;
	if (rg_virtual_EN)
	  rg_virtual <= `BSV_ASSIGNMENT_DELAY rg_virtual_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    grp1_rg_fcsr_fflags_warl = 5'h0A;
    grp1_rg_fcsr_frm_warl = 3'h2;
    grp1_rg_mcause_exception_code_wlrl = 5'h0A;
    grp1_rg_mcause_interrupt = 1'h0;
    grp1_rg_mcounteren_warl = 32'hAAAAAAAA;
    grp1_rg_mcycle = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_medeleg_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_menvcfg_cbcfe = 1'h0;
    grp1_rg_menvcfg_cbie_warl = 2'h2;
    grp1_rg_menvcfg_cbze = 1'h0;
    grp1_rg_mepc_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_mideleg_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_mie_debug_interrupt = 1'h0;
    grp1_rg_mie_meie = 1'h0;
    grp1_rg_mie_msie = 1'h0;
    grp1_rg_mie_mtie = 1'h0;
    grp1_rg_mie_seie = 1'h0;
    grp1_rg_mie_ssie = 1'h0;
    grp1_rg_mie_stie = 1'h0;
    grp1_rg_mie_vseie_warl = 1'h0;
    grp1_rg_mie_vssie_warl = 1'h0;
    grp1_rg_mie_vstie_warl = 1'h0;
    grp1_rg_minstret = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_mip_seip = 1'h0;
    grp1_rg_mip_ssip = 1'h0;
    grp1_rg_mip_stip = 1'h0;
    grp1_rg_mip_vseip_warl = 1'h0;
    grp1_rg_mip_vssip_warl = 1'h0;
    grp1_rg_mip_vstip_warl = 1'h0;
    grp1_rg_misa_extensions_warl = 26'h2AAAAAA;
    grp1_rg_misa_mxl_warl = 2'h2;
    grp1_rg_mscratch_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_mstatus_fs_warl = 2'h2;
    grp1_rg_mstatus_mie = 1'h0;
    grp1_rg_mstatus_mpie = 1'h0;
    grp1_rg_mstatus_mpp_warl = 2'h2;
    grp1_rg_mstatus_mprv_warl = 1'h0;
    grp1_rg_mstatus_mxr = 1'h0;
    grp1_rg_mstatus_sie = 1'h0;
    grp1_rg_mstatus_spie = 1'h0;
    grp1_rg_mstatus_spp = 1'h0;
    grp1_rg_mstatus_sum = 1'h0;
    grp1_rg_mstatus_tsr = 1'h0;
    grp1_rg_mstatus_tvm = 1'h0;
    grp1_rg_mstatus_tw = 1'h0;
    grp1_rg_mtval_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_mtvec_base_warl = 62'h2AAAAAAAAAAAAAAA;
    grp1_rg_mtvec_mode_warl = 2'h2;
    grp1_rg_pmpaddr0_warl = 30'h2AAAAAAA;
    grp1_rg_pmpaddr1_warl = 30'h2AAAAAAA;
    grp1_rg_pmpaddr2_warl = 30'h2AAAAAAA;
    grp1_rg_pmpaddr3_warl = 30'h2AAAAAAA;
    grp1_rg_pmpcfg0_pmp0cfg_warl = 8'hAA;
    grp1_rg_pmpcfg0_pmp1cfg_warl = 8'hAA;
    grp1_rg_pmpcfg0_pmp2cfg_warl = 8'hAA;
    grp1_rg_pmpcfg0_pmp3cfg_warl = 8'hAA;
    grp1_rg_satp_asid_warl = 16'hAAAA;
    grp1_rg_satp_mode_warl = 4'hA;
    grp1_rg_satp_ppn_warl = 44'hAAAAAAAAAAA;
    grp1_rg_scause_exception_code_wlrl = 5'h0A;
    grp1_rg_scause_interrupt = 1'h0;
    grp1_rg_scounteren_warl = 32'hAAAAAAAA;
    grp1_rg_senvcfg_cbcfe = 1'h0;
    grp1_rg_senvcfg_cbie_warl = 2'h2;
    grp1_rg_senvcfg_cbze = 1'h0;
    grp1_rg_sepc_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_sscratch_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_stval_warl = 64'hAAAAAAAAAAAAAAAA;
    grp1_rg_stvec_base_warl = 62'h2AAAAAAAAAAAAAAA;
    grp1_rg_stvec_mode_warl = 2'h2;
    grp1_rg_time = 64'hAAAAAAAAAAAAAAAA;
    grp2_rg_dcsr_cause = 3'h2;
    grp2_rg_dcsr_ebreakm_warl = 1'h0;
    grp2_rg_dcsr_ebreaks_warl = 1'h0;
    grp2_rg_dcsr_ebreaku_warl = 1'h0;
    grp2_rg_dcsr_mprven_warl = 1'h0;
    grp2_rg_dcsr_nmip = 1'h0;
    grp2_rg_dcsr_prv_warl = 2'h2;
    grp2_rg_dcsr_step_warl = 1'h0;
    grp2_rg_dcsr_stepie_warl = 1'h0;
    grp2_rg_dcsr_stopcount_warl = 1'h0;
    grp2_rg_dcsr_stoptime_warl = 1'h0;
    grp2_rg_dpc_warl = 64'hAAAAAAAAAAAAAAAA;
    grp2_rg_dscratch0_warl = 64'hAAAAAAAAAAAAAAAA;
    grp2_rg_dscratch1_warl = 64'hAAAAAAAAAAAAAAAA;
    grp2_rg_mhpmcounter3_warl = 64'hAAAAAAAAAAAAAAAA;
    grp2_rg_mhpmcounter4_warl = 64'hAAAAAAAAAAAAAAAA;
    grp2_rg_mhpmcounter5_warl = 64'hAAAAAAAAAAAAAAAA;
    grp2_rg_mhpmcounter6_warl = 64'hAAAAAAAAAAAAAAAA;
    grp2_rg_mhpmevent3_warl = 64'hAAAAAAAAAAAAAAAA;
    grp2_rg_mhpmevent4_warl = 64'hAAAAAAAAAAAAAAAA;
    grp2_rg_mhpmevent5_warl = 64'hAAAAAAAAAAAAAAAA;
    grp2_rg_mhpmevent6_warl = 64'hAAAAAAAAAAAAAAAA;
    rg_debug_mode = 1'h0;
    rg_prv = 2'h2;
    rg_virtual = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_upd_on_ret && mav_upd_on_ret_retype[3:0] == 4'hB &&
	  !rg_debug_mode)
	$display("Dynamic assertion failed: \"csrbox_bsv//csrbox.bsv\", line 181, column 40\nExecuting DRET when not in Debug Mode");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_upd_on_ret && mav_upd_on_ret_retype[3:0] == 4'hB &&
	  !rg_debug_mode)
	$finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mk_csrbox

