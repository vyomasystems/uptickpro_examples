//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
//
// On Tue Jul 29 14:28:16 +04 2025
//
//
// Ports:
// Name                         I/O  size props
// RDY__start                     O     1
// tx_output_enq_ena              O     1
// tx_output_enq_data             O    70
// RDY_flush                      O     1 const
// fpu_ready                      O     1
// RDY_fpu_ready                  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _start_m                       I   212 reg
// tx_output_notFull_b            I     1 unused
// tx_output_enq_rdy_b            I     1
// EN__start                      I     1
// EN_flush                       I     1
//
// Combinational paths from inputs to outputs:
//   (tx_output_enq_rdy_b, EN_flush) -> tx_output_enq_ena
//   (tx_output_enq_rdy_b, EN_flush) -> tx_output_enq_data
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfpu_bsvfloat(CLK,
		      RST_N,

		      _start_m,
		      EN__start,
		      RDY__start,

		      tx_output_notFull_b,

		      tx_output_enq_rdy_b,

		      tx_output_enq_ena,

		      tx_output_enq_data,

		      EN_flush,
		      RDY_flush,

		      fpu_ready,
		      RDY_fpu_ready);
  input  CLK;
  input  RST_N;

  // action method _start
  input  [211 : 0] _start_m;
  input  EN__start;
  output RDY__start;

  // action method tx_output_notFull
  input  tx_output_notFull_b;

  // action method tx_output_enq_rdy
  input  tx_output_enq_rdy_b;

  // value method tx_output_enq_ena
  output tx_output_enq_ena;

  // value method tx_output_enq_data
  output [69 : 0] tx_output_enq_data;

  // action method flush
  input  EN_flush;
  output RDY_flush;

  // value method fpu_ready
  output fpu_ready;
  output RDY_fpu_ready;

  // signals for module outputs
  reg [69 : 0] tx_output_enq_data;
  wire RDY__start, RDY_flush, RDY_fpu_ready, fpu_ready, tx_output_enq_ena;

  // inlined wires
  reg [171 : 0] inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget;
  reg [84 : 0] inst_spfpu_divider_int_div_wfn_divide_step_arg_wget;
  wire [191 : 0] getMant64_arg_wget, setCanonicalNaN_arg_wget;
  wire [188 : 0] condFlags64_arg_wget;
  wire [155 : 0] getMant64_res_wget;
  wire [95 : 0] getMant32_arg_wget, setCanonicalNaN_res_wget;
  wire [92 : 0] condFlags32_arg_wget;
  wire [69 : 0] inst_dpfpu_sqrt_ff_final_out_1_wget;
  wire [68 : 0] getMant32_res_wget,
		inst_dpfm_add_sub_ff_final_out_wget,
		inst_dpfpu_divider_wr_final_out_wget;
  wire [67 : 0] inst_fpu_int_to_fp_fcvt_s_llu_arg_wget;
  wire [37 : 0] inst_spfpu_sqrt_ff_final_out_1_wget;
  wire [36 : 0] inst_spfm_add_sub_ff_final_out_wget,
		inst_spfpu_divider_wr_final_out_wget;
  wire [35 : 0] inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget;
  wire [32 : 0] getExp64_res_wget;
  wire [23 : 0] getExp32_res_wget;
  wire [14 : 0] condFlags32_res_wget, condFlags64_res_wget;
  wire inst_dpfpu_sqrt_ff_final_out_1_whas,
       inst_spfpu_sqrt_ff_final_out_1_whas,
       tx_fbox_out_w_ena_whas;

  // register inst_dpfm_add_sub_ff_input_register
  reg [200 : 0] inst_dpfm_add_sub_ff_input_register;
  wire [200 : 0] inst_dpfm_add_sub_ff_input_register_D_IN;
  wire inst_dpfm_add_sub_ff_input_register_EN;

  // register inst_dpfm_add_sub_ff_stage2
  reg [203 : 0] inst_dpfm_add_sub_ff_stage2;
  wire [203 : 0] inst_dpfm_add_sub_ff_stage2_D_IN;
  wire inst_dpfm_add_sub_ff_stage2_EN;

  // register inst_dpfm_add_sub_ff_stage4
  reg [348 : 0] inst_dpfm_add_sub_ff_stage4;
  wire [348 : 0] inst_dpfm_add_sub_ff_stage4_D_IN;
  wire inst_dpfm_add_sub_ff_stage4_EN;

  // register inst_dpfm_add_sub_ff_stage5
  reg [196 : 0] inst_dpfm_add_sub_ff_stage5;
  wire [196 : 0] inst_dpfm_add_sub_ff_stage5_D_IN;
  wire inst_dpfm_add_sub_ff_stage5_EN;

  // register inst_dpfm_add_sub_rg_state_handler
  reg [2 : 0] inst_dpfm_add_sub_rg_state_handler;
  reg [2 : 0] inst_dpfm_add_sub_rg_state_handler_D_IN;
  wire inst_dpfm_add_sub_rg_state_handler_EN;

  // register inst_dpfpu_divider_int_div_rg_inter_stage
  reg [169 : 0] inst_dpfpu_divider_int_div_rg_inter_stage;
  wire [169 : 0] inst_dpfpu_divider_int_div_rg_inter_stage_D_IN;
  wire inst_dpfpu_divider_int_div_rg_inter_stage_EN;

  // register inst_dpfpu_divider_int_div_rg_state
  reg [5 : 0] inst_dpfpu_divider_int_div_rg_state;
  reg [5 : 0] inst_dpfpu_divider_int_div_rg_state_D_IN;
  wire inst_dpfpu_divider_int_div_rg_state_EN;

  // register inst_dpfpu_divider_rg_stage1
  reg [127 : 0] inst_dpfpu_divider_rg_stage1;
  wire [127 : 0] inst_dpfpu_divider_rg_stage1_D_IN;
  wire inst_dpfpu_divider_rg_stage1_EN;

  // register inst_dpfpu_divider_rg_stage2
  reg [21 : 0] inst_dpfpu_divider_rg_stage2;
  wire [21 : 0] inst_dpfpu_divider_rg_stage2_D_IN;
  wire inst_dpfpu_divider_rg_stage2_EN;

  // register inst_dpfpu_divider_rg_stage3
  reg [138 : 0] inst_dpfpu_divider_rg_stage3;
  wire [138 : 0] inst_dpfpu_divider_rg_stage3_D_IN;
  wire inst_dpfpu_divider_rg_stage3_EN;

  // register inst_dpfpu_divider_rg_state_handler
  reg [1 : 0] inst_dpfpu_divider_rg_state_handler;
  reg [1 : 0] inst_dpfpu_divider_rg_state_handler_D_IN;
  wire inst_dpfpu_divider_rg_state_handler_EN;

  // register inst_dpfpu_sqrt_ff_final_out
  reg [69 : 0] inst_dpfpu_sqrt_ff_final_out;
  wire [69 : 0] inst_dpfpu_sqrt_ff_final_out_D_IN;
  wire inst_dpfpu_sqrt_ff_final_out_EN;

  // register inst_dpfpu_sqrt_rg_inter_stage
  reg [293 : 0] inst_dpfpu_sqrt_rg_inter_stage;
  wire [293 : 0] inst_dpfpu_sqrt_rg_inter_stage_D_IN;
  wire inst_dpfpu_sqrt_rg_inter_stage_EN;

  // register inst_dpfpu_sqrt_rg_state
  reg [5 : 0] inst_dpfpu_sqrt_rg_state;
  reg [5 : 0] inst_dpfpu_sqrt_rg_state_D_IN;
  wire inst_dpfpu_sqrt_rg_state_EN;

  // register inst_spfm_add_sub_ff_input_register
  reg [107 : 0] inst_spfm_add_sub_ff_input_register;
  wire [107 : 0] inst_spfm_add_sub_ff_input_register_D_IN;
  wire inst_spfm_add_sub_ff_input_register_EN;

  // register inst_spfm_add_sub_ff_stage2
  reg [110 : 0] inst_spfm_add_sub_ff_stage2;
  wire [110 : 0] inst_spfm_add_sub_ff_stage2_D_IN;
  wire inst_spfm_add_sub_ff_stage2_EN;

  // register inst_spfm_add_sub_ff_stage4
  reg [171 : 0] inst_spfm_add_sub_ff_stage4;
  wire [171 : 0] inst_spfm_add_sub_ff_stage4_D_IN;
  wire inst_spfm_add_sub_ff_stage4_EN;

  // register inst_spfm_add_sub_ff_stage5
  reg [105 : 0] inst_spfm_add_sub_ff_stage5;
  wire [105 : 0] inst_spfm_add_sub_ff_stage5_D_IN;
  wire inst_spfm_add_sub_ff_stage5_EN;

  // register inst_spfm_add_sub_rg_state_handler
  reg [2 : 0] inst_spfm_add_sub_rg_state_handler;
  reg [2 : 0] inst_spfm_add_sub_rg_state_handler_D_IN;
  wire inst_spfm_add_sub_rg_state_handler_EN;

  // register inst_spfpu_divider_int_div_rg_inter_stage
  reg [82 : 0] inst_spfpu_divider_int_div_rg_inter_stage;
  wire [82 : 0] inst_spfpu_divider_int_div_rg_inter_stage_D_IN;
  wire inst_spfpu_divider_int_div_rg_inter_stage_EN;

  // register inst_spfpu_divider_int_div_rg_state
  reg [5 : 0] inst_spfpu_divider_int_div_rg_state;
  reg [5 : 0] inst_spfpu_divider_int_div_rg_state_D_IN;
  wire inst_spfpu_divider_int_div_rg_state_EN;

  // register inst_spfpu_divider_rg_stage1
  reg [66 : 0] inst_spfpu_divider_rg_stage1;
  wire [66 : 0] inst_spfpu_divider_rg_stage1_D_IN;
  wire inst_spfpu_divider_rg_stage1_EN;

  // register inst_spfpu_divider_rg_stage2
  reg [18 : 0] inst_spfpu_divider_rg_stage2;
  wire [18 : 0] inst_spfpu_divider_rg_stage2_D_IN;
  wire inst_spfpu_divider_rg_stage2_EN;

  // register inst_spfpu_divider_rg_stage3
  reg [77 : 0] inst_spfpu_divider_rg_stage3;
  wire [77 : 0] inst_spfpu_divider_rg_stage3_D_IN;
  wire inst_spfpu_divider_rg_stage3_EN;

  // register inst_spfpu_divider_rg_state_handler
  reg [1 : 0] inst_spfpu_divider_rg_state_handler;
  reg [1 : 0] inst_spfpu_divider_rg_state_handler_D_IN;
  wire inst_spfpu_divider_rg_state_handler_EN;

  // register inst_spfpu_sqrt_ff_final_out
  reg [37 : 0] inst_spfpu_sqrt_ff_final_out;
  wire [37 : 0] inst_spfpu_sqrt_ff_final_out_D_IN;
  wire inst_spfpu_sqrt_ff_final_out_EN;

  // register inst_spfpu_sqrt_rg_inter_stage
  reg [145 : 0] inst_spfpu_sqrt_rg_inter_stage;
  wire [145 : 0] inst_spfpu_sqrt_rg_inter_stage_D_IN;
  wire inst_spfpu_sqrt_rg_inter_stage_EN;

  // register inst_spfpu_sqrt_rg_state
  reg [5 : 0] inst_spfpu_sqrt_rg_state;
  reg [5 : 0] inst_spfpu_sqrt_rg_state_D_IN;
  wire inst_spfpu_sqrt_rg_state_EN;

  // register rg_multicycle_op
  reg rg_multicycle_op;
  reg rg_multicycle_op_D_IN;
  wire rg_multicycle_op_EN;

  // ports of submodule ff_input
  wire [211 : 0] ff_input_D_IN, ff_input_D_OUT;
  wire ff_input_CLR,
       ff_input_DEQ,
       ff_input_EMPTY_N,
       ff_input_ENQ,
       ff_input_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_flush_fifo,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_flush,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_stage_1,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4,
       CAN_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_stage2,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_flush,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_rl_flush,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1,
       CAN_FIRE_RL_inst_spfpu_divider_rl_flush,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage2,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage3,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage4,
       CAN_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_flush,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2,
       CAN_FIRE_RL_rl_get_output_from_dpfm_add_sub,
       CAN_FIRE_RL_rl_get_output_from_dpfpu_divider,
       CAN_FIRE_RL_rl_get_output_from_dpfpu_sqrt,
       CAN_FIRE_RL_rl_get_output_from_fm_add_sub,
       CAN_FIRE_RL_rl_get_output_from_spfpu_divider,
       CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt,
       CAN_FIRE_RL_start_stage,
       CAN_FIRE___me_check_0,
       CAN_FIRE___me_check_1,
       CAN_FIRE___me_check_10,
       CAN_FIRE___me_check_11,
       CAN_FIRE___me_check_18,
       CAN_FIRE___me_check_19,
       CAN_FIRE___me_check_2,
       CAN_FIRE___me_check_20,
       CAN_FIRE___me_check_22,
       CAN_FIRE___me_check_23,
       CAN_FIRE___me_check_27,
       CAN_FIRE___me_check_28,
       CAN_FIRE___me_check_29,
       CAN_FIRE___me_check_37,
       CAN_FIRE___me_check_38,
       CAN_FIRE___me_check_39,
       CAN_FIRE___me_check_4,
       CAN_FIRE___me_check_40,
       CAN_FIRE___me_check_41,
       CAN_FIRE___me_check_5,
       CAN_FIRE___me_check_9,
       CAN_FIRE__start,
       CAN_FIRE_flush,
       CAN_FIRE_tx_output_enq_rdy,
       CAN_FIRE_tx_output_notFull,
       WILL_FIRE_RL_flush_fifo,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_flush,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4,
       WILL_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_flush,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_rl_flush,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1,
       WILL_FIRE_RL_inst_spfpu_divider_rl_flush,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage2,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage3,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage4,
       WILL_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_flush,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2,
       WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub,
       WILL_FIRE_RL_rl_get_output_from_dpfpu_divider,
       WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt,
       WILL_FIRE_RL_rl_get_output_from_fm_add_sub,
       WILL_FIRE_RL_rl_get_output_from_spfpu_divider,
       WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt,
       WILL_FIRE_RL_start_stage,
       WILL_FIRE___me_check_0,
       WILL_FIRE___me_check_1,
       WILL_FIRE___me_check_10,
       WILL_FIRE___me_check_11,
       WILL_FIRE___me_check_18,
       WILL_FIRE___me_check_19,
       WILL_FIRE___me_check_2,
       WILL_FIRE___me_check_20,
       WILL_FIRE___me_check_22,
       WILL_FIRE___me_check_23,
       WILL_FIRE___me_check_27,
       WILL_FIRE___me_check_28,
       WILL_FIRE___me_check_29,
       WILL_FIRE___me_check_37,
       WILL_FIRE___me_check_38,
       WILL_FIRE___me_check_39,
       WILL_FIRE___me_check_4,
       WILL_FIRE___me_check_40,
       WILL_FIRE___me_check_41,
       WILL_FIRE___me_check_5,
       WILL_FIRE___me_check_9,
       WILL_FIRE__start,
       WILL_FIRE_flush,
       WILL_FIRE_tx_output_enq_rdy,
       WILL_FIRE_tx_output_notFull;

  // inputs to muxes for submodule ports
  reg [69 : 0] MUX_tx_fbox_out_w_data_wset_1__VAL_1;
  wire [293 : 0] MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_1,
		 MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_2;
  wire [171 : 0] MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1,
		 MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2,
		 MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
  wire [145 : 0] MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1,
		 MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2;
  wire [84 : 0] MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1,
		MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2,
		MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
  wire [69 : 0] MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_1,
		MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_2,
		MUX_tx_fbox_out_w_data_wset_1__VAL_2,
		MUX_tx_fbox_out_w_data_wset_1__VAL_3,
		MUX_tx_fbox_out_w_data_wset_1__VAL_4,
		MUX_tx_fbox_out_w_data_wset_1__VAL_5,
		MUX_tx_fbox_out_w_data_wset_1__VAL_6,
		MUX_tx_fbox_out_w_data_wset_1__VAL_7;
  wire [37 : 0] MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1,
		MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2;
  wire [5 : 0] MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2,
	       MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1,
	       MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2,
	       MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
  wire MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1,
       MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1,
       MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1,
       MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__SEL_1,
       MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__SEL_1,
       MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1,
       MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1,
       MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1,
       MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1,
       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1,
       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1,
       MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1,
       MUX_rg_multicycle_op_write_1__SEL_2,
       MUX_tx_fbox_out_w_data_wset_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_IF_lv_comp_ETC__q34;
  reg [31 : 0] CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_IF_lv_comp_ETC__q55,
	       CASE_ff_inputD_OUT_BITS_8_TO_6_0b1_ff_inputD_ETC__q27;
  reg CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_ff_inputD_ETC__q7,
      CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_setCanonic_ETC__q43,
      IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5043,
      IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5167,
      IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d3698,
      IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d3931,
      IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d4097,
      IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d4382,
      IF_inst_dpfm_add_sub_ff_stage5_read__150_BITS__ETC___d3211,
      IF_inst_dpfpu_divider_rg_stage3_670_BITS_4_TO__ETC___d1717,
      IF_inst_dpfpu_sqrt_rg_inter_stage_read__773_BI_ETC___d1827,
      IF_inst_spfm_add_sub_ff_stage5_read__168_BITS__ETC___d1229,
      IF_inst_spfpu_divider_rg_stage3_68_BITS_4_TO_2_ETC___d315,
      IF_inst_spfpu_sqrt_rg_inter_stage_read__71_BIT_ETC___d425;
  wire [211 : 0] _0_CONCAT_INV_IF_condFlags64_res_whas__424_THEN_ETC___d5291;
  wire [169 : 0] inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14,
		 x__h71472,
		 x_wget__h66738;
  wire [159 : 0] IF_IF_inst_dpfm_add_sub_ff_stage2_read__367_BI_ETC___d2408,
		 IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3189,
		 _theResult____h117992,
		 _theResult____h167743,
		 _theResult___snd_fst__h194366,
		 _theResult___snd_fst__h194368,
		 add_mantissa__h167739,
		 mantissa2__h117979,
		 mantissa2__h118001,
		 mantissa2__h118022,
		 mantissa3___1__h137712,
		 mantissa3__h118023,
		 mantissa_to_shift___1__h118020,
		 mantissa_to_shift__h118015,
		 resultant_mantissa___1__h194121,
		 resultant_mantissa_norm_expo__h193865,
		 resultant_mantissa_norm_zerosMSB__h193866,
		 sub_mantissa1__h167740,
		 sub_mantissa2__h167741,
		 sub_mantissa__h167742;
  wire [125 : 0] IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d4805,
		 IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d4806,
		 IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d4808;
  wire [115 : 0] _1_CONCAT_getMant64_res_wget__016_BITS_155_TO_1_ETC___d4022,
		 final_man__h249847;
  wire [113 : 0] IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1395,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1371,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1396,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q18,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q19,
		 inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q15,
		 inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16;
  wire [112 : 0] IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1378,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1346;
  wire [109 : 0] IF_IF_IF_condFlags64_res_whas__424_THEN_condFl_ETC___d5988,
		 mantissa___1__h333666,
		 mantissa__h315317,
		 mantissa__h315319,
		 mantissa__h315329,
		 mantissa__h89228;
  wire [106 : 0] IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2103,
		 _theResult_____1_snd__h107970,
		 _theResult_____1_snd__h107973,
		 _theResult___snd_fst__h108010,
		 lv_product_mantissa___1__h107941,
		 lv_product_mantissa___1__h107956,
		 lv_product_mantissa__h107911,
		 lv_product_mantissa__h90461,
		 lv_product_mantissa_shiftL_expo__h107919,
		 lv_product_mantissa_shiftL_zerosMSB__h107921,
		 x_lv_product_mantissa__h90538;
  wire [95 : 0] _0_CONCAT_INV_IF_condFlags32_res_whas__339_THEN_ETC___d5212;
  wire [86 : 0] _1_CONCAT_getMant32_res_wget__849_BITS_68_TO_46_ETC___d3855,
		final_man__h246347;
  wire [82 : 0] inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8,
		x__h5419,
		x_wget__h658;
  wire [72 : 0] IF_IF_inst_spfm_add_sub_ff_stage2_read__33_BIT_ETC___d774,
		IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1207,
		_theResult____h30223,
		_theResult____h53439,
		_theResult___snd_fst__h65968,
		_theResult___snd_fst__h65970,
		add_mantissa__h53435,
		mantissa2__h30210,
		mantissa2__h30232,
		mantissa2__h30253,
		mantissa3___1__h39445,
		mantissa3__h30254,
		mantissa_to_shift___1__h30251,
		mantissa_to_shift__h30246,
		resultant_mantissa___1__h65723,
		resultant_mantissa_norm_expo__h65467,
		resultant_mantissa_norm_zerosMSB__h65468,
		sub_mantissa1__h53436,
		sub_mantissa2__h53437,
		sub_mantissa__h53438;
  wire [69 : 0] IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d4490,
		IF_ff_input_first__305_BIT_3_337_THEN_0xFFFFFF_ETC___d4482,
		IF_ff_input_first__305_BIT_3_337_THEN_42949672_ETC___d3799,
		IF_ff_input_first__305_BIT_3_337_THEN_IF_NOT_I_ETC___d4266,
		IF_ff_input_first__305_BIT_3_337_THEN_IF_ff_in_ETC___d3517;
  wire [68 : 0] IF_inst_dpfpu_divider_rg_stage3_670_BIT_10_677_ETC___d1757;
  wire [63 : 0] IF_0b0_CONCAT_getExp64_res_wget__983_BITS_32_T_ETC___d4048,
		IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d4474,
		IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d3479,
		IF_IF_getExp32_res_whas__815_THEN_getExp32_res_ETC___d3882,
		IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5018,
		IF_NOT_IF_inst_dpfm_add_sub_ff_stage5_read__15_ETC___d3243,
		IF_NOT_ff_input_first__305_BIT_4_530_544_AND_f_ETC___d3678,
		IF_NOT_ff_input_first__305_BIT_6_358_359_AND_I_ETC___d3477,
		IF_ff_input_first__305_BIT_4_530_THEN_0_ELSE_1_ETC___d3880,
		IF_ff_input_first__305_BIT_6_358_AND_IF_condFl_ETC___d3476,
		NOT_ff_input_first__305_BIT_4_530_544_AND_ff_i_ETC___d3709,
		_theResult_____1_fst__h87515,
		_theResult_____1_snd__h248068,
		_theResult_____1_snd__h251598,
		_theResult_____2_snd__h247743,
		_theResult_____2_snd__h247850,
		_theResult_____2_snd__h247902,
		_theResult_____2_snd__h247953,
		_theResult_____2_snd__h247956,
		_theResult_____2_snd__h251275,
		_theResult_____2_snd__h251380,
		_theResult_____2_snd__h251432,
		_theResult_____2_snd__h251483,
		_theResult_____2_snd__h251486,
		_theResult_____3_snd__h202618,
		_theResult_____3_snd__h203234,
		_theResult_____3_snd_snd_fst__h246971,
		_theResult_____3_snd_snd_fst__h250493,
		_theResult_____3_snd_snd_snd__h194011,
		_theResult____h215610,
		_theResult____h226914,
		_theResult___snd__h247450,
		_theResult___snd__h247454,
		_theResult___snd__h247524,
		_theResult___snd__h247594,
		_theResult___snd__h247598,
		_theResult___snd__h247669,
		_theResult___snd__h251056,
		_theResult___snd__h251126,
		_theResult___snd__h251130,
		_theResult___snd__h251201,
		_theResult___snd_final_result__h226922,
		_theResult___snd_snd__h247335,
		_theResult___snd_snd__h250857,
		_theResult___snd_snd__h250973,
		_theResult___snd_snd__h250980,
		_theResult___snd_snd_snd_fst__h247385,
		_theResult___snd_snd_snd_fst__h247387,
		_theResult___snd_snd_snd_fst__h247391,
		_theResult___snd_snd_snd_fst__h247419,
		_theResult___snd_snd_snd_fst__h247468,
		_theResult___snd_snd_snd_fst__h247493,
		_theResult___snd_snd_snd_fst__h247531,
		_theResult___snd_snd_snd_fst__h247535,
		_theResult___snd_snd_snd_fst__h247562,
		_theResult___snd_snd_snd_fst__h247612,
		_theResult___snd_snd_snd_fst__h247637,
		_theResult___snd_snd_snd_fst__h251000,
		_theResult___snd_snd_snd_fst__h251025,
		_theResult___snd_snd_snd_fst__h251063,
		_theResult___snd_snd_snd_fst__h251067,
		_theResult___snd_snd_snd_fst__h251094,
		_theResult___snd_snd_snd_fst__h251144,
		_theResult___snd_snd_snd_fst__h251169,
		_theResult___snd_snd_snd_snd_fst__h247329,
		_theResult___snd_snd_snd_snd_fst__h250851,
		_theResult___snd_snd_snd_snd_fst__h250905,
		_theResult___snd_snd_snd_snd_fst__h250907,
		_theResult___snd_snd_snd_snd_fst__h250911,
		_theResult___snd_snd_snd_snd_fst__h250939,
		final_result___1__h246732,
		final_result___1__h246764,
		final_result___1__h246853,
		final_result___1__h247395,
		final_result___1__h247994,
		final_result___1__h248024,
		final_result___1__h250254,
		final_result___1__h250286,
		final_result___1__h250375,
		final_result___1__h250915,
		final_result___1__h251524,
		final_result___1__h251554,
		final_result___2__h247014,
		final_result___2__h247955,
		final_result___2__h250535,
		final_result___2__h251485,
		final_result___3__h246966,
		final_result___3__h250488,
		final_result__h246355,
		final_result__h249855,
		final_result__h265873,
		final_result__h265896,
		final_result__h315752,
		final_result__h89575,
		getMant64_argwget_BITS_127_TO_64__q23,
		getMant64_argwget_BITS_191_TO_128__q22,
		getMant64_argwget_BITS_63_TO_0__q24,
		inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21,
		lv_final_output__h87493,
		lv_result__h203278,
		lv_result__h203319,
		new_value_final_result__h193917,
		setCanonicalNaN_argwget_BITS_127_TO_64__q39,
		setCanonicalNaN_argwget_BITS_191_TO_128__q38,
		setCanonicalNaN_argwget_BITS_63_TO_0__q40,
		x_data__h199529,
		x_data__h202587,
		x_data__h226654,
		x_data__h226965,
		x_data__h243614,
		x_data__h243971,
		x_data__h246408,
		x_data__h249908,
		x_data__h258426,
		x_data__h265771,
		x_data__h265869,
		x_data__h345707,
		x_data__h345929,
		y_data__h346142;
  wire [62 : 0] IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d4471,
		IF_NOT_inst_dpfpu_divider_rg_stage3_670_BITS_8_ETC___d1747,
		IF_inst_dpfpu_divider_rg_stage3_670_BIT_7_736__ETC___d1746;
  wire [61 : 0] IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d4671,
		IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d4673;
  wire [57 : 0] IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q17,
		_remainder___1__h69618,
		_remainder__h69446,
		_theResult_____3__h315327,
		_theResult____h89226,
		lv_remainder__h89342,
		lv_remainder__h89432,
		lv_remainder__h89996,
		lv_remainder_temp__h89223,
		lv_root_rem__h89563,
		lv_root_temp_1__h89224,
		lv_root_temp_2__h89225,
		x__h89974;
  wire [55 : 0] IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d80,
		IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__773_ETC__q6,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d56,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d81,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q12,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13,
		IF_inst_dpfpu_divider_int_div_wr_final_out_wha_ETC___d1569,
		_denominator__h71407,
		_dividend___1__h69619,
		_dividend__h68811,
		_dividend__h68947,
		_dividend__h69448,
		_dividend__h69449,
		_numerator__h71408,
		_theResult___fst__h73022,
		_theResult___fst__h73041,
		_theResult___fst__h87174,
		_theResult___fst__h87178,
		inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q10,
		inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9,
		lv_extended_mantissa___1__h90061,
		lv_extended_mantissa__h89571,
		lv_quotient___1__h73058,
		lv_quotient_shiftL_expo__h73034,
		lv_quotient_shiftL_zerosMSB__h73036,
		x_lv_quotient__h72924;
  wire [54 : 0] IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__424_ETC___d5995,
		IF_IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas___ETC__q37,
		IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d63,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d31,
		result_mantissa__h89562,
		x__h333695,
		x__h89272,
		x__h89535;
  wire [53 : 0] IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__150_ETC___d3239,
		IF_IF_IF_inst_dpfpu_divider_rg_stage3_670_BITS_ETC___d1725,
		IF_IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0_ETC___d3702,
		_theResult_____4__h87391,
		_theResult_____5__h193887,
		lv_man___1__h243036,
		lv_man__h232377,
		lv_rounded_mantissa___1__h194521,
		lv_rounded_mantissa__h194551,
		lv_rounded_quotient___1__h87812,
		lv_rounded_quotient__h87390,
		lv_rounded_quotient__h87842;
  wire [52 : 0] man1__h284369,
		man2__h284370,
		x__h270986,
		x__h271072,
		x__h301717,
		x__h301745;
  wire [51 : 0] IF_IF_IF_condFlags32_res_whas__339_THEN_condFl_ETC___d5812,
		IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d4035,
		_theResult___fst__h250131,
		_theResult___fst__h250144,
		_theResult___fst__h250197,
		_theResult___fst__h250244,
		_theResult___fst__h250265,
		_theResult___fst__h250307,
		_theResult___fst__h250326,
		_theResult___fst__h250354,
		_theResult___fst__h250396,
		_theResult___fst__h250414,
		_theResult___fst__h250456,
		condFlags64_argwget_BITS_125_TO_74__q29,
		condFlags64_argwget_BITS_188_TO_137__q28,
		condFlags64_argwget_BITS_62_TO_11__q30,
		getMant64_reswget_BITS_103_TO_52__q33,
		getMant64_reswget_BITS_155_TO_104__q25,
		man__h258757,
		mant__h258697,
		mantissa___1__h313714,
		mantissa__h15955,
		mantissa__h226905,
		mantissa__h304717,
		mantissa__h304719,
		mantissa__h304729;
  wire [48 : 0] IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4346,
		IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d585,
		_theResult_____1_snd__h25363,
		_theResult_____1_snd__h25366,
		_theResult___snd_fst__h25403,
		_theResult___snd_snd_fst__h264798,
		lv_product_mantissa___1__h25334,
		lv_product_mantissa___1__h25349,
		lv_product_mantissa__h17192,
		lv_product_mantissa__h25304,
		lv_product_mantissa_shiftL_expo__h25312,
		lv_product_mantissa_shiftL_zerosMSB__h25314,
		man__h264803,
		man__h265058,
		x_lv_product_mantissa__h17269;
  wire [36 : 0] IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d4410,
		IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d4411,
		IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4408,
		IF_inst_spfpu_divider_rg_stage3_68_BIT_10_75_T_ETC___d355,
		x_wget__h195113,
		x_wget__h195251;
  wire [31 : 0] IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d3400,
		IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5142,
		IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__16_ETC___d1261,
		IF_NOT_ff_input_first__305_BIT_6_358_359_AND_I_ETC___d3396,
		IF_NOT_ff_input_first__305_BIT_6_358_359_AND_I_ETC___d3398,
		IF_ff_input_first__305_BIT_6_358_AND_IF_condFl_ETC___d3397,
		_1_CONCAT_getMant32_res_wget__849_BITS_68_TO_46_ETC__q48,
		_1_CONCAT_getMant64_res_wget__016_BITS_155_TO_1_ETC__q26,
		_theResult_____1_fst__h14241,
		_theResult_____3_snd__h199585,
		_theResult_____3_snd__h200207,
		_theResult_____3_snd_snd_snd__h65613,
		_theResult_____5_snd_fst__h265564,
		_theResult____h209738,
		_theResult____h226901,
		_theResult___snd_fst__h265565,
		ff_inputD_OUT_BITS_179_TO_148__q1,
		final_result___247014_BITS_31_TO_0__q57,
		final_result___247955_BITS_31_TO_0__q56,
		final_result___250535_BITS_31_TO_0__q36,
		final_result___251485_BITS_31_TO_0__q35,
		final_result__h16302,
		final_result__h305153,
		getMant32_argwget_BITS_31_TO_0__q46,
		getMant32_argwget_BITS_63_TO_32__q45,
		getMant32_argwget_BITS_95_TO_64__q44,
		inp32___1__h227417,
		inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20,
		lv_final_output__h14219,
		lv_result__h200251,
		lv_result__h200292,
		new_value_final_result__h65519,
		res___1__h265567,
		res__h209655,
		res__h264524,
		setCanonicalNaN_reswget_BITS_31_TO_0__q59,
		setCanonicalNaN_reswget_BITS_63_TO_32__q42,
		setCanonicalNaN_reswget_BITS_95_TO_64__q41,
		theResult__26901_SL_x27037_BITS_4_TO_0__q2,
		x1_avValue_final_result__h209660,
		x1_avValue_final_result__h215519,
		x1_avValue_final_result__h226599,
		x1_avValue_final_result__h226607,
		x1_avValue_final_result__h243573,
		x__h243205,
		x__h243346,
		x__h243428;
  wire [30 : 0] IF_NOT_inst_spfpu_divider_rg_stage3_68_BITS_50_ETC___d345,
		IF_inst_spfpu_divider_rg_stage3_68_BIT_7_34_OR_ETC___d344;
  wire [28 : 0] IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q11,
		_remainder___1__h3559,
		_remainder__h3387,
		_theResult_____3__h304727,
		_theResult____h15953,
		lv_remainder__h16069,
		lv_remainder__h16159,
		lv_remainder__h16723,
		lv_remainder_temp__h15950,
		lv_root_rem__h16290,
		lv_root_temp_1__h15951,
		lv_root_temp_2__h15952,
		x__h16701;
  wire [26 : 0] IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__71__ETC__q4,
		IF_inst_spfpu_divider_int_div_wr_final_out_wha_ETC___d196,
		_denominator__h5354,
		_dividend___1__h3560,
		_dividend__h2752,
		_dividend__h2888,
		_dividend__h3389,
		_dividend__h3390,
		_numerator__h5355,
		_theResult___fst__h13900,
		_theResult___fst__h13904,
		_theResult___fst__h6969,
		_theResult___fst__h6988,
		lv_extended_mantissa___1__h16788,
		lv_extended_mantissa__h16298,
		lv_quotient___1__h7005,
		lv_quotient_shiftL_expo__h6981,
		lv_quotient_shiftL_zerosMSB__h6983,
		x_lv_quotient__h6871;
  wire [25 : 0] IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__339_ETC___d5819,
		IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q58,
		result_mantissa__h16289,
		x__h15999,
		x__h16262,
		x__h313743;
  wire [24 : 0] IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5047,
		IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5171,
		IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__168_ETC___d1257,
		IF_IF_IF_inst_spfpu_divider_rg_stage3_68_BITS__ETC___d323,
		_theResult_____4__h14117,
		_theResult_____5__h65489,
		lv_man___1__h215424,
		lv_man___1__h226499,
		lv_man__h209753,
		lv_man__h215625,
		lv_rounded_mantissa___1__h66123,
		lv_rounded_mantissa__h66153,
		lv_rounded_quotient___1__h14538,
		lv_rounded_quotient__h14116,
		lv_rounded_quotient__h14568;
  wire [23 : 0] IF_IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0_ETC___d4386,
		fman___1__h265662,
		fman__h265560,
		man1__h274445,
		man2__h274446,
		x__h268376,
		x__h268462,
		x__h282455,
		x__h282483;
  wire [22 : 0] IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d3868,
		_theResult___fst__h246626,
		_theResult___fst__h246636,
		_theResult___fst__h246683,
		_theResult___fst__h246724,
		_theResult___fst__h246743,
		_theResult___fst__h246785,
		_theResult___fst__h246804,
		_theResult___fst__h246832,
		_theResult___fst__h246874,
		_theResult___fst__h246892,
		_theResult___fst__h246934,
		condFlags32_argwget_BITS_30_TO_8__q51,
		condFlags32_argwget_BITS_61_TO_39__q50,
		condFlags32_argwget_BITS_92_TO_70__q49,
		getMant32_reswget_BITS_45_TO_23__q54,
		getMant32_reswget_BITS_68_TO_46__q47,
		value__h262516;
  wire [12 : 0] IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__150_ETC___d3222,
		IF_NOT_inst_dpfpu_divider_rg_stage3_670_BIT_13_ETC___d1732,
		_0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__150_ETC___d3164,
		_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1865,
		_1_MINUS_inst_dpfpu_divider_rg_stage2_439_BITS__ETC___d1444,
		_theResult_____1_fst__h107969,
		_theResult_____1_fst__h107972,
		_theResult_____4_snd_fst__h118221,
		_theResult___fst__h107925,
		_theResult___fst__h194149,
		_theResult___fst__h194153,
		_theResult___snd_fst__h87258,
		_theResult___snd_fst__h87268,
		_theResult___snd_fst__h87276,
		_theResult___snd_fst__h87286,
		_theResult___snd_fst__h87288,
		exp1__h284377,
		exp1_temp__h270918,
		exp2__h284378,
		exp2_temp__h270919,
		exponent2__h118002,
		exponent3__h117981,
		exponent3__h117993,
		exponent_difference__h118016,
		inst_dpfm_add_sub_ff_input_register_read__852__ETC___d1856,
		inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1441,
		lv_exponent___1__h87841,
		lv_exponent___1__h87851,
		lv_exponent__h284379,
		lv_exponent__h87393,
		lv_exponent_inc_shift__h73032,
		lv_exponent_sub_shift__h73035,
		lv_exponent_sub_zerosMSB__h73037,
		lv_minuend__h118012,
		lv_product_exponent___1__h107942,
		lv_product_exponent__h107909,
		lv_product_exponent_inc_shift__h107917,
		lv_product_exponent_sub_shift__h107920,
		lv_product_exponent_sub_zerosMSB__h107922,
		lv_summed_exponent__h270920,
		resultant_exponent___1__h194550,
		resultant_exponent__h193869,
		resultant_exponent_inc__h193864,
		resultant_exponent_sub__h193862,
		resultant_exponent_sub_zerosMSB__h193867,
		shift_neg__h107918,
		shift_neg__h73033,
		x__h108005,
		x__h271187,
		x__h271189,
		x__h271191,
		x__h284456,
		x_lv_exponent__h72925,
		x_lv_product_exponent__h90537,
		y__h108004,
		y__h271188,
		y__h271190,
		y__h284455,
		y__h284457,
		y__h284458,
		y__h293079;
  wire [11 : 0] IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d5981,
		IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__773_ETC__q5,
		_theResult_____1_fst__h90062,
		exponent___1__h315913,
		lv_exp__h249844,
		result_exponent___1__h90084,
		result_exponent__h315326,
		x__h250010,
		x__h315884,
		x__h315915,
		x__h333939,
		x__h333941,
		y__h315885,
		y__h333940;
  wire [10 : 0] expo__h226904,
		expo__h226917,
		expo__h258696,
		expo__h258755,
		local_expo___1__h243059,
		shiftDist__h264802,
		x__h265691;
  wire [9 : 0] IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__168_ETC___d1240,
	       IF_NOT_inst_spfpu_divider_rg_stage3_68_BIT_77__ETC___d330,
	       _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__168_ETC___d1182,
	       _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d463,
	       _1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d129,
	       _theResult_____1_fst__h25362,
	       _theResult_____1_fst__h25365,
	       _theResult_____4_snd_fst__h30452,
	       _theResult___fst__h25318,
	       _theResult___fst__h65751,
	       _theResult___fst__h65755,
	       _theResult___snd_fst__h13984,
	       _theResult___snd_fst__h13994,
	       _theResult___snd_fst__h14002,
	       _theResult___snd_fst__h14012,
	       _theResult___snd_fst__h14014,
	       exp1__h274453,
	       exp1_temp__h268308,
	       exp2__h274454,
	       exp2_temp__h268309,
	       exponent2__h30233,
	       exponent3__h30212,
	       exponent3__h30224,
	       exponent_difference__h30247,
	       inst_spfm_add_sub_ff_input_register_read__50_B_ETC___d454,
	       inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d126,
	       lv_exponent___1__h14567,
	       lv_exponent___1__h14577,
	       lv_exponent__h14119,
	       lv_exponent__h274455,
	       lv_exponent_inc_shift__h6979,
	       lv_exponent_sub_shift__h6982,
	       lv_exponent_sub_zerosMSB__h6984,
	       lv_minuend__h30243,
	       lv_product_exponent___1__h25335,
	       lv_product_exponent__h25302,
	       lv_product_exponent_inc_shift__h25310,
	       lv_product_exponent_sub_shift__h25313,
	       lv_product_exponent_sub_zerosMSB__h25315,
	       lv_summed_exponent__h268310,
	       resultant_exponent___1__h66152,
	       resultant_exponent__h65471,
	       resultant_exponent_inc__h65466,
	       resultant_exponent_sub__h65464,
	       resultant_exponent_sub_zerosMSB__h65469,
	       shift_neg__h25311,
	       shift_neg__h6980,
	       x__h253934,
	       x__h25398,
	       x__h255839,
	       x__h268577,
	       x__h268579,
	       x__h268581,
	       x__h274532,
	       x_lv_exponent__h6872,
	       x_lv_product_exponent__h17268,
	       y__h25397,
	       y__h268578,
	       y__h268580,
	       y__h274531,
	       y__h274533,
	       y__h274534,
	       y__h278486;
  wire [8 : 0] IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d5805,
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__71__ETC__q3,
	       IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d5266,
	       IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d5339,
	       _theResult_____1_fst__h16789,
	       exponent___1__h305299,
	       exponent__h304713,
	       result_exponent___1__h16811,
	       result_exponent__h304726,
	       x__h305270,
	       x__h305301,
	       x__h313987,
	       x__h313989,
	       y__h305271,
	       y__h313988;
  wire [7 : 0] IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3819,
	       _theResult_____2__h265562,
	       expo___1__h265688,
	       expo__h209740,
	       expo__h215612,
	       expo__h264519,
	       local_expo___1__h215449,
	       local_expo___1__h226524,
	       lv_zeros_on_left__h167745,
	       x__h153088,
	       x__h194398;
  wire [6 : 0] lsb_zeros__h107915,
	       lv_leading_zeros__h315318,
	       lv_zeros_on_left__h53441,
	       msb_zeros___1__h107944,
	       msb_zeros__h107913,
	       msb_zeros__h90480,
	       x__h107979,
	       x__h215920,
	       x__h232473,
	       x__h333669,
	       x__h46527,
	       x__h66000;
  wire [5 : 0] IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d5264,
	       IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d5337,
	       lsb_zeros__h25308,
	       lsb_zeros__h73030,
	       lv_leading_zeros__h304718,
	       msb_zeros___1__h25337,
	       msb_zeros__h17211,
	       msb_zeros__h25306,
	       msb_zeros__h72873,
	       x__h210030,
	       x__h227037,
	       x__h25372,
	       x__h284463,
	       x__h293080,
	       x__h313717;
  wire [4 : 0] IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4364,
	       IF_ff_input_first__305_BIT_3_337_THEN_IF_NOT_I_ETC___d4265,
	       _theResult_____1_snd__h14220,
	       _theResult_____1_snd__h14231,
	       _theResult_____1_snd__h14242,
	       _theResult_____1_snd__h14259,
	       _theResult_____1_snd__h14369,
	       _theResult_____1_snd__h14609,
	       _theResult_____1_snd__h14627,
	       _theResult_____1_snd__h87494,
	       _theResult_____1_snd__h87505,
	       _theResult_____1_snd__h87516,
	       _theResult_____1_snd__h87533,
	       _theResult_____1_snd__h87643,
	       _theResult_____1_snd__h87883,
	       _theResult_____1_snd__h87901,
	       _theResult_____3_fst__h199584,
	       _theResult_____3_fst__h199789,
	       _theResult_____3_fst__h200206,
	       _theResult_____3_fst__h202617,
	       _theResult_____3_fst__h202822,
	       _theResult_____3_fst__h203233,
	       _theResult_____5__h264532,
	       _theResult___fst__h264794,
	       _theResult___fst__h264807,
	       _theResult___fst__h264872,
	       condFlags32_reswget_BITS_14_TO_10__q52,
	       condFlags32_reswget_BITS_9_TO_5__q53,
	       condFlags64_reswget_BITS_14_TO_10__q31,
	       condFlags64_reswget_BITS_9_TO_5__q32,
	       exception__h264517,
	       fflags__h16346,
	       fflags__h193908,
	       fflags__h209755,
	       fflags__h215627,
	       fflags__h304978,
	       fflags__h315577,
	       fflags__h65510,
	       fflags__h89619,
	       lsb_zeros__h6977,
	       msb_zeros__h6820,
	       result__h258589,
	       result__h264559,
	       result__h264678,
	       result__h264946,
	       result__h265162,
	       wr_final_out_fflags__h226921,
	       x1_avValue_fflags__h209661,
	       x1_avValue_fflags__h215520,
	       x1_avValue_fflags__h226600,
	       x__h245573,
	       x__h245907,
	       x__h246088,
	       x__h249072,
	       x__h249406,
	       x__h249587,
	       x__h258760,
	       x__h274539,
	       x__h278487,
	       x_fflags__h199531,
	       x_fflags__h202589,
	       x_fflags__h226656,
	       x_fflags__h226967,
	       x_fflags__h258428;
  wire [1 : 0] IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d5752,
	       IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d5870,
	       IF_inst_dpfm_add_sub_ff_stage2_read__367_BITS__ETC___d2783,
	       IF_inst_spfm_add_sub_ff_stage2_read__33_BITS_9_ETC___d975,
	       _theResult_____6_snd_snd__h167477,
	       _theResult_____6_snd_snd__h53173,
	       _theResult_____6_snd_snd_snd__h167524,
	       _theResult_____6_snd_snd_snd__h53220,
	       _theResult____h199806,
	       _theResult____h202839,
	       lv_compare_result__h199477,
	       lv_compare_result__h202542,
	       lv_result_is_infinity___1__h167478,
	       lv_result_is_infinity___1__h167540,
	       lv_result_is_infinity___1__h53174,
	       lv_result_is_infinity___1__h53236,
	       lv_result_is_zero___1__h167573,
	       lv_result_is_zero___1__h167577,
	       lv_result_is_zero___1__h53269,
	       lv_result_is_zero___1__h53273,
	       x__h167520,
	       x__h167561,
	       x__h167820,
	       x__h53216,
	       x__h53257,
	       x__h53516;
  wire IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d4259,
       IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4350,
       IF_IF_inst_dpfm_add_sub_ff_stage5_read__150_BI_ETC___d3271,
       IF_IF_inst_dpfm_add_sub_ff_stage5_read__150_BI_ETC___d3289,
       IF_IF_inst_spfm_add_sub_ff_stage5_read__168_BI_ETC___d1289,
       IF_IF_inst_spfm_add_sub_ff_stage5_read__168_BI_ETC___d1307,
       IF_NOT_IF_condFlags32_res_whas__339_THEN_condF_ETC___d4179,
       IF_NOT_IF_condFlags32_res_whas__339_THEN_condF_ETC___d4237,
       IF_NOT_IF_condFlags64_res_whas__424_THEN_condF_ETC___d4221,
       IF_NOT_IF_condFlags64_res_whas__424_THEN_condF_ETC___d4262,
       IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d3345,
       IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d3824,
       IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d4234,
       IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d5229,
       IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d3430,
       IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d3991,
       IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d5306,
       IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d5222,
       IF_ff_input_first__305_BIT_4_530_THEN_NOT_IF_c_ETC___d3834,
       IF_ff_input_first__305_BIT_4_530_THEN_NOT_IF_c_ETC___d3839,
       IF_ff_input_first__305_BIT_4_530_THEN_NOT_IF_c_ETC___d4002,
       IF_ff_input_first__305_BIT_4_530_THEN_NOT_IF_c_ETC___d4007,
       IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3830,
       IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3832,
       IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3835,
       IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3837,
       IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d4149,
       IF_getExp64_res_whas__310_THEN_getExp64_res_wg_ETC___d4325,
       IF_getExp64_res_whas__310_THEN_getExp64_res_wg_ETC___d4327,
       IF_getMant64_res_whas__015_THEN_getMant64_res__ETC___d4204,
       IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2324,
       IF_inst_dpfm_add_sub_ff_stage2_read__367_BIT_5_ETC___d2384,
       IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3172,
       IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d690,
       IF_inst_spfm_add_sub_ff_stage2_read__33_BIT_5__ETC___d750,
       IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1190,
       INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2085,
       INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d567,
       INV_1_MINUS_inst_dpfpu_divider_rg_stage2_439_B_ETC___d1564,
       INV_1_MINUS_inst_spfpu_divider_rg_stage2_24_BI_ETC___d191,
       NOT_0b0_CONCAT_getExp64_res_wget__983_BITS_32__ETC___d4210,
       NOT_0b0_CONCAT_getExp64_res_wget__983_BITS_32__ETC___d4246,
       NOT_IF_condFlags32_res_whas__339_THEN_condFlag_ETC___d3841,
       NOT_IF_condFlags64_res_whas__424_THEN_condFlag_ETC___d4009,
       NOT_IF_condFlags64_res_whas__424_THEN_condFlag_ETC___d4256,
       NOT_IF_getExp32_res_whas__815_THEN_getExp32_re_ETC___d4232,
       NOT_ff_input_first__305_BITS_15_TO_11_306_EQ_0_ETC___d5190,
       NOT_ff_input_first__305_BITS_15_TO_11_306_EQ_0_ETC___d5201,
       NOT_ff_input_first__305_BITS_15_TO_11_306_EQ_0_ETC___d5280,
       NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5344,
       NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5459,
       NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5720,
       NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5745,
       NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5747,
       NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5839,
       NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5864,
       NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5866,
       NOT_ff_input_first__305_BIT_5_519_523_AND_NOT__ETC___d3938,
       NOT_ff_input_first__305_BIT_5_519_523_AND_NOT__ETC___d4103,
       NOT_ff_input_first__305_BIT_5_519_523_AND_ff_i_ETC___d3945,
       NOT_ff_input_first__305_BIT_5_519_523_AND_ff_i_ETC___d4109,
       NOT_inst_dpfpu_divider_rg_stage2_439_BITS_21_T_ETC___d1644,
       NOT_inst_dpfpu_divider_rg_stage3_670_BITS_82_T_ETC___d1693,
       NOT_inst_spfpu_divider_rg_stage2_24_BITS_18_TO_ETC___d242,
       NOT_inst_spfpu_divider_rg_stage3_68_BITS_50_TO_ETC___d291,
       _0_CONCAT_IF_IF_IF_inst_dpfm_add_sub_ff_stage2__ETC___d2736,
       _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d928,
       _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__150_ETC___d3166,
       _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__168_ETC___d1184,
       _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d3998,
       _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4000,
       _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4003,
       _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4005,
       _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4185,
       _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1866,
       _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d464,
       _1_MINUS_inst_dpfpu_divider_rg_stage2_439_BITS__ETC___d1445,
       _1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d130,
       _theResult_____1__h118026,
       _theResult_____1__h30257,
       _theResult_____1_fst__h194733,
       _theResult_____1_fst__h248067,
       _theResult_____1_fst__h251597,
       _theResult_____1_fst__h66335,
       _theResult_____1_snd__h248135,
       _theResult_____1_snd__h251704,
       _theResult_____1_snd_snd_fst__h194761,
       _theResult_____1_snd_snd_fst__h66363,
       _theResult_____1_snd_snd_snd__h194762,
       _theResult_____1_snd_snd_snd__h66364,
       _theResult_____2_fst__h247742,
       _theResult_____2_fst__h251274,
       _theResult_____3_fst__h194006,
       _theResult_____3_fst__h194606,
       _theResult_____3_fst__h246968,
       _theResult_____3_fst__h250490,
       _theResult_____3_fst__h65608,
       _theResult_____3_fst__h66208,
       _theResult_____3_snd_fst__h194008,
       _theResult_____3_snd_fst__h194608,
       _theResult_____3_snd_fst__h65610,
       _theResult_____3_snd_fst__h66210,
       _theResult_____3_snd_snd_fst__h194010,
       _theResult_____3_snd_snd_fst__h65612,
       _theResult_____6__h193886,
       _theResult_____6__h65488,
       _theResult_____6_fst__h167474,
       _theResult_____6_fst__h53170,
       _theResult____h14114,
       _theResult____h209750,
       _theResult____h215622,
       _theResult____h232374,
       _theResult____h87388,
       _theResult___fst__h247332,
       _theResult___fst__h247453,
       _theResult___fst__h247523,
       _theResult___fst__h247597,
       _theResult___fst__h247668,
       _theResult___fst__h250854,
       _theResult___fst__h250977,
       _theResult___fst__h251055,
       _theResult___fst__h251129,
       _theResult___fst__h251200,
       _theResult___fst__h268818,
       _theResult___fst__h268826,
       _theResult___fst__h271424,
       _theResult___fst__h271432,
       _theResult___snd_fst__h246590,
       _theResult___snd_fst__h246628,
       _theResult___snd_fst__h246638,
       _theResult___snd_fst__h246685,
       _theResult___snd_fst__h246745,
       _theResult___snd_fst__h246806,
       _theResult___snd_fst__h246834,
       _theResult___snd_fst__h246894,
       _theResult___snd_fst__h250094,
       _theResult___snd_fst__h250133,
       _theResult___snd_fst__h250146,
       _theResult___snd_fst__h250199,
       _theResult___snd_fst__h250267,
       _theResult___snd_fst__h250328,
       _theResult___snd_fst__h250356,
       _theResult___snd_fst__h250416,
       _theResult___snd_fst__h250856,
       _theResult___snd_snd_fst__h250135,
       _theResult___snd_snd_snd_snd__h264813,
       and_sign__h199475,
       and_sign__h202540,
       ex_overflow__h193877,
       ex_overflow__h65479,
       expo3_zero__h117990,
       expo3_zero__h30221,
       ff_input_first__305_BITS_15_TO_11_306_EQ_0b100_ETC___d3331,
       ff_input_first__305_BITS_15_TO_11_306_EQ_0b10__ETC___d4565,
       ff_input_first__305_BITS_15_TO_11_306_EQ_0b10__ETC___d4746,
       ff_input_first__305_BITS_15_TO_11_306_EQ_0b110_ETC___d4629,
       ff_input_first__305_BIT_211_443_XOR_ff_input_f_ETC___d3807,
       ff_input_first__305_BIT_5_519_AND_NOT_ff_input_ETC___d3952,
       ff_input_first__305_BIT_5_519_AND_NOT_ff_input_ETC___d4115,
       ff_input_first__305_BIT_5_519_AND_ff_input_fir_ETC___d3958,
       ff_input_first__305_BIT_5_519_AND_ff_input_fir_ETC___d4120,
       inexact__h209751,
       inexact__h215623,
       inexact__h232375,
       inst_dpfm_add_sub_ff_input_register_read__852__ETC___d1857,
       inst_dpfm_add_sub_ff_stage2_read__367_BIT_15_3_ETC___d2392,
       inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1442,
       inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1443,
       inst_spfm_add_sub_ff_input_register_read__50_B_ETC___d455,
       inst_spfm_add_sub_ff_stage2_read__33_BIT_15_56_ETC___d758,
       inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d127,
       inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d128,
       lv_inexact1__h246360,
       lv_inexact1__h249860,
       lv_inexact___1__h246963,
       lv_inexact___1__h250485,
       lv_inexact__h16297,
       lv_inexact__h193885,
       lv_inexact__h246353,
       lv_inexact__h249853,
       lv_inexact__h65487,
       lv_inexact__h89570,
       lv_invalid___2__h246965,
       lv_invalid___2__h250487,
       lv_invalid__h246335,
       lv_invalid__h246351,
       lv_invalid__h246362,
       lv_invalid__h249834,
       lv_invalid__h249851,
       lv_invalid__h249862,
       lv_op1_subnormal__h268299,
       lv_op1_subnormal__h270909,
       lv_op2_Nan__h199473,
       lv_op2_Nan__h202538,
       lv_op2_subnormal__h268300,
       lv_op2_subnormal__h270910,
       lv_product_underflow__h193902,
       lv_product_underflow__h65504,
       lv_round_up___1__h14467,
       lv_round_up___1__h14503,
       lv_round_up___1__h194267,
       lv_round_up___1__h194489,
       lv_round_up___1__h247048,
       lv_round_up___1__h247705,
       lv_round_up___1__h250570,
       lv_round_up___1__h251237,
       lv_round_up___1__h265588,
       lv_round_up___1__h265625,
       lv_round_up___1__h65869,
       lv_round_up___1__h66091,
       lv_round_up___1__h87741,
       lv_round_up___1__h87777,
       lv_roundup___1__h16369,
       lv_roundup___1__h16751,
       lv_roundup___1__h215352,
       lv_roundup___1__h215389,
       lv_roundup___1__h226427,
       lv_roundup___1__h226464,
       lv_roundup___1__h242965,
       lv_roundup___1__h243001,
       lv_roundup___1__h89642,
       lv_roundup___1__h90024,
       lv_sign__h226897,
       lv_sticky___1__h7006,
       lv_sticky___1__h73059,
       lv_sticky__h16295,
       lv_sticky__h193883,
       lv_sticky__h246358,
       lv_sticky__h249858,
       lv_sticky__h65485,
       lv_sticky__h89568,
       op_xor_sign3__h117991,
       op_xor_sign3__h30222,
       or_sign__h199474,
       or_sign__h202539,
       quiet_nan_two__h268304,
       quiet_nan_two__h270914,
       sign2__h117978,
       sign2__h30209,
       sign3__h117980,
       sign3__h30211,
       sign__h232372,
       x__h117723,
       x__h117754,
       x__h117784,
       x__h118132,
       x__h118144,
       x__h14042,
       x__h14047,
       x__h14276,
       x__h14480,
       x__h14515,
       x__h14517,
       x__h16660,
       x__h167397,
       x__h167404,
       x__h167512,
       x__h167552,
       x__h167554,
       x__h167556,
       x__h167557,
       x__h167585,
       x__h167597,
       x__h167627,
       x__h16775,
       x__h194419,
       x__h194501,
       x__h209769,
       x__h215365,
       x__h215641,
       x__h226440,
       x__h232393,
       x__h242978,
       x__h247306,
       x__h247717,
       x__h250828,
       x__h251249,
       x__h265037,
       x__h265601,
       x__h268632,
       x__h268895,
       x__h268901,
       x__h268958,
       x__h268971,
       x__h269061,
       x__h271238,
       x__h271501,
       x__h271507,
       x__h271563,
       x__h271576,
       x__h271666,
       x__h282513,
       x__h282566,
       x__h282792,
       x__h282816,
       x__h282821,
       x__h29954,
       x__h29985,
       x__h30015,
       x__h301816,
       x__h302042,
       x__h302066,
       x__h302071,
       x__h30363,
       x__h30375,
       x__h342723,
       x__h53093,
       x__h53100,
       x__h53208,
       x__h53248,
       x__h53250,
       x__h53252,
       x__h53253,
       x__h53281,
       x__h53293,
       x__h53323,
       x__h66021,
       x__h66103,
       x__h87316,
       x__h87321,
       x__h87550,
       x__h87754,
       x__h87789,
       x__h87791,
       x__h89933,
       x__h90048,
       y__h118145,
       y__h14479,
       y__h14516,
       y__h16381,
       y__h167553,
       y__h167555,
       y__h167598,
       y__h16763,
       y__h194279,
       y__h194515,
       y__h215364,
       y__h215402,
       y__h226439,
       y__h226477,
       y__h242977,
       y__h243014,
       y__h247060,
       y__h247730,
       y__h250582,
       y__h251262,
       y__h265600,
       y__h268972,
       y__h268974,
       y__h269018,
       y__h271577,
       y__h271579,
       y__h271623,
       y__h30376,
       y__h304992,
       y__h305013,
       y__h315591,
       y__h315612,
       y__h53249,
       y__h53251,
       y__h53294,
       y__h65881,
       y__h66117,
       y__h87753,
       y__h87790,
       y__h89654,
       y__h90036;

  // action method _start
  assign RDY__start = !rg_multicycle_op && ff_input_FULL_N ;
  assign CAN_FIRE__start = !rg_multicycle_op && ff_input_FULL_N ;
  assign WILL_FIRE__start = EN__start ;

  // action method tx_output_notFull
  assign CAN_FIRE_tx_output_notFull = 1'd1 ;
  assign WILL_FIRE_tx_output_notFull = 1'd1 ;

  // action method tx_output_enq_rdy
  assign CAN_FIRE_tx_output_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_output_enq_rdy = 1'd1 ;

  // value method tx_output_enq_ena
  assign tx_output_enq_ena = tx_fbox_out_w_ena_whas ;

  // value method tx_output_enq_data
  always@(MUX_tx_fbox_out_w_data_wset_1__SEL_1 or
	  MUX_tx_fbox_out_w_data_wset_1__VAL_1 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_divider or
	  MUX_tx_fbox_out_w_data_wset_1__VAL_2 or
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_divider or
	  MUX_tx_fbox_out_w_data_wset_1__VAL_3 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt or
	  MUX_tx_fbox_out_w_data_wset_1__VAL_4 or
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt or
	  MUX_tx_fbox_out_w_data_wset_1__VAL_5 or
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub or
	  MUX_tx_fbox_out_w_data_wset_1__VAL_6 or
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub or
	  MUX_tx_fbox_out_w_data_wset_1__VAL_7)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tx_fbox_out_w_data_wset_1__SEL_1:
	  tx_output_enq_data = MUX_tx_fbox_out_w_data_wset_1__VAL_1;
      WILL_FIRE_RL_rl_get_output_from_spfpu_divider:
	  tx_output_enq_data = MUX_tx_fbox_out_w_data_wset_1__VAL_2;
      WILL_FIRE_RL_rl_get_output_from_dpfpu_divider:
	  tx_output_enq_data = MUX_tx_fbox_out_w_data_wset_1__VAL_3;
      WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt:
	  tx_output_enq_data = MUX_tx_fbox_out_w_data_wset_1__VAL_4;
      WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt:
	  tx_output_enq_data = MUX_tx_fbox_out_w_data_wset_1__VAL_5;
      WILL_FIRE_RL_rl_get_output_from_fm_add_sub:
	  tx_output_enq_data = MUX_tx_fbox_out_w_data_wset_1__VAL_6;
      WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub:
	  tx_output_enq_data = MUX_tx_fbox_out_w_data_wset_1__VAL_7;
      default: tx_output_enq_data =
		   70'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end

  // action method flush
  assign RDY_flush = 1'd1 ;
  assign CAN_FIRE_flush = 1'd1 ;
  assign WILL_FIRE_flush = EN_flush ;

  // value method fpu_ready
  assign fpu_ready = !rg_multicycle_op && !ff_input_EMPTY_N ;
  assign RDY_fpu_ready = 1'd1 ;

  // submodule ff_input
  FIFO1 #(.width(32'd212), .guarded(1'd1)) ff_input(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ff_input_D_IN),
						    .ENQ(ff_input_ENQ),
						    .DEQ(ff_input_DEQ),
						    .CLR(ff_input_CLR),
						    .D_OUT(ff_input_D_OUT),
						    .FULL_N(ff_input_FULL_N),
						    .EMPTY_N(ff_input_EMPTY_N));

  // rule RL_rl_get_output_from_spfpu_sqrt
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt =
	     tx_output_enq_rdy_b && inst_spfpu_sqrt_ff_final_out[37] &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt =
	     CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	     !WILL_FIRE_RL_start_stage ;

  // rule RL_rl_get_output_from_dpfpu_sqrt
  assign CAN_FIRE_RL_rl_get_output_from_dpfpu_sqrt =
	     tx_output_enq_rdy_b && inst_dpfpu_sqrt_ff_final_out[69] &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt =
	     CAN_FIRE_RL_rl_get_output_from_dpfpu_sqrt &&
	     !WILL_FIRE_RL_start_stage ;

  // rule RL_flush_fifo
  assign CAN_FIRE_RL_flush_fifo = EN_flush ;
  assign WILL_FIRE_RL_flush_fifo = EN_flush ;

  // rule RL_inst_spfpu_divider_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_divider_rl_stage2
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 =
	     inst_spfpu_divider_int_div_rg_state == 6'd0 &&
	     inst_spfpu_divider_rg_state_handler == 2'd1 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 ;

  // rule RL_inst_spfpu_divider_rl_stage4
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 =
	     inst_spfpu_divider_rg_state_handler == 2'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 ;

  // rule RL_rl_get_output_from_spfpu_divider
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_divider =
	     tx_output_enq_rdy_b &&
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_divider =
	     CAN_FIRE_RL_rl_get_output_from_spfpu_divider &&
	     !WILL_FIRE_RL_start_stage ;

  // rule RL_inst_spfpu_divider_int_div_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_divider_int_div_stage_1
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1 =
	     inst_spfpu_divider_int_div_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;

  // rule RL_inst_spfpu_divider_int_div_recursive_stage
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage =
	     inst_spfpu_divider_int_div_rg_state > 6'd1 &&
	     inst_spfpu_divider_int_div_rg_state <= 6'd12 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ;

  // rule RL_inst_spfpu_divider_int_div_end_stage
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage =
	     inst_spfpu_divider_int_div_rg_state == 6'd13 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage ;

  // rule __me_check_0
  assign CAN_FIRE___me_check_0 = 1'b1 ;
  assign WILL_FIRE___me_check_0 = 1'b1 ;

  // rule __me_check_1
  assign CAN_FIRE___me_check_1 = 1'b1 ;
  assign WILL_FIRE___me_check_1 = 1'b1 ;

  // rule __me_check_2
  assign CAN_FIRE___me_check_2 = 1'b1 ;
  assign WILL_FIRE___me_check_2 = 1'b1 ;

  // rule RL_inst_spfpu_divider_rl_stage3
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage &&
	     inst_spfpu_divider_rg_state_handler == 2'd2 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // rule __me_check_4
  assign CAN_FIRE___me_check_4 = 1'b1 ;
  assign WILL_FIRE___me_check_4 = 1'b1 ;

  // rule __me_check_5
  assign CAN_FIRE___me_check_5 = 1'b1 ;
  assign WILL_FIRE___me_check_5 = 1'b1 ;

  // rule RL_inst_spfpu_sqrt_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_sqrt_rl_stage2
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2 =
	     inst_spfpu_sqrt_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ;

  // rule RL_inst_spfpu_sqrt_rl_inter_stage
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage =
	     inst_spfpu_sqrt_rg_state > 6'd1 &&
	     inst_spfpu_sqrt_rg_state < 6'd25 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ;

  // rule RL_inst_spfpu_sqrt_rl_final_stage
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage =
	     inst_spfpu_sqrt_rg_state == 6'd25 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ;

  // rule __me_check_9
  assign CAN_FIRE___me_check_9 = 1'b1 ;
  assign WILL_FIRE___me_check_9 = 1'b1 ;

  // rule __me_check_10
  assign CAN_FIRE___me_check_10 = 1'b1 ;
  assign WILL_FIRE___me_check_10 = 1'b1 ;

  // rule __me_check_11
  assign CAN_FIRE___me_check_11 = 1'b1 ;
  assign WILL_FIRE___me_check_11 = 1'b1 ;

  // rule RL_inst_spfm_add_sub_rl_flush
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_flush = EN_flush ;

  // rule RL_inst_spfm_add_sub_rl_stage1_after_input_stage
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage =
	     inst_spfm_add_sub_rg_state_handler == 3'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ;

  // rule RL_inst_spfm_add_sub_rl_stage_3
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 =
	     inst_spfm_add_sub_rg_state_handler == 3'd2 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ;

  // rule RL_inst_spfm_add_sub_rl_stage4
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 =
	     inst_spfm_add_sub_rg_state_handler == 3'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // rule RL_inst_spfm_add_sub_rl_stage_5_final_stage
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage =
	     inst_spfm_add_sub_rg_state_handler == 3'd4 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage ;

  // rule RL_rl_get_output_from_fm_add_sub
  assign CAN_FIRE_RL_rl_get_output_from_fm_add_sub =
	     tx_output_enq_rdy_b &&
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_fm_add_sub =
	     CAN_FIRE_RL_rl_get_output_from_fm_add_sub &&
	     !WILL_FIRE_RL_start_stage ;

  // rule RL_inst_dpfpu_divider_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_flush = EN_flush ;

  // rule RL_inst_dpfpu_divider_rl_stage2
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2 =
	     inst_dpfpu_divider_int_div_rg_state == 6'd0 &&
	     inst_dpfpu_divider_rg_state_handler == 2'd1 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2 ;

  // rule RL_inst_dpfpu_divider_rl_stage4
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4 =
	     inst_dpfpu_divider_rg_state_handler == 2'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4 =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4 ;

  // rule RL_rl_get_output_from_dpfpu_divider
  assign CAN_FIRE_RL_rl_get_output_from_dpfpu_divider =
	     tx_output_enq_rdy_b &&
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4 &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfpu_divider =
	     CAN_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	     !WILL_FIRE_RL_start_stage ;

  // rule RL_inst_dpfpu_divider_int_div_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush = EN_flush ;

  // rule RL_inst_dpfpu_divider_int_div_stage_1
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 =
	     inst_dpfpu_divider_int_div_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ;

  // rule RL_inst_dpfpu_divider_int_div_recursive_stage
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage =
	     inst_dpfpu_divider_int_div_rg_state > 6'd1 &&
	     inst_dpfpu_divider_int_div_rg_state <= 6'd26 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ;

  // rule RL_inst_dpfpu_divider_int_div_end_stage
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage =
	     inst_dpfpu_divider_int_div_rg_state == 6'd27 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage ;

  // rule __me_check_18
  assign CAN_FIRE___me_check_18 = 1'b1 ;
  assign WILL_FIRE___me_check_18 = 1'b1 ;

  // rule __me_check_19
  assign CAN_FIRE___me_check_19 = 1'b1 ;
  assign WILL_FIRE___me_check_19 = 1'b1 ;

  // rule __me_check_20
  assign CAN_FIRE___me_check_20 = 1'b1 ;
  assign WILL_FIRE___me_check_20 = 1'b1 ;

  // rule RL_inst_dpfpu_divider_rl_stage3
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage &&
	     inst_dpfpu_divider_rg_state_handler == 2'd2 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3 ;

  // rule __me_check_22
  assign CAN_FIRE___me_check_22 = 1'b1 ;
  assign WILL_FIRE___me_check_22 = 1'b1 ;

  // rule __me_check_23
  assign CAN_FIRE___me_check_23 = 1'b1 ;
  assign WILL_FIRE___me_check_23 = 1'b1 ;

  // rule RL_inst_dpfpu_sqrt_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_flush = EN_flush ;

  // rule RL_inst_dpfpu_sqrt_rl_stage2
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 =
	     inst_dpfpu_sqrt_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 =
	     CAN_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 ;

  // rule RL_inst_dpfpu_sqrt_rl_inter_stage
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage =
	     inst_dpfpu_sqrt_rg_state > 6'd1 &&
	     inst_dpfpu_sqrt_rg_state < 6'd54 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage =
	     CAN_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage ;

  // rule RL_inst_dpfpu_sqrt_rl_final_stage
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage =
	     inst_dpfpu_sqrt_rg_state == 6'd54 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage =
	     CAN_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage ;

  // rule __me_check_27
  assign CAN_FIRE___me_check_27 = 1'b1 ;
  assign WILL_FIRE___me_check_27 = 1'b1 ;

  // rule __me_check_28
  assign CAN_FIRE___me_check_28 = 1'b1 ;
  assign WILL_FIRE___me_check_28 = 1'b1 ;

  // rule __me_check_29
  assign CAN_FIRE___me_check_29 = 1'b1 ;
  assign WILL_FIRE___me_check_29 = 1'b1 ;

  // rule RL_inst_dpfm_add_sub_rl_flush
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_flush = EN_flush ;

  // rule RL_inst_dpfm_add_sub_rl_stage1_after_input_stage
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage =
	     inst_dpfm_add_sub_rg_state_handler == 3'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage ;

  // rule RL_inst_dpfm_add_sub_rl_stage_3
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 =
	     inst_dpfm_add_sub_rg_state_handler == 3'd2 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 ;

  // rule RL_inst_dpfm_add_sub_rl_stage4
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4 =
	     inst_dpfm_add_sub_rg_state_handler == 3'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4 =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4 ;

  // rule RL_inst_dpfm_add_sub_rl_stage_5_final_stage
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage =
	     inst_dpfm_add_sub_rg_state_handler == 3'd4 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage ;

  // rule RL_start_stage
  assign CAN_FIRE_RL_start_stage =
	     ff_input_EMPTY_N && tx_output_enq_rdy_b &&
	     inst_spfpu_sqrt_rg_state == 6'd0 &&
	     inst_dpfpu_sqrt_rg_state == 6'd0 ;
  assign WILL_FIRE_RL_start_stage = CAN_FIRE_RL_start_stage ;

  // rule RL_rl_get_output_from_dpfm_add_sub
  assign CAN_FIRE_RL_rl_get_output_from_dpfm_add_sub =
	     tx_output_enq_rdy_b &&
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub =
	     CAN_FIRE_RL_rl_get_output_from_dpfm_add_sub &&
	     !WILL_FIRE_RL_start_stage ;

  // rule __me_check_37
  assign CAN_FIRE___me_check_37 = 1'b1 ;
  assign WILL_FIRE___me_check_37 = 1'b1 ;

  // rule __me_check_38
  assign CAN_FIRE___me_check_38 = 1'b1 ;
  assign WILL_FIRE___me_check_38 = 1'b1 ;

  // rule __me_check_39
  assign CAN_FIRE___me_check_39 = 1'b1 ;
  assign WILL_FIRE___me_check_39 = 1'b1 ;

  // rule __me_check_40
  assign CAN_FIRE___me_check_40 = 1'b1 ;
  assign WILL_FIRE___me_check_40 = 1'b1 ;

  // rule __me_check_41
  assign CAN_FIRE___me_check_41 = 1'b1 ;
  assign WILL_FIRE___me_check_41 = 1'b1 ;

  // rule RL_inst_spfpu_sqrt_ff_final_out__dreg_update
  assign CAN_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;

  // rule RL_inst_dpfpu_sqrt_ff_final_out__dreg_update
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:11] != 5'b10100 &&
	      ff_input_D_OUT[15:11] != 5'b00101 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     NOT_ff_input_first__305_BITS_15_TO_11_306_EQ_0_ETC___d5280 ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 =
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ;
  assign MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:9] != 7'b1110000 &&
	      ff_input_D_OUT[15:9] != 7'b1111000 ||
	      ff_input_D_OUT[8:6] != 3'b0) &&
	     NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5459 ;
  assign MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:9] != 7'b1110000 &&
	      ff_input_D_OUT[15:9] != 7'b1111000 ||
	      ff_input_D_OUT[8:6] != 3'b0) &&
	     NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5839 ;
  assign MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:9] != 7'b1110000 &&
	      ff_input_D_OUT[15:9] != 7'b1111000 ||
	      ff_input_D_OUT[8:6] != 3'b0) &&
	     NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5866 ;
  assign MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:9] != 7'b1110000 &&
	      ff_input_D_OUT[15:9] != 7'b1111000 ||
	      ff_input_D_OUT[8:6] != 3'b0) &&
	     NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5864 ;
  assign MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:11] != 5'b10100 &&
	      ff_input_D_OUT[15:11] != 5'b00101 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     NOT_ff_input_first__305_BITS_15_TO_11_306_EQ_0_ETC___d5201 ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 =
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;
  assign MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:9] != 7'b1110000 &&
	      ff_input_D_OUT[15:9] != 7'b1111000 ||
	      ff_input_D_OUT[8:6] != 3'b0) &&
	     NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5344 ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:9] != 7'b1110000 &&
	      ff_input_D_OUT[15:9] != 7'b1111000 ||
	      ff_input_D_OUT[8:6] != 3'b0) &&
	     NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5720 ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:9] != 7'b1110000 &&
	      ff_input_D_OUT[15:9] != 7'b1111000 ||
	      ff_input_D_OUT[8:6] != 3'b0) &&
	     NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5747 ;
  assign MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:9] != 7'b1110000 &&
	      ff_input_D_OUT[15:9] != 7'b1111000 ||
	      ff_input_D_OUT[8:6] != 3'b0) &&
	     NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5745 ;
  assign MUX_rg_multicycle_op_write_1__SEL_2 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:11] != 5'b10100 &&
	      ff_input_D_OUT[15:11] != 5'b00101 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     NOT_ff_input_first__305_BITS_15_TO_11_306_EQ_0_ETC___d5190 ;
  assign MUX_tx_fbox_out_w_data_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:11] == 5'b10100 ||
	      ff_input_D_OUT[15:11] == 5'b00101 ||
	      ff_input_D_OUT[15:11] == 5'b11010 ||
	      ff_input_first__305_BITS_15_TO_11_306_EQ_0b100_ETC___d3331) &&
	     ff_input_D_OUT[19:16] == 4'b0100 ;
  assign MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2 =
	     inst_dpfpu_divider_int_div_rg_state + 6'd1 ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 =
	     { inst_dpfpu_divider_int_div_rg_inter_stage, 2'd0 } ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 =
	     { inst_dpfpu_divider_int_div_rg_inter_stage, 2'd2 } ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3 =
	     { x__h71472, 2'd0 } ;
  assign MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_1 =
	     (IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d3430 ||
	      ff_input_D_OUT[211] &&
	      (IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d3430 ||
	       condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	       !condFlags64_reswget_BITS_14_TO_10__q31[3])) ?
	       { 65'h17FF8000000000000, fflags__h315577 } :
	       ((condFlags64_reswget_BITS_14_TO_10__q31[1] &&
		 !ff_input_D_OUT[211]) ?
		  70'h2FFE00000000000000 :
		  { 1'd1, final_result__h315752, 5'h0 }) ;
  assign MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_2 =
	     { 1'd1, final_result__h89575, fflags__h89619 } ;
  assign MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_1 =
	     { mantissa__h315329,
	       x__h333695,
	       result_exponent__h315326,
	       ff_input_D_OUT[211],
	       _theResult_____3__h315327,
	       IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__424_ETC___d5995,
	       ff_input_D_OUT[8:6] } ;
  assign MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_2 =
	     { mantissa__h89228,
	       x__h89272,
	       inst_dpfpu_sqrt_rg_inter_stage[128:116],
	       _theResult____h89226,
	       x__h89535,
	       inst_dpfpu_sqrt_rg_inter_stage[2:0] } ;
  assign MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1 =
	     inst_dpfpu_sqrt_rg_state + 6'd1 ;
  assign MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2 =
	     inst_spfpu_divider_int_div_rg_state + 6'd1 ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 =
	     { inst_spfpu_divider_int_div_rg_inter_stage, 2'd0 } ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 =
	     { inst_spfpu_divider_int_div_rg_inter_stage, 2'd3 } ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3 =
	     { x__h5419, 2'd0 } ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1 =
	     (IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d3345 ||
	      ff_input_D_OUT[179] &&
	      (IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d3345 ||
	       condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	       !condFlags32_reswget_BITS_14_TO_10__q52[3])) ?
	       { 33'h17FC00000, fflags__h304978 } :
	       ((condFlags32_reswget_BITS_14_TO_10__q52[1] &&
		 !ff_input_D_OUT[179]) ?
		  38'h2FF0000000 :
		  { 1'd1, final_result__h305153, 5'h0 }) ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2 =
	     { 1'd1, final_result__h16302, fflags__h16346 } ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1 =
	     { mantissa__h304729,
	       x__h313743,
	       result_exponent__h304726,
	       ff_input_D_OUT[179],
	       _theResult_____3__h304727,
	       IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__339_ETC___d5819,
	       ff_input_D_OUT[8:6] } ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2 =
	     { mantissa__h15955,
	       x__h15999,
	       inst_spfpu_sqrt_rg_inter_stage[67:58],
	       _theResult____h15953,
	       x__h16262,
	       inst_spfpu_sqrt_rg_inter_stage[2:0] } ;
  assign MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1 =
	     inst_spfpu_sqrt_rg_state + 6'd1 ;
  always@(ff_input_D_OUT or
	  IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d4490 or
	  x_data__h243614 or
	  x_data__h243971 or
	  IF_ff_input_first__305_BIT_3_337_THEN_IF_ff_in_ETC___d3517 or
	  IF_ff_input_first__305_BIT_3_337_THEN_IF_NOT_I_ETC___d4266 or
	  IF_ff_input_first__305_BIT_3_337_THEN_42949672_ETC___d3799)
  begin
    case (ff_input_D_OUT[15:11])
      5'b00100:
	  MUX_tx_fbox_out_w_data_wset_1__VAL_1 =
	      { ff_input_D_OUT[3] ? x_data__h243614 : x_data__h243971,
		6'd32 };
      5'b00101, 5'b10100:
	  MUX_tx_fbox_out_w_data_wset_1__VAL_1 =
	      IF_ff_input_first__305_BIT_3_337_THEN_IF_ff_in_ETC___d3517;
      5'b11000:
	  MUX_tx_fbox_out_w_data_wset_1__VAL_1 =
	      IF_ff_input_first__305_BIT_3_337_THEN_IF_NOT_I_ETC___d4266;
      5'b11010:
	  MUX_tx_fbox_out_w_data_wset_1__VAL_1 =
	      IF_ff_input_first__305_BIT_3_337_THEN_42949672_ETC___d3799;
      default: MUX_tx_fbox_out_w_data_wset_1__VAL_1 =
		   IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d4490;
    endcase
  end
  assign MUX_tx_fbox_out_w_data_wset_1__VAL_2 =
	     { x_data__h345707,
	       1'd1,
	       inst_spfpu_divider_wr_final_out_wget[4:0] } ;
  assign MUX_tx_fbox_out_w_data_wset_1__VAL_3 =
	     { inst_dpfpu_divider_wr_final_out_wget[68:5],
	       1'd1,
	       inst_dpfpu_divider_wr_final_out_wget[4:0] } ;
  assign MUX_tx_fbox_out_w_data_wset_1__VAL_4 =
	     { x_data__h345929, 1'd1, inst_spfpu_sqrt_ff_final_out[4:0] } ;
  assign MUX_tx_fbox_out_w_data_wset_1__VAL_5 =
	     { inst_dpfpu_sqrt_ff_final_out[68:5],
	       1'd1,
	       inst_dpfpu_sqrt_ff_final_out[4:0] } ;
  assign MUX_tx_fbox_out_w_data_wset_1__VAL_6 =
	     { y_data__h346142,
	       1'd1,
	       inst_spfm_add_sub_ff_final_out_wget[4:0] } ;
  assign MUX_tx_fbox_out_w_data_wset_1__VAL_7 =
	     { inst_dpfm_add_sub_ff_final_out_wget[68:5],
	       1'd1,
	       inst_dpfm_add_sub_ff_final_out_wget[4:0] } ;

  // inlined wires
  assign tx_fbox_out_w_ena_whas =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:11] == 5'b10100 ||
	      ff_input_D_OUT[15:11] == 5'b00101 ||
	      ff_input_D_OUT[15:11] == 5'b11010 ||
	      ff_input_first__305_BITS_15_TO_11_306_EQ_0b100_ETC___d3331) &&
	     ff_input_D_OUT[19:16] == 4'b0100 ||
	     WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_fm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_divider ;
  always@(MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1;
      WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2;
      WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
      default: inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
		   85'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign inst_spfpu_divider_wr_final_out_wget =
	     inst_spfpu_divider_rg_stage3[11] ?
	       { lv_final_output__h14219, _theResult_____1_snd__h14220 } :
	       IF_inst_spfpu_divider_rg_stage3_68_BIT_10_75_T_ETC___d355 ;
  assign inst_spfpu_sqrt_ff_final_out_1_wget =
	     MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1 ?
	       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1 :
	       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2 ;
  assign inst_spfpu_sqrt_ff_final_out_1_whas =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:9] != 7'b1110000 &&
	      ff_input_D_OUT[15:9] != 7'b1111000 ||
	      ff_input_D_OUT[8:6] != 3'b0) &&
	     NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5720 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ;
  assign inst_spfm_add_sub_ff_final_out_wget =
	     { new_value_final_result__h65519, fflags__h65510 } ;
  always@(MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 or
	  MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 or
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage or
	  MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 or
	  MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1:
	  inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1;
      WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage:
	  inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2;
      WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2:
	  inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
      default: inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
		   172'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign inst_dpfpu_divider_wr_final_out_wget =
	     inst_dpfpu_divider_rg_stage3[11] ?
	       { lv_final_output__h87493, _theResult_____1_snd__h87494 } :
	       IF_inst_dpfpu_divider_rg_stage3_670_BIT_10_677_ETC___d1757 ;
  assign inst_dpfpu_sqrt_ff_final_out_1_wget =
	     MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__SEL_1 ?
	       MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_1 :
	       MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_2 ;
  assign inst_dpfpu_sqrt_ff_final_out_1_whas =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:9] != 7'b1110000 &&
	      ff_input_D_OUT[15:9] != 7'b1111000 ||
	      ff_input_D_OUT[8:6] != 3'b0) &&
	     NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5839 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage ;
  assign inst_dpfm_add_sub_ff_final_out_wget =
	     { new_value_final_result__h193917, fflags__h193908 } ;
  assign inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget =
	     { ff_input_D_OUT[179:148],
	       ff_input_D_OUT[4],
	       ff_input_D_OUT[8:6] } ;
  assign inst_fpu_int_to_fp_fcvt_s_llu_arg_wget =
	     { ff_input_D_OUT[211:148],
	       ff_input_D_OUT[4],
	       ff_input_D_OUT[8:6] } ;
  assign condFlags32_arg_wget =
	     { getMant32_res_wget[68:46],
	       getExp32_res_wget[23:16],
	       IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d4673 } ;
  assign condFlags32_res_wget = { x__h245573, x__h245907, x__h246088 } ;
  assign getMant32_arg_wget =
	     ((ff_input_D_OUT[15:11] == 5'b10100 ||
	       ff_input_D_OUT[15:11] == 5'b00101) &&
	      ff_input_D_OUT[19:16] == 4'b0100) ?
	       { setCanonicalNaN_res_wget[95:32], 32'd0 } :
	       (ff_input_first__305_BITS_15_TO_11_306_EQ_0b110_ETC___d4629 ?
		  { setCanonicalNaN_res_wget[95:64], 64'd0 } :
		  (((ff_input_D_OUT[15:11] == 5'b0 ||
		     ff_input_D_OUT[15:11] == 5'b00001) &&
		    ff_input_D_OUT[19:16] == 4'b0100) ?
		     { 32'h3F800000, setCanonicalNaN_res_wget[95:32] } :
		     ((ff_input_D_OUT[15:11] == 5'b00011 &&
		       ff_input_D_OUT[19:16] == 4'b0100) ?
			setCanonicalNaN_res_wget :
			((ff_input_D_OUT[15:11] == 5'b01011 &&
			  ff_input_D_OUT[19:16] == 4'b0100) ?
			   { setCanonicalNaN_res_wget[95:64], 64'd0 } :
			   ((ff_input_D_OUT[15:11] == 5'b00010 &&
			     ff_input_D_OUT[19:16] == 4'b0100) ?
			      { setCanonicalNaN_res_wget[95:32], 32'd0 } :
			      setCanonicalNaN_res_wget))))) ;
  assign getMant32_res_wget =
	     { getMant32_argwget_BITS_95_TO_64__q44[22:0],
	       getMant32_argwget_BITS_63_TO_32__q45[22:0],
	       getMant32_argwget_BITS_31_TO_0__q46[22:0] } ;
  assign getExp32_res_wget =
	     { getMant32_argwget_BITS_95_TO_64__q44[30:23],
	       getMant32_argwget_BITS_63_TO_32__q45[30:23],
	       getMant32_argwget_BITS_31_TO_0__q46[30:23] } ;
  assign condFlags64_arg_wget =
	     { getMant64_res_wget[155:104],
	       getExp64_res_wget[32:22],
	       IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d4808 } ;
  assign condFlags64_res_wget = { x__h249072, x__h249406, x__h249587 } ;
  assign getMant64_arg_wget =
	     ((ff_input_D_OUT[15:11] == 5'b10100 ||
	       ff_input_D_OUT[15:11] == 5'b00101) &&
	      ff_input_D_OUT[19:16] == 4'b0100) ?
	       { ff_input_D_OUT[211:84], 64'd0 } :
	       (ff_input_first__305_BITS_15_TO_11_306_EQ_0b110_ETC___d4629 ?
		  { ff_input_D_OUT[211:148], 128'd0 } :
		  (((ff_input_D_OUT[15:11] == 5'b0 ||
		     ff_input_D_OUT[15:11] == 5'b00001) &&
		    ff_input_D_OUT[19:16] == 4'b0100) ?
		     { 64'h3FF0000000000000, ff_input_D_OUT[211:84] } :
		     ((ff_input_D_OUT[15:11] == 5'b00011 &&
		       ff_input_D_OUT[19:16] == 4'b0100) ?
			{ ff_input_D_OUT[211:84], 64'd0 } :
			((ff_input_D_OUT[15:11] == 5'b01011 &&
			  ff_input_D_OUT[19:16] == 4'b0100) ?
			   { ff_input_D_OUT[211:148], 128'd0 } :
			   ((ff_input_D_OUT[15:11] == 5'b00010 &&
			     ff_input_D_OUT[19:16] == 4'b0100) ?
			      { ff_input_D_OUT[211:84], 64'd0 } :
			      ff_input_D_OUT[211:20]))))) ;
  assign getMant64_res_wget =
	     { getMant64_argwget_BITS_191_TO_128__q22[51:0],
	       getMant64_argwget_BITS_127_TO_64__q23[51:0],
	       getMant64_argwget_BITS_63_TO_0__q24[51:0] } ;
  assign getExp64_res_wget =
	     { getMant64_argwget_BITS_191_TO_128__q22[62:52],
	       getMant64_argwget_BITS_127_TO_64__q23[62:52],
	       getMant64_argwget_BITS_63_TO_0__q24[62:52] } ;
  assign setCanonicalNaN_arg_wget =
	     ((ff_input_D_OUT[15:11] == 5'b10100 ||
	       ff_input_D_OUT[15:11] == 5'b00101 ||
	       ff_input_D_OUT[15:11] == 5'b00100) &&
	      ff_input_D_OUT[19:16] == 4'b0100) ?
	       { ff_input_D_OUT[211:84], 64'hFFFFFFFFFFFFFFFF } :
	       ((ff_input_D_OUT[15:11] == 5'b11000 &&
		 ff_input_D_OUT[19:16] == 4'b0100) ?
		  { ff_input_D_OUT[211:148], 128'd0 } :
		  (((ff_input_D_OUT[15:11] == 5'b11100 &&
		     ff_input_D_OUT[8:6] == 3'b001 ||
		     ff_input_D_OUT[15:11] == 5'b01000) &&
		    ff_input_D_OUT[19:16] == 4'b0100) ?
		     { ff_input_D_OUT[211:148],
		       128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF } :
		     (((ff_input_D_OUT[15:11] == 5'b0 ||
			ff_input_D_OUT[15:11] == 5'b00001 ||
			ff_input_D_OUT[15:11] == 5'b00011) &&
		       ff_input_D_OUT[19:16] == 4'b0100) ?
			{ ff_input_D_OUT[211:84], 64'hFFFFFFFFFFFFFFFF } :
			((ff_input_D_OUT[15:11] == 5'b01011 &&
			  ff_input_D_OUT[19:16] == 4'b0100) ?
			   { ff_input_D_OUT[211:148],
			     128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF } :
			   ((ff_input_D_OUT[15:11] == 5'b00010 &&
			     ff_input_D_OUT[19:16] == 4'b0100) ?
			      { ff_input_D_OUT[211:84],
				64'hFFFFFFFFFFFFFFFF } :
			      ff_input_D_OUT[211:20]))))) ;
  assign setCanonicalNaN_res_wget = { x__h243205, x__h243346, x__h243428 } ;

  // register inst_dpfm_add_sub_ff_input_register
  assign inst_dpfm_add_sub_ff_input_register_D_IN =
	     { _0_CONCAT_INV_IF_condFlags64_res_whas__424_THEN_ETC___d5291[105:0],
	       lv_summed_exponent__h270920,
	       ((ff_input_D_OUT[15:11] == 5'b0 ||
		 ff_input_D_OUT[15:11] == 5'b00001) &&
		ff_input_D_OUT[19:16] == 4'b0100) ?
		 ff_input_D_OUT[211] :
		 ff_input_first__305_BIT_211_443_XOR_ff_input_f_ETC___d3807,
	       ((ff_input_D_OUT[15:11] == 5'b0 ||
		 ff_input_D_OUT[15:11] == 5'b00001) &&
		ff_input_D_OUT[19:16] == 4'b0100) ?
		 ff_input_D_OUT[147] :
		 (ff_input_D_OUT[15:11] != 5'b00010 ||
		  ff_input_D_OUT[19:16] != 4'b0100) &&
		 ff_input_D_OUT[83],
	       getExp64_res_wget[10:0],
	       getMant64_res_wget[51:0],
	       x__h271238,
	       x__h271501,
	       x__h271507,
	       condFlags64_res_wget[4:0],
	       IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d5339 } ;
  assign inst_dpfm_add_sub_ff_input_register_EN =
	     MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1 ;

  // register inst_dpfm_add_sub_ff_stage2
  assign inst_dpfm_add_sub_ff_stage2_D_IN =
	     { inst_dpfm_add_sub_ff_input_register[81],
	       inst_dpfm_add_sub_ff_input_register[4],
	       x_lv_product_exponent__h90537,
	       x_lv_product_mantissa__h90538,
	       inst_dpfm_add_sub_ff_input_register[80:17],
	       inst_dpfm_add_sub_ff_input_register[13:9],
	       inst_dpfm_add_sub_ff_input_register[5],
	       inst_dpfm_add_sub_ff_input_register[3:2],
	       inst_dpfm_add_sub_ff_input_register[8:6],
	       inst_dpfm_add_sub_ff_input_register[16],
	       inst_dpfm_add_sub_ff_input_register[14],
	       inst_dpfm_add_sub_ff_input_register[15],
	       x__h117723,
	       x__h117784,
	       inst_dpfm_add_sub_ff_input_register[1:0] } ;
  assign inst_dpfm_add_sub_ff_stage2_EN =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage ;

  // register inst_dpfm_add_sub_ff_stage4
  assign inst_dpfm_add_sub_ff_stage4_D_IN =
	     { x__h167512,
	       x__h118132,
	       _theResult_____1__h118026,
	       lv_minuend__h118012,
	       mantissa2__h118022,
	       mantissa3__h118023,
	       inst_dpfm_add_sub_ff_stage2[9:7],
	       x__h167404,
	       x__h167520,
	       x__h167561,
	       inst_dpfm_add_sub_ff_stage2[3:2],
	       x__h167585,
	       x__h167627,
	       inst_dpfm_add_sub_ff_stage2[5] } ;
  assign inst_dpfm_add_sub_ff_stage4_EN =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 ;

  // register inst_dpfm_add_sub_ff_stage5
  assign inst_dpfm_add_sub_ff_stage5_D_IN =
	     { inst_dpfm_add_sub_ff_stage4[345:333],
	       _theResult____h167743,
	       inst_dpfm_add_sub_ff_stage4[347],
	       inst_dpfm_add_sub_ff_stage4[12:10],
	       x__h167820,
	       inst_dpfm_add_sub_ff_stage4[9:0],
	       lv_zeros_on_left__h167745 } ;
  assign inst_dpfm_add_sub_ff_stage5_EN =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4 ;

  // register inst_dpfm_add_sub_rg_state_handler
  always@(MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4 or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage or
	  EN_flush)
  case (1'b1)
    MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd1;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd0;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd4;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd3;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd2;
    EN_flush: inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd0;
    default: inst_dpfm_add_sub_rg_state_handler_D_IN =
		 3'bxxx /* unspecified value */ ;
  endcase
  assign inst_dpfm_add_sub_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:11] != 5'b10100 &&
	      ff_input_D_OUT[15:11] != 5'b00101 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     NOT_ff_input_first__305_BITS_15_TO_11_306_EQ_0_ETC___d5280 ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4 ;

  // register inst_dpfpu_divider_int_div_rg_inter_stage
  assign inst_dpfpu_divider_int_div_rg_inter_stage_D_IN = x_wget__h66738 ;
  assign inst_dpfpu_divider_int_div_rg_inter_stage_EN =
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ;

  // register inst_dpfpu_divider_int_div_rg_state
  always@(WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage or
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage or
	  MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2 or
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 or
	  EN_flush or WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2)
  case (1'b1)
    WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage:
	inst_dpfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage:
	inst_dpfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2;
    WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1:
	inst_dpfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2;
    EN_flush: inst_dpfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2:
	inst_dpfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2;
    default: inst_dpfpu_divider_int_div_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_dpfpu_divider_int_div_rg_state_EN =
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage ||
	     EN_flush ;

  // register inst_dpfpu_divider_rg_stage1
  assign inst_dpfpu_divider_rg_stage1_D_IN =
	     { lv_exponent__h284379,
	       x__h301717,
	       x__h301745,
	       ff_input_first__305_BIT_211_443_XOR_ff_input_f_ETC___d3807,
	       x__h301816,
	       x__h302042,
	       x__h302066,
	       x__h302071,
	       ff_input_D_OUT[8:6],
	       quiet_nan_two__h270914 } ;
  assign inst_dpfpu_divider_rg_stage1_EN =
	     MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1 ;

  // register inst_dpfpu_divider_rg_stage2
  assign inst_dpfpu_divider_rg_stage2_D_IN =
	     { inst_dpfpu_divider_rg_stage1[127:115],
	       inst_dpfpu_divider_rg_stage1[8],
	       inst_dpfpu_divider_rg_stage1[6],
	       inst_dpfpu_divider_rg_stage1[7],
	       inst_dpfpu_divider_rg_stage1[5:0] } ;
  assign inst_dpfpu_divider_rg_stage2_EN =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2 ;

  // register inst_dpfpu_divider_rg_stage3
  assign inst_dpfpu_divider_rg_stage3_D_IN =
	     { x_lv_quotient__h72924,
	       x_wget__h66738[113:57],
	       x_lv_exponent__h72925,
	       inst_dpfpu_divider_rg_stage2[8:5],
	       x__h87316,
	       !inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1442,
	       x__h87321,
	       inst_dpfpu_divider_rg_stage2[4:1],
	       inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1442 &&
	       NOT_inst_dpfpu_divider_rg_stage2_439_BITS_21_T_ETC___d1644,
	       inst_dpfpu_divider_rg_stage2[0] } ;
  assign inst_dpfpu_divider_rg_stage3_EN =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3 ;

  // register inst_dpfpu_divider_rg_state_handler
  always@(MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd1;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd3;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd0;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd2;
    EN_flush: inst_dpfpu_divider_rg_state_handler_D_IN = 2'd0;
    default: inst_dpfpu_divider_rg_state_handler_D_IN =
		 2'bxx /* unspecified value */ ;
  endcase
  assign inst_dpfpu_divider_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:9] != 7'b1110000 &&
	      ff_input_D_OUT[15:9] != 7'b1111000 ||
	      ff_input_D_OUT[8:6] != 3'b0) &&
	     NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5459 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4 ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3 ;

  // register inst_dpfpu_sqrt_ff_final_out
  assign inst_dpfpu_sqrt_ff_final_out_D_IN =
	     inst_dpfpu_sqrt_ff_final_out_1_whas ?
	       inst_dpfpu_sqrt_ff_final_out_1_wget :
	       { 1'd0,
		 69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign inst_dpfpu_sqrt_ff_final_out_EN = 1'd1 ;

  // register inst_dpfpu_sqrt_rg_inter_stage
  assign inst_dpfpu_sqrt_rg_inter_stage_D_IN =
	     MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__SEL_1 ?
	       MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_1 :
	       MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_2 ;
  assign inst_dpfpu_sqrt_rg_inter_stage_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:9] != 7'b1110000 &&
	      ff_input_D_OUT[15:9] != 7'b1111000 ||
	      ff_input_D_OUT[8:6] != 3'b0) &&
	     NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5866 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 ;

  // register inst_dpfpu_sqrt_rg_state
  always@(MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1 or
	  MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1 or
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage or
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage or
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1:
	inst_dpfpu_sqrt_rg_state_D_IN =
	    MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage:
	inst_dpfpu_sqrt_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage:
	inst_dpfpu_sqrt_rg_state_D_IN =
	    MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2:
	inst_dpfpu_sqrt_rg_state_D_IN =
	    MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1;
    EN_flush: inst_dpfpu_sqrt_rg_state_D_IN = 6'd0;
    default: inst_dpfpu_sqrt_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_dpfpu_sqrt_rg_state_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:9] != 7'b1110000 &&
	      ff_input_D_OUT[15:9] != 7'b1111000 ||
	      ff_input_D_OUT[8:6] != 3'b0) &&
	     NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5864 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage ||
	     EN_flush ;

  // register inst_spfm_add_sub_ff_input_register
  assign inst_spfm_add_sub_ff_input_register_D_IN =
	     { _0_CONCAT_INV_IF_condFlags32_res_whas__339_THEN_ETC___d5212[47:0],
	       lv_summed_exponent__h268310,
	       IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d5222,
	       ((ff_input_D_OUT[15:11] == 5'b0 ||
		 ff_input_D_OUT[15:11] == 5'b00001) &&
		ff_input_D_OUT[19:16] == 4'b0100) ?
		 setCanonicalNaN_reswget_BITS_63_TO_32__q42[31] :
		 (ff_input_D_OUT[15:11] != 5'b00010 ||
		  ff_input_D_OUT[19:16] != 4'b0100) &&
		 setCanonicalNaN_reswget_BITS_31_TO_0__q59[31],
	       getExp32_res_wget[7:0],
	       getMant32_res_wget[22:0],
	       x__h268632,
	       x__h268895,
	       x__h268901,
	       condFlags32_res_wget[4:0],
	       IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d5266 } ;
  assign inst_spfm_add_sub_ff_input_register_EN =
	     MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 ;

  // register inst_spfm_add_sub_ff_stage2
  assign inst_spfm_add_sub_ff_stage2_D_IN =
	     { inst_spfm_add_sub_ff_input_register[49],
	       inst_spfm_add_sub_ff_input_register[4],
	       x_lv_product_exponent__h17268,
	       x_lv_product_mantissa__h17269,
	       inst_spfm_add_sub_ff_input_register[48:17],
	       inst_spfm_add_sub_ff_input_register[13:9],
	       inst_spfm_add_sub_ff_input_register[5],
	       inst_spfm_add_sub_ff_input_register[3:2],
	       inst_spfm_add_sub_ff_input_register[8:6],
	       inst_spfm_add_sub_ff_input_register[16],
	       inst_spfm_add_sub_ff_input_register[14],
	       inst_spfm_add_sub_ff_input_register[15],
	       x__h29954,
	       x__h30015,
	       inst_spfm_add_sub_ff_input_register[1:0] } ;
  assign inst_spfm_add_sub_ff_stage2_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ;

  // register inst_spfm_add_sub_ff_stage4
  assign inst_spfm_add_sub_ff_stage4_D_IN =
	     { x__h53208,
	       x__h30363,
	       _theResult_____1__h30257,
	       lv_minuend__h30243,
	       mantissa2__h30253,
	       mantissa3__h30254,
	       inst_spfm_add_sub_ff_stage2[9:7],
	       x__h53100,
	       x__h53216,
	       x__h53257,
	       inst_spfm_add_sub_ff_stage2[3:2],
	       x__h53281,
	       x__h53323,
	       inst_spfm_add_sub_ff_stage2[5] } ;
  assign inst_spfm_add_sub_ff_stage4_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ;

  // register inst_spfm_add_sub_ff_stage5
  assign inst_spfm_add_sub_ff_stage5_D_IN =
	     { inst_spfm_add_sub_ff_stage4[168:159],
	       _theResult____h53439,
	       inst_spfm_add_sub_ff_stage4[170],
	       inst_spfm_add_sub_ff_stage4[12:10],
	       x__h53516,
	       inst_spfm_add_sub_ff_stage4[9:0],
	       lv_zeros_on_left__h53441 } ;
  assign inst_spfm_add_sub_ff_stage5_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // register inst_spfm_add_sub_rg_state_handler
  always@(MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage or
	  EN_flush)
  case (1'b1)
    MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd1;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd0;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd4;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd3;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd2;
    EN_flush: inst_spfm_add_sub_rg_state_handler_D_IN = 3'd0;
    default: inst_spfm_add_sub_rg_state_handler_D_IN =
		 3'bxxx /* unspecified value */ ;
  endcase
  assign inst_spfm_add_sub_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:11] != 5'b10100 &&
	      ff_input_D_OUT[15:11] != 5'b00101 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     NOT_ff_input_first__305_BITS_15_TO_11_306_EQ_0_ETC___d5201 ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // register inst_spfpu_divider_int_div_rg_inter_stage
  assign inst_spfpu_divider_int_div_rg_inter_stage_D_IN = x_wget__h658 ;
  assign inst_spfpu_divider_int_div_rg_inter_stage_EN =
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;

  // register inst_spfpu_divider_int_div_rg_state
  always@(WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage or
	  MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2 or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 or
	  EN_flush or WILL_FIRE_RL_inst_spfpu_divider_rl_stage2)
  case (1'b1)
    WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage:
	inst_spfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2;
    WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2;
    EN_flush: inst_spfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2;
    default: inst_spfpu_divider_int_div_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_divider_int_div_rg_state_EN =
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage ||
	     EN_flush ;

  // register inst_spfpu_divider_rg_stage1
  assign inst_spfpu_divider_rg_stage1_D_IN =
	     { lv_exponent__h274455,
	       x__h282455,
	       x__h282483,
	       x__h282513,
	       x__h282566,
	       x__h282792,
	       x__h282816,
	       x__h282821,
	       ff_input_D_OUT[8:6],
	       quiet_nan_two__h268304 } ;
  assign inst_spfpu_divider_rg_stage1_EN =
	     MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 ;

  // register inst_spfpu_divider_rg_stage2
  assign inst_spfpu_divider_rg_stage2_D_IN =
	     { inst_spfpu_divider_rg_stage1[66:57],
	       inst_spfpu_divider_rg_stage1[8],
	       inst_spfpu_divider_rg_stage1[6],
	       inst_spfpu_divider_rg_stage1[7],
	       inst_spfpu_divider_rg_stage1[5:0] } ;
  assign inst_spfpu_divider_rg_stage2_EN =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 ;

  // register inst_spfpu_divider_rg_stage3
  assign inst_spfpu_divider_rg_stage3_D_IN =
	     { x_lv_quotient__h6871,
	       x_wget__h658[55:28],
	       x_lv_exponent__h6872,
	       inst_spfpu_divider_rg_stage2[8:5],
	       x__h14042,
	       !inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d127,
	       x__h14047,
	       inst_spfpu_divider_rg_stage2[4:1],
	       inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d127 &&
	       NOT_inst_spfpu_divider_rg_stage2_24_BITS_18_TO_ETC___d242,
	       inst_spfpu_divider_rg_stage2[0] } ;
  assign inst_spfpu_divider_rg_stage3_EN =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // register inst_spfpu_divider_rg_state_handler
  always@(MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd1;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage3:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd3;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage4:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd0;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd2;
    EN_flush: inst_spfpu_divider_rg_state_handler_D_IN = 2'd0;
    default: inst_spfpu_divider_rg_state_handler_D_IN =
		 2'bxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_divider_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:9] != 7'b1110000 &&
	      ff_input_D_OUT[15:9] != 7'b1111000 ||
	      ff_input_D_OUT[8:6] != 3'b0) &&
	     NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5344 ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // register inst_spfpu_sqrt_ff_final_out
  assign inst_spfpu_sqrt_ff_final_out_D_IN =
	     inst_spfpu_sqrt_ff_final_out_1_whas ?
	       inst_spfpu_sqrt_ff_final_out_1_wget :
	       { 1'd0,
		 37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign inst_spfpu_sqrt_ff_final_out_EN = 1'd1 ;

  // register inst_spfpu_sqrt_rg_inter_stage
  assign inst_spfpu_sqrt_rg_inter_stage_D_IN =
	     MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1 ?
	       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1 :
	       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2 ;
  assign inst_spfpu_sqrt_rg_inter_stage_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:9] != 7'b1110000 &&
	      ff_input_D_OUT[15:9] != 7'b1111000 ||
	      ff_input_D_OUT[8:6] != 3'b0) &&
	     NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5747 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ;

  // register inst_spfpu_sqrt_rg_state
  always@(MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1 or
	  MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1 or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage:
	inst_spfpu_sqrt_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    EN_flush: inst_spfpu_sqrt_rg_state_D_IN = 6'd0;
    default: inst_spfpu_sqrt_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_sqrt_rg_state_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:9] != 7'b1110000 &&
	      ff_input_D_OUT[15:9] != 7'b1111000 ||
	      ff_input_D_OUT[8:6] != 3'b0) &&
	     NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5745 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ||
	     EN_flush ;

  // register rg_multicycle_op
  always@(WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub or
	  MUX_rg_multicycle_op_write_1__SEL_2 or
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_divider or
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_divider or
	  EN_flush or
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
  case (1'b1)
    WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub:
	rg_multicycle_op_D_IN = 1'd0;
    MUX_rg_multicycle_op_write_1__SEL_2: rg_multicycle_op_D_IN = 1'd1;
    WILL_FIRE_RL_rl_get_output_from_dpfpu_divider ||
    WILL_FIRE_RL_rl_get_output_from_fm_add_sub ||
    WILL_FIRE_RL_rl_get_output_from_spfpu_divider ||
    EN_flush ||
    WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt ||
    WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt:
	rg_multicycle_op_D_IN = 1'd0;
    default: rg_multicycle_op_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign rg_multicycle_op_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[15:11] != 5'b10100 &&
	      ff_input_D_OUT[15:11] != 5'b00101 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     NOT_ff_input_first__305_BITS_15_TO_11_306_EQ_0_ETC___d5190 ||
	     EN_flush ||
	     WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_fm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_divider ;

  // submodule ff_input
  assign ff_input_D_IN = _start_m ;
  assign ff_input_ENQ = EN__start ;
  assign ff_input_DEQ = CAN_FIRE_RL_start_stage ;
  assign ff_input_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__339_ETC___d5819 =
	     _theResult_____3__h304727[28] ? 26'd0 : 26'd1 ;
  assign IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__424_ETC___d5995 =
	     _theResult_____3__h315327[57] ? 55'd0 : 55'd1 ;
  assign IF_0b0_CONCAT_getExp64_res_wget__983_BITS_32_T_ETC___d4048 =
	     (x__h250010[10:0] == 11'd2047 &&
	      (ff_input_D_OUT[8:6] == 3'b100 ||
	       ff_input_D_OUT[8:6] == 3'b0 &&
	       getMant64_res_wget[155:104] != 52'd0)) ?
	       (ff_input_D_OUT[211] ?
		  IF_ff_input_first__305_BIT_4_530_THEN_0_ELSE_1_ETC___d3880 :
		  64'd1) :
	       64'd0 ;
  assign IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q58 =
	     IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__339_ETC___d5819[0] ?
	       26'd1 :
	       26'd0 ;
  assign IF_IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas___ETC__q37 =
	     IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__424_ETC___d5995[0] ?
	       55'd1 :
	       55'd0 ;
  assign IF_IF_IF_condFlags32_res_whas__339_THEN_condFl_ETC___d5812 =
	     IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d5805[0] ?
	       mantissa__h304719 :
	       mantissa___1__h313714 ;
  assign IF_IF_IF_condFlags64_res_whas__424_THEN_condFl_ETC___d5988 =
	     IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d5981[0] ?
	       mantissa__h315319 :
	       mantissa___1__h333666 ;
  assign IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__150_ETC___d3222 =
	     (_theResult_____5__h193887[53] ||
	      IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3189[159:158] ==
	      2'b0 &&
	      _theResult_____5__h193887[52]) ?
	       resultant_exponent___1__h194550 :
	       resultant_exponent__h193869 ;
  assign IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__150_ETC___d3239 =
	     _theResult_____5__h193887[53] ?
	       lv_rounded_mantissa__h194551 :
	       _theResult_____5__h193887 ;
  assign IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1378 =
	     IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q17[57] ?
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q18[113:1] :
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q19[113:1] ;
  assign IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1395 =
	     _remainder__h69446[57] ?
	       { _remainder___1__h69618, _dividend___1__h69619 } :
	       { _remainder__h69446, _dividend__h69449 } ;
  assign IF_IF_IF_inst_dpfpu_divider_rg_stage3_670_BITS_ETC___d1725 =
	     _theResult_____4__h87391[53] ?
	       lv_rounded_quotient__h87842 :
	       _theResult_____4__h87391 ;
  assign IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5047 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5043 ?
	       lv_man___1__h226499 :
	       lv_man__h215625 ;
  assign IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5171 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5167 ?
	       lv_man___1__h215424 :
	       lv_man__h209753 ;
  assign IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__168_ETC___d1240 =
	     (_theResult_____5__h65489[24] ||
	      IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1207[72:71] ==
	      2'b0 &&
	      _theResult_____5__h65489[23]) ?
	       resultant_exponent___1__h66152 :
	       resultant_exponent__h65471 ;
  assign IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__168_ETC___d1257 =
	     _theResult_____5__h65489[24] ?
	       lv_rounded_mantissa__h66153 :
	       _theResult_____5__h65489 ;
  assign IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d63 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q11[28] ?
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q12[55:1] :
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13[55:1] ;
  assign IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d80 =
	     _remainder__h3387[28] ?
	       { _remainder___1__h3559, _dividend___1__h3560 } :
	       { _remainder__h3387, _dividend__h3390 } ;
  assign IF_IF_IF_inst_spfpu_divider_rg_stage3_68_BITS__ETC___d323 =
	     _theResult_____4__h14117[24] ?
	       lv_rounded_quotient__h14568 :
	       _theResult_____4__h14117 ;
  assign IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d3400 =
	     IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d3345 ?
	       setCanonicalNaN_res_wget[63:32] :
	       (lv_op2_Nan__h199473 ?
		  setCanonicalNaN_res_wget[95:64] :
		  IF_NOT_ff_input_first__305_BIT_6_358_359_AND_I_ETC___d3398) ;
  assign IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d3868 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[3] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[4] ||
	      IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3819[7] &&
	      !IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d3824) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h246626 ;
  assign IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d4471 =
	     condFlags32_reswget_BITS_14_TO_10__q52[4] ?
	       { expo__h258755, man__h258757 } :
	       { expo__h258696, mant__h258697 } ;
  assign IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d4474 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[0]) ?
	       64'h7FF8000000000000 :
	       { setCanonicalNaN_reswget_BITS_95_TO_64__q41[31],
		 condFlags32_reswget_BITS_14_TO_10__q52[1] ?
		   63'h7FF0000000000000 :
		   IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d4471 } ;
  assign IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d5752 =
	     condFlags32_reswget_BITS_14_TO_10__q52[4] ? 2'd0 : 2'd1 ;
  assign IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d5805 =
	     x__h305270 - y__h305271 ;
  assign IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d3479 =
	     IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d3430 ?
	       ff_input_D_OUT[147:84] :
	       (lv_op2_Nan__h202538 ?
		  ff_input_D_OUT[211:148] :
		  IF_NOT_ff_input_first__305_BIT_6_358_359_AND_I_ETC___d3477) ;
  assign IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d4035 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[3] ||
	      condFlags64_reswget_BITS_14_TO_10__q31[4] ||
	      x__h250010[10] &&
	      !IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d3991) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h250131 ;
  assign IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d4259 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[4] ||
	      x__h250010[10] &&
	      !IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d3991) ?
	       _theResult___snd_fst__h250856 :
	       _theResult___snd_snd_fst__h250135 ;
  assign IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d4410 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[2] ||
	      condFlags64_reswget_BITS_14_TO_10__q31[0]) ?
	       { result__h264559, 32'h7FC00000 } :
	       (condFlags64_reswget_BITS_14_TO_10__q31[1] ?
		  { 5'd0, ff_input_D_OUT[211], 31'h7F800000 } :
		  IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4408) ;
  assign IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d4411 =
	     condFlags64_reswget_BITS_14_TO_10__q31[3] ?
	       { 5'b0, ff_input_D_OUT[211], 31'b0 } :
	       IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d4410 ;
  assign IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d5870 =
	     condFlags64_reswget_BITS_14_TO_10__q31[4] ? 2'd0 : 2'd1 ;
  assign IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d5981 =
	     x__h315884 - y__h315885 ;
  assign IF_IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0_ETC___d3702 =
	     IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d3698 ?
	       lv_man___1__h243036 :
	       lv_man__h232377 ;
  assign IF_IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0_ETC___d4386 =
	     IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d4382 ?
	       fman___1__h265662 :
	       fman__h265560 ;
  assign IF_IF_getExp32_res_whas__815_THEN_getExp32_res_ETC___d3882 =
	     (getExp32_res_wget[23:16] == 8'd126 &&
	      (ff_input_D_OUT[8:6] == 3'b100 ||
	       ff_input_D_OUT[8:6] == 3'b0 &&
	       getMant32_res_wget[68:46] != 23'd0)) ?
	       (setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
		  IF_ff_input_first__305_BIT_4_530_THEN_0_ELSE_1_ETC___d3880 :
		  64'd1) :
	       64'd0 ;
  assign IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4346 =
	     IF_getExp64_res_whas__310_THEN_getExp64_res_wg_ETC___d4325 ?
	       49'd0 :
	       _theResult___snd_snd_fst__h264798 ;
  assign IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4350 =
	     x__h265037 | _theResult___snd_snd_snd_snd__h264813 ;
  assign IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4364 =
	     (getExp64_res_wget[32:22] == 11'h47E &&
	      getMant64_reswget_BITS_155_TO_104__q25[51:28] == 24'hFFFFFF &&
	      (getMant64_reswget_BITS_155_TO_104__q25[27] ||
	       _theResult___snd_snd_snd_snd__h264813) &&
	      ff_input_D_OUT[8:6] != 3'b001) ?
	       result__h264946 :
	       _theResult_____5__h264532 ;
  assign IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4408 =
	     (getExp64_res_wget[32:22] <= 11'h47E) ?
	       { result__h264678, _theResult_____5_snd_fst__h265564 } :
	       { 5'd5,
		 CASE_ff_inputD_OUT_BITS_8_TO_6_0b1_ff_inputD_ETC__q27 } ;
  assign IF_IF_inst_dpfm_add_sub_ff_stage2_read__367_BI_ETC___d2408 =
	     mantissa_to_shift__h118015 >> exponent_difference__h118016 ;
  assign IF_IF_inst_dpfm_add_sub_ff_stage5_read__150_BI_ETC___d3271 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3172 ?
	       resultant_exponent__h193869[12] &&
	       !inst_dpfm_add_sub_ff_stage5[8] ||
	       inst_dpfm_add_sub_ff_stage5[11] :
	       inst_dpfm_add_sub_ff_stage5[11] ;
  assign IF_IF_inst_dpfm_add_sub_ff_stage5_read__150_BI_ETC___d3289 =
	     (lv_product_underflow__h193902 &&
	      IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__150_ETC___d3239[52]) ?
	       (!IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3189[104] ||
		!IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3189[105]) &&
	       (IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3189[103:0] ==
		104'd0 ||
		!IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3189[105] ||
		(inst_dpfm_add_sub_ff_stage5[23] ||
		 inst_dpfm_add_sub_ff_stage5[22:20] != 3'b011) &&
		(!inst_dpfm_add_sub_ff_stage5[23] ||
		 inst_dpfm_add_sub_ff_stage5[22:20] != 3'b010)) &&
	       _theResult_____3_fst__h194006 :
	       lv_product_underflow__h193902 ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1346 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[113] ?
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q15[113:1] :
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[113:1] ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1371 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1346,
	       !inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[113] } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1396 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[1] ?
	       IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1395 :
	       { IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1378,
		 !IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q17[57] } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q17 =
	     IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1346[112:55] ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q18 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1371[112:0],
	       1'd0 } +
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[169:114],
	       57'd0 } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q19 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1371[112:0],
	       1'd0 } -
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[169:114],
	       57'd0 } ;
  assign IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__773_ETC__q5 =
	     IF_inst_dpfpu_sqrt_rg_inter_stage_read__773_BI_ETC___d1827 ?
	       _theResult_____1_fst__h90062 :
	       inst_dpfpu_sqrt_rg_inter_stage[128:117] ;
  assign IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__773_ETC__q6 =
	     IF_inst_dpfpu_sqrt_rg_inter_stage_read__773_BI_ETC___d1827 ?
	       lv_extended_mantissa___1__h90061 :
	       lv_extended_mantissa__h89571 ;
  assign IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5018 =
	     _theResult____h215610 << x__h215920[5:0] ;
  assign IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5142 =
	     _theResult____h209738 << x__h210030[4:0] ;
  assign IF_IF_inst_spfm_add_sub_ff_stage2_read__33_BIT_ETC___d774 =
	     mantissa_to_shift__h30246 >> exponent_difference__h30247 ;
  assign IF_IF_inst_spfm_add_sub_ff_stage5_read__168_BI_ETC___d1289 =
	     IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1190 ?
	       resultant_exponent__h65471[9] &&
	       !inst_spfm_add_sub_ff_stage5[7] ||
	       inst_spfm_add_sub_ff_stage5[10] :
	       inst_spfm_add_sub_ff_stage5[10] ;
  assign IF_IF_inst_spfm_add_sub_ff_stage5_read__168_BI_ETC___d1307 =
	     (lv_product_underflow__h65504 &&
	      IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__168_ETC___d1257[23]) ?
	       (!IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1207[46] ||
		!IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1207[47]) &&
	       (IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1207[45:0] ==
		46'd0 ||
		!IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1207[47] ||
		(inst_spfm_add_sub_ff_stage5[22] ||
		 inst_spfm_add_sub_ff_stage5[21:19] != 3'b011) &&
		(!inst_spfm_add_sub_ff_stage5[22] ||
		 inst_spfm_add_sub_ff_stage5[21:19] != 3'b010)) &&
	       _theResult_____3_fst__h65608 :
	       lv_product_underflow__h65504 ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d31 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[55] ?
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[55:1] :
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q10[55:1] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d56 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d31,
	       !inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[55] } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d81 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[1] ?
	       IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d80 :
	       { IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d63,
		 !IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q11[28] } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q11 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d31[54:26] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q12 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d56[54:0],
	       1'd0 } +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[82:56],
	       28'd0 } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d56[54:0],
	       1'd0 } -
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[82:56],
	       28'd0 } ;
  assign IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__71__ETC__q3 =
	     IF_inst_spfpu_sqrt_rg_inter_stage_read__71_BIT_ETC___d425 ?
	       _theResult_____1_fst__h16789 :
	       inst_spfpu_sqrt_rg_inter_stage[67:59] ;
  assign IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__71__ETC__q4 =
	     IF_inst_spfpu_sqrt_rg_inter_stage_read__71_BIT_ETC___d425 ?
	       lv_extended_mantissa___1__h16788 :
	       lv_extended_mantissa__h16298 ;
  assign IF_NOT_IF_condFlags32_res_whas__339_THEN_condF_ETC___d4179 =
	     lv_invalid__h246362 | condFlags32_reswget_BITS_14_TO_10__q52[1] ;
  assign IF_NOT_IF_condFlags32_res_whas__339_THEN_condF_ETC___d4237 =
	     (!condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	      NOT_IF_condFlags32_res_whas__339_THEN_condFlag_ETC___d3841) ?
	       lv_inexact___1__h246963 :
	       lv_inexact__h246353 ;
  assign IF_NOT_IF_condFlags64_res_whas__424_THEN_condF_ETC___d4221 =
	     lv_invalid__h249862 | condFlags64_reswget_BITS_14_TO_10__q31[1] ;
  assign IF_NOT_IF_condFlags64_res_whas__424_THEN_condF_ETC___d4262 =
	     (!condFlags64_reswget_BITS_14_TO_10__q31[3] &&
	      NOT_IF_condFlags64_res_whas__424_THEN_condFlag_ETC___d4009) ?
	       lv_inexact___1__h250485 :
	       lv_inexact__h249853 ;
  assign IF_NOT_IF_inst_dpfm_add_sub_ff_stage5_read__15_ETC___d3243 =
	     (ex_overflow__h193877 || inst_dpfm_add_sub_ff_stage5[12] ||
	      IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__150_ETC___d3222[10:0] ==
	      11'd2047) ?
	       { inst_dpfm_add_sub_ff_stage5[23],
		 (inst_dpfm_add_sub_ff_stage5[22:20] == 3'b001 ||
		  inst_dpfm_add_sub_ff_stage5[22:20] == 3'b010 &&
		  !inst_dpfm_add_sub_ff_stage5[23] ||
		  inst_dpfm_add_sub_ff_stage5[22:20] == 3'b011 &&
		  inst_dpfm_add_sub_ff_stage5[23]) ?
		   63'h7FEFFFFFFFFFFFFF :
		   63'h7FF0000000000000 } :
	       (inst_dpfm_add_sub_ff_stage5[18] ?
		  { inst_dpfm_add_sub_ff_stage5[19], 63'd0 } :
		  { inst_dpfm_add_sub_ff_stage5[23],
		    IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__150_ETC___d3222[10:0],
		    IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__150_ETC___d3239[51:0] }) ;
  assign IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__16_ETC___d1261 =
	     (ex_overflow__h65479 || inst_spfm_add_sub_ff_stage5[11] ||
	      IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__168_ETC___d1240[7:0] ==
	      8'd255) ?
	       { inst_spfm_add_sub_ff_stage5[22],
		 (inst_spfm_add_sub_ff_stage5[21:19] == 3'b001 ||
		  inst_spfm_add_sub_ff_stage5[21:19] == 3'b010 &&
		  !inst_spfm_add_sub_ff_stage5[22] ||
		  inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 &&
		  inst_spfm_add_sub_ff_stage5[22]) ?
		   31'h7F7FFFFF :
		   31'h7F800000 } :
	       (inst_spfm_add_sub_ff_stage5[17] ?
		  { inst_spfm_add_sub_ff_stage5[18], 31'd0 } :
		  { inst_spfm_add_sub_ff_stage5[22],
		    IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__168_ETC___d1240[7:0],
		    IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__168_ETC___d1257[22:0] }) ;
  assign IF_NOT_ff_input_first__305_BIT_4_530_544_AND_f_ETC___d3678 =
	     _theResult____h226914 << x__h232473[5:0] ;
  assign IF_NOT_ff_input_first__305_BIT_6_358_359_AND_I_ETC___d3396 =
	     (!ff_input_D_OUT[6] && lv_compare_result__h199477 == 2'b01 ||
	      ff_input_D_OUT[6] && lv_compare_result__h199477 == 2'b10) ?
	       setCanonicalNaN_res_wget[95:64] :
	       setCanonicalNaN_res_wget[63:32] ;
  assign IF_NOT_ff_input_first__305_BIT_6_358_359_AND_I_ETC___d3398 =
	     (!ff_input_D_OUT[6] &&
	      condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	      condFlags32_reswget_BITS_9_TO_5__q53[3]) ?
	       lv_result__h200251 :
	       IF_ff_input_first__305_BIT_6_358_AND_IF_condFl_ETC___d3397 ;
  assign IF_NOT_ff_input_first__305_BIT_6_358_359_AND_I_ETC___d3477 =
	     (!ff_input_D_OUT[6] &&
	      condFlags64_reswget_BITS_14_TO_10__q31[3] &&
	      condFlags64_reswget_BITS_9_TO_5__q32[3]) ?
	       lv_result__h203278 :
	       IF_ff_input_first__305_BIT_6_358_AND_IF_condFl_ETC___d3476 ;
  assign IF_NOT_inst_dpfpu_divider_rg_stage3_670_BITS_8_ETC___d1747 =
	     (NOT_inst_dpfpu_divider_rg_stage3_670_BITS_82_T_ETC___d1693 &&
	      inst_dpfpu_divider_rg_stage3[1] ||
	      inst_dpfpu_divider_rg_stage3[8]) ?
	       { IF_NOT_inst_dpfpu_divider_rg_stage3_670_BIT_13_ETC___d1732[10:0],
		 IF_IF_IF_inst_dpfpu_divider_rg_stage3_670_BITS_ETC___d1725[51:0] } :
	       IF_inst_dpfpu_divider_rg_stage3_670_BIT_7_736__ETC___d1746 ;
  assign IF_NOT_inst_dpfpu_divider_rg_stage3_670_BIT_13_ETC___d1732 =
	     (!inst_dpfpu_divider_rg_stage3[138] &&
	      IF_IF_IF_inst_dpfpu_divider_rg_stage3_670_BITS_ETC___d1725[52]) ?
	       lv_exponent___1__h87851 :
	       lv_exponent__h87393 ;
  assign IF_NOT_inst_spfpu_divider_rg_stage3_68_BITS_50_ETC___d345 =
	     (NOT_inst_spfpu_divider_rg_stage3_68_BITS_50_TO_ETC___d291 &&
	      inst_spfpu_divider_rg_stage3[1] ||
	      inst_spfpu_divider_rg_stage3[8]) ?
	       { IF_NOT_inst_spfpu_divider_rg_stage3_68_BIT_77__ETC___d330[7:0],
		 IF_IF_IF_inst_spfpu_divider_rg_stage3_68_BITS__ETC___d323[22:0] } :
	       IF_inst_spfpu_divider_rg_stage3_68_BIT_7_34_OR_ETC___d344 ;
  assign IF_NOT_inst_spfpu_divider_rg_stage3_68_BIT_77__ETC___d330 =
	     (!inst_spfpu_divider_rg_stage3[77] &&
	      IF_IF_IF_inst_spfpu_divider_rg_stage3_68_BITS__ETC___d323[23]) ?
	       lv_exponent___1__h14577 :
	       lv_exponent__h14119 ;
  assign IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d3345 =
	     condFlags32_reswget_BITS_14_TO_10__q52[2] |
	     condFlags32_reswget_BITS_14_TO_10__q52[0] ;
  assign IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d3824 =
	     condFlags32_reswget_BITS_14_TO_10__q52[1] | lv_invalid__h246335 ;
  assign IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d4234 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[4] ||
	      IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3819[7] &&
	      !IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d3824) &&
	     (!setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ||
	      !ff_input_D_OUT[4] ||
	      NOT_IF_getExp32_res_whas__815_THEN_getExp32_re_ETC___d4232) ;
  assign IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d5229 =
	     condFlags32_reswget_BITS_9_TO_5__q53[0] |
	     condFlags32_reswget_BITS_9_TO_5__q53[2] ;
  assign IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d3430 =
	     condFlags64_reswget_BITS_14_TO_10__q31[2] |
	     condFlags64_reswget_BITS_14_TO_10__q31[0] ;
  assign IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d3991 =
	     condFlags64_reswget_BITS_14_TO_10__q31[1] | lv_invalid__h249834 ;
  assign IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d5306 =
	     condFlags64_reswget_BITS_9_TO_5__q32[0] |
	     condFlags64_reswget_BITS_9_TO_5__q32[2] ;
  assign IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d4490 =
	     (ff_input_D_OUT[15:11] == 5'b11100 &&
	      ff_input_D_OUT[8:6] == 3'b001) ?
	       { 54'd0, ff_input_D_OUT[3] ? x__h253934 : x__h255839, 6'd32 } :
	       ((ff_input_D_OUT[15:11] == 5'b01000) ?
		  IF_ff_input_first__305_BIT_3_337_THEN_0xFFFFFF_ETC___d4482 :
		  { ((ff_input_D_OUT[15:9] == 7'b1110000 ||
		      ff_input_D_OUT[15:9] == 7'b1111000) &&
		     ff_input_D_OUT[8:6] == 3'b0) ?
		      x_data__h265869 :
		      ff_input_D_OUT[211:148],
		    6'd32 }) ;
  assign IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d4671 =
	     ((ff_input_D_OUT[15:11] == 5'b0 ||
	       ff_input_D_OUT[15:11] == 5'b00001 ||
	       ff_input_D_OUT[15:11] == 5'b00011) &&
	      ff_input_D_OUT[19:16] == 4'b0100) ?
	       { getMant32_res_wget[45:23],
		 getExp32_res_wget[15:8],
		 getMant32_res_wget[22:0],
		 getExp32_res_wget[7:0] } :
	       ((ff_input_D_OUT[15:11] == 5'b01011 &&
		 ff_input_D_OUT[19:16] == 4'b0100) ?
		  62'd0 :
		  { getMant32_res_wget[45:23],
		    getExp32_res_wget[15:8],
		    getMant32_res_wget[22:0],
		    getExp32_res_wget[7:0] }) ;
  assign IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d4673 =
	     ((ff_input_D_OUT[15:11] == 5'b10100 ||
	       ff_input_D_OUT[15:11] == 5'b00101) &&
	      ff_input_D_OUT[19:16] == 4'b0100) ?
	       { getMant32_res_wget[45:23], getExp32_res_wget[15:8], 31'd0 } :
	       (ff_input_first__305_BITS_15_TO_11_306_EQ_0b110_ETC___d4629 ?
		  62'd0 :
		  IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d4671) ;
  assign IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d4805 =
	     (ff_input_D_OUT[15:11] == 5'b00011 &&
	      ff_input_D_OUT[19:16] == 4'b0100) ?
	       { getMant64_res_wget[103:52],
		 getExp64_res_wget[21:11],
		 63'd0 } :
	       ((ff_input_D_OUT[15:11] == 5'b01011 &&
		 ff_input_D_OUT[19:16] == 4'b0100) ?
		  126'd0 :
		  { getMant64_res_wget[103:52],
		    getExp64_res_wget[21:11],
		    getMant64_res_wget[51:0],
		    getExp64_res_wget[10:0] }) ;
  assign IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d4806 =
	     ((ff_input_D_OUT[15:11] == 5'b0 ||
	       ff_input_D_OUT[15:11] == 5'b00001) &&
	      ff_input_D_OUT[19:16] == 4'b0100) ?
	       { getMant64_res_wget[103:52],
		 getExp64_res_wget[21:11],
		 getMant64_res_wget[51:0],
		 getExp64_res_wget[10:0] } :
	       IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d4805 ;
  assign IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d4808 =
	     ((ff_input_D_OUT[15:11] == 5'b10100 ||
	       ff_input_D_OUT[15:11] == 5'b00101) &&
	      ff_input_D_OUT[19:16] == 4'b0100) ?
	       { getMant64_res_wget[103:52],
		 getExp64_res_wget[21:11],
		 63'd0 } :
	       (ff_input_first__305_BITS_15_TO_11_306_EQ_0b110_ETC___d4629 ?
		  126'd0 :
		  IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d4806) ;
  assign IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d5222 =
	     ((ff_input_D_OUT[15:11] == 5'b0 ||
	       ff_input_D_OUT[15:11] == 5'b00001) &&
	      ff_input_D_OUT[19:16] == 4'b0100) ?
	       setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] :
	       x__h282513 ;
  assign IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d5264 =
	     (ff_input_D_OUT[15:11] == 5'b00010 &&
	      ff_input_D_OUT[19:16] == 4'b0100) ?
	       { 4'd10, x__h268958, x__h269061 } :
	       { x__h342723,
		 ff_input_D_OUT[17],
		 2'd1,
		 x__h268958,
		 x__h269061 } ;
  assign IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d5266 =
	     ((ff_input_D_OUT[15:11] == 5'b0 ||
	       ff_input_D_OUT[15:11] == 5'b00001) &&
	      ff_input_D_OUT[19:16] == 4'b0100) ?
	       { ff_input_D_OUT[8:6],
		 ff_input_D_OUT[11],
		 3'd0,
		 x__h268958,
		 x__h269061 } :
	       { ff_input_D_OUT[8:6],
		 IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d5264 } ;
  assign IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d5337 =
	     (ff_input_D_OUT[15:11] == 5'b00010 &&
	      ff_input_D_OUT[19:16] == 4'b0100) ?
	       { 4'd10, x__h271563, x__h271666 } :
	       { x__h342723,
		 ff_input_D_OUT[17],
		 2'd1,
		 x__h271563,
		 x__h271666 } ;
  assign IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d5339 =
	     ((ff_input_D_OUT[15:11] == 5'b0 ||
	       ff_input_D_OUT[15:11] == 5'b00001) &&
	      ff_input_D_OUT[19:16] == 4'b0100) ?
	       { ff_input_D_OUT[8:6],
		 ff_input_D_OUT[11],
		 3'd0,
		 x__h271563,
		 x__h271666 } :
	       { ff_input_D_OUT[8:6],
		 IF_ff_input_first__305_BITS_15_TO_11_306_EQ_0b_ETC___d5337 } ;
  assign IF_ff_input_first__305_BIT_3_337_THEN_0xFFFFFF_ETC___d4482 =
	     { ff_input_D_OUT[3] ? x_data__h265771 : x_data__h258426,
	       1'd1,
	       ff_input_D_OUT[3] ?
		 IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d4411[36:32] :
		 x_fflags__h258428 } ;
  assign IF_ff_input_first__305_BIT_3_337_THEN_42949672_ETC___d3799 =
	     { ff_input_D_OUT[3] ? x_data__h226654 : x_data__h226965,
	       1'd1,
	       ff_input_D_OUT[3] ? x_fflags__h226656 : x_fflags__h226967 } ;
  assign IF_ff_input_first__305_BIT_3_337_THEN_IF_NOT_I_ETC___d4265 =
	     { ff_input_D_OUT[3] ?
		 IF_NOT_IF_condFlags32_res_whas__339_THEN_condF_ETC___d4179 :
		 IF_NOT_IF_condFlags64_res_whas__424_THEN_condF_ETC___d4221,
	       3'd0,
	       ff_input_D_OUT[3] ?
		 _theResult_____1_snd__h248135 :
		 _theResult_____1_snd__h251704 } ;
  assign IF_ff_input_first__305_BIT_3_337_THEN_IF_NOT_I_ETC___d4266 =
	     { ff_input_D_OUT[3] ? x_data__h246408 : x_data__h249908,
	       1'd1,
	       IF_ff_input_first__305_BIT_3_337_THEN_IF_NOT_I_ETC___d4265 } ;
  assign IF_ff_input_first__305_BIT_3_337_THEN_IF_ff_in_ETC___d3517 =
	     { ff_input_D_OUT[3] ? x_data__h199529 : x_data__h202587,
	       1'd1,
	       ff_input_D_OUT[3] ? x_fflags__h199531 : x_fflags__h202589 } ;
  assign IF_ff_input_first__305_BIT_4_530_THEN_0_ELSE_1_ETC___d3880 =
	     ff_input_D_OUT[4] ? 64'd0 : 64'hFFFFFFFFFFFFFFFF ;
  assign IF_ff_input_first__305_BIT_4_530_THEN_NOT_IF_c_ETC___d3834 =
	     ff_input_D_OUT[4] ?
	       !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	       !lv_invalid__h246335 &&
	       IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3830 :
	       !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	       !lv_invalid__h246335 &&
	       IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3832 ;
  assign IF_ff_input_first__305_BIT_4_530_THEN_NOT_IF_c_ETC___d3839 =
	     ff_input_D_OUT[4] ?
	       !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	       !lv_invalid__h246335 &&
	       IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3835 :
	       !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	       !lv_invalid__h246335 &&
	       IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3837 ;
  assign IF_ff_input_first__305_BIT_4_530_THEN_NOT_IF_c_ETC___d4002 =
	     ff_input_D_OUT[4] ?
	       !condFlags64_reswget_BITS_14_TO_10__q31[1] &&
	       !lv_invalid__h249834 &&
	       _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d3998 :
	       !condFlags64_reswget_BITS_14_TO_10__q31[1] &&
	       !lv_invalid__h249834 &&
	       _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4000 ;
  assign IF_ff_input_first__305_BIT_4_530_THEN_NOT_IF_c_ETC___d4007 =
	     ff_input_D_OUT[4] ?
	       !condFlags64_reswget_BITS_14_TO_10__q31[1] &&
	       !lv_invalid__h249834 &&
	       _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4003 :
	       !condFlags64_reswget_BITS_14_TO_10__q31[1] &&
	       !lv_invalid__h249834 &&
	       _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4005 ;
  assign IF_ff_input_first__305_BIT_6_358_AND_IF_condFl_ETC___d3397 =
	     (ff_input_D_OUT[6] &&
	      condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	      condFlags32_reswget_BITS_9_TO_5__q53[3]) ?
	       lv_result__h200292 :
	       IF_NOT_ff_input_first__305_BIT_6_358_359_AND_I_ETC___d3396 ;
  assign IF_ff_input_first__305_BIT_6_358_AND_IF_condFl_ETC___d3476 =
	     (ff_input_D_OUT[6] &&
	      condFlags64_reswget_BITS_14_TO_10__q31[3] &&
	      condFlags64_reswget_BITS_9_TO_5__q32[3]) ?
	       lv_result__h203319 :
	       ((!ff_input_D_OUT[6] && lv_compare_result__h202542 == 2'b01 ||
		 ff_input_D_OUT[6] && lv_compare_result__h202542 == 2'b10) ?
		  ff_input_D_OUT[211:148] :
		  ff_input_D_OUT[147:84]) ;
  assign IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3819 =
	     getExp32_res_wget[23:16] - 8'd127 ;
  assign IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3830 =
	     (IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3819 ^
	      8'h80) <
	     8'hC0 ;
  assign IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3832 =
	     (IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3819 ^
	      8'h80) <
	     8'hBF ;
  assign IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3835 =
	     (IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3819 ^
	      8'h80) <
	     8'hA0 ;
  assign IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3837 =
	     (IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3819 ^
	      8'h80) <
	     8'h9F ;
  assign IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d4149 =
	     getExp32_res_wget[23:16] == 8'd126 &&
	     (ff_input_D_OUT[8:6] == 3'b100 ||
	      ff_input_D_OUT[8:6] == 3'b0 &&
	      getMant32_res_wget[68:46] != 23'd0) ||
	     IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3819[7] &&
	     ff_input_D_OUT[8:6] == 3'b010 ;
  assign IF_getExp64_res_whas__310_THEN_getExp64_res_wg_ETC___d4325 =
	     getExp64_res_wget[32:22] <= 11'h368 ;
  assign IF_getExp64_res_whas__310_THEN_getExp64_res_wg_ETC___d4327 =
	     getExp64_res_wget[32:22] <= 11'h380 ;
  assign IF_getMant64_res_whas__015_THEN_getMant64_res__ETC___d4204 =
	     getMant64_res_wget[155:104] <= 52'd1048576 ;
  assign IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2103 =
	     lv_product_mantissa__h107911 >>
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1865 ;
  assign IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2324 =
	     IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2103[0] |
	     ((_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1865 ^
	       13'h1000) >
	      ({ 6'd0, lsb_zeros__h107915 } ^ 13'h1000) ||
	      lv_product_mantissa__h107911[0]) ;
  assign IF_inst_dpfm_add_sub_ff_stage2_read__367_BITS__ETC___d2783 =
	     (inst_dpfm_add_sub_ff_stage2[9:7] == 3'b010 &&
	      sign2__h117978 | op_xor_sign3__h117991 ||
	      inst_dpfm_add_sub_ff_stage2[9:7] != 3'b010 &&
	      sign2__h117978 & op_xor_sign3__h117991) ?
	       2'b11 :
	       (sign2__h117978 ? lv_result_is_zero___1__h167573 : 2'b01) ;
  assign IF_inst_dpfm_add_sub_ff_stage2_read__367_BIT_5_ETC___d2384 =
	     exponent2__h118002 <= exponent3__h117993 ;
  assign IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3172 =
	     (resultant_exponent__h193869 - 13'd1023 ^ 13'h1000) <= 13'd5119 ;
  assign IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3189 =
	     inst_dpfm_add_sub_ff_stage5[183] ?
	       resultant_mantissa___1__h194121 :
	       _theResult___snd_fst__h194366 ;
  assign IF_inst_dpfpu_divider_int_div_wr_final_out_wha_ETC___d1569 =
	     x_wget__h66738[55:0] >>
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_439_BITS__ETC___d1444 ;
  assign IF_inst_dpfpu_divider_rg_stage3_670_BIT_10_677_ETC___d1757 =
	     inst_dpfpu_divider_rg_stage3[10] ?
	       { 64'h7FF8000000000000, _theResult_____1_snd__h87505 } :
	       { _theResult_____1_fst__h87515,
		 _theResult_____1_snd__h87516 } ;
  assign IF_inst_dpfpu_divider_rg_stage3_670_BIT_7_736__ETC___d1746 =
	     (inst_dpfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_dpfpu_divider_rg_stage3_670_BIT_13_ETC___d1732[10:0] ==
	      11'd2047) ?
	       ((inst_dpfpu_divider_rg_stage3[4:2] == 3'b001 ||
		 inst_dpfpu_divider_rg_stage3[4:2] == 3'b010 &&
		 !inst_dpfpu_divider_rg_stage3[12] ||
		 inst_dpfpu_divider_rg_stage3[4:2] == 3'b011 &&
		 inst_dpfpu_divider_rg_stage3[12]) ?
		  63'h7FEFFFFFFFFFFFFF :
		  63'h7FF0000000000000) :
	       { IF_NOT_inst_dpfpu_divider_rg_stage3_670_BIT_13_ETC___d1732[10:0],
		 IF_IF_IF_inst_dpfpu_divider_rg_stage3_670_BITS_ETC___d1725[51:0] } ;
  assign IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d585 =
	     lv_product_mantissa__h25304 >>
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d463 ;
  assign IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d690 =
	     IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d585[0] |
	     ((_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d463 ^
	       10'h200) >
	      ({ 4'd0, lsb_zeros__h25308 } ^ 10'h200) ||
	      lv_product_mantissa__h25304[0]) ;
  assign IF_inst_spfm_add_sub_ff_stage2_read__33_BITS_9_ETC___d975 =
	     (inst_spfm_add_sub_ff_stage2[9:7] == 3'b010 &&
	      sign2__h30209 | op_xor_sign3__h30222 ||
	      inst_spfm_add_sub_ff_stage2[9:7] != 3'b010 &&
	      sign2__h30209 & op_xor_sign3__h30222) ?
	       2'b11 :
	       (sign2__h30209 ? lv_result_is_zero___1__h53269 : 2'b01) ;
  assign IF_inst_spfm_add_sub_ff_stage2_read__33_BIT_5__ETC___d750 =
	     exponent2__h30233 <= exponent3__h30224 ;
  assign IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1190 =
	     (resultant_exponent__h65471 - 10'd127 ^ 10'h200) <= 10'd639 ;
  assign IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1207 =
	     inst_spfm_add_sub_ff_stage5[95] ?
	       resultant_mantissa___1__h65723 :
	       _theResult___snd_fst__h65968 ;
  assign IF_inst_spfpu_divider_int_div_wr_final_out_wha_ETC___d196 =
	     x_wget__h658[26:0] >>
	     _1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d129 ;
  assign IF_inst_spfpu_divider_rg_stage3_68_BIT_10_75_T_ETC___d355 =
	     inst_spfpu_divider_rg_stage3[10] ?
	       { 32'h7FC00000, _theResult_____1_snd__h14231 } :
	       { _theResult_____1_fst__h14241,
		 _theResult_____1_snd__h14242 } ;
  assign IF_inst_spfpu_divider_rg_stage3_68_BIT_7_34_OR_ETC___d344 =
	     (inst_spfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_spfpu_divider_rg_stage3_68_BIT_77__ETC___d330[7:0] ==
	      8'd255) ?
	       ((inst_spfpu_divider_rg_stage3[4:2] == 3'b001 ||
		 inst_spfpu_divider_rg_stage3[4:2] == 3'b010 &&
		 !inst_spfpu_divider_rg_stage3[12] ||
		 inst_spfpu_divider_rg_stage3[4:2] == 3'b011 &&
		 inst_spfpu_divider_rg_stage3[12]) ?
		  31'h7F7FFFFF :
		  31'h7F800000) :
	       { IF_NOT_inst_spfpu_divider_rg_stage3_68_BIT_77__ETC___d330[7:0],
		 IF_IF_IF_inst_spfpu_divider_rg_stage3_68_BITS__ETC___d323[22:0] } ;
  assign INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2085 =
	     shift_neg__h107918 < { 6'd0, x__h107979 } ;
  assign INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d567 =
	     shift_neg__h25311 < { 4'd0, x__h25372 } ;
  assign INV_1_MINUS_inst_dpfpu_divider_rg_stage2_439_B_ETC___d1564 =
	     shift_neg__h73033 < { 7'd0, msb_zeros__h72873 } ;
  assign INV_1_MINUS_inst_spfpu_divider_rg_stage2_24_BI_ETC___d191 =
	     shift_neg__h6980 < { 5'd0, msb_zeros__h6820 } ;
  assign NOT_0b0_CONCAT_getExp64_res_wget__983_BITS_32__ETC___d4210 =
	     x__h250010[10:0] != 11'd31 ||
	     getMant64_res_wget[155:104] != 52'd0 &&
	     (!IF_getMant64_res_whas__015_THEN_getMant64_res__ETC___d4204 ||
	      ff_input_D_OUT[8:6] == 3'b100 &&
	      getMant64_res_wget[155:104] == 52'd1048576) ;
  assign NOT_0b0_CONCAT_getExp64_res_wget__983_BITS_32__ETC___d4246 =
	     (x__h250010[10:0] != 11'd2047 ||
	      ff_input_D_OUT[8:6] != 3'b100 &&
	      (ff_input_D_OUT[8:6] != 3'b0 ||
	       getMant64_res_wget[155:104] == 52'd0)) &&
	     (!x__h250010[10] || ff_input_D_OUT[8:6] != 3'b010) ;
  assign NOT_IF_condFlags32_res_whas__339_THEN_condFlag_ETC___d3841 =
	     !condFlags32_reswget_BITS_14_TO_10__q52[4] &&
	     (!IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3819[7] ||
	      IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d3824) &&
	     (ff_input_D_OUT[5] ?
		IF_ff_input_first__305_BIT_4_530_THEN_NOT_IF_c_ETC___d3834 :
		IF_ff_input_first__305_BIT_4_530_THEN_NOT_IF_c_ETC___d3839) ;
  assign NOT_IF_condFlags64_res_whas__424_THEN_condFlag_ETC___d4009 =
	     !condFlags64_reswget_BITS_14_TO_10__q31[4] &&
	     (!x__h250010[10] ||
	      IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d3991) &&
	     (ff_input_D_OUT[5] ?
		IF_ff_input_first__305_BIT_4_530_THEN_NOT_IF_c_ETC___d4002 :
		IF_ff_input_first__305_BIT_4_530_THEN_NOT_IF_c_ETC___d4007) ;
  assign NOT_IF_condFlags64_res_whas__424_THEN_condFlag_ETC___d4256 =
	     !condFlags64_reswget_BITS_14_TO_10__q31[1] &&
	     !lv_invalid__h249834 &&
	     !_0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4005 &&
	     ff_input_D_OUT[211] &&
	     x__h250010[10:0] == 11'd31 &&
	     getMant64_res_wget[155:104] != 52'd0 &&
	     IF_getMant64_res_whas__015_THEN_getMant64_res__ETC___d4204 &&
	     (ff_input_D_OUT[8:6] != 3'b100 ||
	      getMant64_res_wget[155:104] != 52'd1048576) ;
  assign NOT_IF_getExp32_res_whas__815_THEN_getExp32_re_ETC___d4232 =
	     (getExp32_res_wget[23:16] != 8'd126 ||
	      ff_input_D_OUT[8:6] != 3'b100 &&
	      (ff_input_D_OUT[8:6] != 3'b0 ||
	       getMant32_res_wget[68:46] == 23'd0)) &&
	     (!IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3819[7] ||
	      ff_input_D_OUT[8:6] != 3'b010) ;
  assign NOT_ff_input_first__305_BITS_15_TO_11_306_EQ_0_ETC___d5190 =
	     (ff_input_D_OUT[15:11] == 5'b0 ||
	      ff_input_D_OUT[15:11] == 5'b00001) &&
	     ff_input_D_OUT[19:16] == 4'b0100 ||
	     ff_input_D_OUT[15:11] == 5'b00011 &&
	     ff_input_D_OUT[19:16] == 4'b0100 ||
	     ff_input_D_OUT[15:11] == 5'b01011 &&
	     ff_input_D_OUT[19:16] == 4'b0100 ||
	     ff_input_D_OUT[15:11] == 5'b00010 &&
	     ff_input_D_OUT[19:16] == 4'b0100 ||
	     ff_input_D_OUT[19:16] == 4'b0 ||
	     ff_input_D_OUT[19:16] == 4'b0001 ||
	     ff_input_D_OUT[19:16] == 4'b0010 ||
	     ff_input_D_OUT[19:16] == 4'b0011 ;
  assign NOT_ff_input_first__305_BITS_15_TO_11_306_EQ_0_ETC___d5201 =
	     (ff_input_D_OUT[15:11] != 5'b11010 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     (ff_input_D_OUT[15:11] != 5'b00100 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     (ff_input_D_OUT[15:11] != 5'b11000 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     (ff_input_D_OUT[15:11] != 5'b11100 ||
	      ff_input_D_OUT[8:6] != 3'b001 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     (ff_input_D_OUT[15:11] != 5'b01000 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     (ff_input_D_OUT[15:9] != 7'b1110000 &&
	      ff_input_D_OUT[15:9] != 7'b1111000 ||
	      ff_input_D_OUT[8:6] != 3'b0 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     (ff_input_D_OUT[15:9] != 7'b1110001 &&
	      ff_input_D_OUT[15:9] != 7'b1111001 ||
	      ff_input_D_OUT[8:6] != 3'b0 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     ((ff_input_D_OUT[15:11] == 5'b0 ||
	       ff_input_D_OUT[15:11] == 5'b00001) &&
	      ff_input_D_OUT[19:16] == 4'b0100 &&
	      ff_input_D_OUT[3] ||
	      (ff_input_D_OUT[15:11] != 5'b0 &&
	       ff_input_D_OUT[15:11] != 5'b00001 ||
	       ff_input_D_OUT[19:16] != 4'b0100) &&
	      (ff_input_D_OUT[15:11] != 5'b00011 ||
	       ff_input_D_OUT[19:16] != 4'b0100) &&
	      (ff_input_D_OUT[15:11] != 5'b01011 ||
	       ff_input_D_OUT[19:16] != 4'b0100) &&
	      ff_input_first__305_BITS_15_TO_11_306_EQ_0b10__ETC___d4565) ;
  assign NOT_ff_input_first__305_BITS_15_TO_11_306_EQ_0_ETC___d5280 =
	     (ff_input_D_OUT[15:11] != 5'b11010 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     (ff_input_D_OUT[15:11] != 5'b00100 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     (ff_input_D_OUT[15:11] != 5'b11000 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     (ff_input_D_OUT[15:11] != 5'b11100 ||
	      ff_input_D_OUT[8:6] != 3'b001 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     (ff_input_D_OUT[15:11] != 5'b01000 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     (ff_input_D_OUT[15:9] != 7'b1110000 &&
	      ff_input_D_OUT[15:9] != 7'b1111000 ||
	      ff_input_D_OUT[8:6] != 3'b0 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     (ff_input_D_OUT[15:9] != 7'b1110001 &&
	      ff_input_D_OUT[15:9] != 7'b1111001 ||
	      ff_input_D_OUT[8:6] != 3'b0 ||
	      ff_input_D_OUT[19:16] != 4'b0100) &&
	     ((ff_input_D_OUT[15:11] == 5'b0 ||
	       ff_input_D_OUT[15:11] == 5'b00001) &&
	      ff_input_D_OUT[19:16] == 4'b0100 &&
	      !ff_input_D_OUT[3] ||
	      (ff_input_D_OUT[15:11] != 5'b0 &&
	       ff_input_D_OUT[15:11] != 5'b00001 ||
	       ff_input_D_OUT[19:16] != 4'b0100) &&
	      (ff_input_D_OUT[15:11] != 5'b00011 ||
	       ff_input_D_OUT[19:16] != 4'b0100) &&
	      (ff_input_D_OUT[15:11] != 5'b01011 ||
	       ff_input_D_OUT[19:16] != 4'b0100) &&
	      ff_input_first__305_BITS_15_TO_11_306_EQ_0b10__ETC___d4746) ;
  assign NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5344 =
	     ff_input_D_OUT[15:11] == 5'b00011 &&
	     ff_input_D_OUT[19:16] == 4'b0100 &&
	     ff_input_D_OUT[3] ;
  assign NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5459 =
	     ff_input_D_OUT[15:11] == 5'b00011 &&
	     ff_input_D_OUT[19:16] == 4'b0100 &&
	     !ff_input_D_OUT[3] ;
  assign NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5720 =
	     ff_input_D_OUT[15:11] == 5'b01011 &&
	     ff_input_D_OUT[19:16] == 4'b0100 &&
	     ff_input_D_OUT[3] &&
	     (IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d3345 ||
	      ff_input_D_OUT[179] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[3]) ;
  assign NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5745 =
	     ff_input_D_OUT[15:11] == 5'b01011 &&
	     ff_input_D_OUT[19:16] == 4'b0100 &&
	     ff_input_D_OUT[3] &&
	     !IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d3345 &&
	     !ff_input_D_OUT[179] &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      !condFlags32_reswget_BITS_14_TO_10__q52[3]) ;
  assign NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5747 =
	     ff_input_D_OUT[15:11] == 5'b01011 &&
	     ff_input_D_OUT[19:16] == 4'b0100 &&
	     ff_input_D_OUT[3] ;
  assign NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5839 =
	     ff_input_D_OUT[15:11] == 5'b01011 &&
	     ff_input_D_OUT[19:16] == 4'b0100 &&
	     !ff_input_D_OUT[3] &&
	     (IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d3430 ||
	      ff_input_D_OUT[211] ||
	      condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	      condFlags64_reswget_BITS_14_TO_10__q31[3]) ;
  assign NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5864 =
	     ff_input_D_OUT[15:11] == 5'b01011 &&
	     ff_input_D_OUT[19:16] == 4'b0100 &&
	     !ff_input_D_OUT[3] &&
	     !IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d3430 &&
	     !ff_input_D_OUT[211] &&
	     !condFlags64_reswget_BITS_14_TO_10__q31[1] &&
	     (condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	      !condFlags64_reswget_BITS_14_TO_10__q31[3]) ;
  assign NOT_ff_input_first__305_BITS_15_TO_9_318_EQ_0b_ETC___d5866 =
	     ff_input_D_OUT[15:11] == 5'b01011 &&
	     ff_input_D_OUT[19:16] == 4'b0100 &&
	     !ff_input_D_OUT[3] ;
  assign NOT_ff_input_first__305_BIT_4_530_544_AND_ff_i_ETC___d3709 =
	     { sign__h232372,
	       IF_IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0_ETC___d3702[52] ?
		 local_expo___1__h243059 :
		 expo__h226917,
	       IF_IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0_ETC___d3702[51:0] } ;
  assign NOT_ff_input_first__305_BIT_5_519_523_AND_NOT__ETC___d3938 =
	     !ff_input_D_OUT[5] && !ff_input_D_OUT[4] &&
	     getExp32_res_wget[23:16] == 8'd157 &&
	     final_result__h246355[30:0] == 31'h7FFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ;
  assign NOT_ff_input_first__305_BIT_5_519_523_AND_NOT__ETC___d4103 =
	     !ff_input_D_OUT[5] && !ff_input_D_OUT[4] &&
	     x__h250010[10:0] == 11'd30 &&
	     final_result__h249855[30:0] == 31'h7FFFFFFF &&
	     !ff_input_D_OUT[211] ;
  assign NOT_ff_input_first__305_BIT_5_519_523_AND_ff_i_ETC___d3945 =
	     !ff_input_D_OUT[5] && ff_input_D_OUT[4] &&
	     getExp32_res_wget[23:16] == 8'd158 &&
	     final_result__h246355[31:0] == 32'hFFFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ;
  assign NOT_ff_input_first__305_BIT_5_519_523_AND_ff_i_ETC___d4109 =
	     !ff_input_D_OUT[5] && ff_input_D_OUT[4] &&
	     x__h250010[10:0] == 11'd31 &&
	     final_result__h249855[31:0] == 32'hFFFFFFFF &&
	     !ff_input_D_OUT[211] ;
  assign NOT_inst_dpfpu_divider_rg_stage2_439_BITS_21_T_ETC___d1644 =
	     !inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1443 &&
	     (!_1_MINUS_inst_dpfpu_divider_rg_stage2_439_BITS__ETC___d1445 ||
	      !x_wget__h66738[55] &&
	      INV_1_MINUS_inst_dpfpu_divider_rg_stage2_439_B_ETC___d1564) ;
  assign NOT_inst_dpfpu_divider_rg_stage3_670_BITS_82_T_ETC___d1693 =
	     x__h87550 | inst_dpfpu_divider_rg_stage3[84] ;
  assign NOT_inst_spfpu_divider_rg_stage2_24_BITS_18_TO_ETC___d242 =
	     !inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d128 &&
	     (!_1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d130 ||
	      !x_wget__h658[26] &&
	      INV_1_MINUS_inst_spfpu_divider_rg_stage2_24_BI_ETC___d191) ;
  assign NOT_inst_spfpu_divider_rg_stage3_68_BITS_50_TO_ETC___d291 =
	     x__h14276 | inst_spfpu_divider_rg_stage3[52] ;
  assign _0_CONCAT_IF_IF_IF_inst_dpfm_add_sub_ff_stage2__ETC___d2736 =
	     ({ 5'd0, x__h153088 } < exponent_difference__h118016 ||
	      IF_IF_inst_dpfm_add_sub_ff_stage2_read__367_BI_ETC___d2408[0]) &&
	     mantissa_to_shift__h118015 != 160'd0 ;
  assign _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d928 =
	     ({ 3'd0, x__h46527 } < exponent_difference__h30247 ||
	      IF_IF_inst_spfm_add_sub_ff_stage2_read__33_BIT_ETC___d774[0]) &&
	     mantissa_to_shift__h30246 != 73'd0 ;
  assign _0_CONCAT_INV_IF_condFlags32_res_whas__339_THEN_ETC___d5212 =
	     { 24'd0, x__h268376 } * { 24'd0, x__h268462 } ;
  assign _0_CONCAT_INV_IF_condFlags64_res_whas__424_THEN_ETC___d5291 =
	     { 53'd0, x__h270986 } * { 53'd0, x__h271072 } ;
  assign _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__150_ETC___d3164 =
	     { 5'd0, inst_dpfm_add_sub_ff_stage5[7:0] } - 13'd1 ;
  assign _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__150_ETC___d3166 =
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__150_ETC___d3164 <=
	     resultant_exponent_sub__h193862 ;
  assign _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__168_ETC___d1182 =
	     { 3'd0, inst_spfm_add_sub_ff_stage5[6:0] } - 10'd1 ;
  assign _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__168_ETC___d1184 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__168_ETC___d1182 <=
	     resultant_exponent_sub__h65464 ;
  assign _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d3998 =
	     (x__h250010[10:0] ^ 11'h400) < 11'h440 ;
  assign _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4000 =
	     (x__h250010[10:0] ^ 11'h400) < 11'h43F ;
  assign _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4003 =
	     (x__h250010[10:0] ^ 11'h400) < 11'h420 ;
  assign _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4005 =
	     (x__h250010[10:0] ^ 11'h400) < 11'h41F ;
  assign _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4185 =
	     x__h250010[10:0] == 11'd2047 &&
	     (ff_input_D_OUT[8:6] == 3'b100 ||
	      ff_input_D_OUT[8:6] == 3'b0 &&
	      getMant64_res_wget[155:104] != 52'd0) ||
	     x__h250010[10] && ff_input_D_OUT[8:6] == 3'b010 ;
  assign _1_CONCAT_getMant32_res_wget__849_BITS_68_TO_46_ETC___d3855 =
	     final_man__h246347 <<
	     IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3819 ;
  assign _1_CONCAT_getMant32_res_wget__849_BITS_68_TO_46_ETC__q48 =
	     _1_CONCAT_getMant32_res_wget__849_BITS_68_TO_46_ETC___d3855[54:23] ;
  assign _1_CONCAT_getMant64_res_wget__016_BITS_155_TO_1_ETC___d4022 =
	     final_man__h249847 << x__h250010[10:0] ;
  assign _1_CONCAT_getMant64_res_wget__016_BITS_155_TO_1_ETC__q26 =
	     _1_CONCAT_getMant64_res_wget__016_BITS_155_TO_1_ETC___d4022[83:52] ;
  assign _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1865 =
	     13'd1 - lv_product_exponent__h107909 ;
  assign _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1866 =
	     (_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1865 ^
	      13'h1000) <=
	     13'd4096 ;
  assign _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d463 =
	     10'd1 - lv_product_exponent__h25302 ;
  assign _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d464 =
	     (_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d463 ^
	      10'h200) <=
	     10'd512 ;
  assign _1_MINUS_inst_dpfpu_divider_rg_stage2_439_BITS__ETC___d1444 =
	     13'd1 - inst_dpfpu_divider_rg_stage2[21:9] ;
  assign _1_MINUS_inst_dpfpu_divider_rg_stage2_439_BITS__ETC___d1445 =
	     (_1_MINUS_inst_dpfpu_divider_rg_stage2_439_BITS__ETC___d1444 ^
	      13'h1000) <=
	     13'd4096 ;
  assign _1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d129 =
	     10'd1 - inst_spfpu_divider_rg_stage2[18:9] ;
  assign _1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d130 =
	     (_1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d129 ^
	      10'h200) <=
	     10'd512 ;
  assign _denominator__h5354 = { inst_spfpu_divider_rg_stage1[32:9], 3'd0 } ;
  assign _denominator__h71407 = { inst_dpfpu_divider_rg_stage1[61:9], 3'd0 } ;
  assign _dividend___1__h3560 = _dividend__h3390 - 27'd1 ;
  assign _dividend___1__h69619 = _dividend__h69449 - 56'd1 ;
  assign _dividend__h2752 =
	     { IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d63[25:0],
	       !IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q11[28] } ;
  assign _dividend__h2888 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d31[25:0],
	       !inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[55] } ;
  assign _dividend__h3389 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       _dividend__h2888 :
	       _dividend__h2752 ;
  assign _dividend__h3390 = _dividend__h3389 - ~_dividend__h3389 ;
  assign _dividend__h68811 =
	     { IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1378[54:0],
	       !IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q17[57] } ;
  assign _dividend__h68947 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1346[54:0],
	       !inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[113] } ;
  assign _dividend__h69448 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       _dividend__h68947 :
	       _dividend__h68811 ;
  assign _dividend__h69449 = _dividend__h69448 - ~_dividend__h69448 ;
  assign _numerator__h5355 = { inst_spfpu_divider_rg_stage1[56:33], 3'd0 } ;
  assign _numerator__h71408 = { inst_dpfpu_divider_rg_stage1[114:62], 3'd0 } ;
  assign _remainder___1__h3559 =
	     _remainder__h3387 +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[82:56],
	       1'b0 } ;
  assign _remainder___1__h69618 =
	     _remainder__h69446 +
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[169:114],
	       1'b0 } ;
  assign _remainder__h3387 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d31[54:26] :
	       IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d63[54:26] ;
  assign _remainder__h69446 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1346[112:55] :
	       IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1378[112:55] ;
  assign _theResult_____1__h118026 = mantissa2__h118022 > mantissa3__h118023 ;
  assign _theResult_____1__h30257 = mantissa2__h30253 > mantissa3__h30254 ;
  assign _theResult_____1_fst__h107969 =
	     (msb_zeros__h107913 == 7'b0000001) ?
	       lv_product_exponent__h107909 :
	       _theResult_____1_fst__h107972 ;
  assign _theResult_____1_fst__h107972 =
	     INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2085 ?
	       lv_product_exponent_sub_shift__h107920 :
	       lv_product_exponent_sub_zerosMSB__h107922 ;
  assign _theResult_____1_fst__h14241 =
	     { inst_spfpu_divider_rg_stage3[12],
	       inst_spfpu_divider_rg_stage3[9] ?
		 31'h7F800000 :
		 (inst_spfpu_divider_rg_stage3[5] ?
		    31'd0 :
		    IF_NOT_inst_spfpu_divider_rg_stage3_68_BITS_50_ETC___d345) } ;
  assign _theResult_____1_fst__h16789 =
	     lv_extended_mantissa___1__h16788[26] ?
	       result_exponent___1__h16811 :
	       inst_spfpu_sqrt_rg_inter_stage[67:59] ;
  assign _theResult_____1_fst__h194733 =
	     !inst_dpfm_add_sub_ff_stage5[17] &&
	     IF_IF_inst_dpfm_add_sub_ff_stage5_read__150_BI_ETC___d3289 ;
  assign _theResult_____1_fst__h248067 =
	     ff_input_D_OUT[4] &&
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ||
	     lv_invalid___2__h246965 ;
  assign _theResult_____1_fst__h251597 =
	     ff_input_D_OUT[4] && ff_input_D_OUT[211] ||
	     lv_invalid___2__h250487 ;
  assign _theResult_____1_fst__h25362 =
	     (msb_zeros__h25306 == 6'b000001) ?
	       lv_product_exponent__h25302 :
	       _theResult_____1_fst__h25365 ;
  assign _theResult_____1_fst__h25365 =
	     INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d567 ?
	       lv_product_exponent_sub_shift__h25313 :
	       lv_product_exponent_sub_zerosMSB__h25315 ;
  assign _theResult_____1_fst__h66335 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     IF_IF_inst_spfm_add_sub_ff_stage5_read__168_BI_ETC___d1307 ;
  assign _theResult_____1_fst__h87515 =
	     { inst_dpfpu_divider_rg_stage3[12],
	       inst_dpfpu_divider_rg_stage3[9] ?
		 63'h7FF0000000000000 :
		 (inst_dpfpu_divider_rg_stage3[5] ?
		    63'd0 :
		    IF_NOT_inst_dpfpu_divider_rg_stage3_670_BITS_8_ETC___d1747) } ;
  assign _theResult_____1_fst__h90062 =
	     lv_extended_mantissa___1__h90061[55] ?
	       result_exponent___1__h90084 :
	       inst_dpfpu_sqrt_rg_inter_stage[128:117] ;
  assign _theResult_____1_snd__h107970 =
	     (msb_zeros__h107913 == 7'b0000001) ?
	       lv_product_mantissa__h107911 :
	       _theResult_____1_snd__h107973 ;
  assign _theResult_____1_snd__h107973 =
	     INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2085 ?
	       lv_product_mantissa_shiftL_expo__h107919 :
	       lv_product_mantissa_shiftL_zerosMSB__h107921 ;
  assign _theResult_____1_snd__h14220 =
	     inst_spfpu_divider_rg_stage3[9] ? 5'd8 : 5'd0 ;
  assign _theResult_____1_snd__h14231 =
	     (~inst_spfpu_divider_rg_stage3[0]) ? 5'd16 : 5'd0 ;
  assign _theResult_____1_snd__h14242 =
	     inst_spfpu_divider_rg_stage3[9] ?
	       5'd8 :
	       _theResult_____1_snd__h14259 ;
  assign _theResult_____1_snd__h14259 =
	     inst_spfpu_divider_rg_stage3[5] ?
	       5'd0 :
	       _theResult_____1_snd__h14369 ;
  assign _theResult_____1_snd__h14369 =
	     (NOT_inst_spfpu_divider_rg_stage3_68_BITS_50_TO_ETC___d291 &&
	      inst_spfpu_divider_rg_stage3[1] ||
	      inst_spfpu_divider_rg_stage3[8]) ?
	       5'd3 :
	       _theResult_____1_snd__h14609 ;
  assign _theResult_____1_snd__h14609 =
	     (inst_spfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_spfpu_divider_rg_stage3_68_BIT_77__ETC___d330[7:0] ==
	      8'd255) ?
	       5'd5 :
	       _theResult_____1_snd__h14627 ;
  assign _theResult_____1_snd__h14627 =
	     NOT_inst_spfpu_divider_rg_stage3_68_BITS_50_TO_ETC___d291 ?
	       5'd1 :
	       5'd0 ;
  assign _theResult_____1_snd__h248068 =
	     (ff_input_D_OUT[4] &&
	      setCanonicalNaN_reswget_BITS_95_TO_64__q41[31]) ?
	       64'd0 :
	       final_result___3__h246966 ;
  assign _theResult_____1_snd__h248135 =
	     !IF_NOT_IF_condFlags32_res_whas__339_THEN_condF_ETC___d4179 &&
	     IF_NOT_IF_condFlags32_res_whas__339_THEN_condF_ETC___d4237 ;
  assign _theResult_____1_snd__h251598 =
	     (ff_input_D_OUT[4] && ff_input_D_OUT[211]) ?
	       64'd0 :
	       final_result___3__h250488 ;
  assign _theResult_____1_snd__h251704 =
	     !IF_NOT_IF_condFlags64_res_whas__424_THEN_condF_ETC___d4221 &&
	     IF_NOT_IF_condFlags64_res_whas__424_THEN_condF_ETC___d4262 ;
  assign _theResult_____1_snd__h25363 =
	     (msb_zeros__h25306 == 6'b000001) ?
	       lv_product_mantissa__h25304 :
	       _theResult_____1_snd__h25366 ;
  assign _theResult_____1_snd__h25366 =
	     INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d567 ?
	       lv_product_mantissa_shiftL_expo__h25312 :
	       lv_product_mantissa_shiftL_zerosMSB__h25314 ;
  assign _theResult_____1_snd__h87494 =
	     inst_dpfpu_divider_rg_stage3[9] ? 5'd8 : 5'd0 ;
  assign _theResult_____1_snd__h87505 =
	     (~inst_dpfpu_divider_rg_stage3[0]) ? 5'd16 : 5'd0 ;
  assign _theResult_____1_snd__h87516 =
	     inst_dpfpu_divider_rg_stage3[9] ?
	       5'd8 :
	       _theResult_____1_snd__h87533 ;
  assign _theResult_____1_snd__h87533 =
	     inst_dpfpu_divider_rg_stage3[5] ?
	       5'd0 :
	       _theResult_____1_snd__h87643 ;
  assign _theResult_____1_snd__h87643 =
	     (NOT_inst_dpfpu_divider_rg_stage3_670_BITS_82_T_ETC___d1693 &&
	      inst_dpfpu_divider_rg_stage3[1] ||
	      inst_dpfpu_divider_rg_stage3[8]) ?
	       5'd3 :
	       _theResult_____1_snd__h87883 ;
  assign _theResult_____1_snd__h87883 =
	     (inst_dpfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_dpfpu_divider_rg_stage3_670_BIT_13_ETC___d1732[10:0] ==
	      11'd2047) ?
	       5'd5 :
	       _theResult_____1_snd__h87901 ;
  assign _theResult_____1_snd__h87901 =
	     NOT_inst_dpfpu_divider_rg_stage3_670_BITS_82_T_ETC___d1693 ?
	       5'd1 :
	       5'd0 ;
  assign _theResult_____1_snd_snd_fst__h194761 =
	     !inst_dpfm_add_sub_ff_stage5[17] &&
	     _theResult_____3_snd_fst__h194008 ;
  assign _theResult_____1_snd_snd_fst__h66363 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     _theResult_____3_snd_fst__h65610 ;
  assign _theResult_____1_snd_snd_snd__h194762 =
	     !inst_dpfm_add_sub_ff_stage5[17] &&
	     _theResult_____3_snd_snd_fst__h194010 ;
  assign _theResult_____1_snd_snd_snd__h66364 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     _theResult_____3_snd_snd_fst__h65612 ;
  assign _theResult_____2__h265562 =
	     IF_IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0_ETC___d4386[23] ?
	       expo___1__h265688 :
	       expo__h264519 ;
  assign _theResult_____2_fst__h247742 =
	     NOT_ff_input_first__305_BIT_5_519_523_AND_NOT__ETC___d3938 ||
	     NOT_ff_input_first__305_BIT_5_519_523_AND_ff_i_ETC___d3945 ||
	     ff_input_first__305_BIT_5_519_AND_NOT_ff_input_ETC___d3952 ||
	     ff_input_first__305_BIT_5_519_AND_ff_input_fir_ETC___d3958 ;
  assign _theResult_____2_fst__h251274 =
	     NOT_ff_input_first__305_BIT_5_519_523_AND_NOT__ETC___d4103 ||
	     NOT_ff_input_first__305_BIT_5_519_523_AND_ff_i_ETC___d4109 ||
	     ff_input_first__305_BIT_5_519_AND_NOT_ff_input_ETC___d4115 ||
	     ff_input_first__305_BIT_5_519_AND_ff_input_fir_ETC___d4120 ;
  assign _theResult_____2_snd__h247743 =
	     NOT_ff_input_first__305_BIT_5_519_523_AND_NOT__ETC___d3938 ?
	       64'h000000007FFFFFFF :
	       _theResult_____2_snd__h247850 ;
  assign _theResult_____2_snd__h247850 =
	     NOT_ff_input_first__305_BIT_5_519_523_AND_ff_i_ETC___d3945 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h247902 ;
  assign _theResult_____2_snd__h247902 =
	     ff_input_first__305_BIT_5_519_AND_NOT_ff_input_ETC___d3952 ?
	       64'h7FFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h247953 ;
  assign _theResult_____2_snd__h247953 =
	     ff_input_first__305_BIT_5_519_AND_ff_input_fir_ETC___d3958 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h247956 ;
  assign _theResult_____2_snd__h247956 =
	     (!ff_input_D_OUT[5] && final_result___2__h247955[31]) ?
	       final_result___1__h247994 :
	       final_result___2__h247955 ;
  assign _theResult_____2_snd__h251275 =
	     NOT_ff_input_first__305_BIT_5_519_523_AND_NOT__ETC___d4103 ?
	       64'h000000007FFFFFFF :
	       _theResult_____2_snd__h251380 ;
  assign _theResult_____2_snd__h251380 =
	     NOT_ff_input_first__305_BIT_5_519_523_AND_ff_i_ETC___d4109 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h251432 ;
  assign _theResult_____2_snd__h251432 =
	     ff_input_first__305_BIT_5_519_AND_NOT_ff_input_ETC___d4115 ?
	       64'h7FFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h251483 ;
  assign _theResult_____2_snd__h251483 =
	     ff_input_first__305_BIT_5_519_AND_ff_input_fir_ETC___d4120 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h251486 ;
  assign _theResult_____2_snd__h251486 =
	     (!ff_input_D_OUT[5] && final_result___2__h251485[31]) ?
	       final_result___1__h251524 :
	       final_result___2__h251485 ;
  assign _theResult_____3__h304727 =
	     { 27'd0,
	       IF_IF_IF_condFlags32_res_whas__339_THEN_condFl_ETC___d5812[51:50] } -
	     29'd1 ;
  assign _theResult_____3__h315327 =
	     { 56'd0,
	       IF_IF_IF_condFlags64_res_whas__424_THEN_condFl_ETC___d5988[109:108] } -
	     58'd1 ;
  assign _theResult_____3_fst__h194006 =
	     !inst_dpfm_add_sub_ff_stage5[15] && _theResult_____6__h193886 ;
  assign _theResult_____3_fst__h194606 =
	     ex_overflow__h193877 || inst_dpfm_add_sub_ff_stage5[12] ||
	     IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__150_ETC___d3222[10:0] ==
	     11'd2047 ;
  assign _theResult_____3_fst__h199584 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[2] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[0]) ?
	       _theResult_____3_fst__h199789 :
	       5'd0 ;
  assign _theResult_____3_fst__h199789 =
	     (ff_input_D_OUT[8:6] != 3'b010 ||
	      condFlags32_reswget_BITS_14_TO_10__q52[0] |
	      condFlags32_reswget_BITS_9_TO_5__q53[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_fst__h200206 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_fst__h202617 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[2] ||
	      condFlags64_reswget_BITS_14_TO_10__q31[0] ||
	      condFlags64_reswget_BITS_9_TO_5__q32[2] ||
	      condFlags64_reswget_BITS_9_TO_5__q32[0]) ?
	       _theResult_____3_fst__h202822 :
	       5'd0 ;
  assign _theResult_____3_fst__h202822 =
	     (ff_input_D_OUT[8:6] != 3'b010 ||
	      condFlags64_reswget_BITS_14_TO_10__q31[0] |
	      condFlags64_reswget_BITS_9_TO_5__q32[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_fst__h203233 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[0] ||
	      condFlags64_reswget_BITS_9_TO_5__q32[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_fst__h246968 =
	     (!ff_input_D_OUT[4] &&
	      setCanonicalNaN_reswget_BITS_95_TO_64__q41[31]) ?
	       lv_invalid___2__h246965 :
	       _theResult_____1_fst__h248067 ;
  assign _theResult_____3_fst__h250490 =
	     sign__h232372 ?
	       lv_invalid___2__h250487 :
	       _theResult_____1_fst__h251597 ;
  assign _theResult_____3_fst__h65608 =
	     !inst_spfm_add_sub_ff_stage5[14] && _theResult_____6__h65488 ;
  assign _theResult_____3_fst__h66208 =
	     ex_overflow__h65479 || inst_spfm_add_sub_ff_stage5[11] ||
	     IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__168_ETC___d1240[7:0] ==
	     8'd255 ;
  assign _theResult_____3_snd__h199585 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[2] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[0]) ?
	       32'd0 :
	       CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_IF_lv_comp_ETC__q55 ;
  assign _theResult_____3_snd__h200207 =
	     (IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d3345 &
	      lv_op2_Nan__h199473) ?
	       32'h7FC00000 :
	       IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d3400 ;
  assign _theResult_____3_snd__h202618 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[2] ||
	      condFlags64_reswget_BITS_14_TO_10__q31[0] ||
	      condFlags64_reswget_BITS_9_TO_5__q32[2] ||
	      condFlags64_reswget_BITS_9_TO_5__q32[0]) ?
	       64'd0 :
	       CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_IF_lv_comp_ETC__q34 ;
  assign _theResult_____3_snd__h203234 =
	     (IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d3430 &
	      lv_op2_Nan__h202538) ?
	       64'h7FF8000000000000 :
	       IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d3479 ;
  assign _theResult_____3_snd_fst__h194008 =
	     !inst_dpfm_add_sub_ff_stage5[15] &&
	     (inst_dpfm_add_sub_ff_stage5[13] ?
		ex_overflow__h193877 :
		_theResult_____3_fst__h194606) ;
  assign _theResult_____3_snd_fst__h194608 =
	     ex_overflow__h193877 || inst_dpfm_add_sub_ff_stage5[12] ||
	     IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__150_ETC___d3222[10:0] ==
	     11'd2047 ||
	     lv_inexact__h193885 ;
  assign _theResult_____3_snd_fst__h65610 =
	     !inst_spfm_add_sub_ff_stage5[14] &&
	     (inst_spfm_add_sub_ff_stage5[12] ?
		ex_overflow__h65479 :
		_theResult_____3_fst__h66208) ;
  assign _theResult_____3_snd_fst__h66210 =
	     ex_overflow__h65479 || inst_spfm_add_sub_ff_stage5[11] ||
	     IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__168_ETC___d1240[7:0] ==
	     8'd255 ||
	     lv_inexact__h65487 ;
  assign _theResult_____3_snd_snd_fst__h194010 =
	     !inst_dpfm_add_sub_ff_stage5[15] &&
	     (inst_dpfm_add_sub_ff_stage5[13] ?
		lv_inexact__h193885 :
		_theResult_____3_snd_fst__h194608) ;
  assign _theResult_____3_snd_snd_fst__h246971 =
	     (!ff_input_D_OUT[4] &&
	      setCanonicalNaN_reswget_BITS_95_TO_64__q41[31]) ?
	       ((!ff_input_D_OUT[5] && final_result___2__h247014[31]) ?
		  final_result___1__h248024 :
		  final_result___2__h247014) :
	       _theResult_____1_snd__h248068 ;
  assign _theResult_____3_snd_snd_fst__h250493 =
	     sign__h232372 ?
	       ((!ff_input_D_OUT[5] && final_result___2__h250535[31]) ?
		  final_result___1__h251554 :
		  final_result___2__h250535) :
	       _theResult_____1_snd__h251598 ;
  assign _theResult_____3_snd_snd_fst__h65612 =
	     !inst_spfm_add_sub_ff_stage5[14] &&
	     (inst_spfm_add_sub_ff_stage5[12] ?
		lv_inexact__h65487 :
		_theResult_____3_snd_fst__h66210) ;
  assign _theResult_____3_snd_snd_snd__h194011 =
	     inst_dpfm_add_sub_ff_stage5[15] ?
	       { inst_dpfm_add_sub_ff_stage5[16], 63'h7FF0000000000000 } :
	       (inst_dpfm_add_sub_ff_stage5[13] ?
		  { inst_dpfm_add_sub_ff_stage5[14], 63'd0 } :
		  IF_NOT_IF_inst_dpfm_add_sub_ff_stage5_read__15_ETC___d3243) ;
  assign _theResult_____3_snd_snd_snd__h65613 =
	     inst_spfm_add_sub_ff_stage5[14] ?
	       { inst_spfm_add_sub_ff_stage5[15], 31'h7F800000 } :
	       (inst_spfm_add_sub_ff_stage5[12] ?
		  { inst_spfm_add_sub_ff_stage5[13], 31'd0 } :
		  IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__16_ETC___d1261) ;
  assign _theResult_____4__h14117 =
	     IF_inst_spfpu_divider_rg_stage3_68_BITS_4_TO_2_ETC___d315 ?
	       lv_rounded_quotient___1__h14538 :
	       lv_rounded_quotient__h14116 ;
  assign _theResult_____4__h87391 =
	     IF_inst_dpfpu_divider_rg_stage3_670_BITS_4_TO__ETC___d1717 ?
	       lv_rounded_quotient___1__h87812 :
	       lv_rounded_quotient__h87390 ;
  assign _theResult_____4_snd_fst__h118221 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__367_BIT_5_ETC___d2384 ?
	       exponent2__h118002 :
	       exponent3__h117993 ;
  assign _theResult_____4_snd_fst__h30452 =
	     IF_inst_spfm_add_sub_ff_stage2_read__33_BIT_5__ETC___d750 ?
	       exponent2__h30233 :
	       exponent3__h30224 ;
  assign _theResult_____5__h193887 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__150_BITS__ETC___d3211 ?
	       lv_rounded_mantissa___1__h194521 :
	       IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3189[159:106] ;
  assign _theResult_____5__h264532 =
	     (!IF_getExp64_res_whas__310_THEN_getExp64_res_wg_ETC___d4325 &&
	      IF_getExp64_res_whas__310_THEN_getExp64_res_wg_ETC___d4327 &&
	      man__h264803 != 49'd0 &&
	      (getExp64_res_wget[32:22] != 11'h380 ||
	       man__h264803[48:24] != 25'h1FFFFFF ||
	       ff_input_D_OUT[8:6] == 3'b001) &&
	      IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4350) ?
	       result__h265162 :
	       exception__h264517 ;
  assign _theResult_____5__h65489 =
	     IF_inst_spfm_add_sub_ff_stage5_read__168_BITS__ETC___d1229 ?
	       lv_rounded_mantissa___1__h66123 :
	       IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1207[72:48] ;
  assign _theResult_____5_snd_fst__h265564 =
	     IF_getExp64_res_whas__310_THEN_getExp64_res_wg_ETC___d4325 ?
	       res__h264524 :
	       res___1__h265567 ;
  assign _theResult_____6__h193886 =
	     !inst_dpfm_add_sub_ff_stage5[183] &&
	     !inst_dpfm_add_sub_ff_stage5[182] &&
	     !_0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__150_ETC___d3166 &&
	     lv_inexact__h193885 ||
	     IF_IF_inst_dpfm_add_sub_ff_stage5_read__150_BI_ETC___d3271 ;
  assign _theResult_____6__h65488 =
	     !inst_spfm_add_sub_ff_stage5[95] &&
	     !inst_spfm_add_sub_ff_stage5[94] &&
	     !_0_CONCAT_inst_spfm_add_sub_ff_stage5_read__168_ETC___d1184 &&
	     lv_inexact__h65487 ||
	     IF_IF_inst_spfm_add_sub_ff_stage5_read__168_BI_ETC___d1289 ;
  assign _theResult_____6_fst__h167474 =
	     (!inst_dpfm_add_sub_ff_stage2[4] ||
	      !inst_dpfm_add_sub_ff_stage2[14]) &&
	     inst_dpfm_add_sub_ff_stage2[1] ;
  assign _theResult_____6_fst__h53170 =
	     (!inst_spfm_add_sub_ff_stage2[4] ||
	      !inst_spfm_add_sub_ff_stage2[14]) &&
	     inst_spfm_add_sub_ff_stage2[1] ;
  assign _theResult_____6_snd_snd__h167477 =
	     (inst_dpfm_add_sub_ff_stage2[4] &&
	      inst_dpfm_add_sub_ff_stage2[14]) ?
	       lv_result_is_infinity___1__h167478 :
	       ((inst_dpfm_add_sub_ff_stage2[4] ||
		 inst_dpfm_add_sub_ff_stage2[14]) ?
		  lv_result_is_infinity___1__h167540 :
		  2'd0) ;
  assign _theResult_____6_snd_snd__h53173 =
	     (inst_spfm_add_sub_ff_stage2[4] &&
	      inst_spfm_add_sub_ff_stage2[14]) ?
	       lv_result_is_infinity___1__h53174 :
	       ((inst_spfm_add_sub_ff_stage2[4] ||
		 inst_spfm_add_sub_ff_stage2[14]) ?
		  lv_result_is_infinity___1__h53236 :
		  2'd0) ;
  assign _theResult_____6_snd_snd_snd__h167524 =
	     (inst_dpfm_add_sub_ff_stage2[16] &&
	      inst_dpfm_add_sub_ff_stage2[5]) ?
	       (inst_dpfm_add_sub_ff_stage2[11] ?
		  lv_result_is_zero___1__h167577 :
		  IF_inst_dpfm_add_sub_ff_stage2_read__367_BITS__ETC___d2783) :
	       2'd0 ;
  assign _theResult_____6_snd_snd_snd__h53220 =
	     (inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       (inst_spfm_add_sub_ff_stage2[11] ?
		  lv_result_is_zero___1__h53273 :
		  IF_inst_spfm_add_sub_ff_stage2_read__33_BITS_9_ETC___d975) :
	       2'd0 ;
  assign _theResult____h117992 =
	     (!inst_dpfm_add_sub_ff_stage2[14] &&
	      !inst_dpfm_add_sub_ff_stage2_read__367_BIT_15_3_ETC___d2392 &&
	      !inst_dpfm_add_sub_ff_stage2[16]) ?
	       mantissa3___1__h137712 :
	       160'd0 ;
  assign _theResult____h14114 =
	     inst_spfpu_divider_rg_stage3[50:23] != 28'd0 ||
	     inst_spfpu_divider_rg_stage3[51] ||
	     inst_spfpu_divider_rg_stage3[6] ;
  assign _theResult____h15953 =
	     inst_spfpu_sqrt_rg_inter_stage[57] ?
	       lv_remainder__h16069 :
	       lv_remainder__h16159 ;
  assign _theResult____h167743 =
	     inst_dpfm_add_sub_ff_stage4[348] ?
	       sub_mantissa__h167742 :
	       add_mantissa__h167739 ;
  assign _theResult____h199806 =
	     (setCanonicalNaN_reswget_BITS_95_TO_64__q41[30:23] <
	      setCanonicalNaN_reswget_BITS_63_TO_32__q42[30:23]) ?
	       2'b01 :
	       ((setCanonicalNaN_reswget_BITS_95_TO_64__q41[30:23] ==
		 setCanonicalNaN_reswget_BITS_63_TO_32__q42[30:23]) ?
		  ((setCanonicalNaN_reswget_BITS_95_TO_64__q41[22:0] <
		    setCanonicalNaN_reswget_BITS_63_TO_32__q42[22:0]) ?
		     2'b01 :
		     ((setCanonicalNaN_reswget_BITS_95_TO_64__q41[22:0] ==
		       setCanonicalNaN_reswget_BITS_63_TO_32__q42[22:0]) ?
			2'b11 :
			2'b10)) :
		  2'b10) ;
  assign _theResult____h202839 =
	     (ff_input_D_OUT[210:200] < ff_input_D_OUT[146:136]) ?
	       2'b01 :
	       ((ff_input_D_OUT[210:200] == ff_input_D_OUT[146:136]) ?
		  ((ff_input_D_OUT[199:148] < ff_input_D_OUT[135:84]) ?
		     2'b01 :
		     ((ff_input_D_OUT[199:148] == ff_input_D_OUT[135:84]) ?
			2'b11 :
			2'b10)) :
		  2'b10) ;
  assign _theResult____h209738 =
	     (!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	      inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20[31]) ?
	       ~inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] + 32'd1 :
	       inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] ;
  assign _theResult____h209750 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5142[5:0] !=
	     6'd0 ;
  assign _theResult____h215610 =
	     (!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	      inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21[63]) ?
	       ~inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] + 64'd1 :
	       inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] ;
  assign _theResult____h215622 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5018[37:0] !=
	     38'd0 ;
  assign _theResult____h226901 =
	     lv_sign__h226897 ? inp32___1__h227417 : ff_input_D_OUT[179:148] ;
  assign _theResult____h226914 =
	     sign__h232372 ?
	       ~ff_input_D_OUT[211:148] + 64'd1 :
	       ff_input_D_OUT[211:148] ;
  assign _theResult____h232374 =
	     IF_NOT_ff_input_first__305_BIT_4_530_544_AND_f_ETC___d3678[8:0] !=
	     9'd0 ;
  assign _theResult____h30223 =
	     (!inst_spfm_add_sub_ff_stage2[14] &&
	      !inst_spfm_add_sub_ff_stage2_read__33_BIT_15_56_ETC___d758 &&
	      !inst_spfm_add_sub_ff_stage2[16]) ?
	       mantissa3___1__h39445 :
	       73'd0 ;
  assign _theResult____h53439 =
	     inst_spfm_add_sub_ff_stage4[171] ?
	       sub_mantissa__h53438 :
	       add_mantissa__h53435 ;
  assign _theResult____h87388 =
	     inst_dpfpu_divider_rg_stage3[82:26] != 57'd0 ||
	     inst_dpfpu_divider_rg_stage3[83] ||
	     inst_dpfpu_divider_rg_stage3[6] ;
  assign _theResult____h89226 =
	     inst_dpfpu_sqrt_rg_inter_stage[115] ?
	       lv_remainder__h89342 :
	       lv_remainder__h89432 ;
  assign _theResult___fst__h107925 =
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1866 ?
	       _theResult_____1_fst__h107969 :
	       lv_product_exponent_inc_shift__h107917 ;
  assign _theResult___fst__h13900 =
	     x_wget__h658[26] ?
	       x_wget__h658[26:0] :
	       _theResult___fst__h13904 ;
  assign _theResult___fst__h13904 =
	     INV_1_MINUS_inst_spfpu_divider_rg_stage2_24_BI_ETC___d191 ?
	       lv_quotient_shiftL_expo__h6981 :
	       lv_quotient_shiftL_zerosMSB__h6983 ;
  assign _theResult___fst__h194149 =
	     inst_dpfm_add_sub_ff_stage5[182] ?
	       inst_dpfm_add_sub_ff_stage5[196:184] :
	       _theResult___fst__h194153 ;
  assign _theResult___fst__h194153 =
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__150_ETC___d3166 ?
	       resultant_exponent_sub_zerosMSB__h193867 :
	       13'd0 ;
  assign _theResult___fst__h246626 =
	     ff_input_D_OUT[5] ?
	       _theResult___fst__h246804 :
	       _theResult___fst__h246636 ;
  assign _theResult___fst__h246636 =
	     ff_input_D_OUT[4] ?
	       _theResult___fst__h246743 :
	       _theResult___fst__h246683 ;
  assign _theResult___fst__h246683 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h246335) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h246724 ;
  assign _theResult___fst__h246724 =
	     IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3837 ?
	       _1_CONCAT_getMant32_res_wget__849_BITS_68_TO_46_ETC___d3855[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___fst__h246743 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h246335) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h246785 ;
  assign _theResult___fst__h246785 =
	     IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3835 ?
	       _1_CONCAT_getMant32_res_wget__849_BITS_68_TO_46_ETC___d3855[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___fst__h246804 =
	     ff_input_D_OUT[4] ?
	       _theResult___fst__h246892 :
	       _theResult___fst__h246832 ;
  assign _theResult___fst__h246832 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h246335) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h246874 ;
  assign _theResult___fst__h246874 =
	     IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3832 ?
	       _1_CONCAT_getMant32_res_wget__849_BITS_68_TO_46_ETC___d3855[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___fst__h246892 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h246335) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h246934 ;
  assign _theResult___fst__h246934 =
	     IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3830 ?
	       _1_CONCAT_getMant32_res_wget__849_BITS_68_TO_46_ETC___d3855[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___fst__h247332 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
	     ff_input_D_OUT[4] &&
	     IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d4149 ||
	     lv_invalid__h246335 ;
  assign _theResult___fst__h247453 =
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ||
	     getExp32_res_wget[23:16] != 8'd158 ||
	     getMant32_res_wget[68:46] != 23'd0 ;
  assign _theResult___fst__h247523 =
	     !IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3835 ||
	     lv_invalid__h246335 ;
  assign _theResult___fst__h247597 =
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ||
	     getExp32_res_wget[23:16] != 8'd190 ||
	     getMant32_res_wget[68:46] != 23'd0 ;
  assign _theResult___fst__h247668 =
	     !IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3830 ||
	     lv_invalid__h246335 ;
  assign _theResult___fst__h250131 =
	     ff_input_D_OUT[5] ?
	       _theResult___fst__h250326 :
	       _theResult___fst__h250144 ;
  assign _theResult___fst__h250144 =
	     ff_input_D_OUT[4] ?
	       _theResult___fst__h250265 :
	       _theResult___fst__h250197 ;
  assign _theResult___fst__h250197 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	      lv_invalid__h249834) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h250244 ;
  assign _theResult___fst__h250244 =
	     _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4005 ?
	       _1_CONCAT_getMant64_res_wget__016_BITS_155_TO_1_ETC___d4022[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___fst__h250265 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	      lv_invalid__h249834) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h250307 ;
  assign _theResult___fst__h250307 =
	     _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4003 ?
	       _1_CONCAT_getMant64_res_wget__016_BITS_155_TO_1_ETC___d4022[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___fst__h250326 =
	     ff_input_D_OUT[4] ?
	       _theResult___fst__h250414 :
	       _theResult___fst__h250354 ;
  assign _theResult___fst__h250354 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	      lv_invalid__h249834) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h250396 ;
  assign _theResult___fst__h250396 =
	     _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4000 ?
	       _1_CONCAT_getMant64_res_wget__016_BITS_155_TO_1_ETC___d4022[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___fst__h250414 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	      lv_invalid__h249834) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h250456 ;
  assign _theResult___fst__h250456 =
	     _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d3998 ?
	       _1_CONCAT_getMant64_res_wget__016_BITS_155_TO_1_ETC___d4022[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___fst__h250854 =
	     ff_input_D_OUT[211] && ff_input_D_OUT[4] &&
	     _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4185 ||
	     lv_invalid__h249834 ;
  assign _theResult___fst__h250977 =
	     !ff_input_D_OUT[211] ||
	     NOT_0b0_CONCAT_getExp64_res_wget__983_BITS_32__ETC___d4210 ;
  assign _theResult___fst__h251055 =
	     !_0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4003 ||
	     lv_invalid__h249834 ;
  assign _theResult___fst__h251129 =
	     !ff_input_D_OUT[211] || x__h250010[10:0] != 11'd63 ||
	     getMant64_res_wget[155:104] != 52'd0 ;
  assign _theResult___fst__h251200 =
	     !_0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d3998 ||
	     lv_invalid__h249834 ;
  assign _theResult___fst__h25318 =
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d464 ?
	       _theResult_____1_fst__h25362 :
	       lv_product_exponent_inc_shift__h25310 ;
  assign _theResult___fst__h264794 =
	     IF_getExp64_res_whas__310_THEN_getExp64_res_wg_ETC___d4327 ?
	       _theResult___fst__h264807 :
	       5'd0 ;
  assign _theResult___fst__h264807 =
	     (man__h264803 == 49'd0) ? 5'd0 : _theResult___fst__h264872 ;
  assign _theResult___fst__h264872 =
	     (getExp64_res_wget[32:22] == 11'h380 &&
	      man__h264803[48:24] == 25'h1FFFFFF &&
	      ff_input_D_OUT[8:6] != 3'b001) ?
	       5'd1 :
	       5'd0 ;
  assign _theResult___fst__h268818 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[1]) ?
	       _theResult___fst__h268826 :
	       quiet_nan_two__h268304 ;
  assign _theResult___fst__h268826 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[3]) &&
	     quiet_nan_two__h268304 ;
  assign _theResult___fst__h271424 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q32[1]) ?
	       _theResult___fst__h271432 :
	       quiet_nan_two__h270914 ;
  assign _theResult___fst__h271432 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[3] ||
	      condFlags64_reswget_BITS_9_TO_5__q32[3]) &&
	     quiet_nan_two__h270914 ;
  assign _theResult___fst__h65751 =
	     inst_spfm_add_sub_ff_stage5[94] ?
	       inst_spfm_add_sub_ff_stage5[105:96] :
	       _theResult___fst__h65755 ;
  assign _theResult___fst__h65755 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__168_ETC___d1184 ?
	       resultant_exponent_sub_zerosMSB__h65469 :
	       10'd0 ;
  assign _theResult___fst__h6969 =
	     inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d128 ?
	       27'd1 :
	       _theResult___fst__h6988 ;
  assign _theResult___fst__h6988 =
	     _1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d130 ?
	       _theResult___fst__h13900 :
	       lv_quotient___1__h7005 ;
  assign _theResult___fst__h73022 =
	     inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1443 ?
	       56'd1 :
	       _theResult___fst__h73041 ;
  assign _theResult___fst__h73041 =
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_439_BITS__ETC___d1445 ?
	       _theResult___fst__h87174 :
	       lv_quotient___1__h73058 ;
  assign _theResult___fst__h87174 =
	     x_wget__h66738[55] ?
	       x_wget__h66738[55:0] :
	       _theResult___fst__h87178 ;
  assign _theResult___fst__h87178 =
	     INV_1_MINUS_inst_dpfpu_divider_rg_stage2_439_B_ETC___d1564 ?
	       lv_quotient_shiftL_expo__h73034 :
	       lv_quotient_shiftL_zerosMSB__h73036 ;
  assign _theResult___snd__h247450 =
	     IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3837 ?
	       64'd0 :
	       _theResult___snd__h247454 ;
  assign _theResult___snd__h247454 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
	       64'hFFFFFFFF80000000 :
	       64'h000000007FFFFFFF ;
  assign _theResult___snd__h247524 =
	     (IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3835 ||
	      setCanonicalNaN_reswget_BITS_95_TO_64__q41[31]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___snd__h247594 =
	     IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3832 ?
	       64'd0 :
	       _theResult___snd__h247598 ;
  assign _theResult___snd__h247598 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
	       64'h8000000000000000 :
	       64'h7FFFFFFFFFFFFFFF ;
  assign _theResult___snd__h247669 =
	     (IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3830 ||
	      setCanonicalNaN_reswget_BITS_95_TO_64__q41[31]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___snd__h251056 =
	     (_0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4003 ||
	      ff_input_D_OUT[211]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___snd__h251126 =
	     _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4000 ?
	       64'd0 :
	       _theResult___snd__h251130 ;
  assign _theResult___snd__h251130 =
	     ff_input_D_OUT[211] ?
	       64'h8000000000000000 :
	       64'h7FFFFFFFFFFFFFFF ;
  assign _theResult___snd__h251201 =
	     (_0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d3998 ||
	      ff_input_D_OUT[211]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___snd_final_result__h226922 =
	     ff_input_D_OUT[5] ?
	       NOT_ff_input_first__305_BIT_4_530_544_AND_ff_i_ETC___d3709 :
	       { lv_sign__h226897, expo__h226904, mantissa__h226905 } ;
  assign _theResult___snd_fst__h108010 =
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1866 ?
	       _theResult_____1_snd__h107970 :
	       lv_product_mantissa___1__h107956 ;
  assign _theResult___snd_fst__h13984 =
	     inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d127 ?
	       _theResult___snd_fst__h13994 :
	       inst_spfpu_divider_rg_stage2[18:9] ;
  assign _theResult___snd_fst__h13994 =
	     inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d128 ?
	       10'd0 :
	       _theResult___snd_fst__h14002 ;
  assign _theResult___snd_fst__h14002 =
	     _1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d130 ?
	       _theResult___snd_fst__h14012 :
	       lv_exponent_inc_shift__h6979 ;
  assign _theResult___snd_fst__h14012 =
	     x_wget__h658[26] ?
	       inst_spfpu_divider_rg_stage2[18:9] :
	       _theResult___snd_fst__h14014 ;
  assign _theResult___snd_fst__h14014 =
	     INV_1_MINUS_inst_spfpu_divider_rg_stage2_24_BI_ETC___d191 ?
	       lv_exponent_sub_shift__h6982 :
	       lv_exponent_sub_zerosMSB__h6984 ;
  assign _theResult___snd_fst__h194366 =
	     inst_dpfm_add_sub_ff_stage5[182] ?
	       inst_dpfm_add_sub_ff_stage5[183:24] :
	       _theResult___snd_fst__h194368 ;
  assign _theResult___snd_fst__h194368 =
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__150_ETC___d3166 ?
	       resultant_mantissa_norm_zerosMSB__h193866 :
	       resultant_mantissa_norm_expo__h193865 ;
  assign _theResult___snd_fst__h246590 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[4] ||
	      IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3819[7] &&
	      !IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d3824) ?
	       _theResult___fst__h247332 :
	       _theResult___snd_fst__h246628 ;
  assign _theResult___snd_fst__h246628 =
	     ff_input_D_OUT[5] ?
	       _theResult___snd_fst__h246806 :
	       _theResult___snd_fst__h246638 ;
  assign _theResult___snd_fst__h246638 =
	     ff_input_D_OUT[4] ?
	       _theResult___snd_fst__h246745 :
	       _theResult___snd_fst__h246685 ;
  assign _theResult___snd_fst__h246685 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h246335 ||
	      IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3837) ?
	       lv_invalid__h246335 :
	       _theResult___fst__h247453 ;
  assign _theResult___snd_fst__h246745 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h246335 ||
	      IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3835) ?
	       lv_invalid__h246335 :
	       _theResult___fst__h247523 ;
  assign _theResult___snd_fst__h246806 =
	     ff_input_D_OUT[4] ?
	       _theResult___snd_fst__h246894 :
	       _theResult___snd_fst__h246834 ;
  assign _theResult___snd_fst__h246834 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h246335 ||
	      IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3832) ?
	       lv_invalid__h246335 :
	       _theResult___fst__h247597 ;
  assign _theResult___snd_fst__h246894 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h246335 ||
	      IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3830) ?
	       lv_invalid__h246335 :
	       _theResult___fst__h247668 ;
  assign _theResult___snd_fst__h250094 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[4] ||
	      x__h250010[10] &&
	      !IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d3991) ?
	       _theResult___fst__h250854 :
	       _theResult___snd_fst__h250133 ;
  assign _theResult___snd_fst__h250133 =
	     ff_input_D_OUT[5] ?
	       _theResult___snd_fst__h250328 :
	       _theResult___snd_fst__h250146 ;
  assign _theResult___snd_fst__h250146 =
	     ff_input_D_OUT[4] ?
	       _theResult___snd_fst__h250267 :
	       _theResult___snd_fst__h250199 ;
  assign _theResult___snd_fst__h250199 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	      lv_invalid__h249834 ||
	      _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4005) ?
	       lv_invalid__h249834 :
	       _theResult___fst__h250977 ;
  assign _theResult___snd_fst__h250267 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	      lv_invalid__h249834 ||
	      _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4003) ?
	       lv_invalid__h249834 :
	       _theResult___fst__h251055 ;
  assign _theResult___snd_fst__h250328 =
	     ff_input_D_OUT[4] ?
	       _theResult___snd_fst__h250416 :
	       _theResult___snd_fst__h250356 ;
  assign _theResult___snd_fst__h250356 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	      lv_invalid__h249834 ||
	      _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4000) ?
	       lv_invalid__h249834 :
	       _theResult___fst__h251129 ;
  assign _theResult___snd_fst__h250416 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	      lv_invalid__h249834 ||
	      _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d3998) ?
	       lv_invalid__h249834 :
	       _theResult___fst__h251200 ;
  assign _theResult___snd_fst__h250856 =
	     !ff_input_D_OUT[211] || !ff_input_D_OUT[4] ||
	     NOT_0b0_CONCAT_getExp64_res_wget__983_BITS_32__ETC___d4246 ;
  assign _theResult___snd_fst__h25403 =
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d464 ?
	       _theResult_____1_snd__h25363 :
	       lv_product_mantissa___1__h25349 ;
  assign _theResult___snd_fst__h265565 =
	     (ff_input_D_OUT[8:6] == 3'b010 && ff_input_D_OUT[211]) ?
	       32'h80000001 :
	       ((ff_input_D_OUT[8:6] == 3'b011 && !ff_input_D_OUT[211]) ?
		  32'd1 :
		  { ff_input_D_OUT[211], 31'b0 }) ;
  assign _theResult___snd_fst__h65968 =
	     inst_spfm_add_sub_ff_stage5[94] ?
	       inst_spfm_add_sub_ff_stage5[95:23] :
	       _theResult___snd_fst__h65970 ;
  assign _theResult___snd_fst__h65970 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__168_ETC___d1184 ?
	       resultant_mantissa_norm_zerosMSB__h65468 :
	       resultant_mantissa_norm_expo__h65467 ;
  assign _theResult___snd_fst__h87258 =
	     inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1442 ?
	       _theResult___snd_fst__h87268 :
	       inst_dpfpu_divider_rg_stage2[21:9] ;
  assign _theResult___snd_fst__h87268 =
	     inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1443 ?
	       13'd0 :
	       _theResult___snd_fst__h87276 ;
  assign _theResult___snd_fst__h87276 =
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_439_BITS__ETC___d1445 ?
	       _theResult___snd_fst__h87286 :
	       lv_exponent_inc_shift__h73032 ;
  assign _theResult___snd_fst__h87286 =
	     x_wget__h66738[55] ?
	       inst_dpfpu_divider_rg_stage2[21:9] :
	       _theResult___snd_fst__h87288 ;
  assign _theResult___snd_fst__h87288 =
	     INV_1_MINUS_inst_dpfpu_divider_rg_stage2_439_B_ETC___d1564 ?
	       lv_exponent_sub_shift__h73035 :
	       lv_exponent_sub_zerosMSB__h73037 ;
  assign _theResult___snd_snd__h247335 =
	     (!setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
	      ff_input_D_OUT[8:6] == 3'b011) ?
	       64'd1 :
	       ((ff_input_D_OUT[8:6] == 3'b010 &&
		 setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
		 !ff_input_D_OUT[4]) ?
		  64'hFFFFFFFFFFFFFFFF :
		  IF_IF_getExp32_res_whas__815_THEN_getExp32_res_ETC___d3882) ;
  assign _theResult___snd_snd__h250857 =
	     (!ff_input_D_OUT[211] && ff_input_D_OUT[8:6] == 3'b011) ?
	       64'd1 :
	       ((ff_input_D_OUT[8:6] == 3'b010 && ff_input_D_OUT[211] &&
		 !ff_input_D_OUT[4]) ?
		  64'hFFFFFFFFFFFFFFFF :
		  IF_0b0_CONCAT_getExp64_res_wget__983_BITS_32_T_ETC___d4048) ;
  assign _theResult___snd_snd__h250973 =
	     _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4005 ?
	       64'd0 :
	       _theResult___snd_snd__h250980 ;
  assign _theResult___snd_snd__h250980 =
	     ff_input_D_OUT[211] ?
	       64'hFFFFFFFF80000000 :
	       64'h000000007FFFFFFF ;
  assign _theResult___snd_snd_fst__h250135 =
	     !ff_input_D_OUT[5] && !ff_input_D_OUT[4] &&
	     NOT_IF_condFlags64_res_whas__424_THEN_condFlag_ETC___d4256 ;
  assign _theResult___snd_snd_fst__h264798 =
	     IF_getExp64_res_whas__310_THEN_getExp64_res_wg_ETC___d4327 ?
	       man__h264803 :
	       man__h265058 ;
  assign _theResult___snd_snd_snd_fst__h247385 =
	     ff_input_D_OUT[5] ?
	       _theResult___snd_snd_snd_fst__h247531 :
	       _theResult___snd_snd_snd_fst__h247387 ;
  assign _theResult___snd_snd_snd_fst__h247387 =
	     ff_input_D_OUT[4] ?
	       _theResult___snd_snd_snd_fst__h247468 :
	       _theResult___snd_snd_snd_fst__h247391 ;
  assign _theResult___snd_snd_snd_fst__h247391 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h246335) ?
	       final_result___1__h247395 :
	       _theResult___snd_snd_snd_fst__h247419 ;
  assign _theResult___snd_snd_snd_fst__h247419 =
	     IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3837 ?
	       final_result___1__h246732 :
	       _theResult___snd__h247450 ;
  assign _theResult___snd_snd_snd_fst__h247468 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h246335) ?
	       final_result___1__h246764 :
	       _theResult___snd_snd_snd_fst__h247493 ;
  assign _theResult___snd_snd_snd_fst__h247493 =
	     IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3835 ?
	       final_result___1__h246732 :
	       _theResult___snd__h247524 ;
  assign _theResult___snd_snd_snd_fst__h247531 =
	     ff_input_D_OUT[4] ?
	       _theResult___snd_snd_snd_fst__h247612 :
	       _theResult___snd_snd_snd_fst__h247535 ;
  assign _theResult___snd_snd_snd_fst__h247535 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h246335) ?
	       final_result___1__h246853 :
	       _theResult___snd_snd_snd_fst__h247562 ;
  assign _theResult___snd_snd_snd_fst__h247562 =
	     IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3832 ?
	       _1_CONCAT_getMant32_res_wget__849_BITS_68_TO_46_ETC___d3855[86:23] :
	       _theResult___snd__h247594 ;
  assign _theResult___snd_snd_snd_fst__h247612 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h246335) ?
	       final_result___1__h246764 :
	       _theResult___snd_snd_snd_fst__h247637 ;
  assign _theResult___snd_snd_snd_fst__h247637 =
	     IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3830 ?
	       _1_CONCAT_getMant32_res_wget__849_BITS_68_TO_46_ETC___d3855[86:23] :
	       _theResult___snd__h247669 ;
  assign _theResult___snd_snd_snd_fst__h251000 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	      lv_invalid__h249834) ?
	       final_result___1__h250286 :
	       _theResult___snd_snd_snd_fst__h251025 ;
  assign _theResult___snd_snd_snd_fst__h251025 =
	     _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4003 ?
	       final_result___1__h250254 :
	       _theResult___snd__h251056 ;
  assign _theResult___snd_snd_snd_fst__h251063 =
	     ff_input_D_OUT[4] ?
	       _theResult___snd_snd_snd_fst__h251144 :
	       _theResult___snd_snd_snd_fst__h251067 ;
  assign _theResult___snd_snd_snd_fst__h251067 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	      lv_invalid__h249834) ?
	       final_result___1__h250375 :
	       _theResult___snd_snd_snd_fst__h251094 ;
  assign _theResult___snd_snd_snd_fst__h251094 =
	     _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4000 ?
	       _1_CONCAT_getMant64_res_wget__016_BITS_155_TO_1_ETC___d4022[115:52] :
	       _theResult___snd__h251126 ;
  assign _theResult___snd_snd_snd_fst__h251144 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	      lv_invalid__h249834) ?
	       final_result___1__h250286 :
	       _theResult___snd_snd_snd_fst__h251169 ;
  assign _theResult___snd_snd_snd_fst__h251169 =
	     _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d3998 ?
	       _1_CONCAT_getMant64_res_wget__016_BITS_155_TO_1_ETC___d4022[115:52] :
	       _theResult___snd__h251201 ;
  assign _theResult___snd_snd_snd_snd__h264813 =
	     getMant64_reswget_BITS_155_TO_104__q25[26:0] != 27'd0 ;
  assign _theResult___snd_snd_snd_snd_fst__h247329 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[4] ||
	      IF_getExp32_res_whas__815_THEN_getExp32_res_wg_ETC___d3819[7] &&
	      !IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d3824) ?
	       _theResult___snd_snd__h247335 :
	       _theResult___snd_snd_snd_fst__h247385 ;
  assign _theResult___snd_snd_snd_snd_fst__h250851 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[4] ||
	      x__h250010[10] &&
	      !IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d3991) ?
	       _theResult___snd_snd__h250857 :
	       _theResult___snd_snd_snd_snd_fst__h250905 ;
  assign _theResult___snd_snd_snd_snd_fst__h250905 =
	     ff_input_D_OUT[5] ?
	       _theResult___snd_snd_snd_fst__h251063 :
	       _theResult___snd_snd_snd_snd_fst__h250907 ;
  assign _theResult___snd_snd_snd_snd_fst__h250907 =
	     ff_input_D_OUT[4] ?
	       _theResult___snd_snd_snd_fst__h251000 :
	       _theResult___snd_snd_snd_snd_fst__h250911 ;
  assign _theResult___snd_snd_snd_snd_fst__h250911 =
	     (condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	      lv_invalid__h249834) ?
	       final_result___1__h250915 :
	       _theResult___snd_snd_snd_snd_fst__h250939 ;
  assign _theResult___snd_snd_snd_snd_fst__h250939 =
	     _0b0_CONCAT_getExp64_res_wget__983_BITS_32_TO_2_ETC___d4005 ?
	       final_result___1__h250254 :
	       _theResult___snd_snd__h250973 ;
  assign add_mantissa__h167739 =
	     inst_dpfm_add_sub_ff_stage4[332:173] +
	     inst_dpfm_add_sub_ff_stage4[172:13] ;
  assign add_mantissa__h53435 =
	     inst_spfm_add_sub_ff_stage4[158:86] +
	     inst_spfm_add_sub_ff_stage4[85:13] ;
  assign and_sign__h199475 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &
	     setCanonicalNaN_reswget_BITS_63_TO_32__q42[31] ;
  assign and_sign__h202540 = ff_input_D_OUT[211] & ff_input_D_OUT[147] ;
  assign condFlags32_argwget_BITS_30_TO_8__q51 = condFlags32_arg_wget[30:8] ;
  assign condFlags32_argwget_BITS_61_TO_39__q50 =
	     condFlags32_arg_wget[61:39] ;
  assign condFlags32_argwget_BITS_92_TO_70__q49 =
	     condFlags32_arg_wget[92:70] ;
  assign condFlags32_reswget_BITS_14_TO_10__q52 =
	     condFlags32_res_wget[14:10] ;
  assign condFlags32_reswget_BITS_9_TO_5__q53 = condFlags32_res_wget[9:5] ;
  assign condFlags64_argwget_BITS_125_TO_74__q29 =
	     condFlags64_arg_wget[125:74] ;
  assign condFlags64_argwget_BITS_188_TO_137__q28 =
	     condFlags64_arg_wget[188:137] ;
  assign condFlags64_argwget_BITS_62_TO_11__q30 =
	     condFlags64_arg_wget[62:11] ;
  assign condFlags64_reswget_BITS_14_TO_10__q31 =
	     condFlags64_res_wget[14:10] ;
  assign condFlags64_reswget_BITS_9_TO_5__q32 = condFlags64_res_wget[9:5] ;
  assign ex_overflow__h193877 =
	     !IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3172 ;
  assign ex_overflow__h65479 =
	     !IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1190 ;
  assign exception__h264517 =
	     IF_getExp64_res_whas__310_THEN_getExp64_res_wg_ETC___d4325 ?
	       5'd3 :
	       _theResult___fst__h264794 ;
  assign exp1__h274453 = exp1_temp__h268308 - { 5'd0, x__h274539 } ;
  assign exp1__h284377 = exp1_temp__h270918 - { 7'd0, x__h284463 } ;
  assign exp1_temp__h268308 = { 2'b0, getExp32_res_wget[23:16] } ;
  assign exp1_temp__h270918 = { 2'b0, getExp64_res_wget[32:22] } ;
  assign exp2__h274454 = exp2_temp__h268309 - { 5'd0, x__h278487 } ;
  assign exp2__h284378 = exp2_temp__h270919 - { 7'd0, x__h293080 } ;
  assign exp2_temp__h268309 = { 2'b0, getExp32_res_wget[15:8] } ;
  assign exp2_temp__h270919 = { 2'b0, getExp64_res_wget[21:11] } ;
  assign expo3_zero__h117990 = inst_dpfm_add_sub_ff_stage2[80:70] != 11'd0 ;
  assign expo3_zero__h30221 = inst_spfm_add_sub_ff_stage2[48:41] != 8'd0 ;
  assign expo___1__h265688 = expo__h264519 + 8'd1 ;
  assign expo__h209740 = 8'd158 - { 3'd0, x__h210030[4:0] } ;
  assign expo__h215612 = 8'd190 - { 2'd0, x__h215920[5:0] } ;
  assign expo__h226904 = ~(11'd1054 - { 6'd0, x__h227037[4:0] }) ;
  assign expo__h226917 = 11'd1086 - { 5'd0, x__h232473[5:0] } ;
  assign expo__h258696 = { 3'd0, getExp32_res_wget[23:16] } + 11'h380 ;
  assign expo__h258755 = 11'h380 - { 6'd0, x__h258760 } ;
  assign expo__h264519 =
	     (IF_getExp64_res_whas__310_THEN_getExp64_res_wg_ETC___d4325 ||
	      IF_getExp64_res_whas__310_THEN_getExp64_res_wg_ETC___d4327) ?
	       8'd0 :
	       x__h265691[7:0] ;
  assign exponent2__h118002 =
	     inst_dpfm_add_sub_ff_stage2[5] ?
	       13'd0 :
	       inst_dpfm_add_sub_ff_stage2[201:189] ;
  assign exponent2__h30233 =
	     inst_spfm_add_sub_ff_stage2[5] ?
	       10'd0 :
	       inst_spfm_add_sub_ff_stage2[108:99] ;
  assign exponent3__h117981 = { 2'b0, inst_dpfm_add_sub_ff_stage2[80:70] } ;
  assign exponent3__h117993 =
	     exponent3__h117981 + { 12'd0, inst_dpfm_add_sub_ff_stage2[17] } ;
  assign exponent3__h30212 = { 2'b0, inst_spfm_add_sub_ff_stage2[48:41] } ;
  assign exponent3__h30224 =
	     exponent3__h30212 + { 9'd0, inst_spfm_add_sub_ff_stage2[17] } ;
  assign exponent___1__h305299 = exponent__h304713 + 9'd1 ;
  assign exponent___1__h315913 = lv_exp__h249844 + 12'd1 ;
  assign exponent__h304713 = { 1'b0, getExp32_res_wget[23:16] } ;
  assign exponent_difference__h118016 =
	     lv_minuend__h118012 - _theResult_____4_snd_fst__h118221 ;
  assign exponent_difference__h30247 =
	     lv_minuend__h30243 - _theResult_____4_snd_fst__h30452 ;
  assign ff_inputD_OUT_BITS_179_TO_148__q1 = ff_input_D_OUT[179:148] ;
  assign ff_input_first__305_BITS_15_TO_11_306_EQ_0b100_ETC___d3331 =
	     ff_input_D_OUT[15:11] == 5'b00100 ||
	     ff_input_D_OUT[15:11] == 5'b11000 ||
	     ff_input_D_OUT[15:11] == 5'b11100 &&
	     ff_input_D_OUT[8:6] == 3'b001 ||
	     ff_input_D_OUT[15:11] == 5'b01000 ||
	     (ff_input_D_OUT[15:9] == 7'b1110000 ||
	      ff_input_D_OUT[15:9] == 7'b1111000 ||
	      ff_input_D_OUT[15:9] == 7'b1110001 ||
	      ff_input_D_OUT[15:9] == 7'b1111001) &&
	     ff_input_D_OUT[8:6] == 3'b0 ;
  assign ff_input_first__305_BITS_15_TO_11_306_EQ_0b10__ETC___d4565 =
	     ff_input_D_OUT[15:11] == 5'b00010 &&
	     ff_input_D_OUT[19:16] == 4'b0100 &&
	     ff_input_D_OUT[3] ||
	     (ff_input_D_OUT[19:16] == 4'b0 ||
	      ff_input_D_OUT[19:16] == 4'b0001 ||
	      ff_input_D_OUT[19:16] == 4'b0010 ||
	      ff_input_D_OUT[19:16] == 4'b0011) &&
	     ff_input_D_OUT[3] ;
  assign ff_input_first__305_BITS_15_TO_11_306_EQ_0b10__ETC___d4746 =
	     ff_input_D_OUT[15:11] == 5'b00010 &&
	     ff_input_D_OUT[19:16] == 4'b0100 &&
	     !ff_input_D_OUT[3] ||
	     (ff_input_D_OUT[19:16] == 4'b0 ||
	      ff_input_D_OUT[19:16] == 4'b0001 ||
	      ff_input_D_OUT[19:16] == 4'b0010 ||
	      ff_input_D_OUT[19:16] == 4'b0011) &&
	     !ff_input_D_OUT[3] ;
  assign ff_input_first__305_BITS_15_TO_11_306_EQ_0b110_ETC___d4629 =
	     (ff_input_D_OUT[15:11] == 5'b11000 ||
	      ff_input_D_OUT[15:11] == 5'b11100 &&
	      ff_input_D_OUT[8:6] == 3'b001 ||
	      ff_input_D_OUT[15:11] == 5'b01000) &&
	     ff_input_D_OUT[19:16] == 4'b0100 ;
  assign ff_input_first__305_BIT_211_443_XOR_ff_input_f_ETC___d3807 =
	     ff_input_D_OUT[211] ^ ff_input_D_OUT[147] ;
  assign ff_input_first__305_BIT_5_519_AND_NOT_ff_input_ETC___d3952 =
	     ff_input_D_OUT[5] && !ff_input_D_OUT[4] &&
	     getExp32_res_wget[23:16] == 8'd189 &&
	     final_result__h246355[62:0] == 63'h7FFFFFFFFFFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ;
  assign ff_input_first__305_BIT_5_519_AND_NOT_ff_input_ETC___d4115 =
	     ff_input_D_OUT[5] && !ff_input_D_OUT[4] &&
	     x__h250010[10:0] == 11'd62 &&
	     final_result__h249855[62:0] == 63'h7FFFFFFFFFFFFFFF &&
	     !ff_input_D_OUT[211] ;
  assign ff_input_first__305_BIT_5_519_AND_ff_input_fir_ETC___d3958 =
	     ff_input_D_OUT[5] && ff_input_D_OUT[4] &&
	     getExp32_res_wget[23:16] == 8'd190 &&
	     final_result__h246355 == 64'hFFFFFFFFFFFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ;
  assign ff_input_first__305_BIT_5_519_AND_ff_input_fir_ETC___d4120 =
	     ff_input_D_OUT[5] && ff_input_D_OUT[4] &&
	     x__h250010[10:0] == 11'd63 &&
	     final_result__h249855 == 64'hFFFFFFFFFFFFFFFF &&
	     !ff_input_D_OUT[211] ;
  assign fflags__h16346 = { 4'b0, lv_inexact__h16297 } ;
  assign fflags__h193908 =
	     { !inst_dpfm_add_sub_ff_stage5[10] &&
	       !inst_dpfm_add_sub_ff_stage5[9] &&
	       inst_dpfm_add_sub_ff_stage5[17],
	       1'b0,
	       _theResult_____1_snd_snd_fst__h194761,
	       _theResult_____1_fst__h194733,
	       _theResult_____1_snd_snd_snd__h194762 } ;
  assign fflags__h209755 = { 4'd0, inexact__h209751 } ;
  assign fflags__h215627 = { 4'd0, inexact__h215623 } ;
  assign fflags__h304978 =
	     { condFlags32_reswget_BITS_14_TO_10__q52[0] | y__h304992,
	       4'b0 } ;
  assign fflags__h315577 =
	     { condFlags64_reswget_BITS_14_TO_10__q31[0] | y__h315591,
	       4'b0 } ;
  assign fflags__h65510 =
	     { !inst_spfm_add_sub_ff_stage5[9] &&
	       !inst_spfm_add_sub_ff_stage5[8] &&
	       inst_spfm_add_sub_ff_stage5[16],
	       1'b0,
	       _theResult_____1_snd_snd_fst__h66363,
	       _theResult_____1_fst__h66335,
	       _theResult_____1_snd_snd_snd__h66364 } ;
  assign fflags__h89619 = { 4'b0, lv_inexact__h89570 } ;
  assign final_man__h246347 = { 64'd1, getMant32_res_wget[68:46] } ;
  assign final_man__h249847 = { 64'd1, getMant64_res_wget[155:104] } ;
  assign final_result___1__h246732 =
	     { {32{_1_CONCAT_getMant32_res_wget__849_BITS_68_TO_46_ETC__q48[31]}},
	       _1_CONCAT_getMant32_res_wget__849_BITS_68_TO_46_ETC__q48 } ;
  assign final_result___1__h246764 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
	       (lv_invalid__h246335 ? 64'hFFFFFFFFFFFFFFFF : 64'd0) :
	       64'hFFFFFFFFFFFFFFFF ;
  assign final_result___1__h246853 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
	       (lv_invalid__h246335 ?
		  64'h7FFFFFFFFFFFFFFF :
		  64'h8000000000000000) :
	       64'h7FFFFFFFFFFFFFFF ;
  assign final_result___1__h247395 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
	       (lv_invalid__h246335 ?
		  64'h000000007FFFFFFF :
		  64'hFFFFFFFF80000000) :
	       64'h000000007FFFFFFF ;
  assign final_result___1__h247994 =
	     { {32{final_result___247955_BITS_31_TO_0__q56[31]}},
	       final_result___247955_BITS_31_TO_0__q56 } ;
  assign final_result___1__h248024 =
	     { {32{final_result___247014_BITS_31_TO_0__q57[31]}},
	       final_result___247014_BITS_31_TO_0__q57 } ;
  assign final_result___1__h250254 =
	     { {32{_1_CONCAT_getMant64_res_wget__016_BITS_155_TO_1_ETC__q26[31]}},
	       _1_CONCAT_getMant64_res_wget__016_BITS_155_TO_1_ETC__q26 } ;
  assign final_result___1__h250286 =
	     ff_input_D_OUT[211] ?
	       (lv_invalid__h249834 ? 64'hFFFFFFFFFFFFFFFF : 64'd0) :
	       64'hFFFFFFFFFFFFFFFF ;
  assign final_result___1__h250375 =
	     ff_input_D_OUT[211] ?
	       (lv_invalid__h249834 ?
		  64'h7FFFFFFFFFFFFFFF :
		  64'h8000000000000000) :
	       64'h7FFFFFFFFFFFFFFF ;
  assign final_result___1__h250915 =
	     ff_input_D_OUT[211] ?
	       (lv_invalid__h249834 ?
		  64'h000000007FFFFFFF :
		  64'hFFFFFFFF80000000) :
	       64'h000000007FFFFFFF ;
  assign final_result___1__h251524 =
	     { {32{final_result___251485_BITS_31_TO_0__q35[31]}},
	       final_result___251485_BITS_31_TO_0__q35 } ;
  assign final_result___1__h251554 =
	     { {32{final_result___250535_BITS_31_TO_0__q36[31]}},
	       final_result___250535_BITS_31_TO_0__q36 } ;
  assign final_result___247014_BITS_31_TO_0__q57 =
	     final_result___2__h247014[31:0] ;
  assign final_result___247955_BITS_31_TO_0__q56 =
	     final_result___2__h247955[31:0] ;
  assign final_result___250535_BITS_31_TO_0__q36 =
	     final_result___2__h250535[31:0] ;
  assign final_result___251485_BITS_31_TO_0__q35 =
	     final_result___2__h251485[31:0] ;
  assign final_result___2__h247014 = ~final_result___3__h246966 + 64'd1 ;
  assign final_result___2__h247955 = final_result__h246355 + 64'd1 ;
  assign final_result___2__h250535 = ~final_result___3__h250488 + 64'd1 ;
  assign final_result___2__h251485 = final_result__h249855 + 64'd1 ;
  assign final_result___3__h246966 =
	     IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d3931 ?
	       _theResult_____2_snd__h247743 :
	       final_result__h246355 ;
  assign final_result___3__h250488 =
	     IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d4097 ?
	       _theResult_____2_snd__h251275 :
	       final_result__h249855 ;
  assign final_result__h16302 =
	     { inst_spfpu_sqrt_rg_inter_stage[58],
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__71__ETC__q3[7:0],
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__71__ETC__q4[24:2] } ;
  assign final_result__h246355 =
	     condFlags32_reswget_BITS_14_TO_10__q52[3] ?
	       64'd0 :
	       _theResult___snd_snd_snd_snd_fst__h247329 ;
  assign final_result__h249855 =
	     condFlags64_reswget_BITS_14_TO_10__q31[3] ?
	       64'd0 :
	       _theResult___snd_snd_snd_snd_fst__h250851 ;
  assign final_result__h265873 =
	     { {32{ff_inputD_OUT_BITS_179_TO_148__q1[31]}},
	       ff_inputD_OUT_BITS_179_TO_148__q1 } ;
  assign final_result__h265896 = { 32'hFFFFFFFF, ff_input_D_OUT[179:148] } ;
  assign final_result__h305153 = { ff_input_D_OUT[179], 31'd0 } ;
  assign final_result__h315752 = { ff_input_D_OUT[211], 63'd0 } ;
  assign final_result__h89575 =
	     { inst_dpfpu_sqrt_rg_inter_stage[116],
	       IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__773_ETC__q5[10:0],
	       IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__773_ETC__q6[53:2] } ;
  assign fman___1__h265662 = fman__h265560 + 24'd1 ;
  assign fman__h265560 =
	     { 1'd0,
	       IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4346[48:26] } ;
  assign getMant32_argwget_BITS_31_TO_0__q46 = getMant32_arg_wget[31:0] ;
  assign getMant32_argwget_BITS_63_TO_32__q45 = getMant32_arg_wget[63:32] ;
  assign getMant32_argwget_BITS_95_TO_64__q44 = getMant32_arg_wget[95:64] ;
  assign getMant32_reswget_BITS_45_TO_23__q54 = getMant32_res_wget[45:23] ;
  assign getMant32_reswget_BITS_68_TO_46__q47 = getMant32_res_wget[68:46] ;
  assign getMant64_argwget_BITS_127_TO_64__q23 = getMant64_arg_wget[127:64] ;
  assign getMant64_argwget_BITS_191_TO_128__q22 =
	     getMant64_arg_wget[191:128] ;
  assign getMant64_argwget_BITS_63_TO_0__q24 = getMant64_arg_wget[63:0] ;
  assign getMant64_reswget_BITS_103_TO_52__q33 = getMant64_res_wget[103:52] ;
  assign getMant64_reswget_BITS_155_TO_104__q25 =
	     getMant64_res_wget[155:104] ;
  assign inexact__h209751 = x__h209769 | _theResult____h209750 ;
  assign inexact__h215623 = x__h215641 | _theResult____h215622 ;
  assign inexact__h232375 = x__h232393 | _theResult____h232374 ;
  assign inp32___1__h227417 = ~ff_input_D_OUT[179:148] + 32'd1 ;
  assign inst_dpfm_add_sub_ff_input_register_read__852__ETC___d1856 =
	     inst_dpfm_add_sub_ff_input_register[94:82] - 13'd1023 ;
  assign inst_dpfm_add_sub_ff_input_register_read__852__ETC___d1857 =
	     (inst_dpfm_add_sub_ff_input_register_read__852__ETC___d1856 ^
	      13'h1000) <=
	     13'd5119 ;
  assign inst_dpfm_add_sub_ff_stage2_read__367_BIT_15_3_ETC___d2392 =
	     inst_dpfm_add_sub_ff_stage2[15] |
	     inst_dpfm_add_sub_ff_stage2[13] ;
  assign inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[171:2] ;
  assign inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q15 =
	     { inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[112:0],
	       1'd0 } +
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[169:114],
	       57'd0 } ;
  assign inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16 =
	     { inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[112:0],
	       1'd0 } -
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[169:114],
	       57'd0 } ;
  assign inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1441 =
	     inst_dpfpu_divider_rg_stage2[21:9] - 13'd1023 ;
  assign inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1442 =
	     (inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1441 ^
	      13'h1000) <=
	     13'd5120 ;
  assign inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1443 =
	     (inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1441 ^
	      13'h1000) <
	     13'd3020 ;
  assign inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21 =
	     inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] ;
  assign inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20 =
	     inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] ;
  assign inst_spfm_add_sub_ff_input_register_read__50_B_ETC___d454 =
	     inst_spfm_add_sub_ff_input_register[59:50] - 10'd127 ;
  assign inst_spfm_add_sub_ff_input_register_read__50_B_ETC___d455 =
	     (inst_spfm_add_sub_ff_input_register_read__50_B_ETC___d454 ^
	      10'h200) <=
	     10'd639 ;
  assign inst_spfm_add_sub_ff_stage2_read__33_BIT_15_56_ETC___d758 =
	     inst_spfm_add_sub_ff_stage2[15] |
	     inst_spfm_add_sub_ff_stage2[13] ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q10 =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[54:0],
	       1'd0 } -
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[82:56],
	       28'd0 } ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[84:2] ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9 =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[54:0],
	       1'd0 } +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[82:56],
	       28'd0 } ;
  assign inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d126 =
	     inst_spfpu_divider_rg_stage2[18:9] - 10'd127 ;
  assign inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d127 =
	     (inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d126 ^
	      10'h200) <=
	     10'd640 ;
  assign inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d128 =
	     (inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d126 ^
	      10'h200) <
	     10'd361 ;
  assign local_expo___1__h215449 = expo__h209740 + 8'd1 ;
  assign local_expo___1__h226524 = expo__h215612 + 8'd1 ;
  assign local_expo___1__h243059 = expo__h226917 + 11'd1 ;
  assign lsb_zeros__h107915 =
	     lv_product_mantissa__h107911[0] ?
	       7'd0 :
	       (lv_product_mantissa__h107911[1] ?
		  7'd1 :
		  (lv_product_mantissa__h107911[2] ?
		     7'd2 :
		     (lv_product_mantissa__h107911[3] ?
			7'd3 :
			(lv_product_mantissa__h107911[4] ?
			   7'd4 :
			   (lv_product_mantissa__h107911[5] ?
			      7'd5 :
			      (lv_product_mantissa__h107911[6] ?
				 7'd6 :
				 (lv_product_mantissa__h107911[7] ?
				    7'd7 :
				    (lv_product_mantissa__h107911[8] ?
				       7'd8 :
				       (lv_product_mantissa__h107911[9] ?
					  7'd9 :
					  (lv_product_mantissa__h107911[10] ?
					     7'd10 :
					     (lv_product_mantissa__h107911[11] ?
						7'd11 :
						(lv_product_mantissa__h107911[12] ?
						   7'd12 :
						   (lv_product_mantissa__h107911[13] ?
						      7'd13 :
						      (lv_product_mantissa__h107911[14] ?
							 7'd14 :
							 (lv_product_mantissa__h107911[15] ?
							    7'd15 :
							    (lv_product_mantissa__h107911[16] ?
							       7'd16 :
							       (lv_product_mantissa__h107911[17] ?
								  7'd17 :
								  (lv_product_mantissa__h107911[18] ?
								     7'd18 :
								     (lv_product_mantissa__h107911[19] ?
									7'd19 :
									(lv_product_mantissa__h107911[20] ?
									   7'd20 :
									   (lv_product_mantissa__h107911[21] ?
									      7'd21 :
									      (lv_product_mantissa__h107911[22] ?
										 7'd22 :
										 (lv_product_mantissa__h107911[23] ?
										    7'd23 :
										    (lv_product_mantissa__h107911[24] ?
										       7'd24 :
										       (lv_product_mantissa__h107911[25] ?
											  7'd25 :
											  (lv_product_mantissa__h107911[26] ?
											     7'd26 :
											     (lv_product_mantissa__h107911[27] ?
												7'd27 :
												(lv_product_mantissa__h107911[28] ?
												   7'd28 :
												   (lv_product_mantissa__h107911[29] ?
												      7'd29 :
												      (lv_product_mantissa__h107911[30] ?
													 7'd30 :
													 (lv_product_mantissa__h107911[31] ?
													    7'd31 :
													    (lv_product_mantissa__h107911[32] ?
													       7'd32 :
													       (lv_product_mantissa__h107911[33] ?
														  7'd33 :
														  (lv_product_mantissa__h107911[34] ?
														     7'd34 :
														     (lv_product_mantissa__h107911[35] ?
															7'd35 :
															(lv_product_mantissa__h107911[36] ?
															   7'd36 :
															   (lv_product_mantissa__h107911[37] ?
															      7'd37 :
															      (lv_product_mantissa__h107911[38] ?
																 7'd38 :
																 (lv_product_mantissa__h107911[39] ?
																    7'd39 :
																    (lv_product_mantissa__h107911[40] ?
																       7'd40 :
																       (lv_product_mantissa__h107911[41] ?
																	  7'd41 :
																	  (lv_product_mantissa__h107911[42] ?
																	     7'd42 :
																	     (lv_product_mantissa__h107911[43] ?
																		7'd43 :
																		(lv_product_mantissa__h107911[44] ?
																		   7'd44 :
																		   (lv_product_mantissa__h107911[45] ?
																		      7'd45 :
																		      (lv_product_mantissa__h107911[46] ?
																			 7'd46 :
																			 (lv_product_mantissa__h107911[47] ?
																			    7'd47 :
																			    (lv_product_mantissa__h107911[48] ?
																			       7'd48 :
																			       (lv_product_mantissa__h107911[49] ?
																				  7'd49 :
																				  (lv_product_mantissa__h107911[50] ?
																				     7'd50 :
																				     (lv_product_mantissa__h107911[51] ?
																					7'd51 :
																					(lv_product_mantissa__h107911[52] ?
																					   7'd52 :
																					   (lv_product_mantissa__h107911[53] ?
																					      7'd53 :
																					      (lv_product_mantissa__h107911[54] ?
																						 7'd54 :
																						 (lv_product_mantissa__h107911[55] ?
																						    7'd55 :
																						    (lv_product_mantissa__h107911[56] ?
																						       7'd56 :
																						       (lv_product_mantissa__h107911[57] ?
																							  7'd57 :
																							  (lv_product_mantissa__h107911[58] ?
																							     7'd58 :
																							     (lv_product_mantissa__h107911[59] ?
																								7'd59 :
																								(lv_product_mantissa__h107911[60] ?
																								   7'd60 :
																								   (lv_product_mantissa__h107911[61] ?
																								      7'd61 :
																								      (lv_product_mantissa__h107911[62] ?
																									 7'd62 :
																									 (lv_product_mantissa__h107911[63] ?
																									    7'd63 :
																									    (lv_product_mantissa__h107911[64] ?
																									       7'd64 :
																									       (lv_product_mantissa__h107911[65] ?
																										  7'd65 :
																										  (lv_product_mantissa__h107911[66] ?
																										     7'd66 :
																										     (lv_product_mantissa__h107911[67] ?
																											7'd67 :
																											(lv_product_mantissa__h107911[68] ?
																											   7'd68 :
																											   (lv_product_mantissa__h107911[69] ?
																											      7'd69 :
																											      (lv_product_mantissa__h107911[70] ?
																												 7'd70 :
																												 (lv_product_mantissa__h107911[71] ?
																												    7'd71 :
																												    (lv_product_mantissa__h107911[72] ?
																												       7'd72 :
																												       (lv_product_mantissa__h107911[73] ?
																													  7'd73 :
																													  (lv_product_mantissa__h107911[74] ?
																													     7'd74 :
																													     (lv_product_mantissa__h107911[75] ?
																														7'd75 :
																														(lv_product_mantissa__h107911[76] ?
																														   7'd76 :
																														   (lv_product_mantissa__h107911[77] ?
																														      7'd77 :
																														      (lv_product_mantissa__h107911[78] ?
																															 7'd78 :
																															 (lv_product_mantissa__h107911[79] ?
																															    7'd79 :
																															    (lv_product_mantissa__h107911[80] ?
																															       7'd80 :
																															       (lv_product_mantissa__h107911[81] ?
																																  7'd81 :
																																  (lv_product_mantissa__h107911[82] ?
																																     7'd82 :
																																     (lv_product_mantissa__h107911[83] ?
																																	7'd83 :
																																	(lv_product_mantissa__h107911[84] ?
																																	   7'd84 :
																																	   (lv_product_mantissa__h107911[85] ?
																																	      7'd85 :
																																	      (lv_product_mantissa__h107911[86] ?
																																		 7'd86 :
																																		 (lv_product_mantissa__h107911[87] ?
																																		    7'd87 :
																																		    (lv_product_mantissa__h107911[88] ?
																																		       7'd88 :
																																		       (lv_product_mantissa__h107911[89] ?
																																			  7'd89 :
																																			  (lv_product_mantissa__h107911[90] ?
																																			     7'd90 :
																																			     (lv_product_mantissa__h107911[91] ?
																																				7'd91 :
																																				(lv_product_mantissa__h107911[92] ?
																																				   7'd92 :
																																				   (lv_product_mantissa__h107911[93] ?
																																				      7'd93 :
																																				      (lv_product_mantissa__h107911[94] ?
																																					 7'd94 :
																																					 (lv_product_mantissa__h107911[95] ?
																																					    7'd95 :
																																					    (lv_product_mantissa__h107911[96] ?
																																					       7'd96 :
																																					       (lv_product_mantissa__h107911[97] ?
																																						  7'd97 :
																																						  (lv_product_mantissa__h107911[98] ?
																																						     7'd98 :
																																						     (lv_product_mantissa__h107911[99] ?
																																							7'd99 :
																																							(lv_product_mantissa__h107911[100] ?
																																							   7'd100 :
																																							   (lv_product_mantissa__h107911[101] ?
																																							      7'd101 :
																																							      (lv_product_mantissa__h107911[102] ?
																																								 7'd102 :
																																								 (lv_product_mantissa__h107911[103] ?
																																								    7'd103 :
																																								    (lv_product_mantissa__h107911[104] ?
																																								       7'd104 :
																																								       (lv_product_mantissa__h107911[105] ?
																																									  7'd105 :
																																									  (lv_product_mantissa__h107911[106] ?
																																									     7'd106 :
																																									     7'd107)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lsb_zeros__h25308 =
	     lv_product_mantissa__h25304[0] ?
	       6'd0 :
	       (lv_product_mantissa__h25304[1] ?
		  6'd1 :
		  (lv_product_mantissa__h25304[2] ?
		     6'd2 :
		     (lv_product_mantissa__h25304[3] ?
			6'd3 :
			(lv_product_mantissa__h25304[4] ?
			   6'd4 :
			   (lv_product_mantissa__h25304[5] ?
			      6'd5 :
			      (lv_product_mantissa__h25304[6] ?
				 6'd6 :
				 (lv_product_mantissa__h25304[7] ?
				    6'd7 :
				    (lv_product_mantissa__h25304[8] ?
				       6'd8 :
				       (lv_product_mantissa__h25304[9] ?
					  6'd9 :
					  (lv_product_mantissa__h25304[10] ?
					     6'd10 :
					     (lv_product_mantissa__h25304[11] ?
						6'd11 :
						(lv_product_mantissa__h25304[12] ?
						   6'd12 :
						   (lv_product_mantissa__h25304[13] ?
						      6'd13 :
						      (lv_product_mantissa__h25304[14] ?
							 6'd14 :
							 (lv_product_mantissa__h25304[15] ?
							    6'd15 :
							    (lv_product_mantissa__h25304[16] ?
							       6'd16 :
							       (lv_product_mantissa__h25304[17] ?
								  6'd17 :
								  (lv_product_mantissa__h25304[18] ?
								     6'd18 :
								     (lv_product_mantissa__h25304[19] ?
									6'd19 :
									(lv_product_mantissa__h25304[20] ?
									   6'd20 :
									   (lv_product_mantissa__h25304[21] ?
									      6'd21 :
									      (lv_product_mantissa__h25304[22] ?
										 6'd22 :
										 (lv_product_mantissa__h25304[23] ?
										    6'd23 :
										    (lv_product_mantissa__h25304[24] ?
										       6'd24 :
										       (lv_product_mantissa__h25304[25] ?
											  6'd25 :
											  (lv_product_mantissa__h25304[26] ?
											     6'd26 :
											     (lv_product_mantissa__h25304[27] ?
												6'd27 :
												(lv_product_mantissa__h25304[28] ?
												   6'd28 :
												   (lv_product_mantissa__h25304[29] ?
												      6'd29 :
												      (lv_product_mantissa__h25304[30] ?
													 6'd30 :
													 (lv_product_mantissa__h25304[31] ?
													    6'd31 :
													    (lv_product_mantissa__h25304[32] ?
													       6'd32 :
													       (lv_product_mantissa__h25304[33] ?
														  6'd33 :
														  (lv_product_mantissa__h25304[34] ?
														     6'd34 :
														     (lv_product_mantissa__h25304[35] ?
															6'd35 :
															(lv_product_mantissa__h25304[36] ?
															   6'd36 :
															   (lv_product_mantissa__h25304[37] ?
															      6'd37 :
															      (lv_product_mantissa__h25304[38] ?
																 6'd38 :
																 (lv_product_mantissa__h25304[39] ?
																    6'd39 :
																    (lv_product_mantissa__h25304[40] ?
																       6'd40 :
																       (lv_product_mantissa__h25304[41] ?
																	  6'd41 :
																	  (lv_product_mantissa__h25304[42] ?
																	     6'd42 :
																	     (lv_product_mantissa__h25304[43] ?
																		6'd43 :
																		(lv_product_mantissa__h25304[44] ?
																		   6'd44 :
																		   (lv_product_mantissa__h25304[45] ?
																		      6'd45 :
																		      (lv_product_mantissa__h25304[46] ?
																			 6'd46 :
																			 (lv_product_mantissa__h25304[47] ?
																			    6'd47 :
																			    (lv_product_mantissa__h25304[48] ?
																			       6'd48 :
																			       6'd49)))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lsb_zeros__h6977 =
	     x_wget__h658[0] ?
	       5'd0 :
	       (x_wget__h658[1] ?
		  5'd1 :
		  (x_wget__h658[2] ?
		     5'd2 :
		     (x_wget__h658[3] ?
			5'd3 :
			(x_wget__h658[4] ?
			   5'd4 :
			   (x_wget__h658[5] ?
			      5'd5 :
			      (x_wget__h658[6] ?
				 5'd6 :
				 (x_wget__h658[7] ?
				    5'd7 :
				    (x_wget__h658[8] ?
				       5'd8 :
				       (x_wget__h658[9] ?
					  5'd9 :
					  (x_wget__h658[10] ?
					     5'd10 :
					     (x_wget__h658[11] ?
						5'd11 :
						(x_wget__h658[12] ?
						   5'd12 :
						   (x_wget__h658[13] ?
						      5'd13 :
						      (x_wget__h658[14] ?
							 5'd14 :
							 (x_wget__h658[15] ?
							    5'd15 :
							    (x_wget__h658[16] ?
							       5'd16 :
							       (x_wget__h658[17] ?
								  5'd17 :
								  (x_wget__h658[18] ?
								     5'd18 :
								     (x_wget__h658[19] ?
									5'd19 :
									(x_wget__h658[20] ?
									   5'd20 :
									   (x_wget__h658[21] ?
									      5'd21 :
									      (x_wget__h658[22] ?
										 5'd22 :
										 (x_wget__h658[23] ?
										    5'd23 :
										    (x_wget__h658[24] ?
										       5'd24 :
										       (x_wget__h658[25] ?
											  5'd25 :
											  (x_wget__h658[26] ?
											     5'd26 :
											     5'd27)))))))))))))))))))))))))) ;
  assign lsb_zeros__h73030 =
	     x_wget__h66738[0] ?
	       6'd0 :
	       (x_wget__h66738[1] ?
		  6'd1 :
		  (x_wget__h66738[2] ?
		     6'd2 :
		     (x_wget__h66738[3] ?
			6'd3 :
			(x_wget__h66738[4] ?
			   6'd4 :
			   (x_wget__h66738[5] ?
			      6'd5 :
			      (x_wget__h66738[6] ?
				 6'd6 :
				 (x_wget__h66738[7] ?
				    6'd7 :
				    (x_wget__h66738[8] ?
				       6'd8 :
				       (x_wget__h66738[9] ?
					  6'd9 :
					  (x_wget__h66738[10] ?
					     6'd10 :
					     (x_wget__h66738[11] ?
						6'd11 :
						(x_wget__h66738[12] ?
						   6'd12 :
						   (x_wget__h66738[13] ?
						      6'd13 :
						      (x_wget__h66738[14] ?
							 6'd14 :
							 (x_wget__h66738[15] ?
							    6'd15 :
							    (x_wget__h66738[16] ?
							       6'd16 :
							       (x_wget__h66738[17] ?
								  6'd17 :
								  (x_wget__h66738[18] ?
								     6'd18 :
								     (x_wget__h66738[19] ?
									6'd19 :
									(x_wget__h66738[20] ?
									   6'd20 :
									   (x_wget__h66738[21] ?
									      6'd21 :
									      (x_wget__h66738[22] ?
										 6'd22 :
										 (x_wget__h66738[23] ?
										    6'd23 :
										    (x_wget__h66738[24] ?
										       6'd24 :
										       (x_wget__h66738[25] ?
											  6'd25 :
											  (x_wget__h66738[26] ?
											     6'd26 :
											     (x_wget__h66738[27] ?
												6'd27 :
												(x_wget__h66738[28] ?
												   6'd28 :
												   (x_wget__h66738[29] ?
												      6'd29 :
												      (x_wget__h66738[30] ?
													 6'd30 :
													 (x_wget__h66738[31] ?
													    6'd31 :
													    (x_wget__h66738[32] ?
													       6'd32 :
													       (x_wget__h66738[33] ?
														  6'd33 :
														  (x_wget__h66738[34] ?
														     6'd34 :
														     (x_wget__h66738[35] ?
															6'd35 :
															(x_wget__h66738[36] ?
															   6'd36 :
															   (x_wget__h66738[37] ?
															      6'd37 :
															      (x_wget__h66738[38] ?
																 6'd38 :
																 (x_wget__h66738[39] ?
																    6'd39 :
																    (x_wget__h66738[40] ?
																       6'd40 :
																       (x_wget__h66738[41] ?
																	  6'd41 :
																	  (x_wget__h66738[42] ?
																	     6'd42 :
																	     (x_wget__h66738[43] ?
																		6'd43 :
																		(x_wget__h66738[44] ?
																		   6'd44 :
																		   (x_wget__h66738[45] ?
																		      6'd45 :
																		      (x_wget__h66738[46] ?
																			 6'd46 :
																			 (x_wget__h66738[47] ?
																			    6'd47 :
																			    (x_wget__h66738[48] ?
																			       6'd48 :
																			       (x_wget__h66738[49] ?
																				  6'd49 :
																				  (x_wget__h66738[50] ?
																				     6'd50 :
																				     (x_wget__h66738[51] ?
																					6'd51 :
																					(x_wget__h66738[52] ?
																					   6'd52 :
																					   (x_wget__h66738[53] ?
																					      6'd53 :
																					      (x_wget__h66738[54] ?
																						 6'd54 :
																						 (x_wget__h66738[55] ?
																						    6'd55 :
																						    6'd56))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_compare_result__h199477 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
	       (setCanonicalNaN_reswget_BITS_63_TO_32__q42[31] ?
		  { _theResult____h199806[0], _theResult____h199806[1] } :
		  2'b01) :
	       (setCanonicalNaN_reswget_BITS_63_TO_32__q42[31] ?
		  2'b10 :
		  _theResult____h199806) ;
  assign lv_compare_result__h202542 =
	     ff_input_D_OUT[211] ?
	       (ff_input_D_OUT[147] ?
		  { _theResult____h202839[0], _theResult____h202839[1] } :
		  2'b01) :
	       (ff_input_D_OUT[147] ? 2'b10 : _theResult____h202839) ;
  assign lv_exp__h249844 = { 1'b0, getExp64_res_wget[32:22] } ;
  assign lv_exponent___1__h14567 =
	     inst_spfpu_divider_rg_stage3[22:13] + 10'd1 ;
  assign lv_exponent___1__h14577 = lv_exponent__h14119 + 10'd1 ;
  assign lv_exponent___1__h87841 =
	     inst_dpfpu_divider_rg_stage3[25:13] + 13'd1 ;
  assign lv_exponent___1__h87851 = lv_exponent__h87393 + 13'd1 ;
  assign lv_exponent__h14119 =
	     _theResult_____4__h14117[24] ?
	       lv_exponent___1__h14567 :
	       inst_spfpu_divider_rg_stage3[22:13] ;
  assign lv_exponent__h274455 = 10'd127 + y__h274531 ;
  assign lv_exponent__h284379 = 13'd1023 + y__h284455 ;
  assign lv_exponent__h87393 =
	     _theResult_____4__h87391[53] ?
	       lv_exponent___1__h87841 :
	       inst_dpfpu_divider_rg_stage3[25:13] ;
  assign lv_exponent_inc_shift__h6979 =
	     inst_spfpu_divider_rg_stage2[18:9] +
	     _1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d129 ;
  assign lv_exponent_inc_shift__h73032 =
	     inst_dpfpu_divider_rg_stage2[21:9] +
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_439_BITS__ETC___d1444 ;
  assign lv_exponent_sub_shift__h6982 =
	     inst_spfpu_divider_rg_stage2[18:9] - shift_neg__h6980 ;
  assign lv_exponent_sub_shift__h73035 =
	     inst_dpfpu_divider_rg_stage2[21:9] - shift_neg__h73033 ;
  assign lv_exponent_sub_zerosMSB__h6984 =
	     inst_spfpu_divider_rg_stage2[18:9] - { 5'd0, msb_zeros__h6820 } ;
  assign lv_exponent_sub_zerosMSB__h73037 =
	     inst_dpfpu_divider_rg_stage2[21:9] -
	     { 7'd0, msb_zeros__h72873 } ;
  assign lv_extended_mantissa___1__h16788 =
	     lv_extended_mantissa__h16298 + 27'h0000004 ;
  assign lv_extended_mantissa___1__h90061 =
	     lv_extended_mantissa__h89571 + 56'h00000000000004 ;
  assign lv_extended_mantissa__h16298 = { 1'b0, result_mantissa__h16289 } ;
  assign lv_extended_mantissa__h89571 = { 1'b0, result_mantissa__h89562 } ;
  assign lv_final_output__h14219 =
	     { inst_spfpu_divider_rg_stage3[12], 31'h7F800000 } ;
  assign lv_final_output__h87493 =
	     { inst_dpfpu_divider_rg_stage3[12], 63'h7FF0000000000000 } ;
  assign lv_inexact1__h246360 = x__h247717 | lv_sticky__h246358 ;
  assign lv_inexact1__h249860 = x__h251249 | lv_sticky__h249858 ;
  assign lv_inexact___1__h246963 =
	     lv_inexact__h246353 | lv_inexact1__h246360 ;
  assign lv_inexact___1__h250485 =
	     lv_inexact__h249853 | lv_inexact1__h249860 ;
  assign lv_inexact__h16297 = x__h16775 | lv_sticky__h16295 ;
  assign lv_inexact__h193885 = x__h194501 | lv_sticky__h193883 ;
  assign lv_inexact__h246353 =
	     !condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	     IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d4234 ;
  assign lv_inexact__h249853 =
	     !condFlags64_reswget_BITS_14_TO_10__q31[3] &&
	     IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d4259 ;
  assign lv_inexact__h65487 = x__h66103 | lv_sticky__h65485 ;
  assign lv_inexact__h89570 = x__h90048 | lv_sticky__h89568 ;
  assign lv_invalid___2__h246965 =
	     IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d3931 ?
	       _theResult_____2_fst__h247742 :
	       lv_invalid__h246351 ;
  assign lv_invalid___2__h250487 =
	     IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d4097 ?
	       _theResult_____2_fst__h251274 :
	       lv_invalid__h249851 ;
  assign lv_invalid__h246335 =
	     condFlags32_reswget_BITS_14_TO_10__q52[0] |
	     condFlags32_reswget_BITS_14_TO_10__q52[2] ;
  assign lv_invalid__h246351 =
	     condFlags32_reswget_BITS_14_TO_10__q52[3] ?
	       lv_invalid__h246335 :
	       _theResult___snd_fst__h246590 ;
  assign lv_invalid__h246362 =
	     (!condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	      NOT_IF_condFlags32_res_whas__339_THEN_condFlag_ETC___d3841) ?
	       _theResult_____3_fst__h246968 :
	       lv_invalid__h246351 ;
  assign lv_invalid__h249834 =
	     condFlags64_reswget_BITS_14_TO_10__q31[0] |
	     condFlags64_reswget_BITS_14_TO_10__q31[2] ;
  assign lv_invalid__h249851 =
	     condFlags64_reswget_BITS_14_TO_10__q31[3] ?
	       lv_invalid__h249834 :
	       _theResult___snd_fst__h250094 ;
  assign lv_invalid__h249862 =
	     (!condFlags64_reswget_BITS_14_TO_10__q31[3] &&
	      NOT_IF_condFlags64_res_whas__424_THEN_condFlag_ETC___d4009) ?
	       _theResult_____3_fst__h250490 :
	       lv_invalid__h249851 ;
  assign lv_leading_zeros__h304718 =
	     IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d5752[1] ?
	       6'd0 :
	       (IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d5752[0] ?
		  6'd1 :
		  (getMant32_res_wget[68] ?
		     6'd2 :
		     (getMant32_res_wget[67] ?
			6'd3 :
			(getMant32_res_wget[66] ?
			   6'd4 :
			   (getMant32_res_wget[65] ?
			      6'd5 :
			      (getMant32_res_wget[64] ?
				 6'd6 :
				 (getMant32_res_wget[63] ?
				    6'd7 :
				    (getMant32_res_wget[62] ?
				       6'd8 :
				       (getMant32_res_wget[61] ?
					  6'd9 :
					  (getMant32_res_wget[60] ?
					     6'd10 :
					     (getMant32_res_wget[59] ?
						6'd11 :
						(getMant32_res_wget[58] ?
						   6'd12 :
						   (getMant32_res_wget[57] ?
						      6'd13 :
						      (getMant32_res_wget[56] ?
							 6'd14 :
							 (getMant32_res_wget[55] ?
							    6'd15 :
							    (getMant32_res_wget[54] ?
							       6'd16 :
							       (getMant32_res_wget[53] ?
								  6'd17 :
								  (getMant32_res_wget[52] ?
								     6'd18 :
								     (getMant32_res_wget[51] ?
									6'd19 :
									(getMant32_res_wget[50] ?
									   6'd20 :
									   (getMant32_res_wget[49] ?
									      6'd21 :
									      (getMant32_res_wget[48] ?
										 6'd22 :
										 (getMant32_res_wget[47] ?
										    6'd23 :
										    (getMant32_res_wget[46] ?
										       6'd24 :
										       6'd52)))))))))))))))))))))))) ;
  assign lv_leading_zeros__h315318 =
	     IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d5870[1] ?
	       7'd0 :
	       (IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d5870[0] ?
		  7'd1 :
		  (getMant64_res_wget[155] ?
		     7'd2 :
		     (getMant64_res_wget[154] ?
			7'd3 :
			(getMant64_res_wget[153] ?
			   7'd4 :
			   (getMant64_res_wget[152] ?
			      7'd5 :
			      (getMant64_res_wget[151] ?
				 7'd6 :
				 (getMant64_res_wget[150] ?
				    7'd7 :
				    (getMant64_res_wget[149] ?
				       7'd8 :
				       (getMant64_res_wget[148] ?
					  7'd9 :
					  (getMant64_res_wget[147] ?
					     7'd10 :
					     (getMant64_res_wget[146] ?
						7'd11 :
						(getMant64_res_wget[145] ?
						   7'd12 :
						   (getMant64_res_wget[144] ?
						      7'd13 :
						      (getMant64_res_wget[143] ?
							 7'd14 :
							 (getMant64_res_wget[142] ?
							    7'd15 :
							    (getMant64_res_wget[141] ?
							       7'd16 :
							       (getMant64_res_wget[140] ?
								  7'd17 :
								  (getMant64_res_wget[139] ?
								     7'd18 :
								     (getMant64_res_wget[138] ?
									7'd19 :
									(getMant64_res_wget[137] ?
									   7'd20 :
									   (getMant64_res_wget[136] ?
									      7'd21 :
									      (getMant64_res_wget[135] ?
										 7'd22 :
										 (getMant64_res_wget[134] ?
										    7'd23 :
										    (getMant64_res_wget[133] ?
										       7'd24 :
										       (getMant64_res_wget[132] ?
											  7'd25 :
											  (getMant64_res_wget[131] ?
											     7'd26 :
											     (getMant64_res_wget[130] ?
												7'd27 :
												(getMant64_res_wget[129] ?
												   7'd28 :
												   (getMant64_res_wget[128] ?
												      7'd29 :
												      (getMant64_res_wget[127] ?
													 7'd30 :
													 (getMant64_res_wget[126] ?
													    7'd31 :
													    (getMant64_res_wget[125] ?
													       7'd32 :
													       (getMant64_res_wget[124] ?
														  7'd33 :
														  (getMant64_res_wget[123] ?
														     7'd34 :
														     (getMant64_res_wget[122] ?
															7'd35 :
															(getMant64_res_wget[121] ?
															   7'd36 :
															   (getMant64_res_wget[120] ?
															      7'd37 :
															      (getMant64_res_wget[119] ?
																 7'd38 :
																 (getMant64_res_wget[118] ?
																    7'd39 :
																    (getMant64_res_wget[117] ?
																       7'd40 :
																       (getMant64_res_wget[116] ?
																	  7'd41 :
																	  (getMant64_res_wget[115] ?
																	     7'd42 :
																	     (getMant64_res_wget[114] ?
																		7'd43 :
																		(getMant64_res_wget[113] ?
																		   7'd44 :
																		   (getMant64_res_wget[112] ?
																		      7'd45 :
																		      (getMant64_res_wget[111] ?
																			 7'd46 :
																			 (getMant64_res_wget[110] ?
																			    7'd47 :
																			    (getMant64_res_wget[109] ?
																			       7'd48 :
																			       (getMant64_res_wget[108] ?
																				  7'd49 :
																				  (getMant64_res_wget[107] ?
																				     7'd50 :
																				     (getMant64_res_wget[106] ?
																					7'd51 :
																					(getMant64_res_wget[105] ?
																					   7'd52 :
																					   (getMant64_res_wget[104] ?
																					      7'd53 :
																					      7'd110))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_man___1__h215424 = lv_man__h209753 + 25'd1 ;
  assign lv_man___1__h226499 = lv_man__h215625 + 25'd1 ;
  assign lv_man___1__h243036 = lv_man__h232377 + 54'd1 ;
  assign lv_man__h209753 =
	     { 2'b0,
	       IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5142[30:8] } ;
  assign lv_man__h215625 =
	     { 2'b0,
	       IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5018[62:40] } ;
  assign lv_man__h232377 =
	     { 2'b0,
	       IF_NOT_ff_input_first__305_BIT_4_530_544_AND_f_ETC___d3678[62:11] } ;
  assign lv_minuend__h118012 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__367_BIT_5_ETC___d2384 ?
	       exponent3__h117993 :
	       exponent2__h118002 ;
  assign lv_minuend__h30243 =
	     IF_inst_spfm_add_sub_ff_stage2_read__33_BIT_5__ETC___d750 ?
	       exponent3__h30224 :
	       exponent2__h30233 ;
  assign lv_op1_subnormal__h268299 =
	     condFlags32_reswget_BITS_14_TO_10__q52[4] |
	     condFlags32_reswget_BITS_14_TO_10__q52[3] ;
  assign lv_op1_subnormal__h270909 =
	     condFlags64_reswget_BITS_14_TO_10__q31[4] |
	     condFlags64_reswget_BITS_14_TO_10__q31[3] ;
  assign lv_op2_Nan__h199473 =
	     condFlags32_reswget_BITS_9_TO_5__q53[2] |
	     condFlags32_reswget_BITS_9_TO_5__q53[0] ;
  assign lv_op2_Nan__h202538 =
	     condFlags64_reswget_BITS_9_TO_5__q32[2] |
	     condFlags64_reswget_BITS_9_TO_5__q32[0] ;
  assign lv_op2_subnormal__h268300 =
	     condFlags32_reswget_BITS_9_TO_5__q53[4] |
	     condFlags32_reswget_BITS_9_TO_5__q53[3] ;
  assign lv_op2_subnormal__h270910 =
	     condFlags64_reswget_BITS_9_TO_5__q32[4] |
	     condFlags64_reswget_BITS_9_TO_5__q32[3] ;
  assign lv_product_exponent___1__h107942 =
	     inst_dpfm_add_sub_ff_input_register[94:82] + 13'd1 ;
  assign lv_product_exponent___1__h25335 =
	     inst_spfm_add_sub_ff_input_register[59:50] + 10'd1 ;
  assign lv_product_exponent__h107909 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       lv_product_exponent___1__h107942 :
	       inst_dpfm_add_sub_ff_input_register[94:82] ;
  assign lv_product_exponent__h25302 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       lv_product_exponent___1__h25335 :
	       inst_spfm_add_sub_ff_input_register[59:50] ;
  assign lv_product_exponent_inc_shift__h107917 =
	     lv_product_exponent__h107909 +
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1865 ;
  assign lv_product_exponent_inc_shift__h25310 =
	     lv_product_exponent__h25302 +
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d463 ;
  assign lv_product_exponent_sub_shift__h107920 =
	     lv_product_exponent__h107909 - shift_neg__h107918 ;
  assign lv_product_exponent_sub_shift__h25313 =
	     lv_product_exponent__h25302 - shift_neg__h25311 ;
  assign lv_product_exponent_sub_zerosMSB__h107922 =
	     lv_product_exponent__h107909 - y__h108004 ;
  assign lv_product_exponent_sub_zerosMSB__h25315 =
	     lv_product_exponent__h25302 - y__h25397 ;
  assign lv_product_mantissa___1__h107941 =
	     { 1'd0, inst_dpfm_add_sub_ff_input_register[200:95] } ;
  assign lv_product_mantissa___1__h107956 =
	     { IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2103[106:1],
	       IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2324 } ;
  assign lv_product_mantissa___1__h25334 =
	     { 1'd0, inst_spfm_add_sub_ff_input_register[107:60] } ;
  assign lv_product_mantissa___1__h25349 =
	     { IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d585[48:1],
	       IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d690 } ;
  assign lv_product_mantissa__h107911 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       lv_product_mantissa___1__h107941 :
	       lv_product_mantissa__h90461 ;
  assign lv_product_mantissa__h17192 =
	     { inst_spfm_add_sub_ff_input_register[107:60], 1'b0 } ;
  assign lv_product_mantissa__h25304 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       lv_product_mantissa___1__h25334 :
	       lv_product_mantissa__h17192 ;
  assign lv_product_mantissa__h90461 =
	     { inst_dpfm_add_sub_ff_input_register[200:95], 1'b0 } ;
  assign lv_product_mantissa_shiftL_expo__h107919 =
	     lv_product_mantissa__h107911 << shift_neg__h107918 ;
  assign lv_product_mantissa_shiftL_expo__h25312 =
	     lv_product_mantissa__h25304 << shift_neg__h25311 ;
  assign lv_product_mantissa_shiftL_zerosMSB__h107921 =
	     lv_product_mantissa__h107911 << x__h107979 ;
  assign lv_product_mantissa_shiftL_zerosMSB__h25314 =
	     lv_product_mantissa__h25304 << x__h25372 ;
  assign lv_product_underflow__h193902 =
	     inst_dpfm_add_sub_ff_stage5[17] ?
	       _theResult_____6__h193886 :
	       _theResult_____3_fst__h194006 ;
  assign lv_product_underflow__h65504 =
	     inst_spfm_add_sub_ff_stage5[16] ?
	       _theResult_____6__h65488 :
	       _theResult_____3_fst__h65608 ;
  assign lv_quotient___1__h7005 =
	     { IF_inst_spfpu_divider_int_div_wr_final_out_wha_ETC___d196[26:1],
	       lv_sticky___1__h7006 } ;
  assign lv_quotient___1__h73058 =
	     { IF_inst_dpfpu_divider_int_div_wr_final_out_wha_ETC___d1569[55:1],
	       lv_sticky___1__h73059 } ;
  assign lv_quotient_shiftL_expo__h6981 =
	     x_wget__h658[26:0] << shift_neg__h6980 ;
  assign lv_quotient_shiftL_expo__h73034 =
	     x_wget__h66738[55:0] << shift_neg__h73033 ;
  assign lv_quotient_shiftL_zerosMSB__h6983 =
	     x_wget__h658[26:0] << msb_zeros__h6820 ;
  assign lv_quotient_shiftL_zerosMSB__h73036 =
	     x_wget__h66738[55:0] << msb_zeros__h72873 ;
  assign lv_remainder__h16069 =
	     lv_remainder_temp__h15950 + lv_root_temp_1__h15951 ;
  assign lv_remainder__h16159 =
	     lv_remainder_temp__h15950 - lv_root_temp_2__h15952 ;
  assign lv_remainder__h16723 = _theResult____h15953 + lv_root_rem__h16290 ;
  assign lv_remainder__h89342 =
	     lv_remainder_temp__h89223 + lv_root_temp_1__h89224 ;
  assign lv_remainder__h89432 =
	     lv_remainder_temp__h89223 - lv_root_temp_2__h89225 ;
  assign lv_remainder__h89996 = _theResult____h89226 + lv_root_rem__h89563 ;
  assign lv_remainder_temp__h15950 =
	     { inst_spfpu_sqrt_rg_inter_stage[55:29],
	       inst_spfpu_sqrt_rg_inter_stage[145:144] } ;
  assign lv_remainder_temp__h89223 =
	     { inst_dpfpu_sqrt_rg_inter_stage[113:58],
	       inst_dpfpu_sqrt_rg_inter_stage[293:292] } ;
  assign lv_result__h200251 =
	     { or_sign__h199474,
	       setCanonicalNaN_reswget_BITS_63_TO_32__q42[30:0] } ;
  assign lv_result__h200292 =
	     { and_sign__h199475,
	       setCanonicalNaN_reswget_BITS_95_TO_64__q41[30:0] } ;
  assign lv_result__h203278 = { or_sign__h202539, ff_input_D_OUT[146:84] } ;
  assign lv_result__h203319 = { and_sign__h202540, ff_input_D_OUT[210:148] } ;
  assign lv_result_is_infinity___1__h167478 =
	     { sign2__h117978, ~x__h167512 } ;
  assign lv_result_is_infinity___1__h167540 =
	     { x__h167552 | y__h167553, 1'd1 } ;
  assign lv_result_is_infinity___1__h53174 = { sign2__h30209, ~x__h53208 } ;
  assign lv_result_is_infinity___1__h53236 = { x__h53248 | y__h53249, 1'd1 } ;
  assign lv_result_is_zero___1__h167573 = { op_xor_sign3__h117991, 1'b1 } ;
  assign lv_result_is_zero___1__h167577 = { sign2__h117978, 1'd1 } ;
  assign lv_result_is_zero___1__h53269 = { op_xor_sign3__h30222, 1'b1 } ;
  assign lv_result_is_zero___1__h53273 = { sign2__h30209, 1'd1 } ;
  assign lv_root_rem__h16290 = { 2'b0, x__h16262, 1'b1 } ;
  assign lv_root_rem__h89563 = { 2'b0, x__h89535, 1'b1 } ;
  assign lv_root_temp_1__h15951 =
	     { 1'b0, inst_spfpu_sqrt_rg_inter_stage[28:3], 2'd3 } ;
  assign lv_root_temp_1__h89224 =
	     { 1'b0, inst_dpfpu_sqrt_rg_inter_stage[57:3], 2'd3 } ;
  assign lv_root_temp_2__h15952 =
	     { 1'b0, inst_spfpu_sqrt_rg_inter_stage[28:3], 2'd1 } ;
  assign lv_root_temp_2__h89225 =
	     { 1'b0, inst_dpfpu_sqrt_rg_inter_stage[57:3], 2'd1 } ;
  assign lv_round_up___1__h14467 =
	     inst_spfpu_divider_rg_stage3[53] & y__h14479 ;
  assign lv_round_up___1__h14503 = x__h14515 & y__h14516 ;
  assign lv_round_up___1__h194267 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3189[105] &
	     y__h194279 ;
  assign lv_round_up___1__h194489 =
	     lv_inexact__h193885 & inst_dpfm_add_sub_ff_stage5[23] ;
  assign lv_round_up___1__h247048 =
	     IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d3868[22] &
	     y__h247060 ;
  assign lv_round_up___1__h247705 =
	     lv_inexact1__h246360 &
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ;
  assign lv_round_up___1__h250570 =
	     IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d4035[51] &
	     y__h250582 ;
  assign lv_round_up___1__h251237 =
	     lv_inexact1__h249860 & ff_input_D_OUT[211] ;
  assign lv_round_up___1__h265588 =
	     IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4346[25] &
	     y__h265600 ;
  assign lv_round_up___1__h265625 =
	     IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4350 &
	     y__h251262 ;
  assign lv_round_up___1__h65869 =
	     IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1207[47] &
	     y__h65881 ;
  assign lv_round_up___1__h66091 =
	     lv_inexact__h65487 & inst_spfm_add_sub_ff_stage5[22] ;
  assign lv_round_up___1__h87741 =
	     inst_dpfpu_divider_rg_stage3[85] & y__h87753 ;
  assign lv_round_up___1__h87777 = x__h87789 & y__h87790 ;
  assign lv_rounded_mantissa___1__h194521 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3189[159:106] +
	     54'd1 ;
  assign lv_rounded_mantissa___1__h66123 =
	     IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1207[72:48] +
	     25'd1 ;
  assign lv_rounded_mantissa__h194551 =
	     { 1'd0, _theResult_____5__h193887[53:1] } ;
  assign lv_rounded_mantissa__h66153 =
	     { 1'd0, _theResult_____5__h65489[24:1] } ;
  assign lv_rounded_quotient___1__h14538 =
	     lv_rounded_quotient__h14116 + 25'd1 ;
  assign lv_rounded_quotient___1__h87812 =
	     lv_rounded_quotient__h87390 + 54'd1 ;
  assign lv_rounded_quotient__h14116 =
	     { 1'b0, inst_spfpu_divider_rg_stage3[77:54] } ;
  assign lv_rounded_quotient__h14568 =
	     { 1'd0, _theResult_____4__h14117[24:1] } ;
  assign lv_rounded_quotient__h87390 =
	     { 1'b0, inst_dpfpu_divider_rg_stage3[138:86] } ;
  assign lv_rounded_quotient__h87842 =
	     { 1'd0, _theResult_____4__h87391[53:1] } ;
  assign lv_roundup___1__h16369 =
	     inst_spfpu_sqrt_rg_inter_stage[69] & y__h16381 ;
  assign lv_roundup___1__h16751 = lv_inexact__h16297 & y__h16763 ;
  assign lv_roundup___1__h215352 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5142[7] &
	     y__h215364 ;
  assign lv_roundup___1__h215389 = inexact__h209751 & y__h215402 ;
  assign lv_roundup___1__h226427 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5018[39] &
	     y__h226439 ;
  assign lv_roundup___1__h226464 = inexact__h215623 & y__h226477 ;
  assign lv_roundup___1__h242965 =
	     IF_NOT_ff_input_first__305_BIT_4_530_544_AND_f_ETC___d3678[10] &
	     y__h242977 ;
  assign lv_roundup___1__h243001 = inexact__h232375 & y__h243014 ;
  assign lv_roundup___1__h89642 =
	     inst_dpfpu_sqrt_rg_inter_stage[130] & y__h89654 ;
  assign lv_roundup___1__h90024 = lv_inexact__h89570 & y__h90036 ;
  assign lv_sign__h226897 = !ff_input_D_OUT[4] && ff_input_D_OUT[179] ;
  assign lv_sticky___1__h7006 =
	     IF_inst_spfpu_divider_int_div_wr_final_out_wha_ETC___d196[0] |
	     ((_1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d129 ^
	       10'h200) >
	      ({ 5'd0, lsb_zeros__h6977 } ^ 10'h200) ||
	      x_wget__h658[0]) ;
  assign lv_sticky___1__h73059 =
	     IF_inst_dpfpu_divider_int_div_wr_final_out_wha_ETC___d1569[0] |
	     ((_1_MINUS_inst_dpfpu_divider_rg_stage2_439_BITS__ETC___d1444 ^
	       13'h1000) >
	      ({ 7'd0, lsb_zeros__h73030 } ^ 13'h1000) ||
	      x_wget__h66738[0]) ;
  assign lv_sticky__h16295 = x__h16701 != 29'd0 ;
  assign lv_sticky__h193883 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3189[103:0] !=
	     104'd0 ;
  assign lv_sticky__h246358 =
	     IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d3868[20:0] !=
	     21'd0 ;
  assign lv_sticky__h249858 =
	     IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d4035[49:0] !=
	     50'd0 ;
  assign lv_sticky__h65485 =
	     IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1207[45:0] !=
	     46'd0 ;
  assign lv_sticky__h89568 = x__h89974 != 58'd0 ;
  assign lv_summed_exponent__h268310 = x__h268577 + y__h268578 ;
  assign lv_summed_exponent__h270920 = x__h271187 + y__h271188 ;
  assign lv_zeros_on_left__h167745 =
	     _theResult____h167743[159] ?
	       8'd0 :
	       (_theResult____h167743[158] ?
		  8'd1 :
		  (_theResult____h167743[157] ?
		     8'd2 :
		     (_theResult____h167743[156] ?
			8'd3 :
			(_theResult____h167743[155] ?
			   8'd4 :
			   (_theResult____h167743[154] ?
			      8'd5 :
			      (_theResult____h167743[153] ?
				 8'd6 :
				 (_theResult____h167743[152] ?
				    8'd7 :
				    (_theResult____h167743[151] ?
				       8'd8 :
				       (_theResult____h167743[150] ?
					  8'd9 :
					  (_theResult____h167743[149] ?
					     8'd10 :
					     (_theResult____h167743[148] ?
						8'd11 :
						(_theResult____h167743[147] ?
						   8'd12 :
						   (_theResult____h167743[146] ?
						      8'd13 :
						      (_theResult____h167743[145] ?
							 8'd14 :
							 (_theResult____h167743[144] ?
							    8'd15 :
							    (_theResult____h167743[143] ?
							       8'd16 :
							       (_theResult____h167743[142] ?
								  8'd17 :
								  (_theResult____h167743[141] ?
								     8'd18 :
								     (_theResult____h167743[140] ?
									8'd19 :
									(_theResult____h167743[139] ?
									   8'd20 :
									   (_theResult____h167743[138] ?
									      8'd21 :
									      (_theResult____h167743[137] ?
										 8'd22 :
										 (_theResult____h167743[136] ?
										    8'd23 :
										    (_theResult____h167743[135] ?
										       8'd24 :
										       (_theResult____h167743[134] ?
											  8'd25 :
											  (_theResult____h167743[133] ?
											     8'd26 :
											     (_theResult____h167743[132] ?
												8'd27 :
												(_theResult____h167743[131] ?
												   8'd28 :
												   (_theResult____h167743[130] ?
												      8'd29 :
												      (_theResult____h167743[129] ?
													 8'd30 :
													 (_theResult____h167743[128] ?
													    8'd31 :
													    (_theResult____h167743[127] ?
													       8'd32 :
													       (_theResult____h167743[126] ?
														  8'd33 :
														  (_theResult____h167743[125] ?
														     8'd34 :
														     (_theResult____h167743[124] ?
															8'd35 :
															(_theResult____h167743[123] ?
															   8'd36 :
															   (_theResult____h167743[122] ?
															      8'd37 :
															      (_theResult____h167743[121] ?
																 8'd38 :
																 (_theResult____h167743[120] ?
																    8'd39 :
																    (_theResult____h167743[119] ?
																       8'd40 :
																       (_theResult____h167743[118] ?
																	  8'd41 :
																	  (_theResult____h167743[117] ?
																	     8'd42 :
																	     (_theResult____h167743[116] ?
																		8'd43 :
																		(_theResult____h167743[115] ?
																		   8'd44 :
																		   (_theResult____h167743[114] ?
																		      8'd45 :
																		      (_theResult____h167743[113] ?
																			 8'd46 :
																			 (_theResult____h167743[112] ?
																			    8'd47 :
																			    (_theResult____h167743[111] ?
																			       8'd48 :
																			       (_theResult____h167743[110] ?
																				  8'd49 :
																				  (_theResult____h167743[109] ?
																				     8'd50 :
																				     (_theResult____h167743[108] ?
																					8'd51 :
																					(_theResult____h167743[107] ?
																					   8'd52 :
																					   (_theResult____h167743[106] ?
																					      8'd53 :
																					      (_theResult____h167743[105] ?
																						 8'd54 :
																						 (_theResult____h167743[104] ?
																						    8'd55 :
																						    (_theResult____h167743[103] ?
																						       8'd56 :
																						       (_theResult____h167743[102] ?
																							  8'd57 :
																							  (_theResult____h167743[101] ?
																							     8'd58 :
																							     (_theResult____h167743[100] ?
																								8'd59 :
																								(_theResult____h167743[99] ?
																								   8'd60 :
																								   (_theResult____h167743[98] ?
																								      8'd61 :
																								      (_theResult____h167743[97] ?
																									 8'd62 :
																									 (_theResult____h167743[96] ?
																									    8'd63 :
																									    (_theResult____h167743[95] ?
																									       8'd64 :
																									       (_theResult____h167743[94] ?
																										  8'd65 :
																										  (_theResult____h167743[93] ?
																										     8'd66 :
																										     (_theResult____h167743[92] ?
																											8'd67 :
																											(_theResult____h167743[91] ?
																											   8'd68 :
																											   (_theResult____h167743[90] ?
																											      8'd69 :
																											      (_theResult____h167743[89] ?
																												 8'd70 :
																												 (_theResult____h167743[88] ?
																												    8'd71 :
																												    (_theResult____h167743[87] ?
																												       8'd72 :
																												       (_theResult____h167743[86] ?
																													  8'd73 :
																													  (_theResult____h167743[85] ?
																													     8'd74 :
																													     (_theResult____h167743[84] ?
																														8'd75 :
																														(_theResult____h167743[83] ?
																														   8'd76 :
																														   (_theResult____h167743[82] ?
																														      8'd77 :
																														      (_theResult____h167743[81] ?
																															 8'd78 :
																															 (_theResult____h167743[80] ?
																															    8'd79 :
																															    (_theResult____h167743[79] ?
																															       8'd80 :
																															       (_theResult____h167743[78] ?
																																  8'd81 :
																																  (_theResult____h167743[77] ?
																																     8'd82 :
																																     (_theResult____h167743[76] ?
																																	8'd83 :
																																	(_theResult____h167743[75] ?
																																	   8'd84 :
																																	   (_theResult____h167743[74] ?
																																	      8'd85 :
																																	      (_theResult____h167743[73] ?
																																		 8'd86 :
																																		 (_theResult____h167743[72] ?
																																		    8'd87 :
																																		    (_theResult____h167743[71] ?
																																		       8'd88 :
																																		       (_theResult____h167743[70] ?
																																			  8'd89 :
																																			  (_theResult____h167743[69] ?
																																			     8'd90 :
																																			     (_theResult____h167743[68] ?
																																				8'd91 :
																																				(_theResult____h167743[67] ?
																																				   8'd92 :
																																				   (_theResult____h167743[66] ?
																																				      8'd93 :
																																				      (_theResult____h167743[65] ?
																																					 8'd94 :
																																					 (_theResult____h167743[64] ?
																																					    8'd95 :
																																					    (_theResult____h167743[63] ?
																																					       8'd96 :
																																					       (_theResult____h167743[62] ?
																																						  8'd97 :
																																						  (_theResult____h167743[61] ?
																																						     8'd98 :
																																						     (_theResult____h167743[60] ?
																																							8'd99 :
																																							(_theResult____h167743[59] ?
																																							   8'd100 :
																																							   (_theResult____h167743[58] ?
																																							      8'd101 :
																																							      (_theResult____h167743[57] ?
																																								 8'd102 :
																																								 (_theResult____h167743[56] ?
																																								    8'd103 :
																																								    (_theResult____h167743[55] ?
																																								       8'd104 :
																																								       (_theResult____h167743[54] ?
																																									  8'd105 :
																																									  (_theResult____h167743[53] ?
																																									     8'd106 :
																																									     (_theResult____h167743[52] ?
																																										8'd107 :
																																										(_theResult____h167743[51] ?
																																										   8'd108 :
																																										   (_theResult____h167743[50] ?
																																										      8'd109 :
																																										      (_theResult____h167743[49] ?
																																											 8'd110 :
																																											 (_theResult____h167743[48] ?
																																											    8'd111 :
																																											    (_theResult____h167743[47] ?
																																											       8'd112 :
																																											       (_theResult____h167743[46] ?
																																												  8'd113 :
																																												  (_theResult____h167743[45] ?
																																												     8'd114 :
																																												     (_theResult____h167743[44] ?
																																													8'd115 :
																																													(_theResult____h167743[43] ?
																																													   8'd116 :
																																													   (_theResult____h167743[42] ?
																																													      8'd117 :
																																													      (_theResult____h167743[41] ?
																																														 8'd118 :
																																														 (_theResult____h167743[40] ?
																																														    8'd119 :
																																														    (_theResult____h167743[39] ?
																																														       8'd120 :
																																														       (_theResult____h167743[38] ?
																																															  8'd121 :
																																															  (_theResult____h167743[37] ?
																																															     8'd122 :
																																															     (_theResult____h167743[36] ?
																																																8'd123 :
																																																(_theResult____h167743[35] ?
																																																   8'd124 :
																																																   (_theResult____h167743[34] ?
																																																      8'd125 :
																																																      (_theResult____h167743[33] ?
																																																	 8'd126 :
																																																	 (_theResult____h167743[32] ?
																																																	    8'd127 :
																																																	    (_theResult____h167743[31] ?
																																																	       8'd128 :
																																																	       (_theResult____h167743[30] ?
																																																		  8'd129 :
																																																		  (_theResult____h167743[29] ?
																																																		     8'd130 :
																																																		     (_theResult____h167743[28] ?
																																																			8'd131 :
																																																			(_theResult____h167743[27] ?
																																																			   8'd132 :
																																																			   (_theResult____h167743[26] ?
																																																			      8'd133 :
																																																			      (_theResult____h167743[25] ?
																																																				 8'd134 :
																																																				 (_theResult____h167743[24] ?
																																																				    8'd135 :
																																																				    (_theResult____h167743[23] ?
																																																				       8'd136 :
																																																				       (_theResult____h167743[22] ?
																																																					  8'd137 :
																																																					  (_theResult____h167743[21] ?
																																																					     8'd138 :
																																																					     (_theResult____h167743[20] ?
																																																						8'd139 :
																																																						(_theResult____h167743[19] ?
																																																						   8'd140 :
																																																						   (_theResult____h167743[18] ?
																																																						      8'd141 :
																																																						      (_theResult____h167743[17] ?
																																																							 8'd142 :
																																																							 (_theResult____h167743[16] ?
																																																							    8'd143 :
																																																							    (_theResult____h167743[15] ?
																																																							       8'd144 :
																																																							       (_theResult____h167743[14] ?
																																																								  8'd145 :
																																																								  (_theResult____h167743[13] ?
																																																								     8'd146 :
																																																								     (_theResult____h167743[12] ?
																																																									8'd147 :
																																																									(_theResult____h167743[11] ?
																																																									   8'd148 :
																																																									   (_theResult____h167743[10] ?
																																																									      8'd149 :
																																																									      (_theResult____h167743[9] ?
																																																										 8'd150 :
																																																										 (_theResult____h167743[8] ?
																																																										    8'd151 :
																																																										    (_theResult____h167743[7] ?
																																																										       8'd152 :
																																																										       (_theResult____h167743[6] ?
																																																											  8'd153 :
																																																											  (_theResult____h167743[5] ?
																																																											     8'd154 :
																																																											     (_theResult____h167743[4] ?
																																																												8'd155 :
																																																												(_theResult____h167743[3] ?
																																																												   8'd156 :
																																																												   (_theResult____h167743[2] ?
																																																												      8'd157 :
																																																												      (_theResult____h167743[1] ?
																																																													 8'd158 :
																																																													 (_theResult____h167743[0] ?
																																																													    8'd159 :
																																																													    8'd160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_zeros_on_left__h53441 =
	     _theResult____h53439[72] ?
	       7'd0 :
	       (_theResult____h53439[71] ?
		  7'd1 :
		  (_theResult____h53439[70] ?
		     7'd2 :
		     (_theResult____h53439[69] ?
			7'd3 :
			(_theResult____h53439[68] ?
			   7'd4 :
			   (_theResult____h53439[67] ?
			      7'd5 :
			      (_theResult____h53439[66] ?
				 7'd6 :
				 (_theResult____h53439[65] ?
				    7'd7 :
				    (_theResult____h53439[64] ?
				       7'd8 :
				       (_theResult____h53439[63] ?
					  7'd9 :
					  (_theResult____h53439[62] ?
					     7'd10 :
					     (_theResult____h53439[61] ?
						7'd11 :
						(_theResult____h53439[60] ?
						   7'd12 :
						   (_theResult____h53439[59] ?
						      7'd13 :
						      (_theResult____h53439[58] ?
							 7'd14 :
							 (_theResult____h53439[57] ?
							    7'd15 :
							    (_theResult____h53439[56] ?
							       7'd16 :
							       (_theResult____h53439[55] ?
								  7'd17 :
								  (_theResult____h53439[54] ?
								     7'd18 :
								     (_theResult____h53439[53] ?
									7'd19 :
									(_theResult____h53439[52] ?
									   7'd20 :
									   (_theResult____h53439[51] ?
									      7'd21 :
									      (_theResult____h53439[50] ?
										 7'd22 :
										 (_theResult____h53439[49] ?
										    7'd23 :
										    (_theResult____h53439[48] ?
										       7'd24 :
										       (_theResult____h53439[47] ?
											  7'd25 :
											  (_theResult____h53439[46] ?
											     7'd26 :
											     (_theResult____h53439[45] ?
												7'd27 :
												(_theResult____h53439[44] ?
												   7'd28 :
												   (_theResult____h53439[43] ?
												      7'd29 :
												      (_theResult____h53439[42] ?
													 7'd30 :
													 (_theResult____h53439[41] ?
													    7'd31 :
													    (_theResult____h53439[40] ?
													       7'd32 :
													       (_theResult____h53439[39] ?
														  7'd33 :
														  (_theResult____h53439[38] ?
														     7'd34 :
														     (_theResult____h53439[37] ?
															7'd35 :
															(_theResult____h53439[36] ?
															   7'd36 :
															   (_theResult____h53439[35] ?
															      7'd37 :
															      (_theResult____h53439[34] ?
																 7'd38 :
																 (_theResult____h53439[33] ?
																    7'd39 :
																    (_theResult____h53439[32] ?
																       7'd40 :
																       (_theResult____h53439[31] ?
																	  7'd41 :
																	  (_theResult____h53439[30] ?
																	     7'd42 :
																	     (_theResult____h53439[29] ?
																		7'd43 :
																		(_theResult____h53439[28] ?
																		   7'd44 :
																		   (_theResult____h53439[27] ?
																		      7'd45 :
																		      (_theResult____h53439[26] ?
																			 7'd46 :
																			 (_theResult____h53439[25] ?
																			    7'd47 :
																			    (_theResult____h53439[24] ?
																			       7'd48 :
																			       (_theResult____h53439[23] ?
																				  7'd49 :
																				  (_theResult____h53439[22] ?
																				     7'd50 :
																				     (_theResult____h53439[21] ?
																					7'd51 :
																					(_theResult____h53439[20] ?
																					   7'd52 :
																					   (_theResult____h53439[19] ?
																					      7'd53 :
																					      (_theResult____h53439[18] ?
																						 7'd54 :
																						 (_theResult____h53439[17] ?
																						    7'd55 :
																						    (_theResult____h53439[16] ?
																						       7'd56 :
																						       (_theResult____h53439[15] ?
																							  7'd57 :
																							  (_theResult____h53439[14] ?
																							     7'd58 :
																							     (_theResult____h53439[13] ?
																								7'd59 :
																								(_theResult____h53439[12] ?
																								   7'd60 :
																								   (_theResult____h53439[11] ?
																								      7'd61 :
																								      (_theResult____h53439[10] ?
																									 7'd62 :
																									 (_theResult____h53439[9] ?
																									    7'd63 :
																									    (_theResult____h53439[8] ?
																									       7'd64 :
																									       (_theResult____h53439[7] ?
																										  7'd65 :
																										  (_theResult____h53439[6] ?
																										     7'd66 :
																										     (_theResult____h53439[5] ?
																											7'd67 :
																											(_theResult____h53439[4] ?
																											   7'd68 :
																											   (_theResult____h53439[3] ?
																											      7'd69 :
																											      (_theResult____h53439[2] ?
																												 7'd70 :
																												 (_theResult____h53439[1] ?
																												    7'd71 :
																												    (_theResult____h53439[0] ?
																												       7'd72 :
																												       7'd73)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign man1__h274445 =
	     { ~condFlags32_reswget_BITS_14_TO_10__q52[4],
	       getMant32_res_wget[68:46] } ;
  assign man1__h284369 =
	     { ~condFlags64_reswget_BITS_14_TO_10__q31[4],
	       getMant64_res_wget[155:104] } ;
  assign man2__h274446 =
	     { ~condFlags32_reswget_BITS_9_TO_5__q53[4],
	       getMant32_res_wget[45:23] } ;
  assign man2__h284370 =
	     { ~condFlags64_reswget_BITS_9_TO_5__q32[4],
	       getMant64_res_wget[103:52] } ;
  assign man__h258757 = { value__h262516[21:0], 30'd0 } ;
  assign man__h264803 =
	     { 1'b1, getMant64_reswget_BITS_155_TO_104__q25[51:27], 23'd0 } >>
	     shiftDist__h264802 ;
  assign man__h265058 =
	     { getMant64_reswget_BITS_155_TO_104__q25[51:27], 24'd0 } ;
  assign mant__h258697 = { getMant32_res_wget[68:46], 29'd0 } ;
  assign mantissa2__h117979 = { inst_dpfm_add_sub_ff_stage2[188:82], 53'd0 } ;
  assign mantissa2__h118001 =
	     inst_dpfm_add_sub_ff_stage2[5] ? 160'd0 : mantissa2__h117979 ;
  assign mantissa2__h118022 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__367_BIT_5_ETC___d2384 ?
	       mantissa_to_shift___1__h118020 :
	       mantissa2__h118001 ;
  assign mantissa2__h30210 = { inst_spfm_add_sub_ff_stage2[98:50], 24'd0 } ;
  assign mantissa2__h30232 =
	     inst_spfm_add_sub_ff_stage2[5] ? 73'd0 : mantissa2__h30210 ;
  assign mantissa2__h30253 =
	     IF_inst_spfm_add_sub_ff_stage2_read__33_BIT_5__ETC___d750 ?
	       mantissa_to_shift___1__h30251 :
	       mantissa2__h30232 ;
  assign mantissa3___1__h137712 =
	     { 1'd0,
	       expo3_zero__h117990,
	       inst_dpfm_add_sub_ff_stage2[69:18],
	       106'd0 } ;
  assign mantissa3___1__h39445 =
	     { 1'd0,
	       expo3_zero__h30221,
	       inst_spfm_add_sub_ff_stage2[40:18],
	       48'd0 } ;
  assign mantissa3__h118023 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__367_BIT_5_ETC___d2384 ?
	       _theResult____h117992 :
	       mantissa_to_shift___1__h118020 ;
  assign mantissa3__h30254 =
	     IF_inst_spfm_add_sub_ff_stage2_read__33_BIT_5__ETC___d750 ?
	       _theResult____h30223 :
	       mantissa_to_shift___1__h30251 ;
  assign mantissa___1__h313714 = { mantissa__h304719[50:0], 1'd0 } ;
  assign mantissa___1__h333666 = { mantissa__h315319[108:0], 1'd0 } ;
  assign mantissa__h15955 = { inst_spfpu_sqrt_rg_inter_stage[143:94], 2'd0 } ;
  assign mantissa__h226905 =
	     { theResult__26901_SL_x27037_BITS_4_TO_0__q2[30:0], 21'd0 } ;
  assign mantissa__h304717 =
	     { IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d5752,
	       getMant32_res_wget[68:46],
	       27'd0 } ;
  assign mantissa__h304719 = mantissa__h304717 << x__h313717 ;
  assign mantissa__h304729 =
	     { IF_IF_IF_condFlags32_res_whas__339_THEN_condFl_ETC___d5812[49:0],
	       2'd0 } ;
  assign mantissa__h315317 =
	     { IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d5870,
	       getMant64_res_wget[155:104],
	       56'd0 } ;
  assign mantissa__h315319 = mantissa__h315317 << x__h333669 ;
  assign mantissa__h315329 =
	     { IF_IF_IF_condFlags64_res_whas__424_THEN_condFl_ETC___d5988[107:0],
	       2'd0 } ;
  assign mantissa__h89228 =
	     { inst_dpfpu_sqrt_rg_inter_stage[291:184], 2'd0 } ;
  assign mantissa_to_shift___1__h118020 =
	     { IF_IF_inst_dpfm_add_sub_ff_stage2_read__367_BI_ETC___d2408[159:1],
	       _0_CONCAT_IF_IF_IF_inst_dpfm_add_sub_ff_stage2__ETC___d2736 } ;
  assign mantissa_to_shift___1__h30251 =
	     { IF_IF_inst_spfm_add_sub_ff_stage2_read__33_BIT_ETC___d774[72:1],
	       _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d928 } ;
  assign mantissa_to_shift__h118015 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__367_BIT_5_ETC___d2384 ?
	       mantissa2__h118001 :
	       _theResult____h117992 ;
  assign mantissa_to_shift__h30246 =
	     IF_inst_spfm_add_sub_ff_stage2_read__33_BIT_5__ETC___d750 ?
	       mantissa2__h30232 :
	       _theResult____h30223 ;
  assign msb_zeros___1__h107944 = msb_zeros__h90480 + 7'd1 ;
  assign msb_zeros___1__h25337 = msb_zeros__h17211 + 6'd1 ;
  assign msb_zeros__h107913 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       msb_zeros___1__h107944 :
	       msb_zeros__h90480 ;
  assign msb_zeros__h17211 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       6'd0 :
	       (inst_spfm_add_sub_ff_input_register[106] ?
		  6'd1 :
		  (inst_spfm_add_sub_ff_input_register[105] ?
		     6'd2 :
		     (inst_spfm_add_sub_ff_input_register[104] ?
			6'd3 :
			(inst_spfm_add_sub_ff_input_register[103] ?
			   6'd4 :
			   (inst_spfm_add_sub_ff_input_register[102] ?
			      6'd5 :
			      (inst_spfm_add_sub_ff_input_register[101] ?
				 6'd6 :
				 (inst_spfm_add_sub_ff_input_register[100] ?
				    6'd7 :
				    (inst_spfm_add_sub_ff_input_register[99] ?
				       6'd8 :
				       (inst_spfm_add_sub_ff_input_register[98] ?
					  6'd9 :
					  (inst_spfm_add_sub_ff_input_register[97] ?
					     6'd10 :
					     (inst_spfm_add_sub_ff_input_register[96] ?
						6'd11 :
						(inst_spfm_add_sub_ff_input_register[95] ?
						   6'd12 :
						   (inst_spfm_add_sub_ff_input_register[94] ?
						      6'd13 :
						      (inst_spfm_add_sub_ff_input_register[93] ?
							 6'd14 :
							 (inst_spfm_add_sub_ff_input_register[92] ?
							    6'd15 :
							    (inst_spfm_add_sub_ff_input_register[91] ?
							       6'd16 :
							       (inst_spfm_add_sub_ff_input_register[90] ?
								  6'd17 :
								  (inst_spfm_add_sub_ff_input_register[89] ?
								     6'd18 :
								     (inst_spfm_add_sub_ff_input_register[88] ?
									6'd19 :
									(inst_spfm_add_sub_ff_input_register[87] ?
									   6'd20 :
									   (inst_spfm_add_sub_ff_input_register[86] ?
									      6'd21 :
									      (inst_spfm_add_sub_ff_input_register[85] ?
										 6'd22 :
										 (inst_spfm_add_sub_ff_input_register[84] ?
										    6'd23 :
										    (inst_spfm_add_sub_ff_input_register[83] ?
										       6'd24 :
										       (inst_spfm_add_sub_ff_input_register[82] ?
											  6'd25 :
											  (inst_spfm_add_sub_ff_input_register[81] ?
											     6'd26 :
											     (inst_spfm_add_sub_ff_input_register[80] ?
												6'd27 :
												(inst_spfm_add_sub_ff_input_register[79] ?
												   6'd28 :
												   (inst_spfm_add_sub_ff_input_register[78] ?
												      6'd29 :
												      (inst_spfm_add_sub_ff_input_register[77] ?
													 6'd30 :
													 (inst_spfm_add_sub_ff_input_register[76] ?
													    6'd31 :
													    (inst_spfm_add_sub_ff_input_register[75] ?
													       6'd32 :
													       (inst_spfm_add_sub_ff_input_register[74] ?
														  6'd33 :
														  (inst_spfm_add_sub_ff_input_register[73] ?
														     6'd34 :
														     (inst_spfm_add_sub_ff_input_register[72] ?
															6'd35 :
															(inst_spfm_add_sub_ff_input_register[71] ?
															   6'd36 :
															   (inst_spfm_add_sub_ff_input_register[70] ?
															      6'd37 :
															      (inst_spfm_add_sub_ff_input_register[69] ?
																 6'd38 :
																 (inst_spfm_add_sub_ff_input_register[68] ?
																    6'd39 :
																    (inst_spfm_add_sub_ff_input_register[67] ?
																       6'd40 :
																       (inst_spfm_add_sub_ff_input_register[66] ?
																	  6'd41 :
																	  (inst_spfm_add_sub_ff_input_register[65] ?
																	     6'd42 :
																	     (inst_spfm_add_sub_ff_input_register[64] ?
																		6'd43 :
																		(inst_spfm_add_sub_ff_input_register[63] ?
																		   6'd44 :
																		   (inst_spfm_add_sub_ff_input_register[62] ?
																		      6'd45 :
																		      (inst_spfm_add_sub_ff_input_register[61] ?
																			 6'd46 :
																			 (inst_spfm_add_sub_ff_input_register[60] ?
																			    6'd47 :
																			    6'd49))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign msb_zeros__h25306 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       msb_zeros___1__h25337 :
	       msb_zeros__h17211 ;
  assign msb_zeros__h6820 =
	     x_wget__h658[26] ?
	       5'd0 :
	       (x_wget__h658[25] ?
		  5'd1 :
		  (x_wget__h658[24] ?
		     5'd2 :
		     (x_wget__h658[23] ?
			5'd3 :
			(x_wget__h658[22] ?
			   5'd4 :
			   (x_wget__h658[21] ?
			      5'd5 :
			      (x_wget__h658[20] ?
				 5'd6 :
				 (x_wget__h658[19] ?
				    5'd7 :
				    (x_wget__h658[18] ?
				       5'd8 :
				       (x_wget__h658[17] ?
					  5'd9 :
					  (x_wget__h658[16] ?
					     5'd10 :
					     (x_wget__h658[15] ?
						5'd11 :
						(x_wget__h658[14] ?
						   5'd12 :
						   (x_wget__h658[13] ?
						      5'd13 :
						      (x_wget__h658[12] ?
							 5'd14 :
							 (x_wget__h658[11] ?
							    5'd15 :
							    (x_wget__h658[10] ?
							       5'd16 :
							       (x_wget__h658[9] ?
								  5'd17 :
								  (x_wget__h658[8] ?
								     5'd18 :
								     (x_wget__h658[7] ?
									5'd19 :
									(x_wget__h658[6] ?
									   5'd20 :
									   (x_wget__h658[5] ?
									      5'd21 :
									      (x_wget__h658[4] ?
										 5'd22 :
										 (x_wget__h658[3] ?
										    5'd23 :
										    (x_wget__h658[2] ?
										       5'd24 :
										       (x_wget__h658[1] ?
											  5'd25 :
											  (x_wget__h658[0] ?
											     5'd26 :
											     5'd27)))))))))))))))))))))))))) ;
  assign msb_zeros__h72873 =
	     x_wget__h66738[55] ?
	       6'd0 :
	       (x_wget__h66738[54] ?
		  6'd1 :
		  (x_wget__h66738[53] ?
		     6'd2 :
		     (x_wget__h66738[52] ?
			6'd3 :
			(x_wget__h66738[51] ?
			   6'd4 :
			   (x_wget__h66738[50] ?
			      6'd5 :
			      (x_wget__h66738[49] ?
				 6'd6 :
				 (x_wget__h66738[48] ?
				    6'd7 :
				    (x_wget__h66738[47] ?
				       6'd8 :
				       (x_wget__h66738[46] ?
					  6'd9 :
					  (x_wget__h66738[45] ?
					     6'd10 :
					     (x_wget__h66738[44] ?
						6'd11 :
						(x_wget__h66738[43] ?
						   6'd12 :
						   (x_wget__h66738[42] ?
						      6'd13 :
						      (x_wget__h66738[41] ?
							 6'd14 :
							 (x_wget__h66738[40] ?
							    6'd15 :
							    (x_wget__h66738[39] ?
							       6'd16 :
							       (x_wget__h66738[38] ?
								  6'd17 :
								  (x_wget__h66738[37] ?
								     6'd18 :
								     (x_wget__h66738[36] ?
									6'd19 :
									(x_wget__h66738[35] ?
									   6'd20 :
									   (x_wget__h66738[34] ?
									      6'd21 :
									      (x_wget__h66738[33] ?
										 6'd22 :
										 (x_wget__h66738[32] ?
										    6'd23 :
										    (x_wget__h66738[31] ?
										       6'd24 :
										       (x_wget__h66738[30] ?
											  6'd25 :
											  (x_wget__h66738[29] ?
											     6'd26 :
											     (x_wget__h66738[28] ?
												6'd27 :
												(x_wget__h66738[27] ?
												   6'd28 :
												   (x_wget__h66738[26] ?
												      6'd29 :
												      (x_wget__h66738[25] ?
													 6'd30 :
													 (x_wget__h66738[24] ?
													    6'd31 :
													    (x_wget__h66738[23] ?
													       6'd32 :
													       (x_wget__h66738[22] ?
														  6'd33 :
														  (x_wget__h66738[21] ?
														     6'd34 :
														     (x_wget__h66738[20] ?
															6'd35 :
															(x_wget__h66738[19] ?
															   6'd36 :
															   (x_wget__h66738[18] ?
															      6'd37 :
															      (x_wget__h66738[17] ?
																 6'd38 :
																 (x_wget__h66738[16] ?
																    6'd39 :
																    (x_wget__h66738[15] ?
																       6'd40 :
																       (x_wget__h66738[14] ?
																	  6'd41 :
																	  (x_wget__h66738[13] ?
																	     6'd42 :
																	     (x_wget__h66738[12] ?
																		6'd43 :
																		(x_wget__h66738[11] ?
																		   6'd44 :
																		   (x_wget__h66738[10] ?
																		      6'd45 :
																		      (x_wget__h66738[9] ?
																			 6'd46 :
																			 (x_wget__h66738[8] ?
																			    6'd47 :
																			    (x_wget__h66738[7] ?
																			       6'd48 :
																			       (x_wget__h66738[6] ?
																				  6'd49 :
																				  (x_wget__h66738[5] ?
																				     6'd50 :
																				     (x_wget__h66738[4] ?
																					6'd51 :
																					(x_wget__h66738[3] ?
																					   6'd52 :
																					   (x_wget__h66738[2] ?
																					      6'd53 :
																					      (x_wget__h66738[1] ?
																						 6'd54 :
																						 (x_wget__h66738[0] ?
																						    6'd55 :
																						    6'd56))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign msb_zeros__h90480 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       7'd0 :
	       (inst_dpfm_add_sub_ff_input_register[199] ?
		  7'd1 :
		  (inst_dpfm_add_sub_ff_input_register[198] ?
		     7'd2 :
		     (inst_dpfm_add_sub_ff_input_register[197] ?
			7'd3 :
			(inst_dpfm_add_sub_ff_input_register[196] ?
			   7'd4 :
			   (inst_dpfm_add_sub_ff_input_register[195] ?
			      7'd5 :
			      (inst_dpfm_add_sub_ff_input_register[194] ?
				 7'd6 :
				 (inst_dpfm_add_sub_ff_input_register[193] ?
				    7'd7 :
				    (inst_dpfm_add_sub_ff_input_register[192] ?
				       7'd8 :
				       (inst_dpfm_add_sub_ff_input_register[191] ?
					  7'd9 :
					  (inst_dpfm_add_sub_ff_input_register[190] ?
					     7'd10 :
					     (inst_dpfm_add_sub_ff_input_register[189] ?
						7'd11 :
						(inst_dpfm_add_sub_ff_input_register[188] ?
						   7'd12 :
						   (inst_dpfm_add_sub_ff_input_register[187] ?
						      7'd13 :
						      (inst_dpfm_add_sub_ff_input_register[186] ?
							 7'd14 :
							 (inst_dpfm_add_sub_ff_input_register[185] ?
							    7'd15 :
							    (inst_dpfm_add_sub_ff_input_register[184] ?
							       7'd16 :
							       (inst_dpfm_add_sub_ff_input_register[183] ?
								  7'd17 :
								  (inst_dpfm_add_sub_ff_input_register[182] ?
								     7'd18 :
								     (inst_dpfm_add_sub_ff_input_register[181] ?
									7'd19 :
									(inst_dpfm_add_sub_ff_input_register[180] ?
									   7'd20 :
									   (inst_dpfm_add_sub_ff_input_register[179] ?
									      7'd21 :
									      (inst_dpfm_add_sub_ff_input_register[178] ?
										 7'd22 :
										 (inst_dpfm_add_sub_ff_input_register[177] ?
										    7'd23 :
										    (inst_dpfm_add_sub_ff_input_register[176] ?
										       7'd24 :
										       (inst_dpfm_add_sub_ff_input_register[175] ?
											  7'd25 :
											  (inst_dpfm_add_sub_ff_input_register[174] ?
											     7'd26 :
											     (inst_dpfm_add_sub_ff_input_register[173] ?
												7'd27 :
												(inst_dpfm_add_sub_ff_input_register[172] ?
												   7'd28 :
												   (inst_dpfm_add_sub_ff_input_register[171] ?
												      7'd29 :
												      (inst_dpfm_add_sub_ff_input_register[170] ?
													 7'd30 :
													 (inst_dpfm_add_sub_ff_input_register[169] ?
													    7'd31 :
													    (inst_dpfm_add_sub_ff_input_register[168] ?
													       7'd32 :
													       (inst_dpfm_add_sub_ff_input_register[167] ?
														  7'd33 :
														  (inst_dpfm_add_sub_ff_input_register[166] ?
														     7'd34 :
														     (inst_dpfm_add_sub_ff_input_register[165] ?
															7'd35 :
															(inst_dpfm_add_sub_ff_input_register[164] ?
															   7'd36 :
															   (inst_dpfm_add_sub_ff_input_register[163] ?
															      7'd37 :
															      (inst_dpfm_add_sub_ff_input_register[162] ?
																 7'd38 :
																 (inst_dpfm_add_sub_ff_input_register[161] ?
																    7'd39 :
																    (inst_dpfm_add_sub_ff_input_register[160] ?
																       7'd40 :
																       (inst_dpfm_add_sub_ff_input_register[159] ?
																	  7'd41 :
																	  (inst_dpfm_add_sub_ff_input_register[158] ?
																	     7'd42 :
																	     (inst_dpfm_add_sub_ff_input_register[157] ?
																		7'd43 :
																		(inst_dpfm_add_sub_ff_input_register[156] ?
																		   7'd44 :
																		   (inst_dpfm_add_sub_ff_input_register[155] ?
																		      7'd45 :
																		      (inst_dpfm_add_sub_ff_input_register[154] ?
																			 7'd46 :
																			 (inst_dpfm_add_sub_ff_input_register[153] ?
																			    7'd47 :
																			    (inst_dpfm_add_sub_ff_input_register[152] ?
																			       7'd48 :
																			       (inst_dpfm_add_sub_ff_input_register[151] ?
																				  7'd49 :
																				  (inst_dpfm_add_sub_ff_input_register[150] ?
																				     7'd50 :
																				     (inst_dpfm_add_sub_ff_input_register[149] ?
																					7'd51 :
																					(inst_dpfm_add_sub_ff_input_register[148] ?
																					   7'd52 :
																					   (inst_dpfm_add_sub_ff_input_register[147] ?
																					      7'd53 :
																					      (inst_dpfm_add_sub_ff_input_register[146] ?
																						 7'd54 :
																						 (inst_dpfm_add_sub_ff_input_register[145] ?
																						    7'd55 :
																						    (inst_dpfm_add_sub_ff_input_register[144] ?
																						       7'd56 :
																						       (inst_dpfm_add_sub_ff_input_register[143] ?
																							  7'd57 :
																							  (inst_dpfm_add_sub_ff_input_register[142] ?
																							     7'd58 :
																							     (inst_dpfm_add_sub_ff_input_register[141] ?
																								7'd59 :
																								(inst_dpfm_add_sub_ff_input_register[140] ?
																								   7'd60 :
																								   (inst_dpfm_add_sub_ff_input_register[139] ?
																								      7'd61 :
																								      (inst_dpfm_add_sub_ff_input_register[138] ?
																									 7'd62 :
																									 (inst_dpfm_add_sub_ff_input_register[137] ?
																									    7'd63 :
																									    (inst_dpfm_add_sub_ff_input_register[136] ?
																									       7'd64 :
																									       (inst_dpfm_add_sub_ff_input_register[135] ?
																										  7'd65 :
																										  (inst_dpfm_add_sub_ff_input_register[134] ?
																										     7'd66 :
																										     (inst_dpfm_add_sub_ff_input_register[133] ?
																											7'd67 :
																											(inst_dpfm_add_sub_ff_input_register[132] ?
																											   7'd68 :
																											   (inst_dpfm_add_sub_ff_input_register[131] ?
																											      7'd69 :
																											      (inst_dpfm_add_sub_ff_input_register[130] ?
																												 7'd70 :
																												 (inst_dpfm_add_sub_ff_input_register[129] ?
																												    7'd71 :
																												    (inst_dpfm_add_sub_ff_input_register[128] ?
																												       7'd72 :
																												       (inst_dpfm_add_sub_ff_input_register[127] ?
																													  7'd73 :
																													  (inst_dpfm_add_sub_ff_input_register[126] ?
																													     7'd74 :
																													     (inst_dpfm_add_sub_ff_input_register[125] ?
																														7'd75 :
																														(inst_dpfm_add_sub_ff_input_register[124] ?
																														   7'd76 :
																														   (inst_dpfm_add_sub_ff_input_register[123] ?
																														      7'd77 :
																														      (inst_dpfm_add_sub_ff_input_register[122] ?
																															 7'd78 :
																															 (inst_dpfm_add_sub_ff_input_register[121] ?
																															    7'd79 :
																															    (inst_dpfm_add_sub_ff_input_register[120] ?
																															       7'd80 :
																															       (inst_dpfm_add_sub_ff_input_register[119] ?
																																  7'd81 :
																																  (inst_dpfm_add_sub_ff_input_register[118] ?
																																     7'd82 :
																																     (inst_dpfm_add_sub_ff_input_register[117] ?
																																	7'd83 :
																																	(inst_dpfm_add_sub_ff_input_register[116] ?
																																	   7'd84 :
																																	   (inst_dpfm_add_sub_ff_input_register[115] ?
																																	      7'd85 :
																																	      (inst_dpfm_add_sub_ff_input_register[114] ?
																																		 7'd86 :
																																		 (inst_dpfm_add_sub_ff_input_register[113] ?
																																		    7'd87 :
																																		    (inst_dpfm_add_sub_ff_input_register[112] ?
																																		       7'd88 :
																																		       (inst_dpfm_add_sub_ff_input_register[111] ?
																																			  7'd89 :
																																			  (inst_dpfm_add_sub_ff_input_register[110] ?
																																			     7'd90 :
																																			     (inst_dpfm_add_sub_ff_input_register[109] ?
																																				7'd91 :
																																				(inst_dpfm_add_sub_ff_input_register[108] ?
																																				   7'd92 :
																																				   (inst_dpfm_add_sub_ff_input_register[107] ?
																																				      7'd93 :
																																				      (inst_dpfm_add_sub_ff_input_register[106] ?
																																					 7'd94 :
																																					 (inst_dpfm_add_sub_ff_input_register[105] ?
																																					    7'd95 :
																																					    (inst_dpfm_add_sub_ff_input_register[104] ?
																																					       7'd96 :
																																					       (inst_dpfm_add_sub_ff_input_register[103] ?
																																						  7'd97 :
																																						  (inst_dpfm_add_sub_ff_input_register[102] ?
																																						     7'd98 :
																																						     (inst_dpfm_add_sub_ff_input_register[101] ?
																																							7'd99 :
																																							(inst_dpfm_add_sub_ff_input_register[100] ?
																																							   7'd100 :
																																							   (inst_dpfm_add_sub_ff_input_register[99] ?
																																							      7'd101 :
																																							      (inst_dpfm_add_sub_ff_input_register[98] ?
																																								 7'd102 :
																																								 (inst_dpfm_add_sub_ff_input_register[97] ?
																																								    7'd103 :
																																								    (inst_dpfm_add_sub_ff_input_register[96] ?
																																								       7'd104 :
																																								       (inst_dpfm_add_sub_ff_input_register[95] ?
																																									  7'd105 :
																																									  7'd107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign new_value_final_result__h193917 =
	     inst_dpfm_add_sub_ff_stage5[17] ?
	       64'h7FF8000000000000 :
	       _theResult_____3_snd_snd_snd__h194011 ;
  assign new_value_final_result__h65519 =
	     inst_spfm_add_sub_ff_stage5[16] ?
	       32'h7FC00000 :
	       _theResult_____3_snd_snd_snd__h65613 ;
  assign op_xor_sign3__h117991 =
	     inst_dpfm_add_sub_ff_stage2[12] ^ sign3__h117980 ;
  assign op_xor_sign3__h30222 =
	     inst_spfm_add_sub_ff_stage2[12] ^ sign3__h30211 ;
  assign or_sign__h199474 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] |
	     setCanonicalNaN_reswget_BITS_63_TO_32__q42[31] ;
  assign or_sign__h202539 = ff_input_D_OUT[211] | ff_input_D_OUT[147] ;
  assign quiet_nan_two__h268304 = x__h268971 | y__h268972 ;
  assign quiet_nan_two__h270914 = x__h271576 | y__h271577 ;
  assign res___1__h265567 =
	     { ff_input_D_OUT[211],
	       _theResult_____2__h265562,
	       IF_IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0_ETC___d4386[22:0] } ;
  assign res__h209655 = ff_input_D_OUT[179] ? 32'hCF000000 : 32'd0 ;
  assign res__h264524 =
	     IF_getExp64_res_whas__310_THEN_getExp64_res_wg_ETC___d4325 ?
	       _theResult___snd_fst__h265565 :
	       32'd0 ;
  assign result__h258589 =
	     condFlags32_reswget_BITS_14_TO_10__q52[0] ? 5'd16 : 5'd0 ;
  assign result__h264559 =
	     condFlags64_reswget_BITS_14_TO_10__q31[0] ? 5'd16 : 5'd0 ;
  assign result__h264678 =
	     { IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4364[4:1],
	       IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4364[0] |
	       IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4350 } ;
  assign result__h264946 =
	     { _theResult_____5__h264532[4:3],
	       1'd1,
	       _theResult_____5__h264532[1:0] } ;
  assign result__h265162 = { exception__h264517[4:2], 2'd3 } ;
  assign result_exponent___1__h16811 =
	     inst_spfpu_sqrt_rg_inter_stage[67:59] + 9'd1 ;
  assign result_exponent___1__h90084 =
	     inst_dpfpu_sqrt_rg_inter_stage[128:117] + 12'd1 ;
  assign result_exponent__h304726 = x__h313987 + y__h313988 ;
  assign result_exponent__h315326 = x__h333939 + y__h333940 ;
  assign result_mantissa__h16289 =
	     { inst_spfpu_sqrt_rg_inter_stage[93:69],
	       !_theResult____h15953[28] } ;
  assign result_mantissa__h89562 =
	     { inst_dpfpu_sqrt_rg_inter_stage[183:130],
	       !_theResult____h89226[57] } ;
  assign resultant_exponent___1__h194550 =
	     resultant_exponent__h193869 + 13'd1 ;
  assign resultant_exponent___1__h66152 = resultant_exponent__h65471 + 10'd1 ;
  assign resultant_exponent__h193869 =
	     inst_dpfm_add_sub_ff_stage5[183] ?
	       resultant_exponent_inc__h193864 :
	       _theResult___fst__h194149 ;
  assign resultant_exponent__h65471 =
	     inst_spfm_add_sub_ff_stage5[95] ?
	       resultant_exponent_inc__h65466 :
	       _theResult___fst__h65751 ;
  assign resultant_exponent_inc__h193864 =
	     inst_dpfm_add_sub_ff_stage5[196:184] + 13'd1 ;
  assign resultant_exponent_inc__h65466 =
	     inst_spfm_add_sub_ff_stage5[105:96] + 10'd1 ;
  assign resultant_exponent_sub__h193862 =
	     inst_dpfm_add_sub_ff_stage5[196:184] - 13'd1 ;
  assign resultant_exponent_sub__h65464 =
	     inst_spfm_add_sub_ff_stage5[105:96] - 10'd1 ;
  assign resultant_exponent_sub_zerosMSB__h193867 =
	     inst_dpfm_add_sub_ff_stage5[196:184] -
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__150_ETC___d3164 ;
  assign resultant_exponent_sub_zerosMSB__h65469 =
	     inst_spfm_add_sub_ff_stage5[105:96] -
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__168_ETC___d1182 ;
  assign resultant_mantissa___1__h194121 =
	     { 1'd0,
	       inst_dpfm_add_sub_ff_stage5[183:26],
	       inst_dpfm_add_sub_ff_stage5[24] |
	       inst_dpfm_add_sub_ff_stage5[25] } ;
  assign resultant_mantissa___1__h65723 =
	     { 1'd0,
	       inst_spfm_add_sub_ff_stage5[95:25],
	       inst_spfm_add_sub_ff_stage5[23] |
	       inst_spfm_add_sub_ff_stage5[24] } ;
  assign resultant_mantissa_norm_expo__h193865 =
	     inst_dpfm_add_sub_ff_stage5[183:24] <<
	     resultant_exponent_sub__h193862 ;
  assign resultant_mantissa_norm_expo__h65467 =
	     inst_spfm_add_sub_ff_stage5[95:23] <<
	     resultant_exponent_sub__h65464 ;
  assign resultant_mantissa_norm_zerosMSB__h193866 =
	     inst_dpfm_add_sub_ff_stage5[183:24] << x__h194398 ;
  assign resultant_mantissa_norm_zerosMSB__h65468 =
	     inst_spfm_add_sub_ff_stage5[95:23] << x__h66000 ;
  assign setCanonicalNaN_argwget_BITS_127_TO_64__q39 =
	     setCanonicalNaN_arg_wget[127:64] ;
  assign setCanonicalNaN_argwget_BITS_191_TO_128__q38 =
	     setCanonicalNaN_arg_wget[191:128] ;
  assign setCanonicalNaN_argwget_BITS_63_TO_0__q40 =
	     setCanonicalNaN_arg_wget[63:0] ;
  assign setCanonicalNaN_reswget_BITS_31_TO_0__q59 =
	     setCanonicalNaN_res_wget[31:0] ;
  assign setCanonicalNaN_reswget_BITS_63_TO_32__q42 =
	     setCanonicalNaN_res_wget[63:32] ;
  assign setCanonicalNaN_reswget_BITS_95_TO_64__q41 =
	     setCanonicalNaN_res_wget[95:64] ;
  assign shiftDist__h264802 = 11'h380 - getExp64_res_wget[32:22] ;
  assign shift_neg__h107918 =
	     ~_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1865 +
	     13'd1 ;
  assign shift_neg__h25311 =
	     ~_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d463 +
	     10'd1 ;
  assign shift_neg__h6980 =
	     ~_1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d129 +
	     10'd1 ;
  assign shift_neg__h73033 =
	     ~_1_MINUS_inst_dpfpu_divider_rg_stage2_439_BITS__ETC___d1444 +
	     13'd1 ;
  assign sign2__h117978 =
	     inst_dpfm_add_sub_ff_stage2[203] ^
	     inst_dpfm_add_sub_ff_stage2[202] ;
  assign sign2__h30209 =
	     inst_spfm_add_sub_ff_stage2[110] ^
	     inst_spfm_add_sub_ff_stage2[109] ;
  assign sign3__h117980 =
	     inst_dpfm_add_sub_ff_stage2[81] ^
	     inst_dpfm_add_sub_ff_stage2[202] ;
  assign sign3__h30211 =
	     inst_spfm_add_sub_ff_stage2[49] ^
	     inst_spfm_add_sub_ff_stage2[109] ;
  assign sign__h232372 = !ff_input_D_OUT[4] && ff_input_D_OUT[211] ;
  assign sub_mantissa1__h167740 =
	     inst_dpfm_add_sub_ff_stage4[346] ?
	       inst_dpfm_add_sub_ff_stage4[332:173] :
	       inst_dpfm_add_sub_ff_stage4[172:13] ;
  assign sub_mantissa1__h53436 =
	     inst_spfm_add_sub_ff_stage4[169] ?
	       inst_spfm_add_sub_ff_stage4[158:86] :
	       inst_spfm_add_sub_ff_stage4[85:13] ;
  assign sub_mantissa2__h167741 =
	     inst_dpfm_add_sub_ff_stage4[346] ?
	       inst_dpfm_add_sub_ff_stage4[172:13] :
	       inst_dpfm_add_sub_ff_stage4[332:173] ;
  assign sub_mantissa2__h53437 =
	     inst_spfm_add_sub_ff_stage4[169] ?
	       inst_spfm_add_sub_ff_stage4[85:13] :
	       inst_spfm_add_sub_ff_stage4[158:86] ;
  assign sub_mantissa__h167742 =
	     sub_mantissa1__h167740 - sub_mantissa2__h167741 ;
  assign sub_mantissa__h53438 =
	     sub_mantissa1__h53436 - sub_mantissa2__h53437 ;
  assign theResult__26901_SL_x27037_BITS_4_TO_0__q2 =
	     _theResult____h226901 << x__h227037[4:0] ;
  assign value__h262516 = getMant32_res_wget[68:46] << x__h258760 ;
  assign wr_final_out_fflags__h226921 = { 4'd0, inexact__h232375 } ;
  assign x1_avValue_fflags__h209661 =
	     (ff_input_D_OUT[178:148] == 31'd0) ?
	       5'd0 :
	       x_wget__h195113[36:32] ;
  assign x1_avValue_fflags__h215520 =
	     ff_input_D_OUT[4] ?
	       x_wget__h195113[36:32] :
	       x1_avValue_fflags__h209661 ;
  assign x1_avValue_fflags__h226600 =
	     ff_input_D_OUT[5] ?
	       x_wget__h195251[36:32] :
	       x1_avValue_fflags__h215520 ;
  assign x1_avValue_final_result__h209660 =
	     (ff_input_D_OUT[178:148] == 31'd0) ?
	       res__h209655 :
	       x_wget__h195113[31:0] ;
  assign x1_avValue_final_result__h215519 =
	     ff_input_D_OUT[4] ?
	       x_wget__h195113[31:0] :
	       x1_avValue_final_result__h209660 ;
  assign x1_avValue_final_result__h226599 =
	     ff_input_D_OUT[5] ?
	       x_wget__h195251[31:0] :
	       x1_avValue_final_result__h215519 ;
  assign x1_avValue_final_result__h226607 =
	     (ff_input_D_OUT[211:148] == 64'd0 && ff_input_D_OUT[5] ||
	      ff_input_D_OUT[179:148] == 32'd0 && !ff_input_D_OUT[5]) ?
	       32'b0 :
	       x1_avValue_final_result__h226599 ;
  assign x1_avValue_final_result__h243573 =
	     { CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_setCanonic_ETC__q43,
	       setCanonicalNaN_reswget_BITS_95_TO_64__q41[30:0] } ;
  assign x__h107979 = msb_zeros__h107913 - 7'd1 ;
  assign x__h108005 = { 6'd0, msb_zeros__h107913 } ;
  assign x__h117723 =
	     (!inst_dpfm_add_sub_ff_input_register_read__852__ETC___d1857 ||
	      inst_dpfm_add_sub_ff_input_register[200] &&
	      inst_dpfm_add_sub_ff_input_register[94:82] == 13'd2046) &&
	     (!inst_dpfm_add_sub_ff_input_register[2] ||
	      !(x__h117754 ^ inst_dpfm_add_sub_ff_input_register[5])) ;
  assign x__h117754 =
	     inst_dpfm_add_sub_ff_input_register[81] ^
	     inst_dpfm_add_sub_ff_input_register[80] ;
  assign x__h117784 =
	     inst_dpfm_add_sub_ff_input_register_read__852__ETC___d1857 &&
	     (!inst_dpfm_add_sub_ff_input_register[200] ||
	      inst_dpfm_add_sub_ff_input_register[94:82] != 13'd2046) &&
	     (inst_dpfm_add_sub_ff_input_register_read__852__ETC___d1856 ^
	      13'h1000) <
	     13'd3020 &&
	     (!inst_dpfm_add_sub_ff_input_register[2] ||
	      inst_dpfm_add_sub_ff_input_register[12] ||
	      inst_dpfm_add_sub_ff_input_register[13]) &&
	     !inst_dpfm_add_sub_ff_input_register[14] ;
  assign x__h118132 = x__h118144 | y__h118145 ;
  assign x__h118144 = _theResult_____1__h118026 & sign2__h117978 ;
  assign x__h14042 =
	     inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d127 &&
	     inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d128 ;
  assign x__h14047 =
	     (!inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d127 ||
	      inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d128 ||
	      _1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d130) ?
	       x_wget__h658[0] :
	       lv_sticky___1__h7006 ;
  assign x__h14276 = _theResult____h14114 | inst_spfpu_divider_rg_stage3[53] ;
  assign x__h14480 = inst_spfpu_divider_rg_stage3[52] | _theResult____h14114 ;
  assign x__h14515 = x__h14517 | _theResult____h14114 ;
  assign x__h14517 =
	     inst_spfpu_divider_rg_stage3[53] |
	     inst_spfpu_divider_rg_stage3[52] ;
  assign x__h153088 =
	     mantissa_to_shift__h118015[0] ?
	       8'd0 :
	       (mantissa_to_shift__h118015[1] ?
		  8'd1 :
		  (mantissa_to_shift__h118015[2] ?
		     8'd2 :
		     (mantissa_to_shift__h118015[3] ?
			8'd3 :
			(mantissa_to_shift__h118015[4] ?
			   8'd4 :
			   (mantissa_to_shift__h118015[5] ?
			      8'd5 :
			      (mantissa_to_shift__h118015[6] ?
				 8'd6 :
				 (mantissa_to_shift__h118015[7] ?
				    8'd7 :
				    (mantissa_to_shift__h118015[8] ?
				       8'd8 :
				       (mantissa_to_shift__h118015[9] ?
					  8'd9 :
					  (mantissa_to_shift__h118015[10] ?
					     8'd10 :
					     (mantissa_to_shift__h118015[11] ?
						8'd11 :
						(mantissa_to_shift__h118015[12] ?
						   8'd12 :
						   (mantissa_to_shift__h118015[13] ?
						      8'd13 :
						      (mantissa_to_shift__h118015[14] ?
							 8'd14 :
							 (mantissa_to_shift__h118015[15] ?
							    8'd15 :
							    (mantissa_to_shift__h118015[16] ?
							       8'd16 :
							       (mantissa_to_shift__h118015[17] ?
								  8'd17 :
								  (mantissa_to_shift__h118015[18] ?
								     8'd18 :
								     (mantissa_to_shift__h118015[19] ?
									8'd19 :
									(mantissa_to_shift__h118015[20] ?
									   8'd20 :
									   (mantissa_to_shift__h118015[21] ?
									      8'd21 :
									      (mantissa_to_shift__h118015[22] ?
										 8'd22 :
										 (mantissa_to_shift__h118015[23] ?
										    8'd23 :
										    (mantissa_to_shift__h118015[24] ?
										       8'd24 :
										       (mantissa_to_shift__h118015[25] ?
											  8'd25 :
											  (mantissa_to_shift__h118015[26] ?
											     8'd26 :
											     (mantissa_to_shift__h118015[27] ?
												8'd27 :
												(mantissa_to_shift__h118015[28] ?
												   8'd28 :
												   (mantissa_to_shift__h118015[29] ?
												      8'd29 :
												      (mantissa_to_shift__h118015[30] ?
													 8'd30 :
													 (mantissa_to_shift__h118015[31] ?
													    8'd31 :
													    (mantissa_to_shift__h118015[32] ?
													       8'd32 :
													       (mantissa_to_shift__h118015[33] ?
														  8'd33 :
														  (mantissa_to_shift__h118015[34] ?
														     8'd34 :
														     (mantissa_to_shift__h118015[35] ?
															8'd35 :
															(mantissa_to_shift__h118015[36] ?
															   8'd36 :
															   (mantissa_to_shift__h118015[37] ?
															      8'd37 :
															      (mantissa_to_shift__h118015[38] ?
																 8'd38 :
																 (mantissa_to_shift__h118015[39] ?
																    8'd39 :
																    (mantissa_to_shift__h118015[40] ?
																       8'd40 :
																       (mantissa_to_shift__h118015[41] ?
																	  8'd41 :
																	  (mantissa_to_shift__h118015[42] ?
																	     8'd42 :
																	     (mantissa_to_shift__h118015[43] ?
																		8'd43 :
																		(mantissa_to_shift__h118015[44] ?
																		   8'd44 :
																		   (mantissa_to_shift__h118015[45] ?
																		      8'd45 :
																		      (mantissa_to_shift__h118015[46] ?
																			 8'd46 :
																			 (mantissa_to_shift__h118015[47] ?
																			    8'd47 :
																			    (mantissa_to_shift__h118015[48] ?
																			       8'd48 :
																			       (mantissa_to_shift__h118015[49] ?
																				  8'd49 :
																				  (mantissa_to_shift__h118015[50] ?
																				     8'd50 :
																				     (mantissa_to_shift__h118015[51] ?
																					8'd51 :
																					(mantissa_to_shift__h118015[52] ?
																					   8'd52 :
																					   (mantissa_to_shift__h118015[53] ?
																					      8'd53 :
																					      (mantissa_to_shift__h118015[54] ?
																						 8'd54 :
																						 (mantissa_to_shift__h118015[55] ?
																						    8'd55 :
																						    (mantissa_to_shift__h118015[56] ?
																						       8'd56 :
																						       (mantissa_to_shift__h118015[57] ?
																							  8'd57 :
																							  (mantissa_to_shift__h118015[58] ?
																							     8'd58 :
																							     (mantissa_to_shift__h118015[59] ?
																								8'd59 :
																								(mantissa_to_shift__h118015[60] ?
																								   8'd60 :
																								   (mantissa_to_shift__h118015[61] ?
																								      8'd61 :
																								      (mantissa_to_shift__h118015[62] ?
																									 8'd62 :
																									 (mantissa_to_shift__h118015[63] ?
																									    8'd63 :
																									    (mantissa_to_shift__h118015[64] ?
																									       8'd64 :
																									       (mantissa_to_shift__h118015[65] ?
																										  8'd65 :
																										  (mantissa_to_shift__h118015[66] ?
																										     8'd66 :
																										     (mantissa_to_shift__h118015[67] ?
																											8'd67 :
																											(mantissa_to_shift__h118015[68] ?
																											   8'd68 :
																											   (mantissa_to_shift__h118015[69] ?
																											      8'd69 :
																											      (mantissa_to_shift__h118015[70] ?
																												 8'd70 :
																												 (mantissa_to_shift__h118015[71] ?
																												    8'd71 :
																												    (mantissa_to_shift__h118015[72] ?
																												       8'd72 :
																												       (mantissa_to_shift__h118015[73] ?
																													  8'd73 :
																													  (mantissa_to_shift__h118015[74] ?
																													     8'd74 :
																													     (mantissa_to_shift__h118015[75] ?
																														8'd75 :
																														(mantissa_to_shift__h118015[76] ?
																														   8'd76 :
																														   (mantissa_to_shift__h118015[77] ?
																														      8'd77 :
																														      (mantissa_to_shift__h118015[78] ?
																															 8'd78 :
																															 (mantissa_to_shift__h118015[79] ?
																															    8'd79 :
																															    (mantissa_to_shift__h118015[80] ?
																															       8'd80 :
																															       (mantissa_to_shift__h118015[81] ?
																																  8'd81 :
																																  (mantissa_to_shift__h118015[82] ?
																																     8'd82 :
																																     (mantissa_to_shift__h118015[83] ?
																																	8'd83 :
																																	(mantissa_to_shift__h118015[84] ?
																																	   8'd84 :
																																	   (mantissa_to_shift__h118015[85] ?
																																	      8'd85 :
																																	      (mantissa_to_shift__h118015[86] ?
																																		 8'd86 :
																																		 (mantissa_to_shift__h118015[87] ?
																																		    8'd87 :
																																		    (mantissa_to_shift__h118015[88] ?
																																		       8'd88 :
																																		       (mantissa_to_shift__h118015[89] ?
																																			  8'd89 :
																																			  (mantissa_to_shift__h118015[90] ?
																																			     8'd90 :
																																			     (mantissa_to_shift__h118015[91] ?
																																				8'd91 :
																																				(mantissa_to_shift__h118015[92] ?
																																				   8'd92 :
																																				   (mantissa_to_shift__h118015[93] ?
																																				      8'd93 :
																																				      (mantissa_to_shift__h118015[94] ?
																																					 8'd94 :
																																					 (mantissa_to_shift__h118015[95] ?
																																					    8'd95 :
																																					    (mantissa_to_shift__h118015[96] ?
																																					       8'd96 :
																																					       (mantissa_to_shift__h118015[97] ?
																																						  8'd97 :
																																						  (mantissa_to_shift__h118015[98] ?
																																						     8'd98 :
																																						     (mantissa_to_shift__h118015[99] ?
																																							8'd99 :
																																							(mantissa_to_shift__h118015[100] ?
																																							   8'd100 :
																																							   (mantissa_to_shift__h118015[101] ?
																																							      8'd101 :
																																							      (mantissa_to_shift__h118015[102] ?
																																								 8'd102 :
																																								 (mantissa_to_shift__h118015[103] ?
																																								    8'd103 :
																																								    (mantissa_to_shift__h118015[104] ?
																																								       8'd104 :
																																								       (mantissa_to_shift__h118015[105] ?
																																									  8'd105 :
																																									  (mantissa_to_shift__h118015[106] ?
																																									     8'd106 :
																																									     (mantissa_to_shift__h118015[107] ?
																																										8'd107 :
																																										(mantissa_to_shift__h118015[108] ?
																																										   8'd108 :
																																										   (mantissa_to_shift__h118015[109] ?
																																										      8'd109 :
																																										      (mantissa_to_shift__h118015[110] ?
																																											 8'd110 :
																																											 (mantissa_to_shift__h118015[111] ?
																																											    8'd111 :
																																											    (mantissa_to_shift__h118015[112] ?
																																											       8'd112 :
																																											       (mantissa_to_shift__h118015[113] ?
																																												  8'd113 :
																																												  (mantissa_to_shift__h118015[114] ?
																																												     8'd114 :
																																												     (mantissa_to_shift__h118015[115] ?
																																													8'd115 :
																																													(mantissa_to_shift__h118015[116] ?
																																													   8'd116 :
																																													   (mantissa_to_shift__h118015[117] ?
																																													      8'd117 :
																																													      (mantissa_to_shift__h118015[118] ?
																																														 8'd118 :
																																														 (mantissa_to_shift__h118015[119] ?
																																														    8'd119 :
																																														    (mantissa_to_shift__h118015[120] ?
																																														       8'd120 :
																																														       (mantissa_to_shift__h118015[121] ?
																																															  8'd121 :
																																															  (mantissa_to_shift__h118015[122] ?
																																															     8'd122 :
																																															     (mantissa_to_shift__h118015[123] ?
																																																8'd123 :
																																																(mantissa_to_shift__h118015[124] ?
																																																   8'd124 :
																																																   (mantissa_to_shift__h118015[125] ?
																																																      8'd125 :
																																																      (mantissa_to_shift__h118015[126] ?
																																																	 8'd126 :
																																																	 (mantissa_to_shift__h118015[127] ?
																																																	    8'd127 :
																																																	    (mantissa_to_shift__h118015[128] ?
																																																	       8'd128 :
																																																	       (mantissa_to_shift__h118015[129] ?
																																																		  8'd129 :
																																																		  (mantissa_to_shift__h118015[130] ?
																																																		     8'd130 :
																																																		     (mantissa_to_shift__h118015[131] ?
																																																			8'd131 :
																																																			(mantissa_to_shift__h118015[132] ?
																																																			   8'd132 :
																																																			   (mantissa_to_shift__h118015[133] ?
																																																			      8'd133 :
																																																			      (mantissa_to_shift__h118015[134] ?
																																																				 8'd134 :
																																																				 (mantissa_to_shift__h118015[135] ?
																																																				    8'd135 :
																																																				    (mantissa_to_shift__h118015[136] ?
																																																				       8'd136 :
																																																				       (mantissa_to_shift__h118015[137] ?
																																																					  8'd137 :
																																																					  (mantissa_to_shift__h118015[138] ?
																																																					     8'd138 :
																																																					     (mantissa_to_shift__h118015[139] ?
																																																						8'd139 :
																																																						(mantissa_to_shift__h118015[140] ?
																																																						   8'd140 :
																																																						   (mantissa_to_shift__h118015[141] ?
																																																						      8'd141 :
																																																						      (mantissa_to_shift__h118015[142] ?
																																																							 8'd142 :
																																																							 (mantissa_to_shift__h118015[143] ?
																																																							    8'd143 :
																																																							    (mantissa_to_shift__h118015[144] ?
																																																							       8'd144 :
																																																							       (mantissa_to_shift__h118015[145] ?
																																																								  8'd145 :
																																																								  (mantissa_to_shift__h118015[146] ?
																																																								     8'd146 :
																																																								     (mantissa_to_shift__h118015[147] ?
																																																									8'd147 :
																																																									(mantissa_to_shift__h118015[148] ?
																																																									   8'd148 :
																																																									   (mantissa_to_shift__h118015[149] ?
																																																									      8'd149 :
																																																									      (mantissa_to_shift__h118015[150] ?
																																																										 8'd150 :
																																																										 (mantissa_to_shift__h118015[151] ?
																																																										    8'd151 :
																																																										    (mantissa_to_shift__h118015[152] ?
																																																										       8'd152 :
																																																										       (mantissa_to_shift__h118015[153] ?
																																																											  8'd153 :
																																																											  (mantissa_to_shift__h118015[154] ?
																																																											     8'd154 :
																																																											     (mantissa_to_shift__h118015[155] ?
																																																												8'd155 :
																																																												(mantissa_to_shift__h118015[156] ?
																																																												   8'd156 :
																																																												   (mantissa_to_shift__h118015[157] ?
																																																												      8'd157 :
																																																												      (mantissa_to_shift__h118015[158] ?
																																																													 8'd158 :
																																																													 (mantissa_to_shift__h118015[159] ?
																																																													    8'd159 :
																																																													    8'd160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h15999 =
	     { inst_spfpu_sqrt_rg_inter_stage[92:69],
	       !_theResult____h15953[28],
	       1'd0 } ;
  assign x__h16262 =
	     { inst_spfpu_sqrt_rg_inter_stage[27:3],
	       !_theResult____h15953[28] } ;
  assign x__h16660 =
	     inst_spfpu_sqrt_rg_inter_stage[70] | !_theResult____h15953[28] ;
  assign x__h16701 =
	     _theResult____h15953[28] ?
	       lv_remainder__h16723 :
	       _theResult____h15953 ;
  assign x__h167397 = ~_theResult_____1__h118026 ;
  assign x__h167404 =
	     inst_dpfm_add_sub_ff_stage2_read__367_BIT_15_3_ETC___d2392 ||
	     inst_dpfm_add_sub_ff_stage2[6] ||
	     (!inst_dpfm_add_sub_ff_stage2[16] ||
	      !inst_dpfm_add_sub_ff_stage2[5]) &&
	     inst_dpfm_add_sub_ff_stage2[4] &&
	     inst_dpfm_add_sub_ff_stage2[14] &&
	     x__h167512 ;
  assign x__h167512 = sign2__h117978 ^ op_xor_sign3__h117991 ;
  assign x__h167520 =
	     (inst_dpfm_add_sub_ff_stage2_read__367_BIT_15_3_ETC___d2392 ||
	      inst_dpfm_add_sub_ff_stage2[6] ||
	      inst_dpfm_add_sub_ff_stage2[16] &&
	      inst_dpfm_add_sub_ff_stage2[5]) ?
	       2'd0 :
	       _theResult_____6_snd_snd__h167477 ;
  assign x__h167552 = x__h167554 & sign2__h117978 ;
  assign x__h167554 = inst_dpfm_add_sub_ff_stage2[4] & y__h167555 ;
  assign x__h167556 = x__h167557 & inst_dpfm_add_sub_ff_stage2[14] ;
  assign x__h167557 = ~inst_dpfm_add_sub_ff_stage2[4] ;
  assign x__h167561 =
	     (inst_dpfm_add_sub_ff_stage2_read__367_BIT_15_3_ETC___d2392 ||
	      inst_dpfm_add_sub_ff_stage2[6]) ?
	       2'd0 :
	       _theResult_____6_snd_snd_snd__h167524 ;
  assign x__h167585 = x__h167597 & y__h167598 ;
  assign x__h167597 =
	     (inst_dpfm_add_sub_ff_stage2_read__367_BIT_15_3_ETC___d2392 ||
	      inst_dpfm_add_sub_ff_stage2[6] ||
	      inst_dpfm_add_sub_ff_stage2[16] &&
	      inst_dpfm_add_sub_ff_stage2[5]) ?
	       inst_dpfm_add_sub_ff_stage2[1] :
	       _theResult_____6_fst__h167474 ;
  assign x__h167627 =
	     (inst_dpfm_add_sub_ff_stage2[1] ||
	      !inst_dpfm_add_sub_ff_stage2[6]) &&
	     inst_dpfm_add_sub_ff_stage2[15] ;
  assign x__h16775 =
	     inst_spfpu_sqrt_rg_inter_stage[69] | !_theResult____h15953[28] ;
  assign x__h167820 =
	     (_theResult____h167743 == 160'd0) ?
	       ((inst_dpfm_add_sub_ff_stage4[12:10] == 3'b010) ?
		  2'b11 :
		  2'b01) :
	       2'd0 ;
  assign x__h194398 = inst_dpfm_add_sub_ff_stage5[7:0] - 8'd1 ;
  assign x__h194419 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3189[106] |
	     IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3189[104] ;
  assign x__h194501 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3189[105] |
	     IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3189[104] ;
  assign x__h209769 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5142[7] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5142[6] ;
  assign x__h210030 =
	     _theResult____h209738[31] ?
	       6'd0 :
	       (_theResult____h209738[30] ?
		  6'd1 :
		  (_theResult____h209738[29] ?
		     6'd2 :
		     (_theResult____h209738[28] ?
			6'd3 :
			(_theResult____h209738[27] ?
			   6'd4 :
			   (_theResult____h209738[26] ?
			      6'd5 :
			      (_theResult____h209738[25] ?
				 6'd6 :
				 (_theResult____h209738[24] ?
				    6'd7 :
				    (_theResult____h209738[23] ?
				       6'd8 :
				       (_theResult____h209738[22] ?
					  6'd9 :
					  (_theResult____h209738[21] ?
					     6'd10 :
					     (_theResult____h209738[20] ?
						6'd11 :
						(_theResult____h209738[19] ?
						   6'd12 :
						   (_theResult____h209738[18] ?
						      6'd13 :
						      (_theResult____h209738[17] ?
							 6'd14 :
							 (_theResult____h209738[16] ?
							    6'd15 :
							    (_theResult____h209738[15] ?
							       6'd16 :
							       (_theResult____h209738[14] ?
								  6'd17 :
								  (_theResult____h209738[13] ?
								     6'd18 :
								     (_theResult____h209738[12] ?
									6'd19 :
									(_theResult____h209738[11] ?
									   6'd20 :
									   (_theResult____h209738[10] ?
									      6'd21 :
									      (_theResult____h209738[9] ?
										 6'd22 :
										 (_theResult____h209738[8] ?
										    6'd23 :
										    (_theResult____h209738[7] ?
										       6'd24 :
										       (_theResult____h209738[6] ?
											  6'd25 :
											  (_theResult____h209738[5] ?
											     6'd26 :
											     (_theResult____h209738[4] ?
												6'd27 :
												(_theResult____h209738[3] ?
												   6'd28 :
												   (_theResult____h209738[2] ?
												      6'd29 :
												      (_theResult____h209738[1] ?
													 6'd30 :
													 (_theResult____h209738[0] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign x__h215365 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5142[8] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5142[6] ;
  assign x__h215641 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5018[39] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5018[38] ;
  assign x__h215920 =
	     _theResult____h215610[63] ?
	       7'd0 :
	       (_theResult____h215610[62] ?
		  7'd1 :
		  (_theResult____h215610[61] ?
		     7'd2 :
		     (_theResult____h215610[60] ?
			7'd3 :
			(_theResult____h215610[59] ?
			   7'd4 :
			   (_theResult____h215610[58] ?
			      7'd5 :
			      (_theResult____h215610[57] ?
				 7'd6 :
				 (_theResult____h215610[56] ?
				    7'd7 :
				    (_theResult____h215610[55] ?
				       7'd8 :
				       (_theResult____h215610[54] ?
					  7'd9 :
					  (_theResult____h215610[53] ?
					     7'd10 :
					     (_theResult____h215610[52] ?
						7'd11 :
						(_theResult____h215610[51] ?
						   7'd12 :
						   (_theResult____h215610[50] ?
						      7'd13 :
						      (_theResult____h215610[49] ?
							 7'd14 :
							 (_theResult____h215610[48] ?
							    7'd15 :
							    (_theResult____h215610[47] ?
							       7'd16 :
							       (_theResult____h215610[46] ?
								  7'd17 :
								  (_theResult____h215610[45] ?
								     7'd18 :
								     (_theResult____h215610[44] ?
									7'd19 :
									(_theResult____h215610[43] ?
									   7'd20 :
									   (_theResult____h215610[42] ?
									      7'd21 :
									      (_theResult____h215610[41] ?
										 7'd22 :
										 (_theResult____h215610[40] ?
										    7'd23 :
										    (_theResult____h215610[39] ?
										       7'd24 :
										       (_theResult____h215610[38] ?
											  7'd25 :
											  (_theResult____h215610[37] ?
											     7'd26 :
											     (_theResult____h215610[36] ?
												7'd27 :
												(_theResult____h215610[35] ?
												   7'd28 :
												   (_theResult____h215610[34] ?
												      7'd29 :
												      (_theResult____h215610[33] ?
													 7'd30 :
													 (_theResult____h215610[32] ?
													    7'd31 :
													    (_theResult____h215610[31] ?
													       7'd32 :
													       (_theResult____h215610[30] ?
														  7'd33 :
														  (_theResult____h215610[29] ?
														     7'd34 :
														     (_theResult____h215610[28] ?
															7'd35 :
															(_theResult____h215610[27] ?
															   7'd36 :
															   (_theResult____h215610[26] ?
															      7'd37 :
															      (_theResult____h215610[25] ?
																 7'd38 :
																 (_theResult____h215610[24] ?
																    7'd39 :
																    (_theResult____h215610[23] ?
																       7'd40 :
																       (_theResult____h215610[22] ?
																	  7'd41 :
																	  (_theResult____h215610[21] ?
																	     7'd42 :
																	     (_theResult____h215610[20] ?
																		7'd43 :
																		(_theResult____h215610[19] ?
																		   7'd44 :
																		   (_theResult____h215610[18] ?
																		      7'd45 :
																		      (_theResult____h215610[17] ?
																			 7'd46 :
																			 (_theResult____h215610[16] ?
																			    7'd47 :
																			    (_theResult____h215610[15] ?
																			       7'd48 :
																			       (_theResult____h215610[14] ?
																				  7'd49 :
																				  (_theResult____h215610[13] ?
																				     7'd50 :
																				     (_theResult____h215610[12] ?
																					7'd51 :
																					(_theResult____h215610[11] ?
																					   7'd52 :
																					   (_theResult____h215610[10] ?
																					      7'd53 :
																					      (_theResult____h215610[9] ?
																						 7'd54 :
																						 (_theResult____h215610[8] ?
																						    7'd55 :
																						    (_theResult____h215610[7] ?
																						       7'd56 :
																						       (_theResult____h215610[6] ?
																							  7'd57 :
																							  (_theResult____h215610[5] ?
																							     7'd58 :
																							     (_theResult____h215610[4] ?
																								7'd59 :
																								(_theResult____h215610[3] ?
																								   7'd60 :
																								   (_theResult____h215610[2] ?
																								      7'd61 :
																								      (_theResult____h215610[1] ?
																									 7'd62 :
																									 (_theResult____h215610[0] ?
																									    7'd63 :
																									    7'd64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h226440 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5018[40] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5018[38] ;
  assign x__h227037 =
	     _theResult____h226901[31] ?
	       6'd0 :
	       (_theResult____h226901[30] ?
		  6'd1 :
		  (_theResult____h226901[29] ?
		     6'd2 :
		     (_theResult____h226901[28] ?
			6'd3 :
			(_theResult____h226901[27] ?
			   6'd4 :
			   (_theResult____h226901[26] ?
			      6'd5 :
			      (_theResult____h226901[25] ?
				 6'd6 :
				 (_theResult____h226901[24] ?
				    6'd7 :
				    (_theResult____h226901[23] ?
				       6'd8 :
				       (_theResult____h226901[22] ?
					  6'd9 :
					  (_theResult____h226901[21] ?
					     6'd10 :
					     (_theResult____h226901[20] ?
						6'd11 :
						(_theResult____h226901[19] ?
						   6'd12 :
						   (_theResult____h226901[18] ?
						      6'd13 :
						      (_theResult____h226901[17] ?
							 6'd14 :
							 (_theResult____h226901[16] ?
							    6'd15 :
							    (_theResult____h226901[15] ?
							       6'd16 :
							       (_theResult____h226901[14] ?
								  6'd17 :
								  (_theResult____h226901[13] ?
								     6'd18 :
								     (_theResult____h226901[12] ?
									6'd19 :
									(_theResult____h226901[11] ?
									   6'd20 :
									   (_theResult____h226901[10] ?
									      6'd21 :
									      (_theResult____h226901[9] ?
										 6'd22 :
										 (_theResult____h226901[8] ?
										    6'd23 :
										    (_theResult____h226901[7] ?
										       6'd24 :
										       (_theResult____h226901[6] ?
											  6'd25 :
											  (_theResult____h226901[5] ?
											     6'd26 :
											     (_theResult____h226901[4] ?
												6'd27 :
												(_theResult____h226901[3] ?
												   6'd28 :
												   (_theResult____h226901[2] ?
												      6'd29 :
												      (_theResult____h226901[1] ?
													 6'd30 :
													 (_theResult____h226901[0] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign x__h232393 =
	     IF_NOT_ff_input_first__305_BIT_4_530_544_AND_f_ETC___d3678[10] |
	     IF_NOT_ff_input_first__305_BIT_4_530_544_AND_f_ETC___d3678[9] ;
  assign x__h232473 =
	     _theResult____h226914[63] ?
	       7'd0 :
	       (_theResult____h226914[62] ?
		  7'd1 :
		  (_theResult____h226914[61] ?
		     7'd2 :
		     (_theResult____h226914[60] ?
			7'd3 :
			(_theResult____h226914[59] ?
			   7'd4 :
			   (_theResult____h226914[58] ?
			      7'd5 :
			      (_theResult____h226914[57] ?
				 7'd6 :
				 (_theResult____h226914[56] ?
				    7'd7 :
				    (_theResult____h226914[55] ?
				       7'd8 :
				       (_theResult____h226914[54] ?
					  7'd9 :
					  (_theResult____h226914[53] ?
					     7'd10 :
					     (_theResult____h226914[52] ?
						7'd11 :
						(_theResult____h226914[51] ?
						   7'd12 :
						   (_theResult____h226914[50] ?
						      7'd13 :
						      (_theResult____h226914[49] ?
							 7'd14 :
							 (_theResult____h226914[48] ?
							    7'd15 :
							    (_theResult____h226914[47] ?
							       7'd16 :
							       (_theResult____h226914[46] ?
								  7'd17 :
								  (_theResult____h226914[45] ?
								     7'd18 :
								     (_theResult____h226914[44] ?
									7'd19 :
									(_theResult____h226914[43] ?
									   7'd20 :
									   (_theResult____h226914[42] ?
									      7'd21 :
									      (_theResult____h226914[41] ?
										 7'd22 :
										 (_theResult____h226914[40] ?
										    7'd23 :
										    (_theResult____h226914[39] ?
										       7'd24 :
										       (_theResult____h226914[38] ?
											  7'd25 :
											  (_theResult____h226914[37] ?
											     7'd26 :
											     (_theResult____h226914[36] ?
												7'd27 :
												(_theResult____h226914[35] ?
												   7'd28 :
												   (_theResult____h226914[34] ?
												      7'd29 :
												      (_theResult____h226914[33] ?
													 7'd30 :
													 (_theResult____h226914[32] ?
													    7'd31 :
													    (_theResult____h226914[31] ?
													       7'd32 :
													       (_theResult____h226914[30] ?
														  7'd33 :
														  (_theResult____h226914[29] ?
														     7'd34 :
														     (_theResult____h226914[28] ?
															7'd35 :
															(_theResult____h226914[27] ?
															   7'd36 :
															   (_theResult____h226914[26] ?
															      7'd37 :
															      (_theResult____h226914[25] ?
																 7'd38 :
																 (_theResult____h226914[24] ?
																    7'd39 :
																    (_theResult____h226914[23] ?
																       7'd40 :
																       (_theResult____h226914[22] ?
																	  7'd41 :
																	  (_theResult____h226914[21] ?
																	     7'd42 :
																	     (_theResult____h226914[20] ?
																		7'd43 :
																		(_theResult____h226914[19] ?
																		   7'd44 :
																		   (_theResult____h226914[18] ?
																		      7'd45 :
																		      (_theResult____h226914[17] ?
																			 7'd46 :
																			 (_theResult____h226914[16] ?
																			    7'd47 :
																			    (_theResult____h226914[15] ?
																			       7'd48 :
																			       (_theResult____h226914[14] ?
																				  7'd49 :
																				  (_theResult____h226914[13] ?
																				     7'd50 :
																				     (_theResult____h226914[12] ?
																					7'd51 :
																					(_theResult____h226914[11] ?
																					   7'd52 :
																					   (_theResult____h226914[10] ?
																					      7'd53 :
																					      (_theResult____h226914[9] ?
																						 7'd54 :
																						 (_theResult____h226914[8] ?
																						    7'd55 :
																						    (_theResult____h226914[7] ?
																						       7'd56 :
																						       (_theResult____h226914[6] ?
																							  7'd57 :
																							  (_theResult____h226914[5] ?
																							     7'd58 :
																							     (_theResult____h226914[4] ?
																								7'd59 :
																								(_theResult____h226914[3] ?
																								   7'd60 :
																								   (_theResult____h226914[2] ?
																								      7'd61 :
																								      (_theResult____h226914[1] ?
																									 7'd62 :
																									 (_theResult____h226914[0] ?
																									    7'd63 :
																									    7'd64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h242978 =
	     IF_NOT_ff_input_first__305_BIT_4_530_544_AND_f_ETC___d3678[11] |
	     IF_NOT_ff_input_first__305_BIT_4_530_544_AND_f_ETC___d3678[9] ;
  assign x__h243205 =
	     (setCanonicalNaN_argwget_BITS_191_TO_128__q38[63:32] ==
	      32'hFFFFFFFF) ?
	       setCanonicalNaN_argwget_BITS_191_TO_128__q38[31:0] :
	       32'h7FC00000 ;
  assign x__h243346 =
	     (setCanonicalNaN_argwget_BITS_127_TO_64__q39[63:32] ==
	      32'hFFFFFFFF) ?
	       setCanonicalNaN_argwget_BITS_127_TO_64__q39[31:0] :
	       32'h7FC00000 ;
  assign x__h243428 =
	     (setCanonicalNaN_argwget_BITS_63_TO_0__q40[63:32] ==
	      32'hFFFFFFFF) ?
	       setCanonicalNaN_argwget_BITS_63_TO_0__q40[31:0] :
	       32'h7FC00000 ;
  assign x__h245573 =
	     { condFlags32_arg_wget[69:62] == 8'd0 &&
	       condFlags32_arg_wget[92:70] != 23'd0,
	       condFlags32_arg_wget[92:70] == 23'd0 &&
	       condFlags32_arg_wget[69:62] == 8'd0,
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       condFlags32_argwget_BITS_92_TO_70__q49[22],
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       condFlags32_arg_wget[92:70] == 23'd0,
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       !condFlags32_argwget_BITS_92_TO_70__q49[22] &&
	       condFlags32_arg_wget[92:70] != 23'd0 } ;
  assign x__h245907 =
	     { condFlags32_arg_wget[38:31] == 8'd0 &&
	       condFlags32_arg_wget[61:39] != 23'd0,
	       condFlags32_arg_wget[61:39] == 23'd0 &&
	       condFlags32_arg_wget[38:31] == 8'd0,
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       condFlags32_argwget_BITS_61_TO_39__q50[22],
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       condFlags32_arg_wget[61:39] == 23'd0,
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       !condFlags32_argwget_BITS_61_TO_39__q50[22] &&
	       condFlags32_arg_wget[61:39] != 23'd0 } ;
  assign x__h246088 =
	     { condFlags32_arg_wget[7:0] == 8'd0 &&
	       condFlags32_arg_wget[30:8] != 23'd0,
	       condFlags32_arg_wget[30:8] == 23'd0 &&
	       condFlags32_arg_wget[7:0] == 8'd0,
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       condFlags32_argwget_BITS_30_TO_8__q51[22],
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       condFlags32_arg_wget[30:8] == 23'd0,
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       !condFlags32_argwget_BITS_30_TO_8__q51[22] &&
	       condFlags32_arg_wget[30:8] != 23'd0 } ;
  assign x__h247306 =
	     final_result__h246355[0] |
	     IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d3868[21] ;
  assign x__h247717 =
	     IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d3868[22] |
	     IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d3868[21] ;
  assign x__h249072 =
	     { condFlags64_arg_wget[136:126] == 11'd0 &&
	       condFlags64_arg_wget[188:137] != 52'd0,
	       condFlags64_arg_wget[188:137] == 52'd0 &&
	       condFlags64_arg_wget[136:126] == 11'd0,
	       condFlags64_arg_wget[136:126] == 11'd2047 &&
	       condFlags64_argwget_BITS_188_TO_137__q28[51],
	       condFlags64_arg_wget[136:126] == 11'd2047 &&
	       condFlags64_arg_wget[188:137] == 52'd0,
	       condFlags64_arg_wget[136:126] == 11'd2047 &&
	       !condFlags64_argwget_BITS_188_TO_137__q28[51] &&
	       condFlags64_arg_wget[188:137] != 52'd0 } ;
  assign x__h249406 =
	     { condFlags64_arg_wget[73:63] == 11'd0 &&
	       condFlags64_arg_wget[125:74] != 52'd0,
	       condFlags64_arg_wget[125:74] == 52'd0 &&
	       condFlags64_arg_wget[73:63] == 11'd0,
	       condFlags64_arg_wget[73:63] == 11'd2047 &&
	       condFlags64_argwget_BITS_125_TO_74__q29[51],
	       condFlags64_arg_wget[73:63] == 11'd2047 &&
	       condFlags64_arg_wget[125:74] == 52'd0,
	       condFlags64_arg_wget[73:63] == 11'd2047 &&
	       !condFlags64_argwget_BITS_125_TO_74__q29[51] &&
	       condFlags64_arg_wget[125:74] != 52'd0 } ;
  assign x__h249587 =
	     { condFlags64_arg_wget[10:0] == 11'd0 &&
	       condFlags64_arg_wget[62:11] != 52'd0,
	       condFlags64_arg_wget[62:11] == 52'd0 &&
	       condFlags64_arg_wget[10:0] == 11'd0,
	       condFlags64_arg_wget[10:0] == 11'd2047 &&
	       condFlags64_argwget_BITS_62_TO_11__q30[51],
	       condFlags64_arg_wget[10:0] == 11'd2047 &&
	       condFlags64_arg_wget[62:11] == 52'd0,
	       condFlags64_arg_wget[10:0] == 11'd2047 &&
	       !condFlags64_argwget_BITS_62_TO_11__q30[51] &&
	       condFlags64_arg_wget[62:11] != 52'd0 } ;
  assign x__h250010 = lv_exp__h249844 - 12'd1023 ;
  assign x__h250828 =
	     final_result__h249855[0] |
	     IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d4035[50] ;
  assign x__h251249 =
	     IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d4035[51] |
	     IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d4035[50] ;
  assign x__h25372 = msb_zeros__h25306 - 6'd1 ;
  assign x__h253934 =
	     (setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
	      condFlags32_reswget_BITS_14_TO_10__q52[1]) ?
	       10'h001 :
	       ((setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
		 condFlags32_res_wget[14:10] == 5'd0) ?
		  10'h002 :
		  ((setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
		    condFlags32_reswget_BITS_14_TO_10__q52[4]) ?
		     10'h004 :
		     ((setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
		       condFlags32_reswget_BITS_14_TO_10__q52[3]) ?
			10'h008 :
			((!setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
			  condFlags32_reswget_BITS_14_TO_10__q52[3]) ?
			   10'h010 :
			   ((!setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
			     condFlags32_reswget_BITS_14_TO_10__q52[4]) ?
			      10'h020 :
			      ((!setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
				condFlags32_res_wget[14:10] == 5'd0) ?
				 10'h040 :
				 ((!setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
				   condFlags32_reswget_BITS_14_TO_10__q52[1]) ?
				    10'h080 :
				    (condFlags32_reswget_BITS_14_TO_10__q52[0] ?
				       10'h100 :
				       10'h200)))))))) ;
  assign x__h25398 = { 4'd0, msb_zeros__h25306 } ;
  assign x__h255839 =
	     (ff_input_D_OUT[211] &&
	      condFlags64_reswget_BITS_14_TO_10__q31[1]) ?
	       10'h001 :
	       ((ff_input_D_OUT[211] && condFlags64_res_wget[14:10] == 5'd0) ?
		  10'h002 :
		  ((ff_input_D_OUT[211] &&
		    condFlags64_reswget_BITS_14_TO_10__q31[4]) ?
		     10'h004 :
		     ((ff_input_D_OUT[211] &&
		       condFlags64_reswget_BITS_14_TO_10__q31[3]) ?
			10'h008 :
			((!ff_input_D_OUT[211] &&
			  condFlags64_reswget_BITS_14_TO_10__q31[3]) ?
			   10'h010 :
			   ((!ff_input_D_OUT[211] &&
			     condFlags64_reswget_BITS_14_TO_10__q31[4]) ?
			      10'h020 :
			      ((!ff_input_D_OUT[211] &&
				condFlags64_res_wget[14:10] == 5'd0) ?
				 10'h040 :
				 ((!ff_input_D_OUT[211] &&
				   condFlags64_reswget_BITS_14_TO_10__q31[1]) ?
				    10'h080 :
				    (condFlags64_reswget_BITS_14_TO_10__q31[0] ?
				       10'h100 :
				       10'h200)))))))) ;
  assign x__h258760 =
	     getMant32_reswget_BITS_68_TO_46__q47[22] ?
	       5'd0 :
	       (getMant32_reswget_BITS_68_TO_46__q47[21] ?
		  5'd1 :
		  (getMant32_reswget_BITS_68_TO_46__q47[20] ?
		     5'd2 :
		     (getMant32_reswget_BITS_68_TO_46__q47[19] ?
			5'd3 :
			(getMant32_reswget_BITS_68_TO_46__q47[18] ?
			   5'd4 :
			   (getMant32_reswget_BITS_68_TO_46__q47[17] ?
			      5'd5 :
			      (getMant32_reswget_BITS_68_TO_46__q47[16] ?
				 5'd6 :
				 (getMant32_reswget_BITS_68_TO_46__q47[15] ?
				    5'd7 :
				    (getMant32_reswget_BITS_68_TO_46__q47[14] ?
				       5'd8 :
				       (getMant32_reswget_BITS_68_TO_46__q47[13] ?
					  5'd9 :
					  (getMant32_reswget_BITS_68_TO_46__q47[12] ?
					     5'd10 :
					     (getMant32_reswget_BITS_68_TO_46__q47[11] ?
						5'd11 :
						(getMant32_reswget_BITS_68_TO_46__q47[10] ?
						   5'd12 :
						   (getMant32_reswget_BITS_68_TO_46__q47[9] ?
						      5'd13 :
						      (getMant32_reswget_BITS_68_TO_46__q47[8] ?
							 5'd14 :
							 (getMant32_reswget_BITS_68_TO_46__q47[7] ?
							    5'd15 :
							    (getMant32_reswget_BITS_68_TO_46__q47[6] ?
							       5'd16 :
							       (getMant32_reswget_BITS_68_TO_46__q47[5] ?
								  5'd17 :
								  (getMant32_reswget_BITS_68_TO_46__q47[4] ?
								     5'd18 :
								     (getMant32_reswget_BITS_68_TO_46__q47[3] ?
									5'd19 :
									(getMant32_reswget_BITS_68_TO_46__q47[2] ?
									   5'd20 :
									   (getMant32_reswget_BITS_68_TO_46__q47[1] ?
									      5'd21 :
									      (getMant32_reswget_BITS_68_TO_46__q47[0] ?
										 5'd22 :
										 5'd23)))))))))))))))))))))) ;
  assign x__h265037 =
	     IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4346[25] |
	     IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4346[24] ;
  assign x__h265601 =
	     IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4346[24] |
	     _theResult___snd_snd_snd_snd__h264813 ;
  assign x__h265691 = getExp64_res_wget[32:22] - 11'h380 ;
  assign x__h268376 =
	     { ~lv_op1_subnormal__h268299, getMant32_res_wget[68:46] } ;
  assign x__h268462 =
	     { ~lv_op2_subnormal__h268300, getMant32_res_wget[45:23] } ;
  assign x__h268577 = x__h268579 + y__h268580 ;
  assign x__h268579 = x__h268581 - 10'd127 ;
  assign x__h268581 = exp1_temp__h268308 + exp2_temp__h268309 ;
  assign x__h268632 =
	     lv_invalid__h246335 ||
	     IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d5229 ||
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[1]) &&
	     (condFlags32_reswget_BITS_14_TO_10__q52[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[3]) ;
  assign x__h268895 =
	     !lv_invalid__h246335 &&
	     !IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d5229 &&
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[1]) &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	     !condFlags32_reswget_BITS_9_TO_5__q53[3] ;
  assign x__h268901 =
	     !lv_invalid__h246335 &&
	     !IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d5229 &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	     !condFlags32_reswget_BITS_9_TO_5__q53[1] &&
	     (condFlags32_reswget_BITS_14_TO_10__q52[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[3]) ;
  assign x__h268958 =
	     (lv_invalid__h246335 ||
	      IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d5229) ?
	       quiet_nan_two__h268304 :
	       _theResult___fst__h268818 ;
  assign x__h268971 = condFlags32_reswget_BITS_14_TO_10__q52[2] & y__h268974 ;
  assign x__h269061 = lv_op1_subnormal__h268299 | lv_op2_subnormal__h268300 ;
  assign x__h270986 =
	     { ~lv_op1_subnormal__h270909, getMant64_res_wget[155:104] } ;
  assign x__h271072 =
	     { ~lv_op2_subnormal__h270910, getMant64_res_wget[103:52] } ;
  assign x__h271187 = x__h271189 + y__h271190 ;
  assign x__h271189 = x__h271191 - 13'd1023 ;
  assign x__h271191 = exp1_temp__h270918 + exp2_temp__h270919 ;
  assign x__h271238 =
	     lv_invalid__h249834 ||
	     IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d5306 ||
	     (condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q32[1]) &&
	     (condFlags64_reswget_BITS_14_TO_10__q31[3] ||
	      condFlags64_reswget_BITS_9_TO_5__q32[3]) ;
  assign x__h271501 =
	     !lv_invalid__h249834 &&
	     !IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d5306 &&
	     (condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q32[1]) &&
	     !condFlags64_reswget_BITS_14_TO_10__q31[3] &&
	     !condFlags64_reswget_BITS_9_TO_5__q32[3] ;
  assign x__h271507 =
	     !lv_invalid__h249834 &&
	     !IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d5306 &&
	     !condFlags64_reswget_BITS_14_TO_10__q31[1] &&
	     !condFlags64_reswget_BITS_9_TO_5__q32[1] &&
	     (condFlags64_reswget_BITS_14_TO_10__q31[3] ||
	      condFlags64_reswget_BITS_9_TO_5__q32[3]) ;
  assign x__h271563 =
	     (lv_invalid__h249834 ||
	      IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d5306) ?
	       quiet_nan_two__h270914 :
	       _theResult___fst__h271424 ;
  assign x__h271576 = condFlags64_reswget_BITS_14_TO_10__q31[2] & y__h271579 ;
  assign x__h271666 = lv_op1_subnormal__h270909 | lv_op2_subnormal__h270910 ;
  assign x__h274532 = exp1__h274453 + y__h274534 ;
  assign x__h274539 =
	     (~condFlags32_reswget_BITS_14_TO_10__q52[4]) ?
	       5'd0 :
	       (getMant32_reswget_BITS_68_TO_46__q47[22] ?
		  5'd1 :
		  (getMant32_reswget_BITS_68_TO_46__q47[21] ?
		     5'd2 :
		     (getMant32_reswget_BITS_68_TO_46__q47[20] ?
			5'd3 :
			(getMant32_reswget_BITS_68_TO_46__q47[19] ?
			   5'd4 :
			   (getMant32_reswget_BITS_68_TO_46__q47[18] ?
			      5'd5 :
			      (getMant32_reswget_BITS_68_TO_46__q47[17] ?
				 5'd6 :
				 (getMant32_reswget_BITS_68_TO_46__q47[16] ?
				    5'd7 :
				    (getMant32_reswget_BITS_68_TO_46__q47[15] ?
				       5'd8 :
				       (getMant32_reswget_BITS_68_TO_46__q47[14] ?
					  5'd9 :
					  (getMant32_reswget_BITS_68_TO_46__q47[13] ?
					     5'd10 :
					     (getMant32_reswget_BITS_68_TO_46__q47[12] ?
						5'd11 :
						(getMant32_reswget_BITS_68_TO_46__q47[11] ?
						   5'd12 :
						   (getMant32_reswget_BITS_68_TO_46__q47[10] ?
						      5'd13 :
						      (getMant32_reswget_BITS_68_TO_46__q47[9] ?
							 5'd14 :
							 (getMant32_reswget_BITS_68_TO_46__q47[8] ?
							    5'd15 :
							    (getMant32_reswget_BITS_68_TO_46__q47[7] ?
							       5'd16 :
							       (getMant32_reswget_BITS_68_TO_46__q47[6] ?
								  5'd17 :
								  (getMant32_reswget_BITS_68_TO_46__q47[5] ?
								     5'd18 :
								     (getMant32_reswget_BITS_68_TO_46__q47[4] ?
									5'd19 :
									(getMant32_reswget_BITS_68_TO_46__q47[3] ?
									   5'd20 :
									   (getMant32_reswget_BITS_68_TO_46__q47[2] ?
									      5'd21 :
									      (getMant32_reswget_BITS_68_TO_46__q47[1] ?
										 5'd22 :
										 (getMant32_reswget_BITS_68_TO_46__q47[0] ?
										    5'd23 :
										    5'd24))))))))))))))))))))))) ;
  assign x__h278487 =
	     (~condFlags32_reswget_BITS_9_TO_5__q53[4]) ?
	       5'd0 :
	       (getMant32_reswget_BITS_45_TO_23__q54[22] ?
		  5'd1 :
		  (getMant32_reswget_BITS_45_TO_23__q54[21] ?
		     5'd2 :
		     (getMant32_reswget_BITS_45_TO_23__q54[20] ?
			5'd3 :
			(getMant32_reswget_BITS_45_TO_23__q54[19] ?
			   5'd4 :
			   (getMant32_reswget_BITS_45_TO_23__q54[18] ?
			      5'd5 :
			      (getMant32_reswget_BITS_45_TO_23__q54[17] ?
				 5'd6 :
				 (getMant32_reswget_BITS_45_TO_23__q54[16] ?
				    5'd7 :
				    (getMant32_reswget_BITS_45_TO_23__q54[15] ?
				       5'd8 :
				       (getMant32_reswget_BITS_45_TO_23__q54[14] ?
					  5'd9 :
					  (getMant32_reswget_BITS_45_TO_23__q54[13] ?
					     5'd10 :
					     (getMant32_reswget_BITS_45_TO_23__q54[12] ?
						5'd11 :
						(getMant32_reswget_BITS_45_TO_23__q54[11] ?
						   5'd12 :
						   (getMant32_reswget_BITS_45_TO_23__q54[10] ?
						      5'd13 :
						      (getMant32_reswget_BITS_45_TO_23__q54[9] ?
							 5'd14 :
							 (getMant32_reswget_BITS_45_TO_23__q54[8] ?
							    5'd15 :
							    (getMant32_reswget_BITS_45_TO_23__q54[7] ?
							       5'd16 :
							       (getMant32_reswget_BITS_45_TO_23__q54[6] ?
								  5'd17 :
								  (getMant32_reswget_BITS_45_TO_23__q54[5] ?
								     5'd18 :
								     (getMant32_reswget_BITS_45_TO_23__q54[4] ?
									5'd19 :
									(getMant32_reswget_BITS_45_TO_23__q54[3] ?
									   5'd20 :
									   (getMant32_reswget_BITS_45_TO_23__q54[2] ?
									      5'd21 :
									      (getMant32_reswget_BITS_45_TO_23__q54[1] ?
										 5'd22 :
										 (getMant32_reswget_BITS_45_TO_23__q54[0] ?
										    5'd23 :
										    5'd24))))))))))))))))))))))) ;
  assign x__h282455 = man1__h274445 << x__h274539 ;
  assign x__h282483 = man2__h274446 << x__h278487 ;
  assign x__h282513 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ^
	     setCanonicalNaN_reswget_BITS_63_TO_32__q42[31] ;
  assign x__h282566 =
	     IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d3345 ||
	     lv_op2_Nan__h199473 ||
	     condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	     condFlags32_reswget_BITS_9_TO_5__q53[1] ||
	     condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	     condFlags32_reswget_BITS_9_TO_5__q53[3] ;
  assign x__h282792 =
	     !IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d3345 &&
	     !lv_op2_Nan__h199473 &&
	     (!condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      !condFlags32_reswget_BITS_9_TO_5__q53[1]) &&
	     (!condFlags32_reswget_BITS_14_TO_10__q52[3] ||
	      !condFlags32_reswget_BITS_9_TO_5__q53[3]) &&
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[3]) ;
  assign x__h282816 =
	     !IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d3345 &&
	     !lv_op2_Nan__h199473 &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	     condFlags32_reswget_BITS_9_TO_5__q53[3] ;
  assign x__h282821 =
	     !IF_condFlags32_res_whas__339_THEN_condFlags32__ETC___d3345 &&
	     !lv_op2_Nan__h199473 &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	     !condFlags32_reswget_BITS_9_TO_5__q53[3] &&
	     (condFlags32_reswget_BITS_9_TO_5__q53[1] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[3]) ;
  assign x__h284456 = exp1__h284377 + y__h284458 ;
  assign x__h284463 =
	     (~condFlags64_reswget_BITS_14_TO_10__q31[4]) ?
	       6'd0 :
	       (getMant64_reswget_BITS_155_TO_104__q25[51] ?
		  6'd1 :
		  (getMant64_reswget_BITS_155_TO_104__q25[50] ?
		     6'd2 :
		     (getMant64_reswget_BITS_155_TO_104__q25[49] ?
			6'd3 :
			(getMant64_reswget_BITS_155_TO_104__q25[48] ?
			   6'd4 :
			   (getMant64_reswget_BITS_155_TO_104__q25[47] ?
			      6'd5 :
			      (getMant64_reswget_BITS_155_TO_104__q25[46] ?
				 6'd6 :
				 (getMant64_reswget_BITS_155_TO_104__q25[45] ?
				    6'd7 :
				    (getMant64_reswget_BITS_155_TO_104__q25[44] ?
				       6'd8 :
				       (getMant64_reswget_BITS_155_TO_104__q25[43] ?
					  6'd9 :
					  (getMant64_reswget_BITS_155_TO_104__q25[42] ?
					     6'd10 :
					     (getMant64_reswget_BITS_155_TO_104__q25[41] ?
						6'd11 :
						(getMant64_reswget_BITS_155_TO_104__q25[40] ?
						   6'd12 :
						   (getMant64_reswget_BITS_155_TO_104__q25[39] ?
						      6'd13 :
						      (getMant64_reswget_BITS_155_TO_104__q25[38] ?
							 6'd14 :
							 (getMant64_reswget_BITS_155_TO_104__q25[37] ?
							    6'd15 :
							    (getMant64_reswget_BITS_155_TO_104__q25[36] ?
							       6'd16 :
							       (getMant64_reswget_BITS_155_TO_104__q25[35] ?
								  6'd17 :
								  (getMant64_reswget_BITS_155_TO_104__q25[34] ?
								     6'd18 :
								     (getMant64_reswget_BITS_155_TO_104__q25[33] ?
									6'd19 :
									(getMant64_reswget_BITS_155_TO_104__q25[32] ?
									   6'd20 :
									   (getMant64_reswget_BITS_155_TO_104__q25[31] ?
									      6'd21 :
									      (getMant64_reswget_BITS_155_TO_104__q25[30] ?
										 6'd22 :
										 (getMant64_reswget_BITS_155_TO_104__q25[29] ?
										    6'd23 :
										    (getMant64_reswget_BITS_155_TO_104__q25[28] ?
										       6'd24 :
										       (getMant64_reswget_BITS_155_TO_104__q25[27] ?
											  6'd25 :
											  (getMant64_reswget_BITS_155_TO_104__q25[26] ?
											     6'd26 :
											     (getMant64_reswget_BITS_155_TO_104__q25[25] ?
												6'd27 :
												(getMant64_reswget_BITS_155_TO_104__q25[24] ?
												   6'd28 :
												   (getMant64_reswget_BITS_155_TO_104__q25[23] ?
												      6'd29 :
												      (getMant64_reswget_BITS_155_TO_104__q25[22] ?
													 6'd30 :
													 (getMant64_reswget_BITS_155_TO_104__q25[21] ?
													    6'd31 :
													    (getMant64_reswget_BITS_155_TO_104__q25[20] ?
													       6'd32 :
													       (getMant64_reswget_BITS_155_TO_104__q25[19] ?
														  6'd33 :
														  (getMant64_reswget_BITS_155_TO_104__q25[18] ?
														     6'd34 :
														     (getMant64_reswget_BITS_155_TO_104__q25[17] ?
															6'd35 :
															(getMant64_reswget_BITS_155_TO_104__q25[16] ?
															   6'd36 :
															   (getMant64_reswget_BITS_155_TO_104__q25[15] ?
															      6'd37 :
															      (getMant64_reswget_BITS_155_TO_104__q25[14] ?
																 6'd38 :
																 (getMant64_reswget_BITS_155_TO_104__q25[13] ?
																    6'd39 :
																    (getMant64_reswget_BITS_155_TO_104__q25[12] ?
																       6'd40 :
																       (getMant64_reswget_BITS_155_TO_104__q25[11] ?
																	  6'd41 :
																	  (getMant64_reswget_BITS_155_TO_104__q25[10] ?
																	     6'd42 :
																	     (getMant64_reswget_BITS_155_TO_104__q25[9] ?
																		6'd43 :
																		(getMant64_reswget_BITS_155_TO_104__q25[8] ?
																		   6'd44 :
																		   (getMant64_reswget_BITS_155_TO_104__q25[7] ?
																		      6'd45 :
																		      (getMant64_reswget_BITS_155_TO_104__q25[6] ?
																			 6'd46 :
																			 (getMant64_reswget_BITS_155_TO_104__q25[5] ?
																			    6'd47 :
																			    (getMant64_reswget_BITS_155_TO_104__q25[4] ?
																			       6'd48 :
																			       (getMant64_reswget_BITS_155_TO_104__q25[3] ?
																				  6'd49 :
																				  (getMant64_reswget_BITS_155_TO_104__q25[2] ?
																				     6'd50 :
																				     (getMant64_reswget_BITS_155_TO_104__q25[1] ?
																					6'd51 :
																					(getMant64_reswget_BITS_155_TO_104__q25[0] ?
																					   6'd52 :
																					   6'd53)))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h293080 =
	     (~condFlags64_reswget_BITS_9_TO_5__q32[4]) ?
	       6'd0 :
	       (getMant64_reswget_BITS_103_TO_52__q33[51] ?
		  6'd1 :
		  (getMant64_reswget_BITS_103_TO_52__q33[50] ?
		     6'd2 :
		     (getMant64_reswget_BITS_103_TO_52__q33[49] ?
			6'd3 :
			(getMant64_reswget_BITS_103_TO_52__q33[48] ?
			   6'd4 :
			   (getMant64_reswget_BITS_103_TO_52__q33[47] ?
			      6'd5 :
			      (getMant64_reswget_BITS_103_TO_52__q33[46] ?
				 6'd6 :
				 (getMant64_reswget_BITS_103_TO_52__q33[45] ?
				    6'd7 :
				    (getMant64_reswget_BITS_103_TO_52__q33[44] ?
				       6'd8 :
				       (getMant64_reswget_BITS_103_TO_52__q33[43] ?
					  6'd9 :
					  (getMant64_reswget_BITS_103_TO_52__q33[42] ?
					     6'd10 :
					     (getMant64_reswget_BITS_103_TO_52__q33[41] ?
						6'd11 :
						(getMant64_reswget_BITS_103_TO_52__q33[40] ?
						   6'd12 :
						   (getMant64_reswget_BITS_103_TO_52__q33[39] ?
						      6'd13 :
						      (getMant64_reswget_BITS_103_TO_52__q33[38] ?
							 6'd14 :
							 (getMant64_reswget_BITS_103_TO_52__q33[37] ?
							    6'd15 :
							    (getMant64_reswget_BITS_103_TO_52__q33[36] ?
							       6'd16 :
							       (getMant64_reswget_BITS_103_TO_52__q33[35] ?
								  6'd17 :
								  (getMant64_reswget_BITS_103_TO_52__q33[34] ?
								     6'd18 :
								     (getMant64_reswget_BITS_103_TO_52__q33[33] ?
									6'd19 :
									(getMant64_reswget_BITS_103_TO_52__q33[32] ?
									   6'd20 :
									   (getMant64_reswget_BITS_103_TO_52__q33[31] ?
									      6'd21 :
									      (getMant64_reswget_BITS_103_TO_52__q33[30] ?
										 6'd22 :
										 (getMant64_reswget_BITS_103_TO_52__q33[29] ?
										    6'd23 :
										    (getMant64_reswget_BITS_103_TO_52__q33[28] ?
										       6'd24 :
										       (getMant64_reswget_BITS_103_TO_52__q33[27] ?
											  6'd25 :
											  (getMant64_reswget_BITS_103_TO_52__q33[26] ?
											     6'd26 :
											     (getMant64_reswget_BITS_103_TO_52__q33[25] ?
												6'd27 :
												(getMant64_reswget_BITS_103_TO_52__q33[24] ?
												   6'd28 :
												   (getMant64_reswget_BITS_103_TO_52__q33[23] ?
												      6'd29 :
												      (getMant64_reswget_BITS_103_TO_52__q33[22] ?
													 6'd30 :
													 (getMant64_reswget_BITS_103_TO_52__q33[21] ?
													    6'd31 :
													    (getMant64_reswget_BITS_103_TO_52__q33[20] ?
													       6'd32 :
													       (getMant64_reswget_BITS_103_TO_52__q33[19] ?
														  6'd33 :
														  (getMant64_reswget_BITS_103_TO_52__q33[18] ?
														     6'd34 :
														     (getMant64_reswget_BITS_103_TO_52__q33[17] ?
															6'd35 :
															(getMant64_reswget_BITS_103_TO_52__q33[16] ?
															   6'd36 :
															   (getMant64_reswget_BITS_103_TO_52__q33[15] ?
															      6'd37 :
															      (getMant64_reswget_BITS_103_TO_52__q33[14] ?
																 6'd38 :
																 (getMant64_reswget_BITS_103_TO_52__q33[13] ?
																    6'd39 :
																    (getMant64_reswget_BITS_103_TO_52__q33[12] ?
																       6'd40 :
																       (getMant64_reswget_BITS_103_TO_52__q33[11] ?
																	  6'd41 :
																	  (getMant64_reswget_BITS_103_TO_52__q33[10] ?
																	     6'd42 :
																	     (getMant64_reswget_BITS_103_TO_52__q33[9] ?
																		6'd43 :
																		(getMant64_reswget_BITS_103_TO_52__q33[8] ?
																		   6'd44 :
																		   (getMant64_reswget_BITS_103_TO_52__q33[7] ?
																		      6'd45 :
																		      (getMant64_reswget_BITS_103_TO_52__q33[6] ?
																			 6'd46 :
																			 (getMant64_reswget_BITS_103_TO_52__q33[5] ?
																			    6'd47 :
																			    (getMant64_reswget_BITS_103_TO_52__q33[4] ?
																			       6'd48 :
																			       (getMant64_reswget_BITS_103_TO_52__q33[3] ?
																				  6'd49 :
																				  (getMant64_reswget_BITS_103_TO_52__q33[2] ?
																				     6'd50 :
																				     (getMant64_reswget_BITS_103_TO_52__q33[1] ?
																					6'd51 :
																					(getMant64_reswget_BITS_103_TO_52__q33[0] ?
																					   6'd52 :
																					   6'd53)))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h29954 =
	     (!inst_spfm_add_sub_ff_input_register_read__50_B_ETC___d455 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) &&
	     (!inst_spfm_add_sub_ff_input_register[2] ||
	      !(x__h29985 ^ inst_spfm_add_sub_ff_input_register[5])) ;
  assign x__h29985 =
	     inst_spfm_add_sub_ff_input_register[49] ^
	     inst_spfm_add_sub_ff_input_register[48] ;
  assign x__h30015 =
	     inst_spfm_add_sub_ff_input_register_read__50_B_ETC___d455 &&
	     (!inst_spfm_add_sub_ff_input_register[107] ||
	      inst_spfm_add_sub_ff_input_register[59:50] != 10'd254) &&
	     (inst_spfm_add_sub_ff_input_register_read__50_B_ETC___d454 ^
	      10'h200) <
	     10'd361 &&
	     (!inst_spfm_add_sub_ff_input_register[2] ||
	      inst_spfm_add_sub_ff_input_register[12] ||
	      inst_spfm_add_sub_ff_input_register[13]) &&
	     !inst_spfm_add_sub_ff_input_register[14] ;
  assign x__h301717 = man1__h284369 << x__h284463 ;
  assign x__h301745 = man2__h284370 << x__h293080 ;
  assign x__h301816 =
	     IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d3430 ||
	     lv_op2_Nan__h202538 ||
	     condFlags64_reswget_BITS_14_TO_10__q31[1] &&
	     condFlags64_reswget_BITS_9_TO_5__q32[1] ||
	     condFlags64_reswget_BITS_14_TO_10__q31[3] &&
	     condFlags64_reswget_BITS_9_TO_5__q32[3] ;
  assign x__h302042 =
	     !IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d3430 &&
	     !lv_op2_Nan__h202538 &&
	     (!condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	      !condFlags64_reswget_BITS_9_TO_5__q32[1]) &&
	     (!condFlags64_reswget_BITS_14_TO_10__q31[3] ||
	      !condFlags64_reswget_BITS_9_TO_5__q32[3]) &&
	     (condFlags64_reswget_BITS_14_TO_10__q31[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q32[3]) ;
  assign x__h302066 =
	     !IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d3430 &&
	     !lv_op2_Nan__h202538 &&
	     !condFlags64_reswget_BITS_14_TO_10__q31[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q31[1] &&
	     condFlags64_reswget_BITS_9_TO_5__q32[3] ;
  assign x__h302071 =
	     !IF_condFlags64_res_whas__424_THEN_condFlags64__ETC___d3430 &&
	     !lv_op2_Nan__h202538 &&
	     !condFlags64_reswget_BITS_14_TO_10__q31[1] &&
	     !condFlags64_reswget_BITS_9_TO_5__q32[3] &&
	     (condFlags64_reswget_BITS_9_TO_5__q32[1] ||
	      condFlags64_reswget_BITS_14_TO_10__q31[3]) ;
  assign x__h30363 = x__h30375 | y__h30376 ;
  assign x__h30375 = _theResult_____1__h30257 & sign2__h30209 ;
  assign x__h305270 =
	     condFlags32_reswget_BITS_14_TO_10__q52[4] ?
	       exponent___1__h305299 :
	       exponent__h304713 ;
  assign x__h305301 = { 3'd0, lv_leading_zeros__h304718 } ;
  assign x__h313717 = lv_leading_zeros__h304718 - 6'd1 ;
  assign x__h313743 =
	     { IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q58[24:0],
	       1'd0 } ;
  assign x__h313987 = x__h313989 + 9'd63 ;
  assign x__h313989 =
	     { 1'd0,
	       IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d5805[8:1] } ;
  assign x__h315884 =
	     condFlags64_reswget_BITS_14_TO_10__q31[4] ?
	       exponent___1__h315913 :
	       lv_exp__h249844 ;
  assign x__h315915 = { 5'd0, lv_leading_zeros__h315318 } ;
  assign x__h333669 = lv_leading_zeros__h315318 - 7'd1 ;
  assign x__h333695 =
	     { IF_IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas___ETC__q37[53:0],
	       1'd0 } ;
  assign x__h333939 = x__h333941 + 12'd511 ;
  assign x__h333941 =
	     { 1'd0,
	       IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d5981[11:1] } ;
  assign x__h342723 = ff_input_D_OUT[16] ^ ff_input_D_OUT[17] ;
  assign x__h46527 =
	     mantissa_to_shift__h30246[0] ?
	       7'd0 :
	       (mantissa_to_shift__h30246[1] ?
		  7'd1 :
		  (mantissa_to_shift__h30246[2] ?
		     7'd2 :
		     (mantissa_to_shift__h30246[3] ?
			7'd3 :
			(mantissa_to_shift__h30246[4] ?
			   7'd4 :
			   (mantissa_to_shift__h30246[5] ?
			      7'd5 :
			      (mantissa_to_shift__h30246[6] ?
				 7'd6 :
				 (mantissa_to_shift__h30246[7] ?
				    7'd7 :
				    (mantissa_to_shift__h30246[8] ?
				       7'd8 :
				       (mantissa_to_shift__h30246[9] ?
					  7'd9 :
					  (mantissa_to_shift__h30246[10] ?
					     7'd10 :
					     (mantissa_to_shift__h30246[11] ?
						7'd11 :
						(mantissa_to_shift__h30246[12] ?
						   7'd12 :
						   (mantissa_to_shift__h30246[13] ?
						      7'd13 :
						      (mantissa_to_shift__h30246[14] ?
							 7'd14 :
							 (mantissa_to_shift__h30246[15] ?
							    7'd15 :
							    (mantissa_to_shift__h30246[16] ?
							       7'd16 :
							       (mantissa_to_shift__h30246[17] ?
								  7'd17 :
								  (mantissa_to_shift__h30246[18] ?
								     7'd18 :
								     (mantissa_to_shift__h30246[19] ?
									7'd19 :
									(mantissa_to_shift__h30246[20] ?
									   7'd20 :
									   (mantissa_to_shift__h30246[21] ?
									      7'd21 :
									      (mantissa_to_shift__h30246[22] ?
										 7'd22 :
										 (mantissa_to_shift__h30246[23] ?
										    7'd23 :
										    (mantissa_to_shift__h30246[24] ?
										       7'd24 :
										       (mantissa_to_shift__h30246[25] ?
											  7'd25 :
											  (mantissa_to_shift__h30246[26] ?
											     7'd26 :
											     (mantissa_to_shift__h30246[27] ?
												7'd27 :
												(mantissa_to_shift__h30246[28] ?
												   7'd28 :
												   (mantissa_to_shift__h30246[29] ?
												      7'd29 :
												      (mantissa_to_shift__h30246[30] ?
													 7'd30 :
													 (mantissa_to_shift__h30246[31] ?
													    7'd31 :
													    (mantissa_to_shift__h30246[32] ?
													       7'd32 :
													       (mantissa_to_shift__h30246[33] ?
														  7'd33 :
														  (mantissa_to_shift__h30246[34] ?
														     7'd34 :
														     (mantissa_to_shift__h30246[35] ?
															7'd35 :
															(mantissa_to_shift__h30246[36] ?
															   7'd36 :
															   (mantissa_to_shift__h30246[37] ?
															      7'd37 :
															      (mantissa_to_shift__h30246[38] ?
																 7'd38 :
																 (mantissa_to_shift__h30246[39] ?
																    7'd39 :
																    (mantissa_to_shift__h30246[40] ?
																       7'd40 :
																       (mantissa_to_shift__h30246[41] ?
																	  7'd41 :
																	  (mantissa_to_shift__h30246[42] ?
																	     7'd42 :
																	     (mantissa_to_shift__h30246[43] ?
																		7'd43 :
																		(mantissa_to_shift__h30246[44] ?
																		   7'd44 :
																		   (mantissa_to_shift__h30246[45] ?
																		      7'd45 :
																		      (mantissa_to_shift__h30246[46] ?
																			 7'd46 :
																			 (mantissa_to_shift__h30246[47] ?
																			    7'd47 :
																			    (mantissa_to_shift__h30246[48] ?
																			       7'd48 :
																			       (mantissa_to_shift__h30246[49] ?
																				  7'd49 :
																				  (mantissa_to_shift__h30246[50] ?
																				     7'd50 :
																				     (mantissa_to_shift__h30246[51] ?
																					7'd51 :
																					(mantissa_to_shift__h30246[52] ?
																					   7'd52 :
																					   (mantissa_to_shift__h30246[53] ?
																					      7'd53 :
																					      (mantissa_to_shift__h30246[54] ?
																						 7'd54 :
																						 (mantissa_to_shift__h30246[55] ?
																						    7'd55 :
																						    (mantissa_to_shift__h30246[56] ?
																						       7'd56 :
																						       (mantissa_to_shift__h30246[57] ?
																							  7'd57 :
																							  (mantissa_to_shift__h30246[58] ?
																							     7'd58 :
																							     (mantissa_to_shift__h30246[59] ?
																								7'd59 :
																								(mantissa_to_shift__h30246[60] ?
																								   7'd60 :
																								   (mantissa_to_shift__h30246[61] ?
																								      7'd61 :
																								      (mantissa_to_shift__h30246[62] ?
																									 7'd62 :
																									 (mantissa_to_shift__h30246[63] ?
																									    7'd63 :
																									    (mantissa_to_shift__h30246[64] ?
																									       7'd64 :
																									       (mantissa_to_shift__h30246[65] ?
																										  7'd65 :
																										  (mantissa_to_shift__h30246[66] ?
																										     7'd66 :
																										     (mantissa_to_shift__h30246[67] ?
																											7'd67 :
																											(mantissa_to_shift__h30246[68] ?
																											   7'd68 :
																											   (mantissa_to_shift__h30246[69] ?
																											      7'd69 :
																											      (mantissa_to_shift__h30246[70] ?
																												 7'd70 :
																												 (mantissa_to_shift__h30246[71] ?
																												    7'd71 :
																												    (mantissa_to_shift__h30246[72] ?
																												       7'd72 :
																												       7'd73)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h53093 = ~_theResult_____1__h30257 ;
  assign x__h53100 =
	     inst_spfm_add_sub_ff_stage2_read__33_BIT_15_56_ETC___d758 ||
	     inst_spfm_add_sub_ff_stage2[6] ||
	     (!inst_spfm_add_sub_ff_stage2[16] ||
	      !inst_spfm_add_sub_ff_stage2[5]) &&
	     inst_spfm_add_sub_ff_stage2[4] &&
	     inst_spfm_add_sub_ff_stage2[14] &&
	     x__h53208 ;
  assign x__h53208 = sign2__h30209 ^ op_xor_sign3__h30222 ;
  assign x__h53216 =
	     (inst_spfm_add_sub_ff_stage2_read__33_BIT_15_56_ETC___d758 ||
	      inst_spfm_add_sub_ff_stage2[6] ||
	      inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       2'd0 :
	       _theResult_____6_snd_snd__h53173 ;
  assign x__h53248 = x__h53250 & sign2__h30209 ;
  assign x__h53250 = inst_spfm_add_sub_ff_stage2[4] & y__h53251 ;
  assign x__h53252 = x__h53253 & inst_spfm_add_sub_ff_stage2[14] ;
  assign x__h53253 = ~inst_spfm_add_sub_ff_stage2[4] ;
  assign x__h53257 =
	     (inst_spfm_add_sub_ff_stage2_read__33_BIT_15_56_ETC___d758 ||
	      inst_spfm_add_sub_ff_stage2[6]) ?
	       2'd0 :
	       _theResult_____6_snd_snd_snd__h53220 ;
  assign x__h53281 = x__h53293 & y__h53294 ;
  assign x__h53293 =
	     (inst_spfm_add_sub_ff_stage2_read__33_BIT_15_56_ETC___d758 ||
	      inst_spfm_add_sub_ff_stage2[6] ||
	      inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       inst_spfm_add_sub_ff_stage2[1] :
	       _theResult_____6_fst__h53170 ;
  assign x__h53323 =
	     (inst_spfm_add_sub_ff_stage2[1] ||
	      !inst_spfm_add_sub_ff_stage2[6]) &&
	     inst_spfm_add_sub_ff_stage2[15] ;
  assign x__h53516 =
	     (_theResult____h53439 == 73'd0) ?
	       ((inst_spfm_add_sub_ff_stage4[12:10] == 3'b010) ?
		  2'b11 :
		  2'b01) :
	       2'd0 ;
  assign x__h5419 = { _denominator__h5354, 2'b0, _numerator__h5355, 27'd0 } ;
  assign x__h66000 = inst_spfm_add_sub_ff_stage5[6:0] - 7'd1 ;
  assign x__h66021 =
	     IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1207[48] |
	     IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1207[46] ;
  assign x__h66103 =
	     IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1207[47] |
	     IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1207[46] ;
  assign x__h71472 =
	     { _denominator__h71407, 2'b0, _numerator__h71408, 56'd0 } ;
  assign x__h87316 =
	     inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1442 &&
	     inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1443 ;
  assign x__h87321 =
	     (!inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1442 ||
	      inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1443 ||
	      _1_MINUS_inst_dpfpu_divider_rg_stage2_439_BITS__ETC___d1445) ?
	       x_wget__h66738[0] :
	       lv_sticky___1__h73059 ;
  assign x__h87550 = _theResult____h87388 | inst_dpfpu_divider_rg_stage3[85] ;
  assign x__h87754 = inst_dpfpu_divider_rg_stage3[84] | _theResult____h87388 ;
  assign x__h87789 = x__h87791 | _theResult____h87388 ;
  assign x__h87791 =
	     inst_dpfpu_divider_rg_stage3[85] |
	     inst_dpfpu_divider_rg_stage3[84] ;
  assign x__h89272 =
	     { inst_dpfpu_sqrt_rg_inter_stage[182:130],
	       !_theResult____h89226[57],
	       1'd0 } ;
  assign x__h89535 =
	     { inst_dpfpu_sqrt_rg_inter_stage[56:3],
	       !_theResult____h89226[57] } ;
  assign x__h89933 =
	     inst_dpfpu_sqrt_rg_inter_stage[131] | !_theResult____h89226[57] ;
  assign x__h89974 =
	     _theResult____h89226[57] ?
	       lv_remainder__h89996 :
	       _theResult____h89226 ;
  assign x__h90048 =
	     inst_dpfpu_sqrt_rg_inter_stage[130] | !_theResult____h89226[57] ;
  assign x_data__h199529 =
	     ff_input_D_OUT[11] ?
	       { 32'hFFFFFFFF, _theResult_____3_snd__h200207 } :
	       { 32'd0, _theResult_____3_snd__h199585 } ;
  assign x_data__h202587 =
	     ff_input_D_OUT[11] ?
	       _theResult_____3_snd__h203234 :
	       _theResult_____3_snd__h202618 ;
  assign x_data__h226654 =
	     { 32'hFFFFFFFF, x1_avValue_final_result__h226607 } ;
  assign x_data__h226965 =
	     (ff_input_D_OUT[211:148] == 64'd0 && ff_input_D_OUT[5] ||
	      ff_input_D_OUT[179:148] == 32'd0 && !ff_input_D_OUT[5]) ?
	       64'b0000000000000000000000000000000000000000000000000000000000000001 :
	       _theResult___snd_final_result__h226922 ;
  assign x_data__h243614 =
	     { 32'hFFFFFFFF, x1_avValue_final_result__h243573 } ;
  assign x_data__h243971 =
	     { CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_ff_inputD_ETC__q7,
	       ff_input_D_OUT[210:148] } ;
  assign x_data__h246408 =
	     (!condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	      NOT_IF_condFlags32_res_whas__339_THEN_condFlag_ETC___d3841) ?
	       _theResult_____3_snd_snd_fst__h246971 :
	       final_result__h246355 ;
  assign x_data__h249908 =
	     (!condFlags64_reswget_BITS_14_TO_10__q31[3] &&
	      NOT_IF_condFlags64_res_whas__424_THEN_condFlag_ETC___d4009) ?
	       _theResult_____3_snd_snd_fst__h250493 :
	       final_result__h249855 ;
  assign x_data__h258426 =
	     condFlags32_reswget_BITS_14_TO_10__q52[3] ?
	       { setCanonicalNaN_reswget_BITS_95_TO_64__q41[31], 63'b0 } :
	       IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d4474 ;
  assign x_data__h265771 =
	     { 32'hFFFFFFFF,
	       IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d4411[31:0] } ;
  assign x_data__h265869 =
	     (ff_input_D_OUT[15:9] == 7'b1110000) ?
	       final_result__h265873 :
	       final_result__h265896 ;
  assign x_data__h345707 =
	     { 32'hFFFFFFFF, inst_spfpu_divider_wr_final_out_wget[36:5] } ;
  assign x_data__h345929 =
	     { 32'hFFFFFFFF, inst_spfpu_sqrt_ff_final_out[36:5] } ;
  assign x_fflags__h199531 =
	     ff_input_D_OUT[11] ?
	       _theResult_____3_fst__h200206 :
	       _theResult_____3_fst__h199584 ;
  assign x_fflags__h202589 =
	     ff_input_D_OUT[11] ?
	       _theResult_____3_fst__h203233 :
	       _theResult_____3_fst__h202617 ;
  assign x_fflags__h226656 =
	     (ff_input_D_OUT[211:148] == 64'd0 && ff_input_D_OUT[5] ||
	      ff_input_D_OUT[179:148] == 32'd0 && !ff_input_D_OUT[5]) ?
	       5'b0 :
	       x1_avValue_fflags__h226600 ;
  assign x_fflags__h226967 =
	     (ff_input_D_OUT[211:148] == 64'd0 || !ff_input_D_OUT[5]) ?
	       5'b0 :
	       wr_final_out_fflags__h226921 ;
  assign x_fflags__h258428 =
	     condFlags32_reswget_BITS_14_TO_10__q52[3] ?
	       5'b0 :
	       ((condFlags32_reswget_BITS_14_TO_10__q52[2] ||
		 condFlags32_reswget_BITS_14_TO_10__q52[0]) ?
		  result__h258589 :
		  5'd0) ;
  assign x_lv_exponent__h6872 =
	     (inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d127 &&
	      NOT_inst_spfpu_divider_rg_stage2_24_BITS_18_TO_ETC___d242) ?
	       10'd0 :
	       _theResult___snd_fst__h13984 ;
  assign x_lv_exponent__h72925 =
	     (inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1442 &&
	      NOT_inst_dpfpu_divider_rg_stage2_439_BITS_21_T_ETC___d1644) ?
	       13'd0 :
	       _theResult___snd_fst__h87258 ;
  assign x_lv_product_exponent__h17268 =
	     (!inst_spfm_add_sub_ff_input_register_read__50_B_ETC___d455 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) ?
	       inst_spfm_add_sub_ff_input_register[59:50] :
	       _theResult___fst__h25318 ;
  assign x_lv_product_exponent__h90537 =
	     (!inst_dpfm_add_sub_ff_input_register_read__852__ETC___d1857 ||
	      inst_dpfm_add_sub_ff_input_register[200] &&
	      inst_dpfm_add_sub_ff_input_register[94:82] == 13'd2046) ?
	       inst_dpfm_add_sub_ff_input_register[94:82] :
	       _theResult___fst__h107925 ;
  assign x_lv_product_mantissa__h17269 =
	     (!inst_spfm_add_sub_ff_input_register_read__50_B_ETC___d455 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) ?
	       lv_product_mantissa__h17192 :
	       _theResult___snd_fst__h25403 ;
  assign x_lv_product_mantissa__h90538 =
	     (!inst_dpfm_add_sub_ff_input_register_read__852__ETC___d1857 ||
	      inst_dpfm_add_sub_ff_input_register[200] &&
	      inst_dpfm_add_sub_ff_input_register[94:82] == 13'd2046) ?
	       lv_product_mantissa__h90461 :
	       _theResult___snd_fst__h108010 ;
  assign x_lv_quotient__h6871 =
	     inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d127 ?
	       _theResult___fst__h6969 :
	       x_wget__h658[26:0] ;
  assign x_lv_quotient__h72924 =
	     inst_dpfpu_divider_rg_stage2_439_BITS_21_TO_9__ETC___d1442 ?
	       _theResult___fst__h73022 :
	       x_wget__h66738[55:0] ;
  assign x_wget__h195113 =
	     { fflags__h209755,
	       !inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20[31],
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5171[23] ?
		 local_expo___1__h215449 :
		 expo__h209740,
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5171[22:0] } ;
  assign x_wget__h195251 =
	     { fflags__h215627,
	       !inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21[63],
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5047[23] ?
		 local_expo___1__h226524 :
		 expo__h215612,
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5047[22:0] } ;
  assign x_wget__h658 =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[82:56],
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d81 } ;
  assign x_wget__h66738 =
	     { inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[169:114],
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1396 } ;
  assign y__h108004 = x__h108005 - 13'd1 ;
  assign y__h118145 = x__h167397 & op_xor_sign3__h117991 ;
  assign y__h14479 = x__h14480 | inst_spfpu_divider_rg_stage3[54] ;
  assign y__h14516 = ~inst_spfpu_divider_rg_stage3[12] ;
  assign y__h16381 = x__h16660 | lv_sticky__h16295 ;
  assign y__h167553 = x__h167556 & op_xor_sign3__h117991 ;
  assign y__h167555 = ~inst_dpfm_add_sub_ff_stage2[14] ;
  assign y__h167598 = ~inst_dpfm_add_sub_ff_stage2[13] ;
  assign y__h16763 = ~inst_spfpu_sqrt_rg_inter_stage[58] ;
  assign y__h194279 = x__h194419 | lv_sticky__h193883 ;
  assign y__h194515 = ~inst_dpfm_add_sub_ff_stage5[23] ;
  assign y__h215364 = x__h215365 | _theResult____h209750 ;
  assign y__h215402 =
	     ~(!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20[31]) ;
  assign y__h226439 = x__h226440 | _theResult____h215622 ;
  assign y__h226477 =
	     ~(!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21[63]) ;
  assign y__h242977 = x__h242978 | _theResult____h232374 ;
  assign y__h243014 = ~sign__h232372 ;
  assign y__h247060 = x__h247306 | lv_sticky__h246358 ;
  assign y__h247730 = ~setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ;
  assign y__h250582 = x__h250828 | lv_sticky__h249858 ;
  assign y__h251262 = ~ff_input_D_OUT[211] ;
  assign y__h25397 = x__h25398 - 10'd1 ;
  assign y__h265600 =
	     x__h265601 |
	     IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4346[26] ;
  assign y__h268578 = { 9'd0, lv_op2_subnormal__h268300 } ;
  assign y__h268580 = { 9'd0, lv_op1_subnormal__h268299 } ;
  assign y__h268972 = condFlags32_reswget_BITS_9_TO_5__q53[2] & y__h269018 ;
  assign y__h268974 = ~condFlags32_reswget_BITS_9_TO_5__q53[0] ;
  assign y__h269018 = ~condFlags32_reswget_BITS_14_TO_10__q52[0] ;
  assign y__h271188 = { 12'd0, lv_op2_subnormal__h270910 } ;
  assign y__h271190 = { 12'd0, lv_op1_subnormal__h270909 } ;
  assign y__h271577 = condFlags64_reswget_BITS_9_TO_5__q32[2] & y__h271623 ;
  assign y__h271579 = ~condFlags64_reswget_BITS_9_TO_5__q32[0] ;
  assign y__h271623 = ~condFlags64_reswget_BITS_14_TO_10__q31[0] ;
  assign y__h274531 = x__h274532 - y__h274533 ;
  assign y__h274533 = exp2__h274454 + y__h278486 ;
  assign y__h274534 = { 9'd0, condFlags32_reswget_BITS_14_TO_10__q52[4] } ;
  assign y__h278486 = { 9'd0, condFlags32_reswget_BITS_9_TO_5__q53[4] } ;
  assign y__h284455 = x__h284456 - y__h284457 ;
  assign y__h284457 = exp2__h284378 + y__h293079 ;
  assign y__h284458 = { 12'd0, condFlags64_reswget_BITS_14_TO_10__q31[4] } ;
  assign y__h293079 = { 12'd0, condFlags64_reswget_BITS_9_TO_5__q32[4] } ;
  assign y__h30376 = x__h53093 & op_xor_sign3__h30222 ;
  assign y__h304992 = ff_input_D_OUT[179] & y__h305013 ;
  assign y__h305013 = ~condFlags32_reswget_BITS_14_TO_10__q52[2] ;
  assign y__h305271 = x__h305301 - 9'd1 ;
  assign y__h313988 =
	     { 8'd0,
	       IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d5805[0] } ;
  assign y__h315591 = ff_input_D_OUT[211] & y__h315612 ;
  assign y__h315612 = ~condFlags64_reswget_BITS_14_TO_10__q31[2] ;
  assign y__h315885 = x__h315915 - 12'd1 ;
  assign y__h333940 =
	     { 11'd0,
	       IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d5981[0] } ;
  assign y__h53249 = x__h53252 & op_xor_sign3__h30222 ;
  assign y__h53251 = ~inst_spfm_add_sub_ff_stage2[14] ;
  assign y__h53294 = ~inst_spfm_add_sub_ff_stage2[13] ;
  assign y__h65881 = x__h66021 | lv_sticky__h65485 ;
  assign y__h66117 = ~inst_spfm_add_sub_ff_stage5[22] ;
  assign y__h87753 = x__h87754 | inst_dpfpu_divider_rg_stage3[86] ;
  assign y__h87790 = ~inst_dpfpu_divider_rg_stage3[12] ;
  assign y__h89654 = x__h89933 | lv_sticky__h89568 ;
  assign y__h90036 = ~inst_dpfpu_sqrt_rg_inter_stage[116] ;
  assign y_data__h346142 =
	     { 32'hFFFFFFFF, inst_spfm_add_sub_ff_final_out_wget[36:5] } ;
  always@(inst_spfpu_divider_rg_stage3 or
	  x__h14515 or lv_round_up___1__h14467 or lv_round_up___1__h14503)
  begin
    case (inst_spfpu_divider_rg_stage3[4:2])
      3'b0:
	  IF_inst_spfpu_divider_rg_stage3_68_BITS_4_TO_2_ETC___d315 =
	      lv_round_up___1__h14467;
      3'b011:
	  IF_inst_spfpu_divider_rg_stage3_68_BITS_4_TO_2_ETC___d315 =
	      lv_round_up___1__h14503;
      3'b100:
	  IF_inst_spfpu_divider_rg_stage3_68_BITS_4_TO_2_ETC___d315 =
	      inst_spfpu_divider_rg_stage3[53];
      default: IF_inst_spfpu_divider_rg_stage3_68_BITS_4_TO_2_ETC___d315 =
		   inst_spfpu_divider_rg_stage3[4:2] == 3'b010 &&
		   x__h14515 & inst_spfpu_divider_rg_stage3[12];
    endcase
  end
  always@(inst_spfpu_sqrt_rg_inter_stage or
	  lv_inexact__h16297 or
	  lv_roundup___1__h16369 or lv_roundup___1__h16751)
  begin
    case (inst_spfpu_sqrt_rg_inter_stage[2:0])
      3'b0:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__71_BIT_ETC___d425 =
	      lv_roundup___1__h16369;
      3'b011:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__71_BIT_ETC___d425 =
	      lv_roundup___1__h16751;
      3'b100:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__71_BIT_ETC___d425 =
	      inst_spfpu_sqrt_rg_inter_stage[69];
      default: IF_inst_spfpu_sqrt_rg_inter_stage_read__71_BIT_ETC___d425 =
		   inst_spfpu_sqrt_rg_inter_stage[2:0] == 3'b010 &&
		   lv_inexact__h16297 & inst_spfpu_sqrt_rg_inter_stage[58];
    endcase
  end
  always@(inst_spfm_add_sub_ff_stage5 or
	  lv_inexact__h65487 or
	  y__h66117 or
	  lv_round_up___1__h65869 or
	  lv_round_up___1__h66091 or
	  IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1207)
  begin
    case (inst_spfm_add_sub_ff_stage5[21:19])
      3'b0:
	  IF_inst_spfm_add_sub_ff_stage5_read__168_BITS__ETC___d1229 =
	      lv_round_up___1__h65869;
      3'b010:
	  IF_inst_spfm_add_sub_ff_stage5_read__168_BITS__ETC___d1229 =
	      lv_round_up___1__h66091;
      3'b100:
	  IF_inst_spfm_add_sub_ff_stage5_read__168_BITS__ETC___d1229 =
	      IF_inst_spfm_add_sub_ff_stage5_read__168_BIT_9_ETC___d1207[47];
      default: IF_inst_spfm_add_sub_ff_stage5_read__168_BITS__ETC___d1229 =
		   inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 &&
		   lv_inexact__h65487 & y__h66117;
    endcase
  end
  always@(inst_dpfpu_divider_rg_stage3 or
	  x__h87789 or lv_round_up___1__h87741 or lv_round_up___1__h87777)
  begin
    case (inst_dpfpu_divider_rg_stage3[4:2])
      3'b0:
	  IF_inst_dpfpu_divider_rg_stage3_670_BITS_4_TO__ETC___d1717 =
	      lv_round_up___1__h87741;
      3'b011:
	  IF_inst_dpfpu_divider_rg_stage3_670_BITS_4_TO__ETC___d1717 =
	      lv_round_up___1__h87777;
      3'b100:
	  IF_inst_dpfpu_divider_rg_stage3_670_BITS_4_TO__ETC___d1717 =
	      inst_dpfpu_divider_rg_stage3[85];
      default: IF_inst_dpfpu_divider_rg_stage3_670_BITS_4_TO__ETC___d1717 =
		   inst_dpfpu_divider_rg_stage3[4:2] == 3'b010 &&
		   x__h87789 & inst_dpfpu_divider_rg_stage3[12];
    endcase
  end
  always@(inst_dpfpu_sqrt_rg_inter_stage or
	  lv_inexact__h89570 or
	  lv_roundup___1__h89642 or lv_roundup___1__h90024)
  begin
    case (inst_dpfpu_sqrt_rg_inter_stage[2:0])
      3'b0:
	  IF_inst_dpfpu_sqrt_rg_inter_stage_read__773_BI_ETC___d1827 =
	      lv_roundup___1__h89642;
      3'b011:
	  IF_inst_dpfpu_sqrt_rg_inter_stage_read__773_BI_ETC___d1827 =
	      lv_roundup___1__h90024;
      3'b100:
	  IF_inst_dpfpu_sqrt_rg_inter_stage_read__773_BI_ETC___d1827 =
	      inst_dpfpu_sqrt_rg_inter_stage[130];
      default: IF_inst_dpfpu_sqrt_rg_inter_stage_read__773_BI_ETC___d1827 =
		   inst_dpfpu_sqrt_rg_inter_stage[2:0] == 3'b010 &&
		   lv_inexact__h89570 & inst_dpfpu_sqrt_rg_inter_stage[116];
    endcase
  end
  always@(inst_dpfm_add_sub_ff_stage5 or
	  lv_inexact__h193885 or
	  y__h194515 or
	  lv_round_up___1__h194267 or
	  lv_round_up___1__h194489 or
	  IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3189)
  begin
    case (inst_dpfm_add_sub_ff_stage5[22:20])
      3'b0:
	  IF_inst_dpfm_add_sub_ff_stage5_read__150_BITS__ETC___d3211 =
	      lv_round_up___1__h194267;
      3'b010:
	  IF_inst_dpfm_add_sub_ff_stage5_read__150_BITS__ETC___d3211 =
	      lv_round_up___1__h194489;
      3'b100:
	  IF_inst_dpfm_add_sub_ff_stage5_read__150_BITS__ETC___d3211 =
	      IF_inst_dpfm_add_sub_ff_stage5_read__150_BIT_1_ETC___d3189[105];
      default: IF_inst_dpfm_add_sub_ff_stage5_read__150_BITS__ETC___d3211 =
		   inst_dpfm_add_sub_ff_stage5[22:20] == 3'b011 &&
		   lv_inexact__h193885 & y__h194515;
    endcase
  end
  always@(ff_input_D_OUT or
	  inexact__h232375 or
	  sign__h232372 or
	  lv_roundup___1__h242965 or
	  lv_roundup___1__h243001 or
	  IF_NOT_ff_input_first__305_BIT_4_530_544_AND_f_ETC___d3678)
  begin
    case (ff_input_D_OUT[8:6])
      3'b0:
	  IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d3698 =
	      lv_roundup___1__h242965;
      3'b011:
	  IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d3698 =
	      lv_roundup___1__h243001;
      3'b100:
	  IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d3698 =
	      IF_NOT_ff_input_first__305_BIT_4_530_544_AND_f_ETC___d3678[10];
      default: IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d3698 =
		   ff_input_D_OUT[8:6] == 3'b010 &&
		   inexact__h232375 & sign__h232372;
    endcase
  end
  always@(ff_input_D_OUT or
	  ff_input_first__305_BIT_211_443_XOR_ff_input_f_ETC___d3807)
  begin
    case (ff_input_D_OUT[8:6])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_ff_inputD_ETC__q7 =
	      ff_input_D_OUT[147];
      3'b001:
	  CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_ff_inputD_ETC__q7 =
	      ~ff_input_D_OUT[147];
      default: CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_ff_inputD_ETC__q7 =
		   ff_input_first__305_BIT_211_443_XOR_ff_input_f_ETC___d3807;
    endcase
  end
  always@(inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget or
	  inexact__h209751 or
	  inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20 or
	  lv_roundup___1__h215352 or
	  lv_roundup___1__h215389 or
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5142)
  begin
    case (inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[2:0])
      3'b0:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5167 =
	      lv_roundup___1__h215352;
      3'b011:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5167 =
	      lv_roundup___1__h215389;
      3'b100:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5167 =
	      IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5142[7];
      default: IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5167 =
		   inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[2:0] == 3'b010 &&
		   inexact__h209751 &
		   (!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
		    inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20[31]);
    endcase
  end
  always@(inst_fpu_int_to_fp_fcvt_s_llu_arg_wget or
	  inexact__h215623 or
	  inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21 or
	  lv_roundup___1__h226427 or
	  lv_roundup___1__h226464 or
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5018)
  begin
    case (inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[2:0])
      3'b0:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5043 =
	      lv_roundup___1__h226427;
      3'b011:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5043 =
	      lv_roundup___1__h226464;
      3'b100:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5043 =
	      IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5018[39];
      default: IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5043 =
		   inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[2:0] == 3'b010 &&
		   inexact__h215623 &
		   (!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
		    inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21[63]);
    endcase
  end
  always@(ff_input_D_OUT or
	  IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4350 or
	  lv_round_up___1__h265588 or
	  lv_round_up___1__h265625 or
	  IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4346)
  begin
    case (ff_input_D_OUT[8:6])
      3'b0:
	  IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d4382 =
	      lv_round_up___1__h265588;
      3'b011:
	  IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d4382 =
	      lv_round_up___1__h265625;
      3'b100:
	  IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d4382 =
	      IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4346[25];
      default: IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d4382 =
		   ff_input_D_OUT[8:6] == 3'b010 &&
		   IF_IF_getExp64_res_whas__310_THEN_getExp64_res_ETC___d4350 &
		   ff_input_D_OUT[211];
    endcase
  end
  always@(ff_input_D_OUT)
  begin
    case (ff_input_D_OUT[8:6])
      3'b001:
	  CASE_ff_inputD_OUT_BITS_8_TO_6_0b1_ff_inputD_ETC__q27 =
	      { ff_input_D_OUT[211], 31'h7F7FFFFF };
      3'b010:
	  CASE_ff_inputD_OUT_BITS_8_TO_6_0b1_ff_inputD_ETC__q27 =
	      { ff_input_D_OUT[211],
		ff_input_D_OUT[211] ? 31'h7F800000 : 31'h7F7FFFFF };
      default: CASE_ff_inputD_OUT_BITS_8_TO_6_0b1_ff_inputD_ETC__q27 =
		   { ff_input_D_OUT[211],
		     (ff_input_D_OUT[8:6] == 3'b011 && ff_input_D_OUT[211]) ?
		       31'h7F7FFFFF :
		       31'h7F800000 };
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_compare_result__h202542 or
	  condFlags64_reswget_BITS_14_TO_10__q31 or
	  condFlags64_reswget_BITS_9_TO_5__q32)
  begin
    case (ff_input_D_OUT[8:6])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_IF_lv_comp_ETC__q34 =
	      (lv_compare_result__h202542[0] ||
	       condFlags64_reswget_BITS_14_TO_10__q31[3] &&
	       condFlags64_reswget_BITS_9_TO_5__q32[3]) ?
		64'd1 :
		64'd0;
      3'b001:
	  CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_IF_lv_comp_ETC__q34 =
	      (lv_compare_result__h202542 == 2'b01 &&
	       (!condFlags64_reswget_BITS_14_TO_10__q31[3] ||
		!condFlags64_reswget_BITS_9_TO_5__q32[3])) ?
		64'd1 :
		64'd0;
      3'b010:
	  CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_IF_lv_comp_ETC__q34 =
	      (lv_compare_result__h202542 == 2'b11 ||
	       condFlags64_reswget_BITS_14_TO_10__q31[3] &&
	       condFlags64_reswget_BITS_9_TO_5__q32[3]) ?
		64'd1 :
		64'd0;
      default: CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_IF_lv_comp_ETC__q34 = 64'd0;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_inexact1__h249860 or
	  y__h251262 or
	  lv_round_up___1__h250570 or
	  lv_round_up___1__h251237 or
	  IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d4035)
  begin
    case (ff_input_D_OUT[8:6])
      3'b0:
	  IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d4097 =
	      lv_round_up___1__h250570;
      3'b010:
	  IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d4097 =
	      lv_round_up___1__h251237;
      3'b100:
	  IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d4097 =
	      IF_IF_condFlags64_res_whas__424_THEN_condFlags_ETC___d4035[51];
      default: IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d4097 =
		   ff_input_D_OUT[8:6] == 3'b011 &&
		   lv_inexact1__h249860 & y__h251262;
    endcase
  end
  always@(ff_input_D_OUT or
	  x__h282513 or setCanonicalNaN_reswget_BITS_63_TO_32__q42)
  begin
    case (ff_input_D_OUT[8:6])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_setCanonic_ETC__q43 =
	      setCanonicalNaN_reswget_BITS_63_TO_32__q42[31];
      3'b001:
	  CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_setCanonic_ETC__q43 =
	      ~setCanonicalNaN_reswget_BITS_63_TO_32__q42[31];
      default: CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_setCanonic_ETC__q43 =
		   x__h282513;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_compare_result__h199477 or
	  condFlags32_reswget_BITS_14_TO_10__q52 or
	  condFlags32_reswget_BITS_9_TO_5__q53)
  begin
    case (ff_input_D_OUT[8:6])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_IF_lv_comp_ETC__q55 =
	      (lv_compare_result__h199477[0] ||
	       condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q53[3]) ?
		32'd1 :
		32'd0;
      3'b001:
	  CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_IF_lv_comp_ETC__q55 =
	      (lv_compare_result__h199477 == 2'b01 &&
	       (!condFlags32_reswget_BITS_14_TO_10__q52[3] ||
		!condFlags32_reswget_BITS_9_TO_5__q53[3])) ?
		32'd1 :
		32'd0;
      3'b010:
	  CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_IF_lv_comp_ETC__q55 =
	      (lv_compare_result__h199477 == 2'b11 ||
	       condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q53[3]) ?
		32'd1 :
		32'd0;
      default: CASE_ff_inputD_OUT_BITS_8_TO_6_0b0_IF_lv_comp_ETC__q55 = 32'd0;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_inexact1__h246360 or
	  y__h247730 or
	  lv_round_up___1__h247048 or
	  lv_round_up___1__h247705 or
	  IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d3868)
  begin
    case (ff_input_D_OUT[8:6])
      3'b0:
	  IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d3931 =
	      lv_round_up___1__h247048;
      3'b010:
	  IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d3931 =
	      lv_round_up___1__h247705;
      3'b100:
	  IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d3931 =
	      IF_IF_condFlags32_res_whas__339_THEN_condFlags_ETC___d3868[22];
      default: IF_ff_input_first__305_BITS_8_TO_6_314_EQ_0b0__ETC___d3931 =
		   ff_input_D_OUT[8:6] == 3'b011 &&
		   lv_inexact1__h246360 & y__h247730;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        inst_dpfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inst_dpfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_dpfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inst_dpfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	inst_dpfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	    294'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	inst_dpfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_spfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inst_spfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_spfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inst_spfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	inst_spfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	    146'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	inst_spfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_multicycle_op <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (inst_dpfm_add_sub_rg_state_handler_EN)
	  inst_dpfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfm_add_sub_rg_state_handler_D_IN;
	if (inst_dpfpu_divider_int_div_rg_state_EN)
	  inst_dpfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_divider_int_div_rg_state_D_IN;
	if (inst_dpfpu_divider_rg_state_handler_EN)
	  inst_dpfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_divider_rg_state_handler_D_IN;
	if (inst_dpfpu_sqrt_ff_final_out_EN)
	  inst_dpfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sqrt_ff_final_out_D_IN;
	if (inst_dpfpu_sqrt_rg_inter_stage_EN)
	  inst_dpfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sqrt_rg_inter_stage_D_IN;
	if (inst_dpfpu_sqrt_rg_state_EN)
	  inst_dpfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sqrt_rg_state_D_IN;
	if (inst_spfm_add_sub_rg_state_handler_EN)
	  inst_spfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_spfm_add_sub_rg_state_handler_D_IN;
	if (inst_spfpu_divider_int_div_rg_state_EN)
	  inst_spfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_divider_int_div_rg_state_D_IN;
	if (inst_spfpu_divider_rg_state_handler_EN)
	  inst_spfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_divider_rg_state_handler_D_IN;
	if (inst_spfpu_sqrt_ff_final_out_EN)
	  inst_spfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_ff_final_out_D_IN;
	if (inst_spfpu_sqrt_rg_inter_stage_EN)
	  inst_spfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_rg_inter_stage_D_IN;
	if (inst_spfpu_sqrt_rg_state_EN)
	  inst_spfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_rg_state_D_IN;
	if (rg_multicycle_op_EN)
	  rg_multicycle_op <= `BSV_ASSIGNMENT_DELAY rg_multicycle_op_D_IN;
      end
    if (inst_dpfm_add_sub_ff_input_register_EN)
      inst_dpfm_add_sub_ff_input_register <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_input_register_D_IN;
    if (inst_dpfm_add_sub_ff_stage2_EN)
      inst_dpfm_add_sub_ff_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_stage2_D_IN;
    if (inst_dpfm_add_sub_ff_stage4_EN)
      inst_dpfm_add_sub_ff_stage4 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_stage4_D_IN;
    if (inst_dpfm_add_sub_ff_stage5_EN)
      inst_dpfm_add_sub_ff_stage5 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_stage5_D_IN;
    if (inst_dpfpu_divider_int_div_rg_inter_stage_EN)
      inst_dpfpu_divider_int_div_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_int_div_rg_inter_stage_D_IN;
    if (inst_dpfpu_divider_rg_stage1_EN)
      inst_dpfpu_divider_rg_stage1 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_rg_stage1_D_IN;
    if (inst_dpfpu_divider_rg_stage2_EN)
      inst_dpfpu_divider_rg_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_rg_stage2_D_IN;
    if (inst_dpfpu_divider_rg_stage3_EN)
      inst_dpfpu_divider_rg_stage3 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_rg_stage3_D_IN;
    if (inst_spfm_add_sub_ff_input_register_EN)
      inst_spfm_add_sub_ff_input_register <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_input_register_D_IN;
    if (inst_spfm_add_sub_ff_stage2_EN)
      inst_spfm_add_sub_ff_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage2_D_IN;
    if (inst_spfm_add_sub_ff_stage4_EN)
      inst_spfm_add_sub_ff_stage4 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage4_D_IN;
    if (inst_spfm_add_sub_ff_stage5_EN)
      inst_spfm_add_sub_ff_stage5 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage5_D_IN;
    if (inst_spfpu_divider_int_div_rg_inter_stage_EN)
      inst_spfpu_divider_int_div_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_int_div_rg_inter_stage_D_IN;
    if (inst_spfpu_divider_rg_stage1_EN)
      inst_spfpu_divider_rg_stage1 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage1_D_IN;
    if (inst_spfpu_divider_rg_stage2_EN)
      inst_spfpu_divider_rg_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage2_D_IN;
    if (inst_spfpu_divider_rg_stage3_EN)
      inst_spfpu_divider_rg_stage3 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage3_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inst_dpfm_add_sub_ff_input_register =
	201'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_ff_stage2 =
	204'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_ff_stage4 =
	349'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_ff_stage5 =
	197'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_rg_state_handler = 3'h2;
    inst_dpfpu_divider_int_div_rg_inter_stage =
	170'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_divider_int_div_rg_state = 6'h2A;
    inst_dpfpu_divider_rg_stage1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_divider_rg_stage2 = 22'h2AAAAA;
    inst_dpfpu_divider_rg_stage3 = 139'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_divider_rg_state_handler = 2'h2;
    inst_dpfpu_sqrt_ff_final_out = 70'h2AAAAAAAAAAAAAAAAA;
    inst_dpfpu_sqrt_rg_inter_stage =
	294'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_sqrt_rg_state = 6'h2A;
    inst_spfm_add_sub_ff_input_register = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage2 = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage4 =
	172'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage5 = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_rg_state_handler = 3'h2;
    inst_spfpu_divider_int_div_rg_inter_stage = 83'h2AAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_divider_int_div_rg_state = 6'h2A;
    inst_spfpu_divider_rg_stage1 = 67'h2AAAAAAAAAAAAAAAA;
    inst_spfpu_divider_rg_stage2 = 19'h2AAAA;
    inst_spfpu_divider_rg_stage3 = 78'h2AAAAAAAAAAAAAAAAAAA;
    inst_spfpu_divider_rg_state_handler = 2'h2;
    inst_spfpu_sqrt_ff_final_out = 38'h2AAAAAAAAA;
    inst_spfpu_sqrt_rg_inter_stage =
	146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_sqrt_rg_state = 6'h2A;
    rg_multicycle_op = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu/bsv_float/integer_divider.bsv\", line 89, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage)
	$display("Error: \"src/fpu/bsv_float/integer_divider.bsv\", line 89, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1)
	$display("Error: \"src/fpu/bsv_float/integer_divider.bsv\", line 89, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_stage_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu/bsv_float/integer_divider.bsv\", line 89, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_stage_1] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage)
	$display("Error: \"src/fpu/bsv_float/integer_divider.bsv\", line 89, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_stage_1] and\n  [RL_inst_spfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu/bsv_float/integer_divider.bsv\", line 89, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_recursive_stage] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_rl_stage3)
	$display("Error: \"src/fpu/bsv_float/fpu_divider.bsv\", line 121, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_flush]\n  and [RL_inst_spfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_rl_stage2)
	$display("Error: \"src/fpu/bsv_float/fpu_divider.bsv\", line 121, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_flush]\n  and [RL_inst_spfpu_divider_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage3)
	$display("Error: \"src/fpu/bsv_float/fpu_divider.bsv\", line 121, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_stage2]\n  and [RL_inst_spfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu/bsv_float/fpu_sqrt.bsv\", line 110, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage)
	$display("Error: \"src/fpu/bsv_float/fpu_sqrt.bsv\", line 110, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2)
	$display("Error: \"src/fpu/bsv_float/fpu_sqrt.bsv\", line 110, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu/bsv_float/fpu_sqrt.bsv\", line 110, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_stage2]\n  and [RL_inst_spfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage)
	$display("Error: \"src/fpu/bsv_float/fpu_sqrt.bsv\", line 110, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_stage2]\n  and [RL_inst_spfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu/bsv_float/fpu_sqrt.bsv\", line 110, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_sqrt_rl_inter_stage] and [RL_inst_spfpu_sqrt_rl_final_stage]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu/bsv_float/integer_divider.bsv\", line 89, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_rl_flush] and\n  [RL_inst_dpfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage)
	$display("Error: \"src/fpu/bsv_float/integer_divider.bsv\", line 89, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_rl_flush] and\n  [RL_inst_dpfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1)
	$display("Error: \"src/fpu/bsv_float/integer_divider.bsv\", line 89, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_rl_flush] and\n  [RL_inst_dpfpu_divider_int_div_stage_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu/bsv_float/integer_divider.bsv\", line 89, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_stage_1] and\n  [RL_inst_dpfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage)
	$display("Error: \"src/fpu/bsv_float/integer_divider.bsv\", line 89, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_stage_1] and\n  [RL_inst_dpfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage &&
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu/bsv_float/integer_divider.bsv\", line 89, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_recursive_stage] and\n  [RL_inst_dpfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3)
	$display("Error: \"src/fpu/bsv_float/fpu_divider.bsv\", line 121, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_divider_rl_flush]\n  and [RL_inst_dpfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2)
	$display("Error: \"src/fpu/bsv_float/fpu_divider.bsv\", line 121, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_divider_rl_flush]\n  and [RL_inst_dpfpu_divider_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 &&
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3)
	$display("Error: \"src/fpu/bsv_float/fpu_divider.bsv\", line 121, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_divider_rl_stage2]\n  and [RL_inst_dpfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu/bsv_float/fpu_sqrt.bsv\", line 110, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_flush] and\n  [RL_inst_dpfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage)
	$display("Error: \"src/fpu/bsv_float/fpu_sqrt.bsv\", line 110, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_flush] and\n  [RL_inst_dpfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2)
	$display("Error: \"src/fpu/bsv_float/fpu_sqrt.bsv\", line 110, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_flush] and\n  [RL_inst_dpfpu_sqrt_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu/bsv_float/fpu_sqrt.bsv\", line 110, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_stage2]\n  and [RL_inst_dpfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage)
	$display("Error: \"src/fpu/bsv_float/fpu_sqrt.bsv\", line 110, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_stage2]\n  and [RL_inst_dpfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage &&
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu/bsv_float/fpu_sqrt.bsv\", line 110, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_sqrt_rl_inter_stage] and [RL_inst_dpfpu_sqrt_rl_final_stage]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu/bsv_float/fpu_bsvfloat.bsv\", line 215, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and\n  [RL_rl_get_output_from_dpfm_add_sub] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"src/fpu/bsv_float/fpu_bsvfloat.bsv\", line 215, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_fm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	$display("Error: \"src/fpu/bsv_float/fpu_bsvfloat.bsv\", line 215, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_dpfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	$display("Error: \"src/fpu/bsv_float/fpu_bsvfloat.bsv\", line 215, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_spfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_divider)
	$display("Error: \"src/fpu/bsv_float/fpu_bsvfloat.bsv\", line 215, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and\n  [RL_rl_get_output_from_dpfpu_divider] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu/bsv_float/fpu_bsvfloat.bsv\", line 215, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and\n  [RL_rl_get_output_from_dpfm_add_sub] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"src/fpu/bsv_float/fpu_bsvfloat.bsv\", line 215, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and [RL_rl_get_output_from_fm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	$display("Error: \"src/fpu/bsv_float/fpu_bsvfloat.bsv\", line 215, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and [RL_rl_get_output_from_dpfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	$display("Error: \"src/fpu/bsv_float/fpu_bsvfloat.bsv\", line 215, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and [RL_rl_get_output_from_spfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu/bsv_float/fpu_bsvfloat.bsv\", line 215, column 91: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_sqrt] and [RL_rl_get_output_from_dpfm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"src/fpu/bsv_float/fpu_bsvfloat.bsv\", line 215, column 91: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_sqrt] and [RL_rl_get_output_from_fm_add_sub] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	$display("Error: \"src/fpu/bsv_float/fpu_bsvfloat.bsv\", line 215, column 91: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_sqrt] and [RL_rl_get_output_from_dpfpu_sqrt] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu/bsv_float/fpu_bsvfloat.bsv\", line 215, column 122: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_sqrt] and [RL_rl_get_output_from_dpfm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"src/fpu/bsv_float/fpu_bsvfloat.bsv\", line 215, column 122: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_sqrt] and [RL_rl_get_output_from_fm_add_sub] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu/bsv_float/fpu_bsvfloat.bsv\", line 215, column 152: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_fm_add_sub] and [RL_rl_get_output_from_dpfm_add_sub]\n  ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkfpu_bsvfloat

