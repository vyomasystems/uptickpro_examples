//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
//
// On Tue Jul 29 14:28:16 +04 2025
//
//
// Ports:
// Name                         I/O  size props
// RDY_receive_core_req_put       O     1
// send_core_cache_resp_get       O   132
// RDY_send_core_cache_resp_get   O     1
// send_core_io_resp              O   133 reg
// RDY_send_core_io_resp          O     1 const
// send_mem_io_req_get            O   100 reg
// RDY_send_mem_io_req_get        O     1 reg
// RDY_receive_mem_io_resp_put    O     1 reg
// RDY_ma_commit_io               O     1 const
// mv_dmem_available              O     1
// send_mem_wr_req                O   555 reg
// RDY_send_mem_wr_req            O     1 reg
// RDY_receive_mem_wr_resp_put    O     1
// RDY_deq_mem_wr_req             O     1 reg
// send_mem_rd_req_get            O    43 reg
// RDY_send_mem_rd_req_get        O     1 reg
// RDY_receive_mem_rd_resp_put    O     1
// RDY_ma_commit_store            O     1 const
// RDY_ma_cache_enable            O     1 const
// mv_storebuffer_empty           O     1
// get_ptw_resp_get               O   132
// RDY_get_ptw_resp_get           O     1
// get_req_to_ptw_get             O    68 reg
// RDY_get_req_to_ptw_get         O     1 reg
// RDY_put_resp_from_ptw_put      O     1
// RDY_ma_satp_from_csr           O     1 const
// RDY_ma_mstatus_from_csr        O     1 const
// get_hold_req_get               O   141
// RDY_get_hold_req_get           O     1
// mv_dcache_perf_counters        O    13
// RDY_mv_dcache_perf_counters    O     1 const
// mv_dtlb_perf_counters          O     1
// RDY_mv_dtlb_perf_counters      O     1 const
// pmp_cfg_0                      I     8
// pmp_cfg_1                      I     8
// pmp_cfg_2                      I     8
// pmp_cfg_3                      I     8
// pmp_addr_0                     I    32
// pmp_addr_1                     I    32
// pmp_addr_2                     I    32
// pmp_addr_3                     I    32
// CLK                            I     1 clock
// RST_N                          I     1 reset
// receive_core_req_put           I   145
// receive_mem_io_resp_put        I    65 reg
// ma_curr_priv_c                 I     2
// ma_commit_io_currepoch         I     1
// receive_mem_wr_resp_put        I     1
// receive_mem_rd_resp_put        I    66
// ma_commit_store_storecommit    I     2
// ma_cache_enable_c              I     1
// put_resp_from_ptw_put          I   174
// ma_satp_from_csr_s             I    64
// ma_mstatus_from_csr_m          I    64
// EN_receive_core_req_put        I     1
// EN_receive_mem_io_resp_put     I     1
// EN_ma_commit_io                I     1
// EN_receive_mem_wr_resp_put     I     1
// EN_deq_mem_wr_req              I     1
// EN_receive_mem_rd_resp_put     I     1
// EN_ma_commit_store             I     1
// EN_ma_cache_enable             I     1
// EN_put_resp_from_ptw_put       I     1
// EN_ma_satp_from_csr            I     1
// EN_ma_mstatus_from_csr         I     1
// EN_send_core_cache_resp_get    I     1
// EN_send_mem_io_req_get         I     1
// EN_send_mem_rd_req_get         I     1
// EN_get_ptw_resp_get            I     1
// EN_get_req_to_ptw_get          I     1
// EN_get_hold_req_get            I     1
//
// Combinational paths from inputs to outputs:
//   (receive_core_req_put,
//    ma_curr_priv_c,
//    ma_cache_enable_c,
//    ma_mstatus_from_csr_m,
//    EN_receive_core_req_put,
//    EN_ma_cache_enable,
//    EN_ma_satp_from_csr,
//    EN_ma_mstatus_from_csr,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> mv_dcache_perf_counters
//   (receive_core_req_put,
//    ma_curr_priv_c,
//    ma_satp_from_csr_s,
//    ma_mstatus_from_csr_m,
//    EN_receive_core_req_put,
//    EN_ma_cache_enable,
//    EN_ma_satp_from_csr,
//    EN_ma_mstatus_from_csr,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> mv_dtlb_perf_counters
//   (ma_curr_priv_c,
//    ma_cache_enable_c,
//    ma_mstatus_from_csr_m,
//    EN_ma_cache_enable,
//    EN_ma_mstatus_from_csr,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_send_core_cache_resp_get
//   (ma_curr_priv_c,
//    ma_cache_enable_c,
//    ma_mstatus_from_csr_m,
//    EN_ma_cache_enable,
//    EN_ma_mstatus_from_csr,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_get_ptw_resp_get
//   (ma_curr_priv_c,
//    ma_cache_enable_c,
//    ma_mstatus_from_csr_m,
//    EN_ma_cache_enable,
//    EN_ma_mstatus_from_csr,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_get_hold_req_get
//   (ma_curr_priv_c,
//    ma_cache_enable_c,
//    ma_mstatus_from_csr_m,
//    EN_ma_cache_enable,
//    EN_ma_mstatus_from_csr,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> send_core_cache_resp_get
//   (ma_curr_priv_c,
//    ma_cache_enable_c,
//    ma_mstatus_from_csr_m,
//    EN_ma_cache_enable,
//    EN_ma_mstatus_from_csr,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> get_ptw_resp_get
//   (ma_curr_priv_c,
//    ma_cache_enable_c,
//    ma_mstatus_from_csr_m,
//    EN_ma_cache_enable,
//    EN_ma_mstatus_from_csr,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> get_hold_req_get
//   (EN_ma_cache_enable,
//    EN_ma_satp_from_csr,
//    EN_ma_mstatus_from_csr,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_receive_core_req_put
//   EN_ma_satp_from_csr -> RDY_put_resp_from_ptw_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkdmem(pmp_cfg_0,
	      pmp_cfg_1,
	      pmp_cfg_2,
	      pmp_cfg_3,
	      pmp_addr_0,
	      pmp_addr_1,
	      pmp_addr_2,
	      pmp_addr_3,
	      CLK,
	      RST_N,

	      receive_core_req_put,
	      EN_receive_core_req_put,
	      RDY_receive_core_req_put,

	      EN_send_core_cache_resp_get,
	      send_core_cache_resp_get,
	      RDY_send_core_cache_resp_get,

	      send_core_io_resp,
	      RDY_send_core_io_resp,

	      EN_send_mem_io_req_get,
	      send_mem_io_req_get,
	      RDY_send_mem_io_req_get,

	      receive_mem_io_resp_put,
	      EN_receive_mem_io_resp_put,
	      RDY_receive_mem_io_resp_put,

	      ma_curr_priv_c,

	      ma_commit_io_currepoch,
	      EN_ma_commit_io,
	      RDY_ma_commit_io,

	      mv_dmem_available,

	      send_mem_wr_req,
	      RDY_send_mem_wr_req,

	      receive_mem_wr_resp_put,
	      EN_receive_mem_wr_resp_put,
	      RDY_receive_mem_wr_resp_put,

	      EN_deq_mem_wr_req,
	      RDY_deq_mem_wr_req,

	      EN_send_mem_rd_req_get,
	      send_mem_rd_req_get,
	      RDY_send_mem_rd_req_get,

	      receive_mem_rd_resp_put,
	      EN_receive_mem_rd_resp_put,
	      RDY_receive_mem_rd_resp_put,

	      ma_commit_store_storecommit,
	      EN_ma_commit_store,
	      RDY_ma_commit_store,

	      ma_cache_enable_c,
	      EN_ma_cache_enable,
	      RDY_ma_cache_enable,

	      mv_storebuffer_empty,

	      EN_get_ptw_resp_get,
	      get_ptw_resp_get,
	      RDY_get_ptw_resp_get,

	      EN_get_req_to_ptw_get,
	      get_req_to_ptw_get,
	      RDY_get_req_to_ptw_get,

	      put_resp_from_ptw_put,
	      EN_put_resp_from_ptw_put,
	      RDY_put_resp_from_ptw_put,

	      ma_satp_from_csr_s,
	      EN_ma_satp_from_csr,
	      RDY_ma_satp_from_csr,

	      ma_mstatus_from_csr_m,
	      EN_ma_mstatus_from_csr,
	      RDY_ma_mstatus_from_csr,

	      EN_get_hold_req_get,
	      get_hold_req_get,
	      RDY_get_hold_req_get,

	      mv_dcache_perf_counters,
	      RDY_mv_dcache_perf_counters,

	      mv_dtlb_perf_counters,
	      RDY_mv_dtlb_perf_counters);
  parameter [31 : 0] id = 32'b0;
  input  [7 : 0] pmp_cfg_0;
  input  [7 : 0] pmp_cfg_1;
  input  [7 : 0] pmp_cfg_2;
  input  [7 : 0] pmp_cfg_3;
  input  [31 : 0] pmp_addr_0;
  input  [31 : 0] pmp_addr_1;
  input  [31 : 0] pmp_addr_2;
  input  [31 : 0] pmp_addr_3;
  input  CLK;
  input  RST_N;

  // action method receive_core_req_put
  input  [144 : 0] receive_core_req_put;
  input  EN_receive_core_req_put;
  output RDY_receive_core_req_put;

  // actionvalue method send_core_cache_resp_get
  input  EN_send_core_cache_resp_get;
  output [131 : 0] send_core_cache_resp_get;
  output RDY_send_core_cache_resp_get;

  // value method send_core_io_resp
  output [132 : 0] send_core_io_resp;
  output RDY_send_core_io_resp;

  // actionvalue method send_mem_io_req_get
  input  EN_send_mem_io_req_get;
  output [99 : 0] send_mem_io_req_get;
  output RDY_send_mem_io_req_get;

  // action method receive_mem_io_resp_put
  input  [64 : 0] receive_mem_io_resp_put;
  input  EN_receive_mem_io_resp_put;
  output RDY_receive_mem_io_resp_put;

  // action method ma_curr_priv
  input  [1 : 0] ma_curr_priv_c;

  // action method ma_commit_io
  input  ma_commit_io_currepoch;
  input  EN_ma_commit_io;
  output RDY_ma_commit_io;

  // value method mv_dmem_available
  output mv_dmem_available;

  // value method send_mem_wr_req
  output [554 : 0] send_mem_wr_req;
  output RDY_send_mem_wr_req;

  // action method receive_mem_wr_resp_put
  input  receive_mem_wr_resp_put;
  input  EN_receive_mem_wr_resp_put;
  output RDY_receive_mem_wr_resp_put;

  // action method deq_mem_wr_req
  input  EN_deq_mem_wr_req;
  output RDY_deq_mem_wr_req;

  // actionvalue method send_mem_rd_req_get
  input  EN_send_mem_rd_req_get;
  output [42 : 0] send_mem_rd_req_get;
  output RDY_send_mem_rd_req_get;

  // action method receive_mem_rd_resp_put
  input  [65 : 0] receive_mem_rd_resp_put;
  input  EN_receive_mem_rd_resp_put;
  output RDY_receive_mem_rd_resp_put;

  // action method ma_commit_store
  input  [1 : 0] ma_commit_store_storecommit;
  input  EN_ma_commit_store;
  output RDY_ma_commit_store;

  // action method ma_cache_enable
  input  ma_cache_enable_c;
  input  EN_ma_cache_enable;
  output RDY_ma_cache_enable;

  // value method mv_storebuffer_empty
  output mv_storebuffer_empty;

  // actionvalue method get_ptw_resp_get
  input  EN_get_ptw_resp_get;
  output [131 : 0] get_ptw_resp_get;
  output RDY_get_ptw_resp_get;

  // actionvalue method get_req_to_ptw_get
  input  EN_get_req_to_ptw_get;
  output [67 : 0] get_req_to_ptw_get;
  output RDY_get_req_to_ptw_get;

  // action method put_resp_from_ptw_put
  input  [173 : 0] put_resp_from_ptw_put;
  input  EN_put_resp_from_ptw_put;
  output RDY_put_resp_from_ptw_put;

  // action method ma_satp_from_csr
  input  [63 : 0] ma_satp_from_csr_s;
  input  EN_ma_satp_from_csr;
  output RDY_ma_satp_from_csr;

  // action method ma_mstatus_from_csr
  input  [63 : 0] ma_mstatus_from_csr_m;
  input  EN_ma_mstatus_from_csr;
  output RDY_ma_mstatus_from_csr;

  // actionvalue method get_hold_req_get
  input  EN_get_hold_req_get;
  output [140 : 0] get_hold_req_get;
  output RDY_get_hold_req_get;

  // value method mv_dcache_perf_counters
  output [12 : 0] mv_dcache_perf_counters;
  output RDY_mv_dcache_perf_counters;

  // value method mv_dtlb_perf_counters
  output mv_dtlb_perf_counters;
  output RDY_mv_dtlb_perf_counters;

  // signals for module outputs
  wire [554 : 0] send_mem_wr_req;
  wire [140 : 0] get_hold_req_get;
  wire [132 : 0] send_core_io_resp;
  wire [131 : 0] get_ptw_resp_get, send_core_cache_resp_get;
  wire [99 : 0] send_mem_io_req_get;
  wire [67 : 0] get_req_to_ptw_get;
  wire [42 : 0] send_mem_rd_req_get;
  wire [12 : 0] mv_dcache_perf_counters;
  wire RDY_deq_mem_wr_req,
       RDY_get_hold_req_get,
       RDY_get_ptw_resp_get,
       RDY_get_req_to_ptw_get,
       RDY_ma_cache_enable,
       RDY_ma_commit_io,
       RDY_ma_commit_store,
       RDY_ma_mstatus_from_csr,
       RDY_ma_satp_from_csr,
       RDY_mv_dcache_perf_counters,
       RDY_mv_dtlb_perf_counters,
       RDY_put_resp_from_ptw_put,
       RDY_receive_core_req_put,
       RDY_receive_mem_io_resp_put,
       RDY_receive_mem_rd_resp_put,
       RDY_receive_mem_wr_resp_put,
       RDY_send_core_cache_resp_get,
       RDY_send_core_io_resp,
       RDY_send_mem_io_req_get,
       RDY_send_mem_rd_req_get,
       RDY_send_mem_wr_req,
       mv_dmem_available,
       mv_dtlb_perf_counters,
       mv_storebuffer_empty;

  // ports of submodule dcache
  wire [554 : 0] dcache_send_mem_wr_req;
  wire [140 : 0] dcache_get_hold_req_get, dcache_receive_core_req_put;
  wire [132 : 0] dcache_send_core_io_resp;
  wire [131 : 0] dcache_get_ptw_resp_get, dcache_send_core_cache_resp_get;
  wire [104 : 0] dcache_put_pa_from_tlb_put;
  wire [99 : 0] dcache_send_mem_io_req_get;
  wire [65 : 0] dcache_receive_mem_rd_resp_put;
  wire [64 : 0] dcache_receive_mem_io_resp_put;
  wire [42 : 0] dcache_send_mem_rd_req_get;
  wire [12 : 0] dcache_mv_perf_counters;
  wire [1 : 0] dcache_ma_commit_store_storecommit, dcache_ma_curr_priv_c;
  wire dcache_EN_deq_mem_wr_req,
       dcache_EN_get_hold_req_get,
       dcache_EN_get_ptw_resp_get,
       dcache_EN_ma_cache_enable,
       dcache_EN_ma_commit_io,
       dcache_EN_ma_commit_store,
       dcache_EN_ma_curr_priv,
       dcache_EN_put_pa_from_tlb_put,
       dcache_EN_receive_core_req_put,
       dcache_EN_receive_mem_io_resp_put,
       dcache_EN_receive_mem_rd_resp_put,
       dcache_EN_receive_mem_wr_resp_put,
       dcache_EN_send_core_cache_resp_get,
       dcache_EN_send_mem_io_req_get,
       dcache_EN_send_mem_rd_req_get,
       dcache_RDY_deq_mem_wr_req,
       dcache_RDY_get_hold_req_get,
       dcache_RDY_get_ptw_resp_get,
       dcache_RDY_ma_commit_io,
       dcache_RDY_put_pa_from_tlb_put,
       dcache_RDY_receive_core_req_put,
       dcache_RDY_receive_mem_io_resp_put,
       dcache_RDY_receive_mem_rd_resp_put,
       dcache_RDY_receive_mem_wr_resp_put,
       dcache_RDY_send_core_cache_resp_get,
       dcache_RDY_send_mem_io_req_get,
       dcache_RDY_send_mem_rd_req_get,
       dcache_RDY_send_mem_wr_req,
       dcache_ma_cache_enable_c,
       dcache_ma_commit_io_currepoch,
       dcache_mv_cache_available,
       dcache_mv_storebuffer_empty,
       dcache_receive_mem_wr_resp_put;

  // ports of submodule dtlb
  wire [173 : 0] dtlb_put_response_frm_ptw_put;
  wire [104 : 0] dtlb_get_core_response_get;
  wire [77 : 0] dtlb_put_core_request_put;
  wire [67 : 0] dtlb_get_request_to_ptw_get;
  wire [63 : 0] dtlb_ma_mstatus_from_csr_m, dtlb_ma_satp_from_csr_s;
  wire [1 : 0] dtlb_ma_curr_priv_c;
  wire dtlb_EN_get_core_response_get,
       dtlb_EN_get_request_to_ptw_get,
       dtlb_EN_ma_curr_priv,
       dtlb_EN_ma_mstatus_from_csr,
       dtlb_EN_ma_satp_from_csr,
       dtlb_EN_put_core_request_put,
       dtlb_EN_put_response_frm_ptw_put,
       dtlb_RDY_get_core_response_get,
       dtlb_RDY_get_request_to_ptw_get,
       dtlb_RDY_put_core_request_put,
       dtlb_RDY_put_response_frm_ptw_put,
       dtlb_mv_perf_counters,
       dtlb_mv_tlb_available;

  // rule scheduling signals
  wire CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_deq_mem_wr_req,
       CAN_FIRE_get_hold_req_get,
       CAN_FIRE_get_ptw_resp_get,
       CAN_FIRE_get_req_to_ptw_get,
       CAN_FIRE_ma_cache_enable,
       CAN_FIRE_ma_commit_io,
       CAN_FIRE_ma_commit_store,
       CAN_FIRE_ma_curr_priv,
       CAN_FIRE_ma_mstatus_from_csr,
       CAN_FIRE_ma_satp_from_csr,
       CAN_FIRE_put_resp_from_ptw_put,
       CAN_FIRE_receive_core_req_put,
       CAN_FIRE_receive_mem_io_resp_put,
       CAN_FIRE_receive_mem_rd_resp_put,
       CAN_FIRE_receive_mem_wr_resp_put,
       CAN_FIRE_send_core_cache_resp_get,
       CAN_FIRE_send_mem_io_req_get,
       CAN_FIRE_send_mem_rd_req_get,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_deq_mem_wr_req,
       WILL_FIRE_get_hold_req_get,
       WILL_FIRE_get_ptw_resp_get,
       WILL_FIRE_get_req_to_ptw_get,
       WILL_FIRE_ma_cache_enable,
       WILL_FIRE_ma_commit_io,
       WILL_FIRE_ma_commit_store,
       WILL_FIRE_ma_curr_priv,
       WILL_FIRE_ma_mstatus_from_csr,
       WILL_FIRE_ma_satp_from_csr,
       WILL_FIRE_put_resp_from_ptw_put,
       WILL_FIRE_receive_core_req_put,
       WILL_FIRE_receive_mem_io_resp_put,
       WILL_FIRE_receive_mem_rd_resp_put,
       WILL_FIRE_receive_mem_wr_resp_put,
       WILL_FIRE_send_core_cache_resp_get,
       WILL_FIRE_send_mem_io_req_get,
       WILL_FIRE_send_mem_rd_req_get;

  // remaining internal signals
  wire [1 : 0] x__h1213;

  // action method receive_core_req_put
  assign RDY_receive_core_req_put =
	     dcache_mv_cache_available && dcache_RDY_receive_core_req_put &&
	     dtlb_RDY_put_core_request_put ;
  assign CAN_FIRE_receive_core_req_put =
	     dcache_mv_cache_available && dcache_RDY_receive_core_req_put &&
	     dtlb_RDY_put_core_request_put ;
  assign WILL_FIRE_receive_core_req_put = EN_receive_core_req_put ;

  // actionvalue method send_core_cache_resp_get
  assign send_core_cache_resp_get = dcache_send_core_cache_resp_get ;
  assign RDY_send_core_cache_resp_get = dcache_RDY_send_core_cache_resp_get ;
  assign CAN_FIRE_send_core_cache_resp_get =
	     dcache_RDY_send_core_cache_resp_get ;
  assign WILL_FIRE_send_core_cache_resp_get = EN_send_core_cache_resp_get ;

  // value method send_core_io_resp
  assign send_core_io_resp = dcache_send_core_io_resp ;
  assign RDY_send_core_io_resp = 1'd1 ;

  // actionvalue method send_mem_io_req_get
  assign send_mem_io_req_get = dcache_send_mem_io_req_get ;
  assign RDY_send_mem_io_req_get = dcache_RDY_send_mem_io_req_get ;
  assign CAN_FIRE_send_mem_io_req_get = dcache_RDY_send_mem_io_req_get ;
  assign WILL_FIRE_send_mem_io_req_get = EN_send_mem_io_req_get ;

  // action method receive_mem_io_resp_put
  assign RDY_receive_mem_io_resp_put = dcache_RDY_receive_mem_io_resp_put ;
  assign CAN_FIRE_receive_mem_io_resp_put =
	     dcache_RDY_receive_mem_io_resp_put ;
  assign WILL_FIRE_receive_mem_io_resp_put = EN_receive_mem_io_resp_put ;

  // action method ma_curr_priv
  assign CAN_FIRE_ma_curr_priv = 1'd1 ;
  assign WILL_FIRE_ma_curr_priv = 1'd1 ;

  // action method ma_commit_io
  assign RDY_ma_commit_io = dcache_RDY_ma_commit_io ;
  assign CAN_FIRE_ma_commit_io = dcache_RDY_ma_commit_io ;
  assign WILL_FIRE_ma_commit_io = EN_ma_commit_io ;

  // value method mv_dmem_available
  assign mv_dmem_available =
	     dcache_mv_cache_available && dtlb_mv_tlb_available ;

  // value method send_mem_wr_req
  assign send_mem_wr_req = dcache_send_mem_wr_req ;
  assign RDY_send_mem_wr_req = dcache_RDY_send_mem_wr_req ;

  // action method receive_mem_wr_resp_put
  assign RDY_receive_mem_wr_resp_put = dcache_RDY_receive_mem_wr_resp_put ;
  assign CAN_FIRE_receive_mem_wr_resp_put =
	     dcache_RDY_receive_mem_wr_resp_put ;
  assign WILL_FIRE_receive_mem_wr_resp_put = EN_receive_mem_wr_resp_put ;

  // action method deq_mem_wr_req
  assign RDY_deq_mem_wr_req = dcache_RDY_deq_mem_wr_req ;
  assign CAN_FIRE_deq_mem_wr_req = dcache_RDY_deq_mem_wr_req ;
  assign WILL_FIRE_deq_mem_wr_req = EN_deq_mem_wr_req ;

  // actionvalue method send_mem_rd_req_get
  assign send_mem_rd_req_get = dcache_send_mem_rd_req_get ;
  assign RDY_send_mem_rd_req_get = dcache_RDY_send_mem_rd_req_get ;
  assign CAN_FIRE_send_mem_rd_req_get = dcache_RDY_send_mem_rd_req_get ;
  assign WILL_FIRE_send_mem_rd_req_get = EN_send_mem_rd_req_get ;

  // action method receive_mem_rd_resp_put
  assign RDY_receive_mem_rd_resp_put = dcache_RDY_receive_mem_rd_resp_put ;
  assign CAN_FIRE_receive_mem_rd_resp_put =
	     dcache_RDY_receive_mem_rd_resp_put ;
  assign WILL_FIRE_receive_mem_rd_resp_put = EN_receive_mem_rd_resp_put ;

  // action method ma_commit_store
  assign RDY_ma_commit_store = 1'd1 ;
  assign CAN_FIRE_ma_commit_store = 1'd1 ;
  assign WILL_FIRE_ma_commit_store = EN_ma_commit_store ;

  // action method ma_cache_enable
  assign RDY_ma_cache_enable = 1'd1 ;
  assign CAN_FIRE_ma_cache_enable = 1'd1 ;
  assign WILL_FIRE_ma_cache_enable = EN_ma_cache_enable ;

  // value method mv_storebuffer_empty
  assign mv_storebuffer_empty = dcache_mv_storebuffer_empty ;

  // actionvalue method get_ptw_resp_get
  assign get_ptw_resp_get = dcache_get_ptw_resp_get ;
  assign RDY_get_ptw_resp_get = dcache_RDY_get_ptw_resp_get ;
  assign CAN_FIRE_get_ptw_resp_get = dcache_RDY_get_ptw_resp_get ;
  assign WILL_FIRE_get_ptw_resp_get = EN_get_ptw_resp_get ;

  // actionvalue method get_req_to_ptw_get
  assign get_req_to_ptw_get = dtlb_get_request_to_ptw_get ;
  assign RDY_get_req_to_ptw_get = dtlb_RDY_get_request_to_ptw_get ;
  assign CAN_FIRE_get_req_to_ptw_get = dtlb_RDY_get_request_to_ptw_get ;
  assign WILL_FIRE_get_req_to_ptw_get = EN_get_req_to_ptw_get ;

  // action method put_resp_from_ptw_put
  assign RDY_put_resp_from_ptw_put = dtlb_RDY_put_response_frm_ptw_put ;
  assign CAN_FIRE_put_resp_from_ptw_put = dtlb_RDY_put_response_frm_ptw_put ;
  assign WILL_FIRE_put_resp_from_ptw_put = EN_put_resp_from_ptw_put ;

  // action method ma_satp_from_csr
  assign RDY_ma_satp_from_csr = 1'd1 ;
  assign CAN_FIRE_ma_satp_from_csr = 1'd1 ;
  assign WILL_FIRE_ma_satp_from_csr = EN_ma_satp_from_csr ;

  // action method ma_mstatus_from_csr
  assign RDY_ma_mstatus_from_csr = 1'd1 ;
  assign CAN_FIRE_ma_mstatus_from_csr = 1'd1 ;
  assign WILL_FIRE_ma_mstatus_from_csr = EN_ma_mstatus_from_csr ;

  // actionvalue method get_hold_req_get
  assign get_hold_req_get = dcache_get_hold_req_get ;
  assign RDY_get_hold_req_get = dcache_RDY_get_hold_req_get ;
  assign CAN_FIRE_get_hold_req_get = dcache_RDY_get_hold_req_get ;
  assign WILL_FIRE_get_hold_req_get = EN_get_hold_req_get ;

  // value method mv_dcache_perf_counters
  assign mv_dcache_perf_counters = dcache_mv_perf_counters ;
  assign RDY_mv_dcache_perf_counters = 1'd1 ;

  // value method mv_dtlb_perf_counters
  assign mv_dtlb_perf_counters = dtlb_mv_perf_counters ;
  assign RDY_mv_dtlb_perf_counters = 1'd1 ;

  // submodule dcache
  mkdcache #(.id(id)) dcache(.pmp_cfg_0(pmp_cfg_0),
			     .pmp_cfg_1(pmp_cfg_1),
			     .pmp_cfg_2(pmp_cfg_2),
			     .pmp_cfg_3(pmp_cfg_3),
			     .pmp_addr_0(pmp_addr_0),
			     .pmp_addr_1(pmp_addr_1),
			     .pmp_addr_2(pmp_addr_2),
			     .pmp_addr_3(pmp_addr_3),
			     .CLK(CLK),
			     .RST_N(RST_N),
			     .ma_cache_enable_c(dcache_ma_cache_enable_c),
			     .ma_commit_io_currepoch(dcache_ma_commit_io_currepoch),
			     .ma_commit_store_storecommit(dcache_ma_commit_store_storecommit),
			     .ma_curr_priv_c(dcache_ma_curr_priv_c),
			     .put_pa_from_tlb_put(dcache_put_pa_from_tlb_put),
			     .receive_core_req_put(dcache_receive_core_req_put),
			     .receive_mem_io_resp_put(dcache_receive_mem_io_resp_put),
			     .receive_mem_rd_resp_put(dcache_receive_mem_rd_resp_put),
			     .receive_mem_wr_resp_put(dcache_receive_mem_wr_resp_put),
			     .EN_receive_core_req_put(dcache_EN_receive_core_req_put),
			     .EN_send_core_cache_resp_get(dcache_EN_send_core_cache_resp_get),
			     .EN_send_mem_rd_req_get(dcache_EN_send_mem_rd_req_get),
			     .EN_receive_mem_rd_resp_put(dcache_EN_receive_mem_rd_resp_put),
			     .EN_deq_mem_wr_req(dcache_EN_deq_mem_wr_req),
			     .EN_receive_mem_wr_resp_put(dcache_EN_receive_mem_wr_resp_put),
			     .EN_send_mem_io_req_get(dcache_EN_send_mem_io_req_get),
			     .EN_receive_mem_io_resp_put(dcache_EN_receive_mem_io_resp_put),
			     .EN_ma_curr_priv(dcache_EN_ma_curr_priv),
			     .EN_ma_cache_enable(dcache_EN_ma_cache_enable),
			     .EN_ma_commit_store(dcache_EN_ma_commit_store),
			     .EN_ma_commit_io(dcache_EN_ma_commit_io),
			     .EN_get_ptw_resp_get(dcache_EN_get_ptw_resp_get),
			     .EN_put_pa_from_tlb_put(dcache_EN_put_pa_from_tlb_put),
			     .EN_get_hold_req_get(dcache_EN_get_hold_req_get),
			     .RDY_receive_core_req_put(dcache_RDY_receive_core_req_put),
			     .send_core_cache_resp_get(dcache_send_core_cache_resp_get),
			     .RDY_send_core_cache_resp_get(dcache_RDY_send_core_cache_resp_get),
			     .send_core_io_resp(dcache_send_core_io_resp),
			     .RDY_send_core_io_resp(),
			     .send_mem_rd_req_get(dcache_send_mem_rd_req_get),
			     .RDY_send_mem_rd_req_get(dcache_RDY_send_mem_rd_req_get),
			     .RDY_receive_mem_rd_resp_put(dcache_RDY_receive_mem_rd_resp_put),
			     .send_mem_wr_req(dcache_send_mem_wr_req),
			     .RDY_send_mem_wr_req(dcache_RDY_send_mem_wr_req),
			     .RDY_deq_mem_wr_req(dcache_RDY_deq_mem_wr_req),
			     .RDY_receive_mem_wr_resp_put(dcache_RDY_receive_mem_wr_resp_put),
			     .send_mem_io_req_get(dcache_send_mem_io_req_get),
			     .RDY_send_mem_io_req_get(dcache_RDY_send_mem_io_req_get),
			     .RDY_receive_mem_io_resp_put(dcache_RDY_receive_mem_io_resp_put),
			     .RDY_ma_curr_priv(),
			     .RDY_ma_cache_enable(),
			     .mv_storebuffer_empty(dcache_mv_storebuffer_empty),
			     .RDY_mv_storebuffer_empty(),
			     .mv_cache_available(dcache_mv_cache_available),
			     .RDY_mv_cache_available(),
			     .RDY_ma_commit_store(),
			     .RDY_ma_commit_io(dcache_RDY_ma_commit_io),
			     .get_ptw_resp_get(dcache_get_ptw_resp_get),
			     .RDY_get_ptw_resp_get(dcache_RDY_get_ptw_resp_get),
			     .RDY_put_pa_from_tlb_put(dcache_RDY_put_pa_from_tlb_put),
			     .get_hold_req_get(dcache_get_hold_req_get),
			     .RDY_get_hold_req_get(dcache_RDY_get_hold_req_get),
			     .mv_perf_counters(dcache_mv_perf_counters),
			     .RDY_mv_perf_counters());

  // submodule dtlb
  mkfa_dtlb #(.hartid(id)) dtlb(.CLK(CLK),
				.RST_N(RST_N),
				.ma_curr_priv_c(dtlb_ma_curr_priv_c),
				.ma_mstatus_from_csr_m(dtlb_ma_mstatus_from_csr_m),
				.ma_satp_from_csr_s(dtlb_ma_satp_from_csr_s),
				.put_core_request_put(dtlb_put_core_request_put),
				.put_response_frm_ptw_put(dtlb_put_response_frm_ptw_put),
				.EN_put_core_request_put(dtlb_EN_put_core_request_put),
				.EN_get_core_response_get(dtlb_EN_get_core_response_get),
				.EN_get_request_to_ptw_get(dtlb_EN_get_request_to_ptw_get),
				.EN_put_response_frm_ptw_put(dtlb_EN_put_response_frm_ptw_put),
				.EN_ma_satp_from_csr(dtlb_EN_ma_satp_from_csr),
				.EN_ma_curr_priv(dtlb_EN_ma_curr_priv),
				.EN_ma_mstatus_from_csr(dtlb_EN_ma_mstatus_from_csr),
				.RDY_put_core_request_put(dtlb_RDY_put_core_request_put),
				.get_core_response_get(dtlb_get_core_response_get),
				.RDY_get_core_response_get(dtlb_RDY_get_core_response_get),
				.get_request_to_ptw_get(dtlb_get_request_to_ptw_get),
				.RDY_get_request_to_ptw_get(dtlb_RDY_get_request_to_ptw_get),
				.RDY_put_response_frm_ptw_put(dtlb_RDY_put_response_frm_ptw_put),
				.RDY_ma_satp_from_csr(),
				.RDY_ma_curr_priv(),
				.RDY_ma_mstatus_from_csr(),
				.mv_tlb_available(dtlb_mv_tlb_available),
				.RDY_mv_tlb_available(),
				.mv_perf_counters(dtlb_mv_perf_counters),
				.RDY_mv_perf_counters());

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     dcache_RDY_put_pa_from_tlb_put &&
	     dtlb_RDY_get_core_response_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // submodule dcache
  assign dcache_ma_cache_enable_c = ma_cache_enable_c ;
  assign dcache_ma_commit_io_currepoch = ma_commit_io_currepoch ;
  assign dcache_ma_commit_store_storecommit = ma_commit_store_storecommit ;
  assign dcache_ma_curr_priv_c = ma_curr_priv_c ;
  assign dcache_put_pa_from_tlb_put = dtlb_get_core_response_get ;
  assign dcache_receive_core_req_put =
	     { receive_core_req_put[144:81],
	       receive_core_req_put[76],
	       receive_core_req_put[80],
	       receive_core_req_put[75:74],
	       receive_core_req_put[79:77],
	       receive_core_req_put[73:10],
	       receive_core_req_put[7:3],
	       receive_core_req_put[1] } ;
  assign dcache_receive_mem_io_resp_put = receive_mem_io_resp_put ;
  assign dcache_receive_mem_rd_resp_put = receive_mem_rd_resp_put ;
  assign dcache_receive_mem_wr_resp_put = receive_mem_wr_resp_put ;
  assign dcache_EN_receive_core_req_put =
	     EN_receive_core_req_put &&
	     (receive_core_req_put[1] || !receive_core_req_put[2]) ;
  assign dcache_EN_send_core_cache_resp_get = EN_send_core_cache_resp_get ;
  assign dcache_EN_send_mem_rd_req_get = EN_send_mem_rd_req_get ;
  assign dcache_EN_receive_mem_rd_resp_put = EN_receive_mem_rd_resp_put ;
  assign dcache_EN_deq_mem_wr_req = EN_deq_mem_wr_req ;
  assign dcache_EN_receive_mem_wr_resp_put = EN_receive_mem_wr_resp_put ;
  assign dcache_EN_send_mem_io_req_get = EN_send_mem_io_req_get ;
  assign dcache_EN_receive_mem_io_resp_put = EN_receive_mem_io_resp_put ;
  assign dcache_EN_ma_curr_priv = 1'd1 ;
  assign dcache_EN_ma_cache_enable = EN_ma_cache_enable ;
  assign dcache_EN_ma_commit_store = EN_ma_commit_store ;
  assign dcache_EN_ma_commit_io = EN_ma_commit_io ;
  assign dcache_EN_get_ptw_resp_get = EN_get_ptw_resp_get ;
  assign dcache_EN_put_pa_from_tlb_put = CAN_FIRE_RL_mkConnectionGetPut ;
  assign dcache_EN_get_hold_req_get = EN_get_hold_req_get ;

  // submodule dtlb
  assign dtlb_ma_curr_priv_c = ma_curr_priv_c ;
  assign dtlb_ma_mstatus_from_csr_m = ma_mstatus_from_csr_m ;
  assign dtlb_ma_satp_from_csr_s = ma_satp_from_csr_s ;
  assign dtlb_put_core_request_put =
	     { receive_core_req_put[144:81],
	       x__h1213,
	       receive_core_req_put[16:10],
	       receive_core_req_put[0],
	       receive_core_req_put[1],
	       receive_core_req_put[2],
	       receive_core_req_put[9:8] } ;
  assign dtlb_put_response_frm_ptw_put = put_resp_from_ptw_put ;
  assign dtlb_EN_put_core_request_put =
	     EN_receive_core_req_put && !receive_core_req_put[76] ;
  assign dtlb_EN_get_core_response_get = CAN_FIRE_RL_mkConnectionGetPut ;
  assign dtlb_EN_get_request_to_ptw_get = EN_get_req_to_ptw_get ;
  assign dtlb_EN_put_response_frm_ptw_put = EN_put_resp_from_ptw_put ;
  assign dtlb_EN_ma_satp_from_csr = EN_ma_satp_from_csr ;
  assign dtlb_EN_ma_curr_priv = 1'd1 ;
  assign dtlb_EN_ma_mstatus_from_csr = EN_ma_mstatus_from_csr ;

  // remaining internal signals
  assign x__h1213 =
	     (receive_core_req_put[75:74] == 2'd2 &&
	      receive_core_req_put[6:3] == 4'b0101) ?
	       2'd0 :
	       receive_core_req_put[75:74] ;
endmodule  // mkdmem

