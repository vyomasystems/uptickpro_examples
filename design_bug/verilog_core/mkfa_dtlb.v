//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
//
// On Tue Jul 29 14:27:56 +04 2025
//
//
// Ports:
// Name                         I/O  size props
// RDY_put_core_request_put       O     1
// get_core_response_get          O   105
// RDY_get_core_response_get      O     1
// get_request_to_ptw_get         O    68 reg
// RDY_get_request_to_ptw_get     O     1 reg
// RDY_put_response_frm_ptw_put   O     1
// RDY_ma_satp_from_csr           O     1 const
// RDY_ma_curr_priv               O     1 const
// RDY_ma_mstatus_from_csr        O     1 const
// mv_tlb_available               O     1
// RDY_mv_tlb_available           O     1 const
// mv_perf_counters               O     1
// RDY_mv_perf_counters           O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_core_request_put           I    78
// put_response_frm_ptw_put       I   174
// ma_satp_from_csr_s             I    64
// ma_curr_priv_c                 I     2
// ma_mstatus_from_csr_m          I    64
// EN_put_core_request_put        I     1
// EN_put_response_frm_ptw_put    I     1
// EN_ma_satp_from_csr            I     1
// EN_ma_curr_priv                I     1
// EN_ma_mstatus_from_csr         I     1
// EN_get_core_response_get       I     1
// EN_get_request_to_ptw_get      I     1
//
// Combinational paths from inputs to outputs:
//   (put_core_request_put,
//    ma_satp_from_csr_s,
//    ma_curr_priv_c,
//    ma_mstatus_from_csr_m,
//    EN_put_core_request_put,
//    EN_ma_satp_from_csr,
//    EN_ma_curr_priv,
//    EN_ma_mstatus_from_csr) -> mv_perf_counters
//   (ma_curr_priv_c,
//    ma_mstatus_from_csr_m,
//    EN_ma_curr_priv,
//    EN_ma_mstatus_from_csr) -> RDY_get_core_response_get
//   (ma_curr_priv_c,
//    ma_mstatus_from_csr_m,
//    EN_ma_curr_priv,
//    EN_ma_mstatus_from_csr) -> get_core_response_get
//   (EN_ma_satp_from_csr,
//    EN_ma_curr_priv,
//    EN_ma_mstatus_from_csr) -> RDY_put_core_request_put
//   EN_ma_satp_from_csr -> RDY_put_response_frm_ptw_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfa_dtlb(CLK,
		 RST_N,

		 put_core_request_put,
		 EN_put_core_request_put,
		 RDY_put_core_request_put,

		 EN_get_core_response_get,
		 get_core_response_get,
		 RDY_get_core_response_get,

		 EN_get_request_to_ptw_get,
		 get_request_to_ptw_get,
		 RDY_get_request_to_ptw_get,

		 put_response_frm_ptw_put,
		 EN_put_response_frm_ptw_put,
		 RDY_put_response_frm_ptw_put,

		 ma_satp_from_csr_s,
		 EN_ma_satp_from_csr,
		 RDY_ma_satp_from_csr,

		 ma_curr_priv_c,
		 EN_ma_curr_priv,
		 RDY_ma_curr_priv,

		 ma_mstatus_from_csr_m,
		 EN_ma_mstatus_from_csr,
		 RDY_ma_mstatus_from_csr,

		 mv_tlb_available,
		 RDY_mv_tlb_available,

		 mv_perf_counters,
		 RDY_mv_perf_counters);
  parameter [31 : 0] hartid = 32'b0;
  input  CLK;
  input  RST_N;

  // action method put_core_request_put
  input  [77 : 0] put_core_request_put;
  input  EN_put_core_request_put;
  output RDY_put_core_request_put;

  // actionvalue method get_core_response_get
  input  EN_get_core_response_get;
  output [104 : 0] get_core_response_get;
  output RDY_get_core_response_get;

  // actionvalue method get_request_to_ptw_get
  input  EN_get_request_to_ptw_get;
  output [67 : 0] get_request_to_ptw_get;
  output RDY_get_request_to_ptw_get;

  // action method put_response_frm_ptw_put
  input  [173 : 0] put_response_frm_ptw_put;
  input  EN_put_response_frm_ptw_put;
  output RDY_put_response_frm_ptw_put;

  // action method ma_satp_from_csr
  input  [63 : 0] ma_satp_from_csr_s;
  input  EN_ma_satp_from_csr;
  output RDY_ma_satp_from_csr;

  // action method ma_curr_priv
  input  [1 : 0] ma_curr_priv_c;
  input  EN_ma_curr_priv;
  output RDY_ma_curr_priv;

  // action method ma_mstatus_from_csr
  input  [63 : 0] ma_mstatus_from_csr_m;
  input  EN_ma_mstatus_from_csr;
  output RDY_ma_mstatus_from_csr;

  // value method mv_tlb_available
  output mv_tlb_available;
  output RDY_mv_tlb_available;

  // value method mv_perf_counters
  output mv_perf_counters;
  output RDY_mv_perf_counters;

  // signals for module outputs
  wire [104 : 0] get_core_response_get;
  wire [67 : 0] get_request_to_ptw_get;
  wire RDY_get_core_response_get,
       RDY_get_request_to_ptw_get,
       RDY_ma_curr_priv,
       RDY_ma_mstatus_from_csr,
       RDY_ma_satp_from_csr,
       RDY_mv_perf_counters,
       RDY_mv_tlb_available,
       RDY_put_core_request_put,
       RDY_put_response_frm_ptw_put,
       mv_perf_counters,
       mv_tlb_available;

  // inlined wires
  wire [105 : 0] ff_core_response_rv_port0__write_1,
		 ff_core_response_rv_port1__read,
		 ff_core_response_rv_port1__write_1,
		 ff_core_response_rv_port2__read;
  wire wr_count_misses_whas;

  // register ff_core_response_rv
  reg [105 : 0] ff_core_response_rv;
  wire [105 : 0] ff_core_response_rv_D_IN;
  wire ff_core_response_rv_EN;

  // register rg_miss_queue
  reg [63 : 0] rg_miss_queue;
  wire [63 : 0] rg_miss_queue_D_IN;
  wire rg_miss_queue_EN;

  // register rg_replace
  reg [1 : 0] rg_replace;
  wire [1 : 0] rg_replace_D_IN;
  wire rg_replace_EN;

  // register rg_sfence
  reg rg_sfence;
  wire rg_sfence_D_IN, rg_sfence_EN;

  // register rg_tlb_miss
  reg rg_tlb_miss;
  wire rg_tlb_miss_D_IN, rg_tlb_miss_EN;

  // register v_vpn_tag_0
  reg [112 : 0] v_vpn_tag_0;
  wire [112 : 0] v_vpn_tag_0_D_IN;
  wire v_vpn_tag_0_EN;

  // register v_vpn_tag_1
  reg [112 : 0] v_vpn_tag_1;
  wire [112 : 0] v_vpn_tag_1_D_IN;
  wire v_vpn_tag_1_EN;

  // register v_vpn_tag_2
  reg [112 : 0] v_vpn_tag_2;
  wire [112 : 0] v_vpn_tag_2_D_IN;
  wire v_vpn_tag_2_EN;

  // register v_vpn_tag_3
  reg [112 : 0] v_vpn_tag_3;
  wire [112 : 0] v_vpn_tag_3_D_IN;
  wire v_vpn_tag_3_EN;

  // ports of submodule ff_lookup_result
  wire [188 : 0] ff_lookup_result_D_IN, ff_lookup_result_D_OUT;
  wire ff_lookup_result_CLR,
       ff_lookup_result_DEQ,
       ff_lookup_result_EMPTY_N,
       ff_lookup_result_ENQ,
       ff_lookup_result_FULL_N;

  // ports of submodule ff_request_to_ptw
  wire [67 : 0] ff_request_to_ptw_D_IN, ff_request_to_ptw_D_OUT;
  wire ff_request_to_ptw_CLR,
       ff_request_to_ptw_DEQ,
       ff_request_to_ptw_EMPTY_N,
       ff_request_to_ptw_ENQ,
       ff_request_to_ptw_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_fence,
       CAN_FIRE_RL_rl_send_response,
       CAN_FIRE_get_core_response_get,
       CAN_FIRE_get_request_to_ptw_get,
       CAN_FIRE_ma_curr_priv,
       CAN_FIRE_ma_mstatus_from_csr,
       CAN_FIRE_ma_satp_from_csr,
       CAN_FIRE_put_core_request_put,
       CAN_FIRE_put_response_frm_ptw_put,
       WILL_FIRE_RL_rl_fence,
       WILL_FIRE_RL_rl_send_response,
       WILL_FIRE_get_core_response_get,
       WILL_FIRE_get_request_to_ptw_get,
       WILL_FIRE_ma_curr_priv,
       WILL_FIRE_ma_mstatus_from_csr,
       WILL_FIRE_ma_satp_from_csr,
       WILL_FIRE_put_core_request_put,
       WILL_FIRE_put_response_frm_ptw_put;

  // inputs to muxes for submodule ports
  wire [112 : 0] MUX_v_vpn_tag_0_write_1__VAL_1;
  wire [1 : 0] MUX_rg_replace_write_1__VAL_1;
  wire MUX_rg_replace_write_1__SEL_1,
       MUX_rg_sfence_write_1__SEL_1,
       MUX_v_vpn_tag_0_write_1__SEL_1,
       MUX_v_vpn_tag_1_write_1__SEL_1,
       MUX_v_vpn_tag_2_write_1__SEL_1,
       MUX_v_vpn_tag_3_write_1__SEL_1;

  // remaining internal signals
  wire [112 : 0] IF_NOT_v_vpn_tag_0_23_BIT_105_24_25_OR_NOT_511_ETC___d198,
		 IF_NOT_v_vpn_tag_0_23_BIT_105_24_25_OR_NOT_511_ETC___d199;
  wire [104 : 0] IF_ff_lookup_result_first__1_BIT_179_2_THEN_ff_ETC___d90;
  wire [31 : 0] v_address__h3064;
  wire [26 : 0] tag_vpn__h6037;
  wire [17 : 0] lower_pa__h2673, mask__h5868, x__h3104, x__h3112, y__h3105;
  wire [9 : 0] _9_MUL_0_CONCAT_put_response_frm_ptw_put_BITS_9_ETC___d229;
  wire [6 : 0] cause___1__h3728, cause__h2666, x_cause__h3702;
  wire [1 : 0] priv__h2537;
  wire IF_IF_wr_mstatus_whas__4_THEN_wr_mstatus_wget__ETC___d82,
       NOT_put_core_request_put_BIT_4_02_03_AND_IF_wr_ETC___d113,
       NOT_v_vpn_tag_0_23_BIT_105_24_25_OR_NOT_511_CO_ETC___d141,
       NOT_v_vpn_tag_1_42_BIT_105_43_44_OR_NOT_511_CO_ETC___d158,
       NOT_v_vpn_tag_2_60_BIT_105_61_62_OR_NOT_511_CO_ETC___d176,
       NOT_v_vpn_tag_3_78_BIT_105_79_80_OR_NOT_511_CO_ETC___d194,
       new_value__h5620,
       put_core_request_put_BIT_2_6_OR_rg_tlb_miss_AN_ETC___d210,
       x_wget__h1294;

  // action method put_core_request_put
  assign RDY_put_core_request_put =
	     !rg_sfence && EN_ma_satp_from_csr && EN_ma_mstatus_from_csr &&
	     EN_ma_curr_priv &&
	     ff_lookup_result_FULL_N ;
  assign CAN_FIRE_put_core_request_put = RDY_put_core_request_put ;
  assign WILL_FIRE_put_core_request_put = EN_put_core_request_put ;

  // actionvalue method get_core_response_get
  assign get_core_response_get = ff_core_response_rv_port1__read[104:0] ;
  assign RDY_get_core_response_get = ff_core_response_rv_port1__read[105] ;
  assign CAN_FIRE_get_core_response_get =
	     ff_core_response_rv_port1__read[105] ;
  assign WILL_FIRE_get_core_response_get = EN_get_core_response_get ;

  // actionvalue method get_request_to_ptw_get
  assign get_request_to_ptw_get = ff_request_to_ptw_D_OUT ;
  assign RDY_get_request_to_ptw_get = ff_request_to_ptw_EMPTY_N ;
  assign CAN_FIRE_get_request_to_ptw_get = ff_request_to_ptw_EMPTY_N ;
  assign WILL_FIRE_get_request_to_ptw_get = EN_get_request_to_ptw_get ;

  // action method put_response_frm_ptw_put
  assign RDY_put_response_frm_ptw_put =
	     rg_tlb_miss && !rg_sfence && EN_ma_satp_from_csr ;
  assign CAN_FIRE_put_response_frm_ptw_put =
	     rg_tlb_miss && !rg_sfence && EN_ma_satp_from_csr ;
  assign WILL_FIRE_put_response_frm_ptw_put = EN_put_response_frm_ptw_put ;

  // action method ma_satp_from_csr
  assign RDY_ma_satp_from_csr = 1'd1 ;
  assign CAN_FIRE_ma_satp_from_csr = 1'd1 ;
  assign WILL_FIRE_ma_satp_from_csr = EN_ma_satp_from_csr ;

  // action method ma_curr_priv
  assign RDY_ma_curr_priv = 1'd1 ;
  assign CAN_FIRE_ma_curr_priv = 1'd1 ;
  assign WILL_FIRE_ma_curr_priv = EN_ma_curr_priv ;

  // action method ma_mstatus_from_csr
  assign RDY_ma_mstatus_from_csr = 1'd1 ;
  assign CAN_FIRE_ma_mstatus_from_csr = 1'd1 ;
  assign WILL_FIRE_ma_mstatus_from_csr = EN_ma_mstatus_from_csr ;

  // value method mv_tlb_available
  assign mv_tlb_available = !rg_tlb_miss && ff_lookup_result_FULL_N ;
  assign RDY_mv_tlb_available = 1'd1 ;

  // value method mv_perf_counters
  assign mv_perf_counters = wr_count_misses_whas && x_wget__h1294 ;
  assign RDY_mv_perf_counters = 1'd1 ;

  // submodule ff_lookup_result
  FIFO2 #(.width(32'd189), .guarded(1'd1)) ff_lookup_result(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ff_lookup_result_D_IN),
							    .ENQ(ff_lookup_result_ENQ),
							    .DEQ(ff_lookup_result_DEQ),
							    .CLR(ff_lookup_result_CLR),
							    .D_OUT(ff_lookup_result_D_OUT),
							    .FULL_N(ff_lookup_result_FULL_N),
							    .EMPTY_N(ff_lookup_result_EMPTY_N));

  // submodule ff_request_to_ptw
  FIFO2 #(.width(32'd68), .guarded(1'd1)) ff_request_to_ptw(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ff_request_to_ptw_D_IN),
							    .ENQ(ff_request_to_ptw_ENQ),
							    .DEQ(ff_request_to_ptw_DEQ),
							    .CLR(ff_request_to_ptw_CLR),
							    .D_OUT(ff_request_to_ptw_D_OUT),
							    .FULL_N(ff_request_to_ptw_FULL_N),
							    .EMPTY_N(ff_request_to_ptw_EMPTY_N));

  // rule RL_rl_fence
  assign CAN_FIRE_RL_rl_fence =
	     rg_sfence && !rg_tlb_miss && !ff_lookup_result_EMPTY_N ;
  assign WILL_FIRE_RL_rl_fence = CAN_FIRE_RL_rl_fence ;

  // rule RL_rl_send_response
  assign CAN_FIRE_RL_rl_send_response =
	     ff_lookup_result_EMPTY_N && !ff_core_response_rv[105] &&
	     ff_request_to_ptw_FULL_N &&
	     EN_ma_curr_priv &&
	     EN_ma_mstatus_from_csr &&
	     !rg_sfence ;
  assign WILL_FIRE_RL_rl_send_response = CAN_FIRE_RL_rl_send_response ;

  // inputs to muxes for submodule ports
  assign MUX_rg_replace_write_1__SEL_1 =
	     EN_put_response_frm_ptw_put && !put_response_frm_ptw_put[7] ;
  assign MUX_rg_sfence_write_1__SEL_1 =
	     EN_put_core_request_put && put_core_request_put[2] &&
	     !put_core_request_put[3] ;
  assign MUX_v_vpn_tag_0_write_1__SEL_1 =
	     EN_put_response_frm_ptw_put && rg_replace == 2'd0 &&
	     !put_response_frm_ptw_put[7] ;
  assign MUX_v_vpn_tag_1_write_1__SEL_1 =
	     EN_put_response_frm_ptw_put && rg_replace == 2'd1 &&
	     !put_response_frm_ptw_put[7] ;
  assign MUX_v_vpn_tag_2_write_1__SEL_1 =
	     EN_put_response_frm_ptw_put && rg_replace == 2'd2 &&
	     !put_response_frm_ptw_put[7] ;
  assign MUX_v_vpn_tag_3_write_1__SEL_1 =
	     EN_put_response_frm_ptw_put && rg_replace == 2'd3 &&
	     !put_response_frm_ptw_put[7] ;
  assign MUX_rg_replace_write_1__VAL_1 = rg_replace + 2'd1 ;
  assign MUX_v_vpn_tag_0_write_1__VAL_1 =
	     { put_response_frm_ptw_put[127:120],
	       tag_vpn__h6037,
	       ma_satp_from_csr_s[59:44],
	       mask__h5868,
	       put_response_frm_ptw_put[173:130] } ;

  // inlined wires
  assign wr_count_misses_whas =
	     EN_put_core_request_put && !put_core_request_put[2] &&
	     ma_satp_from_csr_s[63:60] != 4'd0 &&
	     priv__h2537 != 2'd3 &&
	     !put_core_request_put[3] &&
	     !put_core_request_put[4] ;
  assign ff_core_response_rv_port0__write_1 =
	     { 1'd1,
	       IF_ff_lookup_result_first__1_BIT_179_2_THEN_ff_ETC___d90 } ;
  assign ff_core_response_rv_port1__read =
	     CAN_FIRE_RL_rl_send_response ?
	       ff_core_response_rv_port0__write_1 :
	       ff_core_response_rv ;
  assign ff_core_response_rv_port1__write_1 =
	     { 1'd0,
	       105'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_core_response_rv_port2__read =
	     EN_get_core_response_get ?
	       ff_core_response_rv_port1__write_1 :
	       ff_core_response_rv_port1__read ;

  // register ff_core_response_rv
  assign ff_core_response_rv_D_IN = ff_core_response_rv_port2__read ;
  assign ff_core_response_rv_EN = 1'b1 ;

  // register rg_miss_queue
  assign rg_miss_queue_D_IN = ff_lookup_result_D_OUT[178:115] ;
  assign rg_miss_queue_EN =
	     WILL_FIRE_RL_rl_send_response && !ff_lookup_result_D_OUT[179] &&
	     ff_lookup_result_D_OUT[180] ;

  // register rg_replace
  assign rg_replace_D_IN =
	     MUX_rg_replace_write_1__SEL_1 ?
	       MUX_rg_replace_write_1__VAL_1 :
	       2'd0 ;
  assign rg_replace_EN =
	     EN_put_response_frm_ptw_put && !put_response_frm_ptw_put[7] ||
	     WILL_FIRE_RL_rl_fence ;

  // register rg_sfence
  assign rg_sfence_D_IN = MUX_rg_sfence_write_1__SEL_1 ;
  assign rg_sfence_EN =
	     EN_put_core_request_put && put_core_request_put[2] &&
	     !put_core_request_put[3] ||
	     WILL_FIRE_RL_rl_fence ;

  // register rg_tlb_miss
  assign rg_tlb_miss_D_IN =
	     !put_core_request_put[2] &&
	     (!rg_tlb_miss || !put_core_request_put[4]) &&
	     new_value__h5620 ;
  assign rg_tlb_miss_EN =
	     EN_put_core_request_put &&
	     put_core_request_put_BIT_2_6_OR_rg_tlb_miss_AN_ETC___d210 ;

  // register v_vpn_tag_0
  assign v_vpn_tag_0_D_IN =
	     MUX_v_vpn_tag_0_write_1__SEL_1 ?
	       MUX_v_vpn_tag_0_write_1__VAL_1 :
	       113'd0 ;
  assign v_vpn_tag_0_EN =
	     EN_put_response_frm_ptw_put && rg_replace == 2'd0 &&
	     !put_response_frm_ptw_put[7] ||
	     WILL_FIRE_RL_rl_fence ;

  // register v_vpn_tag_1
  assign v_vpn_tag_1_D_IN =
	     MUX_v_vpn_tag_1_write_1__SEL_1 ?
	       MUX_v_vpn_tag_0_write_1__VAL_1 :
	       113'd0 ;
  assign v_vpn_tag_1_EN =
	     EN_put_response_frm_ptw_put && rg_replace == 2'd1 &&
	     !put_response_frm_ptw_put[7] ||
	     WILL_FIRE_RL_rl_fence ;

  // register v_vpn_tag_2
  assign v_vpn_tag_2_D_IN =
	     MUX_v_vpn_tag_2_write_1__SEL_1 ?
	       MUX_v_vpn_tag_0_write_1__VAL_1 :
	       113'd0 ;
  assign v_vpn_tag_2_EN =
	     EN_put_response_frm_ptw_put && rg_replace == 2'd2 &&
	     !put_response_frm_ptw_put[7] ||
	     WILL_FIRE_RL_rl_fence ;

  // register v_vpn_tag_3
  assign v_vpn_tag_3_D_IN =
	     MUX_v_vpn_tag_3_write_1__SEL_1 ?
	       MUX_v_vpn_tag_0_write_1__VAL_1 :
	       113'd0 ;
  assign v_vpn_tag_3_EN =
	     EN_put_response_frm_ptw_put && rg_replace == 2'd3 &&
	     !put_response_frm_ptw_put[7] ||
	     WILL_FIRE_RL_rl_fence ;

  // submodule ff_lookup_result
  assign ff_lookup_result_D_IN =
	     { NOT_put_core_request_put_BIT_4_02_03_AND_IF_wr_ETC___d113 ?
		 put_core_request_put[77:46] != 32'd0 :
		 put_core_request_put[4],
	       x_cause__h3702,
	       new_value__h5620,
	       ma_satp_from_csr_s[63:60] == 4'd0 || priv__h2537 == 2'd3 ||
	       put_core_request_put[3] ||
	       put_core_request_put[4],
	       put_core_request_put[77:14],
	       IF_NOT_v_vpn_tag_0_23_BIT_105_24_25_OR_NOT_511_ETC___d199,
	       put_core_request_put[13:12] } ;
  assign ff_lookup_result_ENQ =
	     EN_put_core_request_put &&
	     (!put_core_request_put[2] || put_core_request_put[3]) ;
  assign ff_lookup_result_DEQ = CAN_FIRE_RL_rl_send_response ;
  assign ff_lookup_result_CLR = 1'b0 ;

  // submodule ff_request_to_ptw
  assign ff_request_to_ptw_D_IN =
	     { ff_lookup_result_D_OUT[178:115],
	       ff_lookup_result_D_OUT[1:0],
	       2'bxx /* unspecified value */  } ;
  assign ff_request_to_ptw_ENQ =
	     WILL_FIRE_RL_rl_send_response && !ff_lookup_result_D_OUT[179] &&
	     ff_lookup_result_D_OUT[180] ;
  assign ff_request_to_ptw_DEQ = EN_get_request_to_ptw_get ;
  assign ff_request_to_ptw_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_wr_mstatus_whas__4_THEN_wr_mstatus_wget__ETC___d82 =
	     priv__h2537 == 2'd1 && ff_lookup_result_D_OUT[111] &&
	     !ma_mstatus_from_csr_m[18] ||
	     ff_lookup_result_D_OUT[1:0] == 2'd0 &&
	     !ff_lookup_result_D_OUT[108] &&
	     (!ff_lookup_result_D_OUT[110] || !ma_mstatus_from_csr_m[19]) ||
	     !ff_lookup_result_D_OUT[113] ||
	     !ff_lookup_result_D_OUT[114] &&
	     ff_lookup_result_D_OUT[1:0] != 2'd0 ||
	     ff_lookup_result_D_OUT[178:154] !=
	     {25{ff_lookup_result_D_OUT[153]}} ;
  assign IF_NOT_v_vpn_tag_0_23_BIT_105_24_25_OR_NOT_511_ETC___d198 =
	     (NOT_v_vpn_tag_0_23_BIT_105_24_25_OR_NOT_511_CO_ETC___d141 &&
	      NOT_v_vpn_tag_1_42_BIT_105_43_44_OR_NOT_511_CO_ETC___d158) ?
	       v_vpn_tag_2 :
	       (NOT_v_vpn_tag_0_23_BIT_105_24_25_OR_NOT_511_CO_ETC___d141 ?
		  v_vpn_tag_1 :
		  v_vpn_tag_0) ;
  assign IF_NOT_v_vpn_tag_0_23_BIT_105_24_25_OR_NOT_511_ETC___d199 =
	     (NOT_v_vpn_tag_0_23_BIT_105_24_25_OR_NOT_511_CO_ETC___d141 &&
	      NOT_v_vpn_tag_1_42_BIT_105_43_44_OR_NOT_511_CO_ETC___d158 &&
	      NOT_v_vpn_tag_2_60_BIT_105_61_62_OR_NOT_511_CO_ETC___d176) ?
	       v_vpn_tag_3 :
	       IF_NOT_v_vpn_tag_0_23_BIT_105_24_25_OR_NOT_511_ETC___d198 ;
  assign IF_ff_lookup_result_first__1_BIT_179_2_THEN_ff_ETC___d90 =
	     ff_lookup_result_D_OUT[179] ?
	       { ff_lookup_result_D_OUT[146:115],
		 ff_lookup_result_D_OUT[188:181],
		 1'd0,
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } :
	       { v_address__h3064,
		 !ff_lookup_result_D_OUT[180] &&
		 (ff_lookup_result_D_OUT[1:0] != 2'd0 &&
		  !ff_lookup_result_D_OUT[109] ||
		  !ff_lookup_result_D_OUT[111] && priv__h2537 == 2'd0 ||
		  IF_IF_wr_mstatus_whas__4_THEN_wr_mstatus_wget__ETC___d82),
		 cause__h2666,
		 ff_lookup_result_D_OUT[180:116] } ;
  assign NOT_put_core_request_put_BIT_4_02_03_AND_IF_wr_ETC___d113 =
	     !put_core_request_put[4] &&
	     (ma_satp_from_csr_s[63:60] == 4'd0 || priv__h2537 == 2'd3 ||
	      put_core_request_put[3]) ;
  assign NOT_v_vpn_tag_0_23_BIT_105_24_25_OR_NOT_511_CO_ETC___d141 =
	     !v_vpn_tag_0[105] ||
	     ({ 9'd511, v_vpn_tag_0[61:44] } & put_core_request_put[52:26]) !=
	     v_vpn_tag_0[104:78] ||
	     v_vpn_tag_0[77:62] != ma_satp_from_csr_s[59:44] &&
	     !v_vpn_tag_0[110] ;
  assign NOT_v_vpn_tag_1_42_BIT_105_43_44_OR_NOT_511_CO_ETC___d158 =
	     !v_vpn_tag_1[105] ||
	     ({ 9'd511, v_vpn_tag_1[61:44] } & put_core_request_put[52:26]) !=
	     v_vpn_tag_1[104:78] ||
	     v_vpn_tag_1[77:62] != ma_satp_from_csr_s[59:44] &&
	     !v_vpn_tag_1[110] ;
  assign NOT_v_vpn_tag_2_60_BIT_105_61_62_OR_NOT_511_CO_ETC___d176 =
	     !v_vpn_tag_2[105] ||
	     ({ 9'd511, v_vpn_tag_2[61:44] } & put_core_request_put[52:26]) !=
	     v_vpn_tag_2[104:78] ||
	     v_vpn_tag_2[77:62] != ma_satp_from_csr_s[59:44] &&
	     !v_vpn_tag_2[110] ;
  assign NOT_v_vpn_tag_3_78_BIT_105_79_80_OR_NOT_511_CO_ETC___d194 =
	     !v_vpn_tag_3[105] ||
	     ({ 9'd511, v_vpn_tag_3[61:44] } & put_core_request_put[52:26]) !=
	     v_vpn_tag_3[104:78] ||
	     v_vpn_tag_3[77:62] != ma_satp_from_csr_s[59:44] &&
	     !v_vpn_tag_3[110] ;
  assign _9_MUL_0_CONCAT_put_response_frm_ptw_put_BITS_9_ETC___d229 =
	     5'd9 * { 3'd0, put_response_frm_ptw_put[9:8] } ;
  assign cause___1__h3728 =
	     (put_core_request_put[13:12] == 2'd0) ? 7'd5 : 7'd7 ;
  assign cause__h2666 =
	     (ff_lookup_result_D_OUT[1:0] == 2'd0) ? 7'd13 : 7'd15 ;
  assign lower_pa__h2673 = x__h3104 | y__h3105 ;
  assign mask__h5868 =
	     18'd262143 <<
	     _9_MUL_0_CONCAT_put_response_frm_ptw_put_BITS_9_ETC___d229[4:0] ;
  assign new_value__h5620 = x_wget__h1294 ;
  assign priv__h2537 =
	     ma_mstatus_from_csr_m[17] ?
	       ma_mstatus_from_csr_m[12:11] :
	       ma_curr_priv_c ;
  assign put_core_request_put_BIT_2_6_OR_rg_tlb_miss_AN_ETC___d210 =
	     put_core_request_put[2] ||
	     rg_tlb_miss && put_core_request_put[4] ||
	     ma_satp_from_csr_s[63:60] != 4'd0 && priv__h2537 != 2'd3 &&
	     !put_core_request_put[3] &&
	     !put_core_request_put[4] ;
  assign tag_vpn__h6037 = { 9'd511, mask__h5868 } & rg_miss_queue[38:12] ;
  assign v_address__h3064 =
	     { ff_lookup_result_D_OUT[21:20],
	       lower_pa__h2673,
	       ff_lookup_result_D_OUT[126:115] } ;
  assign x__h3104 =
	     ff_lookup_result_D_OUT[63:46] & ff_lookup_result_D_OUT[19:2] ;
  assign x__h3112 = ~ff_lookup_result_D_OUT[63:46] ;
  assign x_cause__h3702 =
	     NOT_put_core_request_put_BIT_4_02_03_AND_IF_wr_ETC___d113 ?
	       cause___1__h3728 :
	       put_core_request_put[11:5] ;
  assign x_wget__h1294 =
	     NOT_v_vpn_tag_0_23_BIT_105_24_25_OR_NOT_511_CO_ETC___d141 &&
	     NOT_v_vpn_tag_1_42_BIT_105_43_44_OR_NOT_511_CO_ETC___d158 &&
	     NOT_v_vpn_tag_2_60_BIT_105_61_62_OR_NOT_511_CO_ETC___d176 &&
	     NOT_v_vpn_tag_3_78_BIT_105_79_80_OR_NOT_511_CO_ETC___d194 ;
  assign y__h3105 = x__h3112 & ff_lookup_result_D_OUT[144:127] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ff_core_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      105'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	rg_miss_queue <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_replace <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_sfence <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_tlb_miss <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_vpn_tag_0 <= `BSV_ASSIGNMENT_DELAY 113'd0;
	v_vpn_tag_1 <= `BSV_ASSIGNMENT_DELAY 113'd0;
	v_vpn_tag_2 <= `BSV_ASSIGNMENT_DELAY 113'd0;
	v_vpn_tag_3 <= `BSV_ASSIGNMENT_DELAY 113'd0;
      end
    else
      begin
        if (ff_core_response_rv_EN)
	  ff_core_response_rv <= `BSV_ASSIGNMENT_DELAY
	      ff_core_response_rv_D_IN;
	if (rg_miss_queue_EN)
	  rg_miss_queue <= `BSV_ASSIGNMENT_DELAY rg_miss_queue_D_IN;
	if (rg_replace_EN)
	  rg_replace <= `BSV_ASSIGNMENT_DELAY rg_replace_D_IN;
	if (rg_sfence_EN) rg_sfence <= `BSV_ASSIGNMENT_DELAY rg_sfence_D_IN;
	if (rg_tlb_miss_EN)
	  rg_tlb_miss <= `BSV_ASSIGNMENT_DELAY rg_tlb_miss_D_IN;
	if (v_vpn_tag_0_EN)
	  v_vpn_tag_0 <= `BSV_ASSIGNMENT_DELAY v_vpn_tag_0_D_IN;
	if (v_vpn_tag_1_EN)
	  v_vpn_tag_1 <= `BSV_ASSIGNMENT_DELAY v_vpn_tag_1_D_IN;
	if (v_vpn_tag_2_EN)
	  v_vpn_tag_2 <= `BSV_ASSIGNMENT_DELAY v_vpn_tag_2_D_IN;
	if (v_vpn_tag_3_EN)
	  v_vpn_tag_3 <= `BSV_ASSIGNMENT_DELAY v_vpn_tag_3_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ff_core_response_rv = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_miss_queue = 64'hAAAAAAAAAAAAAAAA;
    rg_replace = 2'h2;
    rg_sfence = 1'h0;
    rg_tlb_miss = 1'h0;
    v_vpn_tag_0 = 113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    v_vpn_tag_1 = 113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    v_vpn_tag_2 = 113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    v_vpn_tag_3 = 113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkfa_dtlb

