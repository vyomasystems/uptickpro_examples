//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
//
// On Tue Jul 29 14:28:13 +04 2025
//
//
// Ports:
// Name                         I/O  size props
// rx_rx_from_stage1_deq_ena      O     1
// rx_rx_commitlog_deq_ena        O     1
// tx_tx_meta_to_stage3_enq_ena   O     1
// tx_tx_meta_to_stage3_enq_data  O    97
// tx_tx_mtval_to_stage3_enq_ena  O     1
// tx_tx_mtval_to_stage3_enq_data  O    64
// tx_tx_instrtype_to_stage3_enq_ena  O     1
// tx_tx_instrtype_to_stage3_enq_data  O     4
// tx_tx_opmeta_to_stage3_enq_ena  O     1
// tx_tx_opmeta_to_stage3_enq_data  O    21
// tx_tx_commitlog_enq_ena        O     1
// tx_tx_commitlog_enq_data       O   309
// rf_mv_op1                      O    76
// rf_mv_op2                      O    76
// rf_mv_op3                      O    76
// RDY_common_ma_commit_rd        O     1
// RDY_common_ma_clear_stall      O     1 reg
// mv_wfi_detected                O     1 reg
// RDY_mv_wfi_detected            O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// rx_rx_from_stage1_notEmpty_b   I     1
// rx_rx_from_stage1_first_deq_rdy_b  I     1
// rx_rx_from_stage1_first_x      I   120
// rx_rx_commitlog_notEmpty_b     I     1 unused
// rx_rx_commitlog_first_deq_rdy_b  I     1
// rx_rx_commitlog_first_x        I   309
// tx_tx_meta_to_stage3_notFull_b  I     1 unused
// tx_tx_meta_to_stage3_enq_rdy_b  I     1
// tx_tx_mtval_to_stage3_notFull_b  I     1 unused
// tx_tx_mtval_to_stage3_enq_rdy_b  I     1
// tx_tx_instrtype_to_stage3_notFull_b  I     1
// tx_tx_instrtype_to_stage3_enq_rdy_b  I     1
// tx_tx_opmeta_to_stage3_notFull_b  I     1 unused
// tx_tx_opmeta_to_stage3_enq_rdy_b  I     1
// tx_tx_commitlog_notFull_b      I     1 unused
// tx_tx_commitlog_enq_rdy_b      I     1
// common_ma_commit_rd_commit     I    75
// common_ma_csrs_csr             I   242
// common_ma_clear_stall_upd      I     1
// common_ma_resume_wfi_w         I     1
// debug_debug_status_status      I     5
// EN_common_ma_commit_rd         I     1
// EN_common_ma_update_eEpoch     I     1
// EN_common_ma_update_wEpoch     I     1
// EN_common_ma_csrs              I     1
// EN_common_ma_clear_stall       I     1
// EN_common_ma_resume_wfi        I     1
//
// Combinational paths from inputs to outputs:
//   (rx_rx_from_stage1_notEmpty_b,
//    rx_rx_from_stage1_first_deq_rdy_b,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_meta_to_stage3_enq_rdy_b,
//    tx_tx_mtval_to_stage3_enq_rdy_b,
//    tx_tx_instrtype_to_stage3_notFull_b,
//    tx_tx_instrtype_to_stage3_enq_rdy_b,
//    tx_tx_opmeta_to_stage3_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    EN_common_ma_csrs) -> rx_rx_from_stage1_deq_ena
//   (rx_rx_from_stage1_notEmpty_b,
//    rx_rx_from_stage1_first_deq_rdy_b,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_meta_to_stage3_enq_rdy_b,
//    tx_tx_mtval_to_stage3_enq_rdy_b,
//    tx_tx_instrtype_to_stage3_notFull_b,
//    tx_tx_instrtype_to_stage3_enq_rdy_b,
//    tx_tx_opmeta_to_stage3_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    EN_common_ma_csrs) -> rx_rx_commitlog_deq_ena
//   (rx_rx_from_stage1_notEmpty_b,
//    rx_rx_from_stage1_first_deq_rdy_b,
//    rx_rx_from_stage1_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_meta_to_stage3_enq_rdy_b,
//    tx_tx_mtval_to_stage3_enq_rdy_b,
//    tx_tx_instrtype_to_stage3_notFull_b,
//    tx_tx_instrtype_to_stage3_enq_rdy_b,
//    tx_tx_opmeta_to_stage3_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    EN_common_ma_csrs) -> tx_tx_meta_to_stage3_enq_ena
//   (rx_rx_from_stage1_notEmpty_b,
//    rx_rx_from_stage1_first_deq_rdy_b,
//    rx_rx_from_stage1_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_meta_to_stage3_enq_rdy_b,
//    tx_tx_mtval_to_stage3_enq_rdy_b,
//    tx_tx_instrtype_to_stage3_notFull_b,
//    tx_tx_instrtype_to_stage3_enq_rdy_b,
//    tx_tx_opmeta_to_stage3_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    common_ma_csrs_csr,
//    debug_debug_status_status,
//    EN_common_ma_csrs) -> tx_tx_meta_to_stage3_enq_data
//   (rx_rx_from_stage1_notEmpty_b,
//    rx_rx_from_stage1_first_deq_rdy_b,
//    rx_rx_from_stage1_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_meta_to_stage3_enq_rdy_b,
//    tx_tx_mtval_to_stage3_enq_rdy_b,
//    tx_tx_instrtype_to_stage3_notFull_b,
//    tx_tx_instrtype_to_stage3_enq_rdy_b,
//    tx_tx_opmeta_to_stage3_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    EN_common_ma_csrs) -> tx_tx_mtval_to_stage3_enq_ena
//   (rx_rx_from_stage1_notEmpty_b,
//    rx_rx_from_stage1_first_deq_rdy_b,
//    rx_rx_from_stage1_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_meta_to_stage3_enq_rdy_b,
//    tx_tx_mtval_to_stage3_enq_rdy_b,
//    tx_tx_instrtype_to_stage3_notFull_b,
//    tx_tx_instrtype_to_stage3_enq_rdy_b,
//    tx_tx_opmeta_to_stage3_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    common_ma_csrs_csr,
//    debug_debug_status_status,
//    EN_common_ma_csrs) -> tx_tx_mtval_to_stage3_enq_data
//   (rx_rx_from_stage1_notEmpty_b,
//    rx_rx_from_stage1_first_deq_rdy_b,
//    rx_rx_from_stage1_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_meta_to_stage3_enq_rdy_b,
//    tx_tx_mtval_to_stage3_enq_rdy_b,
//    tx_tx_instrtype_to_stage3_notFull_b,
//    tx_tx_instrtype_to_stage3_enq_rdy_b,
//    tx_tx_opmeta_to_stage3_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    EN_common_ma_csrs) -> tx_tx_instrtype_to_stage3_enq_ena
//   (rx_rx_from_stage1_notEmpty_b,
//    rx_rx_from_stage1_first_deq_rdy_b,
//    rx_rx_from_stage1_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_meta_to_stage3_enq_rdy_b,
//    tx_tx_mtval_to_stage3_enq_rdy_b,
//    tx_tx_instrtype_to_stage3_notFull_b,
//    tx_tx_instrtype_to_stage3_enq_rdy_b,
//    tx_tx_opmeta_to_stage3_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    common_ma_csrs_csr,
//    debug_debug_status_status,
//    EN_common_ma_csrs) -> tx_tx_instrtype_to_stage3_enq_data
//   (rx_rx_from_stage1_notEmpty_b,
//    rx_rx_from_stage1_first_deq_rdy_b,
//    rx_rx_from_stage1_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_meta_to_stage3_enq_rdy_b,
//    tx_tx_mtval_to_stage3_enq_rdy_b,
//    tx_tx_instrtype_to_stage3_notFull_b,
//    tx_tx_instrtype_to_stage3_enq_rdy_b,
//    tx_tx_opmeta_to_stage3_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    EN_common_ma_csrs) -> tx_tx_opmeta_to_stage3_enq_ena
//   (rx_rx_from_stage1_notEmpty_b,
//    rx_rx_from_stage1_first_deq_rdy_b,
//    rx_rx_from_stage1_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_meta_to_stage3_enq_rdy_b,
//    tx_tx_mtval_to_stage3_enq_rdy_b,
//    tx_tx_instrtype_to_stage3_notFull_b,
//    tx_tx_instrtype_to_stage3_enq_rdy_b,
//    tx_tx_opmeta_to_stage3_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    common_ma_csrs_csr,
//    debug_debug_status_status,
//    EN_common_ma_csrs) -> tx_tx_opmeta_to_stage3_enq_data
//   (rx_rx_from_stage1_notEmpty_b,
//    rx_rx_from_stage1_first_deq_rdy_b,
//    rx_rx_from_stage1_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    tx_tx_meta_to_stage3_enq_rdy_b,
//    tx_tx_mtval_to_stage3_enq_rdy_b,
//    tx_tx_instrtype_to_stage3_notFull_b,
//    tx_tx_instrtype_to_stage3_enq_rdy_b,
//    tx_tx_opmeta_to_stage3_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    EN_common_ma_csrs) -> tx_tx_commitlog_enq_ena
//   (rx_rx_from_stage1_notEmpty_b,
//    rx_rx_from_stage1_first_deq_rdy_b,
//    rx_rx_from_stage1_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    rx_rx_commitlog_first_x,
//    tx_tx_meta_to_stage3_enq_rdy_b,
//    tx_tx_mtval_to_stage3_enq_rdy_b,
//    tx_tx_instrtype_to_stage3_notFull_b,
//    tx_tx_instrtype_to_stage3_enq_rdy_b,
//    tx_tx_opmeta_to_stage3_enq_rdy_b,
//    tx_tx_commitlog_enq_rdy_b,
//    common_ma_csrs_csr,
//    debug_debug_status_status,
//    EN_common_ma_csrs) -> tx_tx_commitlog_enq_data
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkstage2(CLK,
		RST_N,

		rx_rx_from_stage1_notEmpty_b,

		rx_rx_from_stage1_first_deq_rdy_b,

		rx_rx_from_stage1_first_x,

		rx_rx_from_stage1_deq_ena,

		rx_rx_commitlog_notEmpty_b,

		rx_rx_commitlog_first_deq_rdy_b,

		rx_rx_commitlog_first_x,

		rx_rx_commitlog_deq_ena,

		tx_tx_meta_to_stage3_notFull_b,

		tx_tx_meta_to_stage3_enq_rdy_b,

		tx_tx_meta_to_stage3_enq_ena,

		tx_tx_meta_to_stage3_enq_data,

		tx_tx_mtval_to_stage3_notFull_b,

		tx_tx_mtval_to_stage3_enq_rdy_b,

		tx_tx_mtval_to_stage3_enq_ena,

		tx_tx_mtval_to_stage3_enq_data,

		tx_tx_instrtype_to_stage3_notFull_b,

		tx_tx_instrtype_to_stage3_enq_rdy_b,

		tx_tx_instrtype_to_stage3_enq_ena,

		tx_tx_instrtype_to_stage3_enq_data,

		tx_tx_opmeta_to_stage3_notFull_b,

		tx_tx_opmeta_to_stage3_enq_rdy_b,

		tx_tx_opmeta_to_stage3_enq_ena,

		tx_tx_opmeta_to_stage3_enq_data,

		tx_tx_commitlog_notFull_b,

		tx_tx_commitlog_enq_rdy_b,

		tx_tx_commitlog_enq_ena,

		tx_tx_commitlog_enq_data,

		rf_mv_op1,

		rf_mv_op2,

		rf_mv_op3,

		common_ma_commit_rd_commit,
		EN_common_ma_commit_rd,
		RDY_common_ma_commit_rd,

		EN_common_ma_update_eEpoch,

		EN_common_ma_update_wEpoch,

		common_ma_csrs_csr,
		EN_common_ma_csrs,

		common_ma_clear_stall_upd,
		EN_common_ma_clear_stall,
		RDY_common_ma_clear_stall,

		common_ma_resume_wfi_w,
		EN_common_ma_resume_wfi,

		debug_debug_status_status,

		mv_wfi_detected,
		RDY_mv_wfi_detected);
  parameter [63 : 0] hartid = 64'b0;
  input  CLK;
  input  RST_N;

  // action method rx_rx_from_stage1_notEmpty
  input  rx_rx_from_stage1_notEmpty_b;

  // action method rx_rx_from_stage1_first_deq_rdy
  input  rx_rx_from_stage1_first_deq_rdy_b;

  // action method rx_rx_from_stage1_first
  input  [119 : 0] rx_rx_from_stage1_first_x;

  // value method rx_rx_from_stage1_deq_ena
  output rx_rx_from_stage1_deq_ena;

  // action method rx_rx_commitlog_notEmpty
  input  rx_rx_commitlog_notEmpty_b;

  // action method rx_rx_commitlog_first_deq_rdy
  input  rx_rx_commitlog_first_deq_rdy_b;

  // action method rx_rx_commitlog_first
  input  [308 : 0] rx_rx_commitlog_first_x;

  // value method rx_rx_commitlog_deq_ena
  output rx_rx_commitlog_deq_ena;

  // action method tx_tx_meta_to_stage3_notFull
  input  tx_tx_meta_to_stage3_notFull_b;

  // action method tx_tx_meta_to_stage3_enq_rdy
  input  tx_tx_meta_to_stage3_enq_rdy_b;

  // value method tx_tx_meta_to_stage3_enq_ena
  output tx_tx_meta_to_stage3_enq_ena;

  // value method tx_tx_meta_to_stage3_enq_data
  output [96 : 0] tx_tx_meta_to_stage3_enq_data;

  // action method tx_tx_mtval_to_stage3_notFull
  input  tx_tx_mtval_to_stage3_notFull_b;

  // action method tx_tx_mtval_to_stage3_enq_rdy
  input  tx_tx_mtval_to_stage3_enq_rdy_b;

  // value method tx_tx_mtval_to_stage3_enq_ena
  output tx_tx_mtval_to_stage3_enq_ena;

  // value method tx_tx_mtval_to_stage3_enq_data
  output [63 : 0] tx_tx_mtval_to_stage3_enq_data;

  // action method tx_tx_instrtype_to_stage3_notFull
  input  tx_tx_instrtype_to_stage3_notFull_b;

  // action method tx_tx_instrtype_to_stage3_enq_rdy
  input  tx_tx_instrtype_to_stage3_enq_rdy_b;

  // value method tx_tx_instrtype_to_stage3_enq_ena
  output tx_tx_instrtype_to_stage3_enq_ena;

  // value method tx_tx_instrtype_to_stage3_enq_data
  output [3 : 0] tx_tx_instrtype_to_stage3_enq_data;

  // action method tx_tx_opmeta_to_stage3_notFull
  input  tx_tx_opmeta_to_stage3_notFull_b;

  // action method tx_tx_opmeta_to_stage3_enq_rdy
  input  tx_tx_opmeta_to_stage3_enq_rdy_b;

  // value method tx_tx_opmeta_to_stage3_enq_ena
  output tx_tx_opmeta_to_stage3_enq_ena;

  // value method tx_tx_opmeta_to_stage3_enq_data
  output [20 : 0] tx_tx_opmeta_to_stage3_enq_data;

  // action method tx_tx_commitlog_notFull
  input  tx_tx_commitlog_notFull_b;

  // action method tx_tx_commitlog_enq_rdy
  input  tx_tx_commitlog_enq_rdy_b;

  // value method tx_tx_commitlog_enq_ena
  output tx_tx_commitlog_enq_ena;

  // value method tx_tx_commitlog_enq_data
  output [308 : 0] tx_tx_commitlog_enq_data;

  // value method rf_mv_op1
  output [75 : 0] rf_mv_op1;

  // value method rf_mv_op2
  output [75 : 0] rf_mv_op2;

  // value method rf_mv_op3
  output [75 : 0] rf_mv_op3;

  // action method common_ma_commit_rd
  input  [74 : 0] common_ma_commit_rd_commit;
  input  EN_common_ma_commit_rd;
  output RDY_common_ma_commit_rd;

  // action method common_ma_update_eEpoch
  input  EN_common_ma_update_eEpoch;

  // action method common_ma_update_wEpoch
  input  EN_common_ma_update_wEpoch;

  // action method common_ma_csrs
  input  [241 : 0] common_ma_csrs_csr;
  input  EN_common_ma_csrs;

  // action method common_ma_clear_stall
  input  common_ma_clear_stall_upd;
  input  EN_common_ma_clear_stall;
  output RDY_common_ma_clear_stall;

  // action method common_ma_resume_wfi
  input  common_ma_resume_wfi_w;
  input  EN_common_ma_resume_wfi;

  // action method debug_debug_status
  input  [4 : 0] debug_debug_status_status;

  // value method mv_wfi_detected
  output mv_wfi_detected;
  output RDY_mv_wfi_detected;

  // signals for module outputs
  reg [63 : 0] tx_tx_mtval_to_stage3_enq_data;
  wire [308 : 0] tx_tx_commitlog_enq_data;
  wire [96 : 0] tx_tx_meta_to_stage3_enq_data;
  wire [75 : 0] rf_mv_op1, rf_mv_op2, rf_mv_op3;
  wire [20 : 0] tx_tx_opmeta_to_stage3_enq_data;
  wire [3 : 0] tx_tx_instrtype_to_stage3_enq_data;
  wire RDY_common_ma_clear_stall,
       RDY_common_ma_commit_rd,
       RDY_mv_wfi_detected,
       mv_wfi_detected,
       rx_rx_commitlog_deq_ena,
       rx_rx_from_stage1_deq_ena,
       tx_tx_commitlog_enq_ena,
       tx_tx_instrtype_to_stage3_enq_ena,
       tx_tx_meta_to_stage3_enq_ena,
       tx_tx_mtval_to_stage3_enq_ena,
       tx_tx_opmeta_to_stage3_enq_ena;

  // inlined wires
  wire [75 : 0] rg_op1_port0__write_1,
		rg_op1_port1__read,
		rg_op1_port1__write_1,
		rg_op1_port2__read,
		rg_op2_port0__write_1,
		rg_op2_port1__read,
		rg_op2_port1__write_1,
		rg_op2_port2__read,
		rg_op3_port0__write_1,
		rg_op3_port1__read,
		rg_op3_port1__write_1,
		rg_op3_port2__read;
  wire [2 : 0] rg_op2type_port1__read;
  wire rg_op1_EN_port1__write, rg_op2_EN_port1__write, rg_op3_EN_port1__write;

  // register eEpoch
  reg eEpoch;
  wire eEpoch_D_IN, eEpoch_EN;

  // register rg_microtrap
  reg rg_microtrap;
  wire rg_microtrap_D_IN, rg_microtrap_EN;

  // register rg_microtrap_cause
  reg [6 : 0] rg_microtrap_cause;
  wire [6 : 0] rg_microtrap_cause_D_IN;
  wire rg_microtrap_cause_EN;

  // register rg_op1
  reg [75 : 0] rg_op1;
  wire [75 : 0] rg_op1_D_IN;
  wire rg_op1_EN;

  // register rg_op2
  reg [75 : 0] rg_op2;
  wire [75 : 0] rg_op2_D_IN;
  wire rg_op2_EN;

  // register rg_op2type
  reg [2 : 0] rg_op2type;
  wire [2 : 0] rg_op2type_D_IN;
  wire rg_op2type_EN;

  // register rg_op3
  reg [75 : 0] rg_op3;
  wire [75 : 0] rg_op3_D_IN;
  wire rg_op3_EN;

  // register rg_stall
  reg rg_stall;
  wire rg_stall_D_IN, rg_stall_EN;

  // register rg_step_done
  reg rg_step_done;
  wire rg_step_done_D_IN, rg_step_done_EN;

  // register rg_wfi
  reg rg_wfi;
  wire rg_wfi_D_IN, rg_wfi_EN;

  // register wEpoch
  reg wEpoch;
  wire wEpoch_D_IN, wEpoch_EN;

  // ports of submodule registerfile
  wire [74 : 0] registerfile_commit_rd_c;
  wire [63 : 0] registerfile_read_rs1,
		registerfile_read_rs2,
		registerfile_read_rs3;
  wire [4 : 0] registerfile_read_rs1_addr,
	       registerfile_read_rs2_addr,
	       registerfile_read_rs3_addr;
  wire registerfile_EN_commit_rd,
       registerfile_EN_read_rs1,
       registerfile_EN_read_rs2,
       registerfile_EN_read_rs3,
       registerfile_RDY_commit_rd,
       registerfile_RDY_read_rs1,
       registerfile_RDY_read_rs2,
       registerfile_RDY_read_rs3,
       registerfile_read_rs1_rs1type,
       registerfile_read_rs2_rs2type;

  // rule scheduling signals
  wire CAN_FIRE_RL_decode_and_opfetch,
       CAN_FIRE_RL_rl_wait_for_interrupt,
       CAN_FIRE_common_ma_clear_stall,
       CAN_FIRE_common_ma_commit_rd,
       CAN_FIRE_common_ma_csrs,
       CAN_FIRE_common_ma_resume_wfi,
       CAN_FIRE_common_ma_update_eEpoch,
       CAN_FIRE_common_ma_update_wEpoch,
       CAN_FIRE_debug_debug_status,
       CAN_FIRE_rx_rx_commitlog_first,
       CAN_FIRE_rx_rx_commitlog_first_deq_rdy,
       CAN_FIRE_rx_rx_commitlog_notEmpty,
       CAN_FIRE_rx_rx_from_stage1_first,
       CAN_FIRE_rx_rx_from_stage1_first_deq_rdy,
       CAN_FIRE_rx_rx_from_stage1_notEmpty,
       CAN_FIRE_tx_tx_commitlog_enq_rdy,
       CAN_FIRE_tx_tx_commitlog_notFull,
       CAN_FIRE_tx_tx_instrtype_to_stage3_enq_rdy,
       CAN_FIRE_tx_tx_instrtype_to_stage3_notFull,
       CAN_FIRE_tx_tx_meta_to_stage3_enq_rdy,
       CAN_FIRE_tx_tx_meta_to_stage3_notFull,
       CAN_FIRE_tx_tx_mtval_to_stage3_enq_rdy,
       CAN_FIRE_tx_tx_mtval_to_stage3_notFull,
       CAN_FIRE_tx_tx_opmeta_to_stage3_enq_rdy,
       CAN_FIRE_tx_tx_opmeta_to_stage3_notFull,
       WILL_FIRE_RL_decode_and_opfetch,
       WILL_FIRE_RL_rl_wait_for_interrupt,
       WILL_FIRE_common_ma_clear_stall,
       WILL_FIRE_common_ma_commit_rd,
       WILL_FIRE_common_ma_csrs,
       WILL_FIRE_common_ma_resume_wfi,
       WILL_FIRE_common_ma_update_eEpoch,
       WILL_FIRE_common_ma_update_wEpoch,
       WILL_FIRE_debug_debug_status,
       WILL_FIRE_rx_rx_commitlog_first,
       WILL_FIRE_rx_rx_commitlog_first_deq_rdy,
       WILL_FIRE_rx_rx_commitlog_notEmpty,
       WILL_FIRE_rx_rx_from_stage1_first,
       WILL_FIRE_rx_rx_from_stage1_first_deq_rdy,
       WILL_FIRE_rx_rx_from_stage1_notEmpty,
       WILL_FIRE_tx_tx_commitlog_enq_rdy,
       WILL_FIRE_tx_tx_commitlog_notFull,
       WILL_FIRE_tx_tx_instrtype_to_stage3_enq_rdy,
       WILL_FIRE_tx_tx_instrtype_to_stage3_notFull,
       WILL_FIRE_tx_tx_meta_to_stage3_enq_rdy,
       WILL_FIRE_tx_tx_meta_to_stage3_notFull,
       WILL_FIRE_tx_tx_mtval_to_stage3_enq_rdy,
       WILL_FIRE_tx_tx_mtval_to_stage3_notFull,
       WILL_FIRE_tx_tx_opmeta_to_stage3_enq_rdy,
       WILL_FIRE_tx_tx_opmeta_to_stage3_notFull;

  // inputs to muxes for submodule ports
  wire MUX_rg_microtrap_write_1__SEL_1,
       MUX_rg_microtrap_write_1__SEL_2,
       MUX_rg_microtrap_write_1__VAL_2,
       MUX_rg_stall_write_1__VAL_2,
       MUX_rg_wfi_write_1__SEL_1;

  // remaining internal signals
  reg [208 : 0] IF_IF_IF_rg_microtrap_6_OR_chk_interrupt_4_BIT_ETC___d167;
  reg [63 : 0] op2__h3808;
  reg [1 : 0] CASE_tx_tx_instrtype_to_stage3_enq_data_1_1_5_2_3__q2;
  wire [74 : 0] fn_decode___d42;
  wire [63 : 0] IF_IF_rg_microtrap_6_THEN_rg_microtrap_cause_1_ETC___d139,
		SEXT_fn_decode_2_BITS_39_TO_8_76___d177,
		_op3_data__h5413,
		mtval___1__h4757,
		mtval___1__h4780,
		x1_data__h8246,
		x1_data__h8410;
  wire [31 : 0] fn_decode_2_BITS_39_TO_8__q1, x_wget_instruction__h3419;
  wire [7 : 0] chk_interrupt___d64;
  wire [6 : 0] _theResult___fst__h3964,
	       _theResult___fst__h3990,
	       func_cause__h3306;
  wire [3 : 0] IF_rg_microtrap_6_OR_chk_interrupt_4_BIT_0_5_A_ETC___d74;
  wire IF_rg_microtrap_6_OR_chk_interrupt_4_BIT_0_5_A_ETC___d87,
       decode_word32___d113,
       eEpoch_read__0_CONCAT_wEpoch_read__1_2_EQ_IF_r_ETC___d55,
       eEpoch_read__0_CONCAT_wEpoch_read__1_2_EQ_IF_r_ETC___d93,
       rg_step_done__h3937,
       wr_debug_info_whas_AND_rx_commitlog_w_rdy_wget_ETC___d18,
       wr_resume_wfi_whas__90_AND_wr_resume_wfi_wget__ETC___d196;

  // action method rx_rx_from_stage1_notEmpty
  assign CAN_FIRE_rx_rx_from_stage1_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_rx_from_stage1_notEmpty = 1'd1 ;

  // action method rx_rx_from_stage1_first_deq_rdy
  assign CAN_FIRE_rx_rx_from_stage1_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_rx_from_stage1_first_deq_rdy = 1'd1 ;

  // action method rx_rx_from_stage1_first
  assign CAN_FIRE_rx_rx_from_stage1_first = 1'd1 ;
  assign WILL_FIRE_rx_rx_from_stage1_first = 1'd1 ;

  // value method rx_rx_from_stage1_deq_ena
  assign rx_rx_from_stage1_deq_ena = CAN_FIRE_RL_decode_and_opfetch ;

  // action method rx_rx_commitlog_notEmpty
  assign CAN_FIRE_rx_rx_commitlog_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_rx_commitlog_notEmpty = 1'd1 ;

  // action method rx_rx_commitlog_first_deq_rdy
  assign CAN_FIRE_rx_rx_commitlog_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_rx_commitlog_first_deq_rdy = 1'd1 ;

  // action method rx_rx_commitlog_first
  assign CAN_FIRE_rx_rx_commitlog_first = 1'd1 ;
  assign WILL_FIRE_rx_rx_commitlog_first = 1'd1 ;

  // value method rx_rx_commitlog_deq_ena
  assign rx_rx_commitlog_deq_ena = CAN_FIRE_RL_decode_and_opfetch ;

  // action method tx_tx_meta_to_stage3_notFull
  assign CAN_FIRE_tx_tx_meta_to_stage3_notFull = 1'd1 ;
  assign WILL_FIRE_tx_tx_meta_to_stage3_notFull = 1'd1 ;

  // action method tx_tx_meta_to_stage3_enq_rdy
  assign CAN_FIRE_tx_tx_meta_to_stage3_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_tx_meta_to_stage3_enq_rdy = 1'd1 ;

  // value method tx_tx_meta_to_stage3_enq_ena
  assign tx_tx_meta_to_stage3_enq_ena = MUX_rg_microtrap_write_1__SEL_2 ;

  // value method tx_tx_meta_to_stage3_enq_data
  assign tx_tx_meta_to_stage3_enq_data =
	     { fn_decode___d42[52],
	       decode_word32___d113,
	       rx_rx_from_stage1_first_x[118:106],
	       rg_microtrap,
	       func_cause__h3306,
	       fn_decode___d42[42:40],
	       rx_rx_from_stage1_first_x[105:42],
	       rx_rx_from_stage1_first_x[9:8],
	       fn_decode___d42[58:54] } ;

  // action method tx_tx_mtval_to_stage3_notFull
  assign CAN_FIRE_tx_tx_mtval_to_stage3_notFull = 1'd1 ;
  assign WILL_FIRE_tx_tx_mtval_to_stage3_notFull = 1'd1 ;

  // action method tx_tx_mtval_to_stage3_enq_rdy
  assign CAN_FIRE_tx_tx_mtval_to_stage3_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_tx_mtval_to_stage3_enq_rdy = 1'd1 ;

  // value method tx_tx_mtval_to_stage3_enq_ena
  assign tx_tx_mtval_to_stage3_enq_ena = MUX_rg_microtrap_write_1__SEL_2 ;

  // value method tx_tx_mtval_to_stage3_enq_data
  always@(func_cause__h3306 or
	  IF_IF_rg_microtrap_6_THEN_rg_microtrap_cause_1_ETC___d139 or
	  mtval___1__h4757 or rx_rx_from_stage1_first_x)
  begin
    case (func_cause__h3306)
      7'd2: tx_tx_mtval_to_stage3_enq_data = mtval___1__h4757;
      7'd3:
	  tx_tx_mtval_to_stage3_enq_data = rx_rx_from_stage1_first_x[105:42];
      default: tx_tx_mtval_to_stage3_enq_data =
		   IF_IF_rg_microtrap_6_THEN_rg_microtrap_cause_1_ETC___d139;
    endcase
  end

  // action method tx_tx_instrtype_to_stage3_notFull
  assign CAN_FIRE_tx_tx_instrtype_to_stage3_notFull = 1'd1 ;
  assign WILL_FIRE_tx_tx_instrtype_to_stage3_notFull = 1'd1 ;

  // action method tx_tx_instrtype_to_stage3_enq_rdy
  assign CAN_FIRE_tx_tx_instrtype_to_stage3_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_tx_instrtype_to_stage3_enq_rdy = 1'd1 ;

  // value method tx_tx_instrtype_to_stage3_enq_ena
  assign tx_tx_instrtype_to_stage3_enq_ena = MUX_rg_microtrap_write_1__SEL_2 ;

  // value method tx_tx_instrtype_to_stage3_enq_data
  assign tx_tx_instrtype_to_stage3_enq_data =
	     (IF_rg_microtrap_6_OR_chk_interrupt_4_BIT_0_5_A_ETC___d74 ==
	      4'd7) ?
	       4'd0 :
	       IF_rg_microtrap_6_OR_chk_interrupt_4_BIT_0_5_A_ETC___d74 ;

  // action method tx_tx_opmeta_to_stage3_notFull
  assign CAN_FIRE_tx_tx_opmeta_to_stage3_notFull = 1'd1 ;
  assign WILL_FIRE_tx_tx_opmeta_to_stage3_notFull = 1'd1 ;

  // action method tx_tx_opmeta_to_stage3_enq_rdy
  assign CAN_FIRE_tx_tx_opmeta_to_stage3_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_tx_opmeta_to_stage3_enq_rdy = 1'd1 ;

  // value method tx_tx_opmeta_to_stage3_enq_ena
  assign tx_tx_opmeta_to_stage3_enq_ena = MUX_rg_microtrap_write_1__SEL_2 ;

  // value method tx_tx_opmeta_to_stage3_enq_data
  assign tx_tx_opmeta_to_stage3_enq_data =
	     { fn_decode___d42[53],
	       fn_decode___d42[73:69],
	       fn_decode___d42[51:47],
	       fn_decode___d42[68:59] } ;

  // action method tx_tx_commitlog_notFull
  assign CAN_FIRE_tx_tx_commitlog_notFull = 1'd1 ;
  assign WILL_FIRE_tx_tx_commitlog_notFull = 1'd1 ;

  // action method tx_tx_commitlog_enq_rdy
  assign CAN_FIRE_tx_tx_commitlog_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_tx_commitlog_enq_rdy = 1'd1 ;

  // value method tx_tx_commitlog_enq_ena
  assign tx_tx_commitlog_enq_ena = MUX_rg_microtrap_write_1__SEL_2 ;

  // value method tx_tx_commitlog_enq_data
  assign tx_tx_commitlog_enq_data =
	     { rx_rx_commitlog_first_x[308:211],
	       CASE_tx_tx_instrtype_to_stage3_enq_data_1_1_5_2_3__q2,
	       IF_IF_IF_rg_microtrap_6_OR_chk_interrupt_4_BIT_ETC___d167 } ;

  // value method rf_mv_op1
  assign rf_mv_op1 = rg_op1 ;

  // value method rf_mv_op2
  assign rf_mv_op2 = rg_op2 ;

  // value method rf_mv_op3
  assign rf_mv_op3 = rg_op3 ;

  // action method common_ma_commit_rd
  assign RDY_common_ma_commit_rd = registerfile_RDY_commit_rd ;
  assign CAN_FIRE_common_ma_commit_rd = registerfile_RDY_commit_rd ;
  assign WILL_FIRE_common_ma_commit_rd = EN_common_ma_commit_rd ;

  // action method common_ma_update_eEpoch
  assign CAN_FIRE_common_ma_update_eEpoch = 1'd1 ;
  assign WILL_FIRE_common_ma_update_eEpoch = EN_common_ma_update_eEpoch ;

  // action method common_ma_update_wEpoch
  assign CAN_FIRE_common_ma_update_wEpoch = 1'd1 ;
  assign WILL_FIRE_common_ma_update_wEpoch = EN_common_ma_update_wEpoch ;

  // action method common_ma_csrs
  assign CAN_FIRE_common_ma_csrs = 1'd1 ;
  assign WILL_FIRE_common_ma_csrs = EN_common_ma_csrs ;

  // action method common_ma_clear_stall
  assign RDY_common_ma_clear_stall = rg_stall ;
  assign CAN_FIRE_common_ma_clear_stall = rg_stall ;
  assign WILL_FIRE_common_ma_clear_stall = EN_common_ma_clear_stall ;

  // action method common_ma_resume_wfi
  assign CAN_FIRE_common_ma_resume_wfi = 1'd1 ;
  assign WILL_FIRE_common_ma_resume_wfi = EN_common_ma_resume_wfi ;

  // action method debug_debug_status
  assign CAN_FIRE_debug_debug_status = 1'd1 ;
  assign WILL_FIRE_debug_debug_status = 1'd1 ;

  // value method mv_wfi_detected
  assign mv_wfi_detected = rg_wfi ;
  assign RDY_mv_wfi_detected = 1'd1 ;

  // submodule registerfile
  mkregisterfile #(.hartid(hartid)) registerfile(.CLK(CLK),
						 .RST_N(RST_N),
						 .commit_rd_c(registerfile_commit_rd_c),
						 .read_rs1_addr(registerfile_read_rs1_addr),
						 .read_rs1_rs1type(registerfile_read_rs1_rs1type),
						 .read_rs2_addr(registerfile_read_rs2_addr),
						 .read_rs2_rs2type(registerfile_read_rs2_rs2type),
						 .read_rs3_addr(registerfile_read_rs3_addr),
						 .EN_read_rs1(registerfile_EN_read_rs1),
						 .EN_read_rs2(registerfile_EN_read_rs2),
						 .EN_read_rs3(registerfile_EN_read_rs3),
						 .EN_commit_rd(registerfile_EN_commit_rd),
						 .read_rs1(registerfile_read_rs1),
						 .RDY_read_rs1(registerfile_RDY_read_rs1),
						 .read_rs2(registerfile_read_rs2),
						 .RDY_read_rs2(registerfile_RDY_read_rs2),
						 .read_rs3(registerfile_read_rs3),
						 .RDY_read_rs3(registerfile_RDY_read_rs3),
						 .RDY_commit_rd(registerfile_RDY_commit_rd));

  // rule RL_decode_and_opfetch
  assign CAN_FIRE_RL_decode_and_opfetch =
	     registerfile_RDY_read_rs1 && registerfile_RDY_read_rs2 &&
	     registerfile_RDY_read_rs3 &&
	     rx_rx_from_stage1_first_deq_rdy_b &&
	     EN_common_ma_csrs &&
	     wr_debug_info_whas_AND_rx_commitlog_w_rdy_wget_ETC___d18 &&
	     !rg_stall &&
	     rx_rx_from_stage1_notEmpty_b &&
	     tx_tx_instrtype_to_stage3_notFull_b &&
	     !rg_wfi ;
  assign WILL_FIRE_RL_decode_and_opfetch = CAN_FIRE_RL_decode_and_opfetch ;

  // rule RL_rl_wait_for_interrupt
  assign CAN_FIRE_RL_rl_wait_for_interrupt = rg_wfi ;
  assign WILL_FIRE_RL_rl_wait_for_interrupt = rg_wfi ;

  // inputs to muxes for submodule ports
  assign MUX_rg_microtrap_write_1__SEL_1 =
	     EN_common_ma_clear_stall && common_ma_clear_stall_upd ;
  assign MUX_rg_microtrap_write_1__SEL_2 =
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__0_CONCAT_wEpoch_read__1_2_EQ_IF_r_ETC___d55 ;
  assign MUX_rg_wfi_write_1__SEL_1 =
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__0_CONCAT_wEpoch_read__1_2_EQ_IF_r_ETC___d55 &&
	     IF_rg_microtrap_6_OR_chk_interrupt_4_BIT_0_5_A_ETC___d87 ;
  assign MUX_rg_microtrap_write_1__VAL_2 =
	     !rg_microtrap && fn_decode___d42[0] &&
	     !EN_common_ma_update_eEpoch &&
	     !EN_common_ma_update_wEpoch ;
  assign MUX_rg_stall_write_1__VAL_2 =
	     !EN_common_ma_update_eEpoch && !EN_common_ma_update_wEpoch ;

  // inlined wires
  assign rg_op1_port0__write_1 =
	     { 4'bxxxx /* unspecified value */ ,
	       fn_decode___d42[51:50] == 2'd2,
	       1'd1,
	       fn_decode___d42[68:64],
	       registerfile_read_rs1,
	       wEpoch } ;
  assign rg_op1_port1__read =
	     MUX_rg_microtrap_write_1__SEL_2 ?
	       rg_op1_port0__write_1 :
	       rg_op1 ;
  assign rg_op1_EN_port1__write =
	     EN_common_ma_commit_rd && !common_ma_commit_rd_commit[69] &&
	     common_ma_commit_rd_commit[68:64] == rg_op1_port1__read[69:65] &&
	     common_ma_commit_rd_commit[70] == rg_op1_port1__read[71] ;
  assign rg_op1_port1__write_1 =
	     { rg_op1_port1__read[75:65],
	       x1_data__h8246,
	       rg_op1_port1__read[0] } ;
  assign rg_op1_port2__read =
	     rg_op1_EN_port1__write ?
	       rg_op1_port1__write_1 :
	       rg_op1_port1__read ;
  assign rg_op2_port0__write_1 =
	     { 4'bxxxx /* unspecified value */ ,
	       fn_decode___d42[49:47] == 3'd4,
	       1'd1,
	       fn_decode___d42[63:59],
	       op2__h3808,
	       wEpoch } ;
  assign rg_op2_port1__read =
	     MUX_rg_microtrap_write_1__SEL_2 ?
	       rg_op2_port0__write_1 :
	       rg_op2 ;
  assign rg_op2_EN_port1__write =
	     EN_common_ma_commit_rd && !common_ma_commit_rd_commit[69] &&
	     common_ma_commit_rd_commit[68:64] == rg_op2_port1__read[69:65] &&
	     common_ma_commit_rd_commit[70] == rg_op2_port1__read[71] ;
  assign rg_op2_port1__write_1 =
	     { rg_op2_port1__read[75:65],
	       x1_data__h8410,
	       rg_op2_port1__read[0] } ;
  assign rg_op2_port2__read =
	     rg_op2_EN_port1__write ?
	       rg_op2_port1__write_1 :
	       rg_op2_port1__read ;
  assign rg_op2type_port1__read =
	     MUX_rg_microtrap_write_1__SEL_2 ?
	       fn_decode___d42[49:47] :
	       rg_op2type ;
  assign rg_op3_port0__write_1 =
	     { 4'bxxxx /* unspecified value */ ,
	       fn_decode___d42[53],
	       1'd1,
	       fn_decode___d42[73:69],
	       _op3_data__h5413,
	       wEpoch } ;
  assign rg_op3_port1__read =
	     MUX_rg_microtrap_write_1__SEL_2 ?
	       rg_op3_port0__write_1 :
	       rg_op3 ;
  assign rg_op3_EN_port1__write =
	     EN_common_ma_commit_rd && !common_ma_commit_rd_commit[69] &&
	     rg_op3_port1__read[69:65] == common_ma_commit_rd_commit[68:64] &&
	     rg_op3_port1__read[71] &&
	     common_ma_commit_rd_commit[70] ;
  assign rg_op3_port1__write_1 =
	     { rg_op3_port1__read[75:65],
	       common_ma_commit_rd_commit[63:0],
	       rg_op3_port1__read[0] } ;
  assign rg_op3_port2__read =
	     rg_op3_EN_port1__write ?
	       rg_op3_port1__write_1 :
	       rg_op3_port1__read ;

  // register eEpoch
  assign eEpoch_D_IN = ~eEpoch ;
  assign eEpoch_EN = EN_common_ma_update_eEpoch ;

  // register rg_microtrap
  assign rg_microtrap_D_IN =
	     !MUX_rg_microtrap_write_1__SEL_1 &&
	     MUX_rg_microtrap_write_1__VAL_2 ;
  assign rg_microtrap_EN =
	     EN_common_ma_clear_stall && common_ma_clear_stall_upd ||
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__0_CONCAT_wEpoch_read__1_2_EQ_IF_r_ETC___d55 ;

  // register rg_microtrap_cause
  assign rg_microtrap_cause_D_IN =
	     (IF_rg_microtrap_6_OR_chk_interrupt_4_BIT_0_5_A_ETC___d74 ==
	      4'd5) ?
	       7'd3 :
	       ((fn_decode___d42[42:40] == 3'd4) ? 7'd1 : 7'd2) ;
  assign rg_microtrap_cause_EN = MUX_rg_microtrap_write_1__SEL_2 ;

  // register rg_op1
  assign rg_op1_D_IN = rg_op1_port2__read ;
  assign rg_op1_EN = 1'b1 ;

  // register rg_op2
  assign rg_op2_D_IN = rg_op2_port2__read ;
  assign rg_op2_EN = 1'b1 ;

  // register rg_op2type
  assign rg_op2type_D_IN = rg_op2type_port1__read ;
  assign rg_op2type_EN = 1'b1 ;

  // register rg_op3
  assign rg_op3_D_IN = rg_op3_port2__read ;
  assign rg_op3_EN = 1'b1 ;

  // register rg_stall
  assign rg_stall_D_IN =
	     !MUX_rg_microtrap_write_1__SEL_1 && MUX_rg_stall_write_1__VAL_2 ;
  assign rg_stall_EN =
	     EN_common_ma_clear_stall && common_ma_clear_stall_upd ||
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__0_CONCAT_wEpoch_read__1_2_EQ_IF_r_ETC___d55 &&
	     tx_tx_instrtype_to_stage3_enq_data == 4'd6 ;

  // register rg_step_done
  assign rg_step_done_D_IN =
	     !debug_debug_status_status[3] && debug_debug_status_status[2] &&
	     debug_debug_status_status[4] ;
  assign rg_step_done_EN =
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__0_CONCAT_wEpoch_read__1_2_EQ_IF_r_ETC___d93 ;

  // register rg_wfi
  assign rg_wfi_D_IN = MUX_rg_wfi_write_1__SEL_1 ;
  assign rg_wfi_EN =
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__0_CONCAT_wEpoch_read__1_2_EQ_IF_r_ETC___d55 &&
	     IF_rg_microtrap_6_OR_chk_interrupt_4_BIT_0_5_A_ETC___d87 ||
	     rg_wfi &&
	     wr_resume_wfi_whas__90_AND_wr_resume_wfi_wget__ETC___d196 ;

  // register wEpoch
  assign wEpoch_D_IN = ~wEpoch ;
  assign wEpoch_EN = EN_common_ma_update_wEpoch ;

  // submodule registerfile
  assign registerfile_commit_rd_c = common_ma_commit_rd_commit ;
  assign registerfile_read_rs1_addr = fn_decode___d42[68:64] ;
  assign registerfile_read_rs1_rs1type = fn_decode___d42[51:50] == 2'd2 ;
  assign registerfile_read_rs2_addr = fn_decode___d42[63:59] ;
  assign registerfile_read_rs2_rs2type = fn_decode___d42[49:47] == 3'd4 ;
  assign registerfile_read_rs3_addr = x_wget_instruction__h3419[31:27] ;
  assign registerfile_EN_read_rs1 = CAN_FIRE_RL_decode_and_opfetch ;
  assign registerfile_EN_read_rs2 = CAN_FIRE_RL_decode_and_opfetch ;
  assign registerfile_EN_read_rs3 = CAN_FIRE_RL_decode_and_opfetch ;
  assign registerfile_EN_commit_rd =
	     EN_common_ma_commit_rd && !common_ma_commit_rd_commit[69] ;

  // remaining internal signals
  module_fn_decode instance_fn_decode_2(.fn_decode_inst(x_wget_instruction__h3419),
					.fn_decode_csrs(common_ma_csrs_csr),
					.fn_decode_compressed(rx_rx_from_stage1_first_x[118]),
					.fn_decode_debug(debug_debug_status_status),
					.fn_decode(fn_decode___d42));
  module_chk_interrupt instance_chk_interrupt_1(.chk_interrupt_prv(common_ma_csrs_csr[189:188]),
						.chk_interrupt_mstatus(common_ma_csrs_csr[127:64]),
						.chk_interrupt_sstatus(common_ma_csrs_csr[63:0]),
						.chk_interrupt_mip(common_ma_csrs_csr[187:171]),
						.chk_interrupt_mie(common_ma_csrs_csr[170:154]),
						.chk_interrupt_mideleg(common_ma_csrs_csr[241:225]),
						.chk_interrupt_debug(debug_debug_status_status),
						.chk_interrupt_step_done(rg_step_done__h3937),
						.chk_interrupt(chk_interrupt___d64));
  module_decode_word32 instance_decode_word32_0(.decode_word32_inst(x_wget_instruction__h3419),
						.decode_word32_misa_c(common_ma_csrs_csr[130]),
						.decode_word32(decode_word32___d113));
  assign IF_IF_rg_microtrap_6_THEN_rg_microtrap_cause_1_ETC___d139 =
	     (func_cause__h3306 == 7'd12 && rx_rx_from_stage1_first_x[119]) ?
	       mtval___1__h4780 :
	       ((func_cause__h3306 == 7'd12) ?
		  rx_rx_from_stage1_first_x[105:42] :
		  64'd0) ;
  assign IF_rg_microtrap_6_OR_chk_interrupt_4_BIT_0_5_A_ETC___d74 =
	     (rg_microtrap ||
	      chk_interrupt___d64[0] && fn_decode___d42[46:43] != 4'd7 ||
	      rx_rx_from_stage1_first_x[7]) ?
	       4'd6 :
	       fn_decode___d42[46:43] ;
  assign IF_rg_microtrap_6_OR_chk_interrupt_4_BIT_0_5_A_ETC___d87 =
	     IF_rg_microtrap_6_OR_chk_interrupt_4_BIT_0_5_A_ETC___d74 ==
	     4'd7 &&
	     !EN_common_ma_update_eEpoch &&
	     !EN_common_ma_update_wEpoch ;
  assign SEXT_fn_decode_2_BITS_39_TO_8_76___d177 =
	     { {32{fn_decode_2_BITS_39_TO_8__q1[31]}},
	       fn_decode_2_BITS_39_TO_8__q1 } ;
  assign _op3_data__h5413 =
	     fn_decode___d42[53] ?
	       registerfile_read_rs3 :
	       SEXT_fn_decode_2_BITS_39_TO_8_76___d177 ;
  assign _theResult___fst__h3964 =
	     (chk_interrupt___d64[0] && fn_decode___d42[46:43] != 4'd7) ?
	       chk_interrupt___d64[7:1] :
	       _theResult___fst__h3990 ;
  assign _theResult___fst__h3990 =
	     rx_rx_from_stage1_first_x[7] ?
	       rx_rx_from_stage1_first_x[6:0] :
	       fn_decode___d42[7:1] ;
  assign eEpoch_read__0_CONCAT_wEpoch_read__1_2_EQ_IF_r_ETC___d55 =
	     { eEpoch, wEpoch } == rx_rx_from_stage1_first_x[9:8] ;
  assign eEpoch_read__0_CONCAT_wEpoch_read__1_2_EQ_IF_r_ETC___d93 =
	     eEpoch_read__0_CONCAT_wEpoch_read__1_2_EQ_IF_r_ETC___d55 &&
	     (rg_step_done && debug_debug_status_status[3] || !rg_microtrap) ;
  assign fn_decode_2_BITS_39_TO_8__q1 = fn_decode___d42[39:8] ;
  assign func_cause__h3306 =
	     rg_microtrap ? rg_microtrap_cause : _theResult___fst__h3964 ;
  assign mtval___1__h4757 = { 32'd0, rx_rx_from_stage1_first_x[41:10] } ;
  assign mtval___1__h4780 = rx_rx_from_stage1_first_x[105:42] + 64'd2 ;
  assign rg_step_done__h3937 = rg_step_done ;
  assign wr_debug_info_whas_AND_rx_commitlog_w_rdy_wget_ETC___d18 =
	     rx_rx_commitlog_first_deq_rdy_b &&
	     tx_tx_meta_to_stage3_enq_rdy_b &&
	     tx_tx_mtval_to_stage3_enq_rdy_b &&
	     tx_tx_instrtype_to_stage3_enq_rdy_b &&
	     tx_tx_opmeta_to_stage3_enq_rdy_b &&
	     tx_tx_commitlog_enq_rdy_b ;
  assign wr_resume_wfi_whas__90_AND_wr_resume_wfi_wget__ETC___d196 =
	     EN_common_ma_resume_wfi && common_ma_resume_wfi_w ||
	     EN_common_ma_update_wEpoch ||
	     EN_common_ma_update_eEpoch ;
  assign x1_data__h8246 =
	     (common_ma_commit_rd_commit[70] ||
	      rg_op1_port1__read[69:65] != 5'd0) ?
	       common_ma_commit_rd_commit[63:0] :
	       rg_op1_port1__read[64:1] ;
  assign x1_data__h8410 =
	     (common_ma_commit_rd_commit[70] ||
	      rg_op2_port1__read[69:65] != 5'd0 &&
	      rg_op2type_port1__read == 3'd0) ?
	       common_ma_commit_rd_commit[63:0] :
	       rg_op2_port1__read[64:1] ;
  assign x_wget_instruction__h3419 = rx_rx_from_stage1_first_x[41:10] ;
  always@(fn_decode___d42 or
	  registerfile_read_rs2 or SEXT_fn_decode_2_BITS_39_TO_8_76___d177)
  begin
    case (fn_decode___d42[49:47])
      3'd1: op2__h3808 = SEXT_fn_decode_2_BITS_39_TO_8_76___d177;
      3'd2: op2__h3808 = 64'd4;
      3'd3: op2__h3808 = 64'd2;
      default: op2__h3808 = registerfile_read_rs2;
    endcase
  end
  always@(tx_tx_instrtype_to_stage3_enq_data or
	  fn_decode___d42 or func_cause__h3306)
  begin
    case (tx_tx_instrtype_to_stage3_enq_data)
      4'd1:
	  IF_IF_IF_rg_microtrap_6_OR_chk_interrupt_4_BIT_ETC___d167 =
	      { 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		fn_decode___d42[42:40],
		fn_decode___d42[58:54],
		!fn_decode___d42[52],
		func_cause__h3306[2:0],
		5'bxxxxx /* unspecified value */  };
      4'd5:
	  IF_IF_IF_rg_microtrap_6_OR_chk_interrupt_4_BIT_ETC___d167 =
	      { 62'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		fn_decode___d42[19:8],
		64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		fn_decode___d42[58:54],
		59'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		func_cause__h3306 };
      default: IF_IF_IF_rg_microtrap_6_OR_chk_interrupt_4_BIT_ETC___d167 =
		   { 134'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		     64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		     fn_decode___d42[58:54],
		     !fn_decode___d42[52],
		     5'bxxxxx /* unspecified value */  };
    endcase
  end
  always@(tx_tx_instrtype_to_stage3_enq_data)
  begin
    case (tx_tx_instrtype_to_stage3_enq_data)
      4'd1: CASE_tx_tx_instrtype_to_stage3_enq_data_1_1_5_2_3__q2 = 2'd1;
      4'd5: CASE_tx_tx_instrtype_to_stage3_enq_data_1_1_5_2_3__q2 = 2'd2;
      default: CASE_tx_tx_instrtype_to_stage3_enq_data_1_1_5_2_3__q2 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        eEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_microtrap <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_microtrap_cause <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_op1 <= `BSV_ASSIGNMENT_DELAY 76'd0;
	rg_op2 <= `BSV_ASSIGNMENT_DELAY 76'd0;
	rg_op2type <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_op3 <= `BSV_ASSIGNMENT_DELAY 76'd0;
	rg_stall <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_step_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_wfi <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (eEpoch_EN) eEpoch <= `BSV_ASSIGNMENT_DELAY eEpoch_D_IN;
	if (rg_microtrap_EN)
	  rg_microtrap <= `BSV_ASSIGNMENT_DELAY rg_microtrap_D_IN;
	if (rg_microtrap_cause_EN)
	  rg_microtrap_cause <= `BSV_ASSIGNMENT_DELAY rg_microtrap_cause_D_IN;
	if (rg_op1_EN) rg_op1 <= `BSV_ASSIGNMENT_DELAY rg_op1_D_IN;
	if (rg_op2_EN) rg_op2 <= `BSV_ASSIGNMENT_DELAY rg_op2_D_IN;
	if (rg_op2type_EN)
	  rg_op2type <= `BSV_ASSIGNMENT_DELAY rg_op2type_D_IN;
	if (rg_op3_EN) rg_op3 <= `BSV_ASSIGNMENT_DELAY rg_op3_D_IN;
	if (rg_stall_EN) rg_stall <= `BSV_ASSIGNMENT_DELAY rg_stall_D_IN;
	if (rg_step_done_EN)
	  rg_step_done <= `BSV_ASSIGNMENT_DELAY rg_step_done_D_IN;
	if (rg_wfi_EN) rg_wfi <= `BSV_ASSIGNMENT_DELAY rg_wfi_D_IN;
	if (wEpoch_EN) wEpoch <= `BSV_ASSIGNMENT_DELAY wEpoch_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    eEpoch = 1'h0;
    rg_microtrap = 1'h0;
    rg_microtrap_cause = 7'h2A;
    rg_op1 = 76'hAAAAAAAAAAAAAAAAAAA;
    rg_op2 = 76'hAAAAAAAAAAAAAAAAAAA;
    rg_op2type = 3'h2;
    rg_op3 = 76'hAAAAAAAAAAAAAAAAAAA;
    rg_stall = 1'h0;
    rg_step_done = 1'h0;
    rg_wfi = 1'h0;
    wEpoch = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkstage2

