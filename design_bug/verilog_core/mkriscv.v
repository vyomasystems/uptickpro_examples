//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
//
// On Tue Jul 29 14:28:20 +04 2025
//
//
// Ports:
// Name                         I/O  size props
// s0_icache_to_icache_get        O    68
// RDY_s0_icache_to_icache_get    O     1
// RDY_s1_icache_inst_response_put  O     1 reg
// s3_cache_mv_memory_request_get  O   145
// RDY_s3_cache_mv_memory_request_get  O     1
// RDY_s4_cache_memory_response_put  O     1
// RDY_interrupts_ma_clint_msip   O     1 const
// RDY_interrupts_ma_clint_mtip   O     1 const
// RDY_interrupts_ma_clint_mtime  O     1 const
// RDY_interrupts_ma_plic_meip    O     1 const
// RDY_interrupts_ma_plic_seip    O     1 const
// s5_cache_mv_initiate_store_fst  O     1
// RDY_s5_cache_mv_initiate_store_fst  O     1
// s5_cache_mv_initiate_store_snd  O     1
// RDY_s5_cache_mv_initiate_store_snd  O     1
// s5_cache_mv_initiate_ioop      O     1 reg
// RDY_s5_cache_mv_initiate_ioop  O     1
// RDY_s5_cache_ma_io_response    O     1 const
// csrs_mv_csr_mstatus            O    64
// RDY_csrs_mv_csr_mstatus        O     1 const
// csrs_mv_cacheenable            O     4 const
// RDY_csrs_mv_cacheenable        O     1 const
// csrs_mv_curr_priv              O     2 reg
// RDY_csrs_mv_curr_priv          O     1 const
// csrs_mv_csr_satp               O    64 reg
// RDY_csrs_mv_csr_satp           O     1 const
// csrs_mv_pmp_cfg                O    32 reg
// RDY_csrs_mv_pmp_cfg            O     1 const
// csrs_mv_pmp_addr               O   128
// RDY_csrs_mv_pmp_addr           O     1 const
// pipe_status_mv_pipe_isbs_empty  O     5
// RDY_pipe_status_mv_pipe_isbs_empty  O     1 const
// pipe_status_mv_wfi_detected    O     1 reg
// RDY_pipe_status_mv_wfi_detected  O     1 const
// RDY_perfmonitors_ma_icache_counters  O     1 const
// RDY_perfmonitors_ma_dcache_counters  O     1 const
// RDY_perfmonitors_ma_dtlb_counters  O     1 const
// RDY_perfmonitors_ma_itlb_counters  O     1 const
// RDY_ma_debug_interrupt         O     1 const
// mv_core_is_reset               O     1 reg
// RDY_mv_core_is_reset           O     1 const
// mv_core_debugenable            O     1 const
// RDY_mv_core_debugenable        O     1 const
// mv_stop_timer                  O     1
// RDY_mv_stop_timer              O     1 const
// mv_stop_count                  O     1
// RDY_mv_stop_count              O     1 const
// commitlog                      O   310 reg
// RDY_commitlog                  O     1 const
// sbread_mv_csr_misa             O    64
// RDY_sbread_mv_csr_misa         O     1 const
// sbread_mv_csr_mvendorid        O    32 const
// RDY_sbread_mv_csr_mvendorid    O     1 const
// sbread_mv_csr_stvec            O    64 reg
// RDY_sbread_mv_csr_stvec        O     1 const
// sbread_mv_csr_mtvec            O    64 reg
// RDY_sbread_mv_csr_mtvec        O     1 const
// sbread_mv_csr_mstatus          O    64
// RDY_sbread_mv_csr_mstatus      O     1 const
// sbread_mv_csr_marchid          O    64 const
// RDY_sbread_mv_csr_marchid      O     1 const
// sbread_mv_csr_mimpid           O    64 const
// RDY_sbread_mv_csr_mimpid       O     1 const
// sbread_mv_csr_mhartid          O    64 const
// RDY_sbread_mv_csr_mhartid      O     1 const
// sbread_mv_csr_mip              O    64
// RDY_sbread_mv_csr_mip          O     1 const
// sbread_mv_csr_sip              O    64
// RDY_sbread_mv_csr_sip          O     1 const
// sbread_mv_csr_mie              O    64
// RDY_sbread_mv_csr_mie          O     1 const
// sbread_mv_csr_sie              O    64
// RDY_sbread_mv_csr_sie          O     1 const
// sbread_mv_csr_mscratch         O    64 reg
// RDY_sbread_mv_csr_mscratch     O     1 const
// sbread_mv_csr_sscratch         O    64 reg
// RDY_sbread_mv_csr_sscratch     O     1 const
// sbread_mv_csr_sepc             O    64 reg
// RDY_sbread_mv_csr_sepc         O     1 const
// sbread_mv_csr_stval            O    64 reg
// RDY_sbread_mv_csr_stval        O     1 const
// sbread_mv_csr_scause           O    64
// RDY_sbread_mv_csr_scause       O     1 const
// sbread_mv_csr_mepc             O    64 reg
// RDY_sbread_mv_csr_mepc         O     1 const
// sbread_mv_csr_mtval            O    64 reg
// RDY_sbread_mv_csr_mtval        O     1 const
// sbread_mv_csr_mcause           O    64
// RDY_sbread_mv_csr_mcause       O     1 const
// sbread_mv_csr_mcycle           O    64
// RDY_sbread_mv_csr_mcycle       O     1 const
// sbread_mv_csr_minstret         O    64
// RDY_sbread_mv_csr_minstret     O     1 const
// sbread_mv_csr_fcsr             O    64
// RDY_sbread_mv_csr_fcsr         O     1 const
// sbread_mv_csr_time             O    64 reg
// RDY_sbread_mv_csr_time         O     1 const
// sbread_mv_csr_mideleg          O    64 reg
// RDY_sbread_mv_csr_mideleg      O     1 const
// sbread_mv_csr_medeleg          O    64 reg
// RDY_sbread_mv_csr_medeleg      O     1 const
// sbread_mv_csr_pmpcfg0          O    64
// RDY_sbread_mv_csr_pmpcfg0      O     1 const
// sbread_mv_csr_pmpaddr0         O    30
// RDY_sbread_mv_csr_pmpaddr0     O     1 const
// sbread_mv_csr_pmpaddr1         O    30
// RDY_sbread_mv_csr_pmpaddr1     O     1 const
// sbread_mv_csr_pmpaddr2         O    30
// RDY_sbread_mv_csr_pmpaddr2     O     1 const
// sbread_mv_csr_pmpaddr3         O    30
// RDY_sbread_mv_csr_pmpaddr3     O     1 const
// sbread_mv_csr_mcounteren       O    32 reg
// RDY_sbread_mv_csr_mcounteren   O     1 const
// sbread_mv_csr_scounteren       O    32 reg
// RDY_sbread_mv_csr_scounteren   O     1 const
// sbread_mv_csr_menvcfg          O    64
// RDY_sbread_mv_csr_menvcfg      O     1 const
// sbread_mv_csr_senvcfg          O    64
// RDY_sbread_mv_csr_senvcfg      O     1 const
// sbread_mv_csr_satp             O    64 reg
// RDY_sbread_mv_csr_satp         O     1 const
// sbread_mv_csr_mcountinhibit    O    32 const
// RDY_sbread_mv_csr_mcountinhibit  O     1 const
// sbread_mv_csr_fflags           O     5 reg
// RDY_sbread_mv_csr_fflags       O     1 const
// sbread_mv_csr_frm              O     3 reg
// RDY_sbread_mv_csr_frm          O     1 const
// sbread_mv_csr_customcontrol    O    64 const
// RDY_sbread_mv_csr_customcontrol  O     1 const
// sbread_mv_csr_mhpmcounter3     O    64 reg
// RDY_sbread_mv_csr_mhpmcounter3  O     1 const
// sbread_mv_csr_mhpmcounter4     O    64 reg
// RDY_sbread_mv_csr_mhpmcounter4  O     1 const
// sbread_mv_csr_mhpmcounter5     O    64 reg
// RDY_sbread_mv_csr_mhpmcounter5  O     1 const
// sbread_mv_csr_mhpmcounter6     O    64 reg
// RDY_sbread_mv_csr_mhpmcounter6  O     1 const
// sbread_mv_csr_mhpmevent3       O    64 reg
// RDY_sbread_mv_csr_mhpmevent3   O     1 const
// sbread_mv_csr_mhpmevent4       O    64 reg
// RDY_sbread_mv_csr_mhpmevent4   O     1 const
// sbread_mv_csr_mhpmevent5       O    64 reg
// RDY_sbread_mv_csr_mhpmevent5   O     1 const
// sbread_mv_csr_mhpmevent6       O    64 reg
// RDY_sbread_mv_csr_mhpmevent6   O     1 const
// sbread_mv_csr_dcsr             O    64
// RDY_sbread_mv_csr_dcsr         O     1 const
// sbread_mv_csr_dpc              O    64 reg
// RDY_sbread_mv_csr_dpc          O     1 const
// sbread_mv_csr_dscratch0        O    64 reg
// RDY_sbread_mv_csr_dscratch0    O     1 const
// sbread_mv_csr_dscratch1        O    64 reg
// RDY_sbread_mv_csr_dscratch1    O     1 const
// resetpc                        I    64
// CLK                            I     1 clock
// RST_N                          I     1 reset
// s1_icache_inst_response_put    I    42
// s3_cache_ma_cache_is_available_avail  I     1
// s4_cache_memory_response_put   I   132
// interrupts_ma_clint_msip_intrpt  I     1
// interrupts_ma_clint_mtip_intrpt  I     1
// interrupts_ma_clint_mtime_mtime  I    64 reg
// interrupts_ma_plic_meip_intrpt  I     1
// interrupts_ma_plic_seip_intrpt  I     1
// s5_cache_ma_io_response_r      I   133
// perfmonitors_ma_icache_counters_i  I     5
// perfmonitors_ma_dcache_counters_i  I    13
// perfmonitors_ma_dtlb_counters_i  I     1
// perfmonitors_ma_itlb_counters_i  I     1
// ma_debug_interrupt__int        I     1
// ma_debugger_available_avail    I     1
// EN_s1_icache_inst_response_put  I     1
// EN_s4_cache_memory_response_put  I     1
// EN_interrupts_ma_clint_msip    I     1
// EN_interrupts_ma_clint_mtip    I     1
// EN_interrupts_ma_clint_mtime   I     1
// EN_interrupts_ma_plic_meip     I     1
// EN_interrupts_ma_plic_seip     I     1
// EN_s5_cache_ma_io_response     I     1
// EN_perfmonitors_ma_icache_counters  I     1
// EN_perfmonitors_ma_dcache_counters  I     1
// EN_perfmonitors_ma_dtlb_counters  I     1
// EN_perfmonitors_ma_itlb_counters  I     1
// EN_ma_debug_interrupt          I     1
// EN_s0_icache_to_icache_get     I     1
// EN_s3_cache_mv_memory_request_get  I     1 unused
//
// Combinational paths from inputs to outputs:
//   s3_cache_ma_cache_is_available_avail -> RDY_s3_cache_mv_memory_request_get
//   s3_cache_ma_cache_is_available_avail -> s3_cache_mv_memory_request_get
//   (interrupts_ma_clint_msip_intrpt,
//    interrupts_ma_clint_mtip_intrpt,
//    interrupts_ma_plic_meip_intrpt,
//    interrupts_ma_plic_seip_intrpt,
//    ma_debug_interrupt__int,
//    EN_interrupts_ma_clint_msip,
//    EN_interrupts_ma_clint_mtip,
//    EN_interrupts_ma_plic_meip,
//    EN_interrupts_ma_plic_seip,
//    EN_ma_debug_interrupt) -> sbread_mv_csr_mip
//   (interrupts_ma_plic_seip_intrpt,
//    EN_interrupts_ma_plic_seip) -> sbread_mv_csr_sip
//   resetpc -> RDY_s0_icache_to_icache_get
//   resetpc -> s0_icache_to_icache_get
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkriscv(resetpc,
	       CLK,
	       RST_N,

	       EN_s0_icache_to_icache_get,
	       s0_icache_to_icache_get,
	       RDY_s0_icache_to_icache_get,

	       s1_icache_inst_response_put,
	       EN_s1_icache_inst_response_put,
	       RDY_s1_icache_inst_response_put,

	       EN_s3_cache_mv_memory_request_get,
	       s3_cache_mv_memory_request_get,
	       RDY_s3_cache_mv_memory_request_get,

	       s3_cache_ma_cache_is_available_avail,

	       s4_cache_memory_response_put,
	       EN_s4_cache_memory_response_put,
	       RDY_s4_cache_memory_response_put,

	       interrupts_ma_clint_msip_intrpt,
	       EN_interrupts_ma_clint_msip,
	       RDY_interrupts_ma_clint_msip,

	       interrupts_ma_clint_mtip_intrpt,
	       EN_interrupts_ma_clint_mtip,
	       RDY_interrupts_ma_clint_mtip,

	       interrupts_ma_clint_mtime_mtime,
	       EN_interrupts_ma_clint_mtime,
	       RDY_interrupts_ma_clint_mtime,

	       interrupts_ma_plic_meip_intrpt,
	       EN_interrupts_ma_plic_meip,
	       RDY_interrupts_ma_plic_meip,

	       interrupts_ma_plic_seip_intrpt,
	       EN_interrupts_ma_plic_seip,
	       RDY_interrupts_ma_plic_seip,

	       s5_cache_mv_initiate_store_fst,
	       RDY_s5_cache_mv_initiate_store_fst,

	       s5_cache_mv_initiate_store_snd,
	       RDY_s5_cache_mv_initiate_store_snd,

	       s5_cache_mv_initiate_ioop,
	       RDY_s5_cache_mv_initiate_ioop,

	       s5_cache_ma_io_response_r,
	       EN_s5_cache_ma_io_response,
	       RDY_s5_cache_ma_io_response,

	       csrs_mv_csr_mstatus,
	       RDY_csrs_mv_csr_mstatus,

	       csrs_mv_cacheenable,
	       RDY_csrs_mv_cacheenable,

	       csrs_mv_curr_priv,
	       RDY_csrs_mv_curr_priv,

	       csrs_mv_csr_satp,
	       RDY_csrs_mv_csr_satp,

	       csrs_mv_pmp_cfg,
	       RDY_csrs_mv_pmp_cfg,

	       csrs_mv_pmp_addr,
	       RDY_csrs_mv_pmp_addr,

	       pipe_status_mv_pipe_isbs_empty,
	       RDY_pipe_status_mv_pipe_isbs_empty,

	       pipe_status_mv_wfi_detected,
	       RDY_pipe_status_mv_wfi_detected,

	       perfmonitors_ma_icache_counters_i,
	       EN_perfmonitors_ma_icache_counters,
	       RDY_perfmonitors_ma_icache_counters,

	       perfmonitors_ma_dcache_counters_i,
	       EN_perfmonitors_ma_dcache_counters,
	       RDY_perfmonitors_ma_dcache_counters,

	       perfmonitors_ma_dtlb_counters_i,
	       EN_perfmonitors_ma_dtlb_counters,
	       RDY_perfmonitors_ma_dtlb_counters,

	       perfmonitors_ma_itlb_counters_i,
	       EN_perfmonitors_ma_itlb_counters,
	       RDY_perfmonitors_ma_itlb_counters,

	       ma_debug_interrupt__int,
	       EN_ma_debug_interrupt,
	       RDY_ma_debug_interrupt,

	       mv_core_is_reset,
	       RDY_mv_core_is_reset,

	       mv_core_debugenable,
	       RDY_mv_core_debugenable,

	       ma_debugger_available_avail,

	       mv_stop_timer,
	       RDY_mv_stop_timer,

	       mv_stop_count,
	       RDY_mv_stop_count,

	       commitlog,
	       RDY_commitlog,

	       sbread_mv_csr_misa,
	       RDY_sbread_mv_csr_misa,

	       sbread_mv_csr_mvendorid,
	       RDY_sbread_mv_csr_mvendorid,

	       sbread_mv_csr_stvec,
	       RDY_sbread_mv_csr_stvec,

	       sbread_mv_csr_mtvec,
	       RDY_sbread_mv_csr_mtvec,

	       sbread_mv_csr_mstatus,
	       RDY_sbread_mv_csr_mstatus,

	       sbread_mv_csr_marchid,
	       RDY_sbread_mv_csr_marchid,

	       sbread_mv_csr_mimpid,
	       RDY_sbread_mv_csr_mimpid,

	       sbread_mv_csr_mhartid,
	       RDY_sbread_mv_csr_mhartid,

	       sbread_mv_csr_mip,
	       RDY_sbread_mv_csr_mip,

	       sbread_mv_csr_sip,
	       RDY_sbread_mv_csr_sip,

	       sbread_mv_csr_mie,
	       RDY_sbread_mv_csr_mie,

	       sbread_mv_csr_sie,
	       RDY_sbread_mv_csr_sie,

	       sbread_mv_csr_mscratch,
	       RDY_sbread_mv_csr_mscratch,

	       sbread_mv_csr_sscratch,
	       RDY_sbread_mv_csr_sscratch,

	       sbread_mv_csr_sepc,
	       RDY_sbread_mv_csr_sepc,

	       sbread_mv_csr_stval,
	       RDY_sbread_mv_csr_stval,

	       sbread_mv_csr_scause,
	       RDY_sbread_mv_csr_scause,

	       sbread_mv_csr_mepc,
	       RDY_sbread_mv_csr_mepc,

	       sbread_mv_csr_mtval,
	       RDY_sbread_mv_csr_mtval,

	       sbread_mv_csr_mcause,
	       RDY_sbread_mv_csr_mcause,

	       sbread_mv_csr_mcycle,
	       RDY_sbread_mv_csr_mcycle,

	       sbread_mv_csr_minstret,
	       RDY_sbread_mv_csr_minstret,

	       sbread_mv_csr_fcsr,
	       RDY_sbread_mv_csr_fcsr,

	       sbread_mv_csr_time,
	       RDY_sbread_mv_csr_time,

	       sbread_mv_csr_mideleg,
	       RDY_sbread_mv_csr_mideleg,

	       sbread_mv_csr_medeleg,
	       RDY_sbread_mv_csr_medeleg,

	       sbread_mv_csr_pmpcfg0,
	       RDY_sbread_mv_csr_pmpcfg0,

	       sbread_mv_csr_pmpaddr0,
	       RDY_sbread_mv_csr_pmpaddr0,

	       sbread_mv_csr_pmpaddr1,
	       RDY_sbread_mv_csr_pmpaddr1,

	       sbread_mv_csr_pmpaddr2,
	       RDY_sbread_mv_csr_pmpaddr2,

	       sbread_mv_csr_pmpaddr3,
	       RDY_sbread_mv_csr_pmpaddr3,

	       sbread_mv_csr_mcounteren,
	       RDY_sbread_mv_csr_mcounteren,

	       sbread_mv_csr_scounteren,
	       RDY_sbread_mv_csr_scounteren,

	       sbread_mv_csr_menvcfg,
	       RDY_sbread_mv_csr_menvcfg,

	       sbread_mv_csr_senvcfg,
	       RDY_sbread_mv_csr_senvcfg,

	       sbread_mv_csr_satp,
	       RDY_sbread_mv_csr_satp,

	       sbread_mv_csr_mcountinhibit,
	       RDY_sbread_mv_csr_mcountinhibit,

	       sbread_mv_csr_fflags,
	       RDY_sbread_mv_csr_fflags,

	       sbread_mv_csr_frm,
	       RDY_sbread_mv_csr_frm,

	       sbread_mv_csr_customcontrol,
	       RDY_sbread_mv_csr_customcontrol,

	       sbread_mv_csr_mhpmcounter3,
	       RDY_sbread_mv_csr_mhpmcounter3,

	       sbread_mv_csr_mhpmcounter4,
	       RDY_sbread_mv_csr_mhpmcounter4,

	       sbread_mv_csr_mhpmcounter5,
	       RDY_sbread_mv_csr_mhpmcounter5,

	       sbread_mv_csr_mhpmcounter6,
	       RDY_sbread_mv_csr_mhpmcounter6,

	       sbread_mv_csr_mhpmevent3,
	       RDY_sbread_mv_csr_mhpmevent3,

	       sbread_mv_csr_mhpmevent4,
	       RDY_sbread_mv_csr_mhpmevent4,

	       sbread_mv_csr_mhpmevent5,
	       RDY_sbread_mv_csr_mhpmevent5,

	       sbread_mv_csr_mhpmevent6,
	       RDY_sbread_mv_csr_mhpmevent6,

	       sbread_mv_csr_dcsr,
	       RDY_sbread_mv_csr_dcsr,

	       sbread_mv_csr_dpc,
	       RDY_sbread_mv_csr_dpc,

	       sbread_mv_csr_dscratch0,
	       RDY_sbread_mv_csr_dscratch0,

	       sbread_mv_csr_dscratch1,
	       RDY_sbread_mv_csr_dscratch1);
  parameter [63 : 0] hartid = 64'b0;
  input  [63 : 0] resetpc;
  input  CLK;
  input  RST_N;

  // actionvalue method s0_icache_to_icache_get
  input  EN_s0_icache_to_icache_get;
  output [67 : 0] s0_icache_to_icache_get;
  output RDY_s0_icache_to_icache_get;

  // action method s1_icache_inst_response_put
  input  [41 : 0] s1_icache_inst_response_put;
  input  EN_s1_icache_inst_response_put;
  output RDY_s1_icache_inst_response_put;

  // actionvalue method s3_cache_mv_memory_request_get
  input  EN_s3_cache_mv_memory_request_get;
  output [144 : 0] s3_cache_mv_memory_request_get;
  output RDY_s3_cache_mv_memory_request_get;

  // action method s3_cache_ma_cache_is_available
  input  s3_cache_ma_cache_is_available_avail;

  // action method s4_cache_memory_response_put
  input  [131 : 0] s4_cache_memory_response_put;
  input  EN_s4_cache_memory_response_put;
  output RDY_s4_cache_memory_response_put;

  // action method interrupts_ma_clint_msip
  input  interrupts_ma_clint_msip_intrpt;
  input  EN_interrupts_ma_clint_msip;
  output RDY_interrupts_ma_clint_msip;

  // action method interrupts_ma_clint_mtip
  input  interrupts_ma_clint_mtip_intrpt;
  input  EN_interrupts_ma_clint_mtip;
  output RDY_interrupts_ma_clint_mtip;

  // action method interrupts_ma_clint_mtime
  input  [63 : 0] interrupts_ma_clint_mtime_mtime;
  input  EN_interrupts_ma_clint_mtime;
  output RDY_interrupts_ma_clint_mtime;

  // action method interrupts_ma_plic_meip
  input  interrupts_ma_plic_meip_intrpt;
  input  EN_interrupts_ma_plic_meip;
  output RDY_interrupts_ma_plic_meip;

  // action method interrupts_ma_plic_seip
  input  interrupts_ma_plic_seip_intrpt;
  input  EN_interrupts_ma_plic_seip;
  output RDY_interrupts_ma_plic_seip;

  // value method s5_cache_mv_initiate_store_fst
  output s5_cache_mv_initiate_store_fst;
  output RDY_s5_cache_mv_initiate_store_fst;

  // value method s5_cache_mv_initiate_store_snd
  output s5_cache_mv_initiate_store_snd;
  output RDY_s5_cache_mv_initiate_store_snd;

  // value method s5_cache_mv_initiate_ioop
  output s5_cache_mv_initiate_ioop;
  output RDY_s5_cache_mv_initiate_ioop;

  // action method s5_cache_ma_io_response
  input  [132 : 0] s5_cache_ma_io_response_r;
  input  EN_s5_cache_ma_io_response;
  output RDY_s5_cache_ma_io_response;

  // value method csrs_mv_csr_mstatus
  output [63 : 0] csrs_mv_csr_mstatus;
  output RDY_csrs_mv_csr_mstatus;

  // value method csrs_mv_cacheenable
  output [3 : 0] csrs_mv_cacheenable;
  output RDY_csrs_mv_cacheenable;

  // value method csrs_mv_curr_priv
  output [1 : 0] csrs_mv_curr_priv;
  output RDY_csrs_mv_curr_priv;

  // value method csrs_mv_csr_satp
  output [63 : 0] csrs_mv_csr_satp;
  output RDY_csrs_mv_csr_satp;

  // value method csrs_mv_pmp_cfg
  output [31 : 0] csrs_mv_pmp_cfg;
  output RDY_csrs_mv_pmp_cfg;

  // value method csrs_mv_pmp_addr
  output [127 : 0] csrs_mv_pmp_addr;
  output RDY_csrs_mv_pmp_addr;

  // value method pipe_status_mv_pipe_isbs_empty
  output [4 : 0] pipe_status_mv_pipe_isbs_empty;
  output RDY_pipe_status_mv_pipe_isbs_empty;

  // value method pipe_status_mv_wfi_detected
  output pipe_status_mv_wfi_detected;
  output RDY_pipe_status_mv_wfi_detected;

  // action method perfmonitors_ma_icache_counters
  input  [4 : 0] perfmonitors_ma_icache_counters_i;
  input  EN_perfmonitors_ma_icache_counters;
  output RDY_perfmonitors_ma_icache_counters;

  // action method perfmonitors_ma_dcache_counters
  input  [12 : 0] perfmonitors_ma_dcache_counters_i;
  input  EN_perfmonitors_ma_dcache_counters;
  output RDY_perfmonitors_ma_dcache_counters;

  // action method perfmonitors_ma_dtlb_counters
  input  perfmonitors_ma_dtlb_counters_i;
  input  EN_perfmonitors_ma_dtlb_counters;
  output RDY_perfmonitors_ma_dtlb_counters;

  // action method perfmonitors_ma_itlb_counters
  input  perfmonitors_ma_itlb_counters_i;
  input  EN_perfmonitors_ma_itlb_counters;
  output RDY_perfmonitors_ma_itlb_counters;

  // action method ma_debug_interrupt
  input  ma_debug_interrupt__int;
  input  EN_ma_debug_interrupt;
  output RDY_ma_debug_interrupt;

  // value method mv_core_is_reset
  output mv_core_is_reset;
  output RDY_mv_core_is_reset;

  // value method mv_core_debugenable
  output mv_core_debugenable;
  output RDY_mv_core_debugenable;

  // action method ma_debugger_available
  input  ma_debugger_available_avail;

  // value method mv_stop_timer
  output mv_stop_timer;
  output RDY_mv_stop_timer;

  // value method mv_stop_count
  output mv_stop_count;
  output RDY_mv_stop_count;

  // value method commitlog
  output [309 : 0] commitlog;
  output RDY_commitlog;

  // value method sbread_mv_csr_misa
  output [63 : 0] sbread_mv_csr_misa;
  output RDY_sbread_mv_csr_misa;

  // value method sbread_mv_csr_mvendorid
  output [31 : 0] sbread_mv_csr_mvendorid;
  output RDY_sbread_mv_csr_mvendorid;

  // value method sbread_mv_csr_stvec
  output [63 : 0] sbread_mv_csr_stvec;
  output RDY_sbread_mv_csr_stvec;

  // value method sbread_mv_csr_mtvec
  output [63 : 0] sbread_mv_csr_mtvec;
  output RDY_sbread_mv_csr_mtvec;

  // value method sbread_mv_csr_mstatus
  output [63 : 0] sbread_mv_csr_mstatus;
  output RDY_sbread_mv_csr_mstatus;

  // value method sbread_mv_csr_marchid
  output [63 : 0] sbread_mv_csr_marchid;
  output RDY_sbread_mv_csr_marchid;

  // value method sbread_mv_csr_mimpid
  output [63 : 0] sbread_mv_csr_mimpid;
  output RDY_sbread_mv_csr_mimpid;

  // value method sbread_mv_csr_mhartid
  output [63 : 0] sbread_mv_csr_mhartid;
  output RDY_sbread_mv_csr_mhartid;

  // value method sbread_mv_csr_mip
  output [63 : 0] sbread_mv_csr_mip;
  output RDY_sbread_mv_csr_mip;

  // value method sbread_mv_csr_sip
  output [63 : 0] sbread_mv_csr_sip;
  output RDY_sbread_mv_csr_sip;

  // value method sbread_mv_csr_mie
  output [63 : 0] sbread_mv_csr_mie;
  output RDY_sbread_mv_csr_mie;

  // value method sbread_mv_csr_sie
  output [63 : 0] sbread_mv_csr_sie;
  output RDY_sbread_mv_csr_sie;

  // value method sbread_mv_csr_mscratch
  output [63 : 0] sbread_mv_csr_mscratch;
  output RDY_sbread_mv_csr_mscratch;

  // value method sbread_mv_csr_sscratch
  output [63 : 0] sbread_mv_csr_sscratch;
  output RDY_sbread_mv_csr_sscratch;

  // value method sbread_mv_csr_sepc
  output [63 : 0] sbread_mv_csr_sepc;
  output RDY_sbread_mv_csr_sepc;

  // value method sbread_mv_csr_stval
  output [63 : 0] sbread_mv_csr_stval;
  output RDY_sbread_mv_csr_stval;

  // value method sbread_mv_csr_scause
  output [63 : 0] sbread_mv_csr_scause;
  output RDY_sbread_mv_csr_scause;

  // value method sbread_mv_csr_mepc
  output [63 : 0] sbread_mv_csr_mepc;
  output RDY_sbread_mv_csr_mepc;

  // value method sbread_mv_csr_mtval
  output [63 : 0] sbread_mv_csr_mtval;
  output RDY_sbread_mv_csr_mtval;

  // value method sbread_mv_csr_mcause
  output [63 : 0] sbread_mv_csr_mcause;
  output RDY_sbread_mv_csr_mcause;

  // value method sbread_mv_csr_mcycle
  output [63 : 0] sbread_mv_csr_mcycle;
  output RDY_sbread_mv_csr_mcycle;

  // value method sbread_mv_csr_minstret
  output [63 : 0] sbread_mv_csr_minstret;
  output RDY_sbread_mv_csr_minstret;

  // value method sbread_mv_csr_fcsr
  output [63 : 0] sbread_mv_csr_fcsr;
  output RDY_sbread_mv_csr_fcsr;

  // value method sbread_mv_csr_time
  output [63 : 0] sbread_mv_csr_time;
  output RDY_sbread_mv_csr_time;

  // value method sbread_mv_csr_mideleg
  output [63 : 0] sbread_mv_csr_mideleg;
  output RDY_sbread_mv_csr_mideleg;

  // value method sbread_mv_csr_medeleg
  output [63 : 0] sbread_mv_csr_medeleg;
  output RDY_sbread_mv_csr_medeleg;

  // value method sbread_mv_csr_pmpcfg0
  output [63 : 0] sbread_mv_csr_pmpcfg0;
  output RDY_sbread_mv_csr_pmpcfg0;

  // value method sbread_mv_csr_pmpaddr0
  output [29 : 0] sbread_mv_csr_pmpaddr0;
  output RDY_sbread_mv_csr_pmpaddr0;

  // value method sbread_mv_csr_pmpaddr1
  output [29 : 0] sbread_mv_csr_pmpaddr1;
  output RDY_sbread_mv_csr_pmpaddr1;

  // value method sbread_mv_csr_pmpaddr2
  output [29 : 0] sbread_mv_csr_pmpaddr2;
  output RDY_sbread_mv_csr_pmpaddr2;

  // value method sbread_mv_csr_pmpaddr3
  output [29 : 0] sbread_mv_csr_pmpaddr3;
  output RDY_sbread_mv_csr_pmpaddr3;

  // value method sbread_mv_csr_mcounteren
  output [31 : 0] sbread_mv_csr_mcounteren;
  output RDY_sbread_mv_csr_mcounteren;

  // value method sbread_mv_csr_scounteren
  output [31 : 0] sbread_mv_csr_scounteren;
  output RDY_sbread_mv_csr_scounteren;

  // value method sbread_mv_csr_menvcfg
  output [63 : 0] sbread_mv_csr_menvcfg;
  output RDY_sbread_mv_csr_menvcfg;

  // value method sbread_mv_csr_senvcfg
  output [63 : 0] sbread_mv_csr_senvcfg;
  output RDY_sbread_mv_csr_senvcfg;

  // value method sbread_mv_csr_satp
  output [63 : 0] sbread_mv_csr_satp;
  output RDY_sbread_mv_csr_satp;

  // value method sbread_mv_csr_mcountinhibit
  output [31 : 0] sbread_mv_csr_mcountinhibit;
  output RDY_sbread_mv_csr_mcountinhibit;

  // value method sbread_mv_csr_fflags
  output [4 : 0] sbread_mv_csr_fflags;
  output RDY_sbread_mv_csr_fflags;

  // value method sbread_mv_csr_frm
  output [2 : 0] sbread_mv_csr_frm;
  output RDY_sbread_mv_csr_frm;

  // value method sbread_mv_csr_customcontrol
  output [63 : 0] sbread_mv_csr_customcontrol;
  output RDY_sbread_mv_csr_customcontrol;

  // value method sbread_mv_csr_mhpmcounter3
  output [63 : 0] sbread_mv_csr_mhpmcounter3;
  output RDY_sbread_mv_csr_mhpmcounter3;

  // value method sbread_mv_csr_mhpmcounter4
  output [63 : 0] sbread_mv_csr_mhpmcounter4;
  output RDY_sbread_mv_csr_mhpmcounter4;

  // value method sbread_mv_csr_mhpmcounter5
  output [63 : 0] sbread_mv_csr_mhpmcounter5;
  output RDY_sbread_mv_csr_mhpmcounter5;

  // value method sbread_mv_csr_mhpmcounter6
  output [63 : 0] sbread_mv_csr_mhpmcounter6;
  output RDY_sbread_mv_csr_mhpmcounter6;

  // value method sbread_mv_csr_mhpmevent3
  output [63 : 0] sbread_mv_csr_mhpmevent3;
  output RDY_sbread_mv_csr_mhpmevent3;

  // value method sbread_mv_csr_mhpmevent4
  output [63 : 0] sbread_mv_csr_mhpmevent4;
  output RDY_sbread_mv_csr_mhpmevent4;

  // value method sbread_mv_csr_mhpmevent5
  output [63 : 0] sbread_mv_csr_mhpmevent5;
  output RDY_sbread_mv_csr_mhpmevent5;

  // value method sbread_mv_csr_mhpmevent6
  output [63 : 0] sbread_mv_csr_mhpmevent6;
  output RDY_sbread_mv_csr_mhpmevent6;

  // value method sbread_mv_csr_dcsr
  output [63 : 0] sbread_mv_csr_dcsr;
  output RDY_sbread_mv_csr_dcsr;

  // value method sbread_mv_csr_dpc
  output [63 : 0] sbread_mv_csr_dpc;
  output RDY_sbread_mv_csr_dpc;

  // value method sbread_mv_csr_dscratch0
  output [63 : 0] sbread_mv_csr_dscratch0;
  output RDY_sbread_mv_csr_dscratch0;

  // value method sbread_mv_csr_dscratch1
  output [63 : 0] sbread_mv_csr_dscratch1;
  output RDY_sbread_mv_csr_dscratch1;

  // signals for module outputs
  wire [309 : 0] commitlog;
  wire [144 : 0] s3_cache_mv_memory_request_get;
  wire [127 : 0] csrs_mv_pmp_addr;
  wire [67 : 0] s0_icache_to_icache_get;
  wire [63 : 0] csrs_mv_csr_mstatus,
		csrs_mv_csr_satp,
		sbread_mv_csr_customcontrol,
		sbread_mv_csr_dcsr,
		sbread_mv_csr_dpc,
		sbread_mv_csr_dscratch0,
		sbread_mv_csr_dscratch1,
		sbread_mv_csr_fcsr,
		sbread_mv_csr_marchid,
		sbread_mv_csr_mcause,
		sbread_mv_csr_mcycle,
		sbread_mv_csr_medeleg,
		sbread_mv_csr_menvcfg,
		sbread_mv_csr_mepc,
		sbread_mv_csr_mhartid,
		sbread_mv_csr_mhpmcounter3,
		sbread_mv_csr_mhpmcounter4,
		sbread_mv_csr_mhpmcounter5,
		sbread_mv_csr_mhpmcounter6,
		sbread_mv_csr_mhpmevent3,
		sbread_mv_csr_mhpmevent4,
		sbread_mv_csr_mhpmevent5,
		sbread_mv_csr_mhpmevent6,
		sbread_mv_csr_mideleg,
		sbread_mv_csr_mie,
		sbread_mv_csr_mimpid,
		sbread_mv_csr_minstret,
		sbread_mv_csr_mip,
		sbread_mv_csr_misa,
		sbread_mv_csr_mscratch,
		sbread_mv_csr_mstatus,
		sbread_mv_csr_mtval,
		sbread_mv_csr_mtvec,
		sbread_mv_csr_pmpcfg0,
		sbread_mv_csr_satp,
		sbread_mv_csr_scause,
		sbread_mv_csr_senvcfg,
		sbread_mv_csr_sepc,
		sbread_mv_csr_sie,
		sbread_mv_csr_sip,
		sbread_mv_csr_sscratch,
		sbread_mv_csr_stval,
		sbread_mv_csr_stvec,
		sbread_mv_csr_time;
  wire [31 : 0] csrs_mv_pmp_cfg,
		sbread_mv_csr_mcounteren,
		sbread_mv_csr_mcountinhibit,
		sbread_mv_csr_mvendorid,
		sbread_mv_csr_scounteren;
  wire [29 : 0] sbread_mv_csr_pmpaddr0,
		sbread_mv_csr_pmpaddr1,
		sbread_mv_csr_pmpaddr2,
		sbread_mv_csr_pmpaddr3;
  wire [4 : 0] pipe_status_mv_pipe_isbs_empty, sbread_mv_csr_fflags;
  wire [3 : 0] csrs_mv_cacheenable;
  wire [2 : 0] sbread_mv_csr_frm;
  wire [1 : 0] csrs_mv_curr_priv;
  wire RDY_commitlog,
       RDY_csrs_mv_cacheenable,
       RDY_csrs_mv_csr_mstatus,
       RDY_csrs_mv_csr_satp,
       RDY_csrs_mv_curr_priv,
       RDY_csrs_mv_pmp_addr,
       RDY_csrs_mv_pmp_cfg,
       RDY_interrupts_ma_clint_msip,
       RDY_interrupts_ma_clint_mtime,
       RDY_interrupts_ma_clint_mtip,
       RDY_interrupts_ma_plic_meip,
       RDY_interrupts_ma_plic_seip,
       RDY_ma_debug_interrupt,
       RDY_mv_core_debugenable,
       RDY_mv_core_is_reset,
       RDY_mv_stop_count,
       RDY_mv_stop_timer,
       RDY_perfmonitors_ma_dcache_counters,
       RDY_perfmonitors_ma_dtlb_counters,
       RDY_perfmonitors_ma_icache_counters,
       RDY_perfmonitors_ma_itlb_counters,
       RDY_pipe_status_mv_pipe_isbs_empty,
       RDY_pipe_status_mv_wfi_detected,
       RDY_s0_icache_to_icache_get,
       RDY_s1_icache_inst_response_put,
       RDY_s3_cache_mv_memory_request_get,
       RDY_s4_cache_memory_response_put,
       RDY_s5_cache_ma_io_response,
       RDY_s5_cache_mv_initiate_ioop,
       RDY_s5_cache_mv_initiate_store_fst,
       RDY_s5_cache_mv_initiate_store_snd,
       RDY_sbread_mv_csr_customcontrol,
       RDY_sbread_mv_csr_dcsr,
       RDY_sbread_mv_csr_dpc,
       RDY_sbread_mv_csr_dscratch0,
       RDY_sbread_mv_csr_dscratch1,
       RDY_sbread_mv_csr_fcsr,
       RDY_sbread_mv_csr_fflags,
       RDY_sbread_mv_csr_frm,
       RDY_sbread_mv_csr_marchid,
       RDY_sbread_mv_csr_mcause,
       RDY_sbread_mv_csr_mcounteren,
       RDY_sbread_mv_csr_mcountinhibit,
       RDY_sbread_mv_csr_mcycle,
       RDY_sbread_mv_csr_medeleg,
       RDY_sbread_mv_csr_menvcfg,
       RDY_sbread_mv_csr_mepc,
       RDY_sbread_mv_csr_mhartid,
       RDY_sbread_mv_csr_mhpmcounter3,
       RDY_sbread_mv_csr_mhpmcounter4,
       RDY_sbread_mv_csr_mhpmcounter5,
       RDY_sbread_mv_csr_mhpmcounter6,
       RDY_sbread_mv_csr_mhpmevent3,
       RDY_sbread_mv_csr_mhpmevent4,
       RDY_sbread_mv_csr_mhpmevent5,
       RDY_sbread_mv_csr_mhpmevent6,
       RDY_sbread_mv_csr_mideleg,
       RDY_sbread_mv_csr_mie,
       RDY_sbread_mv_csr_mimpid,
       RDY_sbread_mv_csr_minstret,
       RDY_sbread_mv_csr_mip,
       RDY_sbread_mv_csr_misa,
       RDY_sbread_mv_csr_mscratch,
       RDY_sbread_mv_csr_mstatus,
       RDY_sbread_mv_csr_mtval,
       RDY_sbread_mv_csr_mtvec,
       RDY_sbread_mv_csr_mvendorid,
       RDY_sbread_mv_csr_pmpaddr0,
       RDY_sbread_mv_csr_pmpaddr1,
       RDY_sbread_mv_csr_pmpaddr2,
       RDY_sbread_mv_csr_pmpaddr3,
       RDY_sbread_mv_csr_pmpcfg0,
       RDY_sbread_mv_csr_satp,
       RDY_sbread_mv_csr_scause,
       RDY_sbread_mv_csr_scounteren,
       RDY_sbread_mv_csr_senvcfg,
       RDY_sbread_mv_csr_sepc,
       RDY_sbread_mv_csr_sie,
       RDY_sbread_mv_csr_sip,
       RDY_sbread_mv_csr_sscratch,
       RDY_sbread_mv_csr_stval,
       RDY_sbread_mv_csr_stvec,
       RDY_sbread_mv_csr_time,
       mv_core_debugenable,
       mv_core_is_reset,
       mv_stop_count,
       mv_stop_timer,
       pipe_status_mv_wfi_detected,
       s5_cache_mv_initiate_ioop,
       s5_cache_mv_initiate_store_fst,
       s5_cache_mv_initiate_store_snd;

  // inlined wires
  wire [75 : 0] wr_bypass_wget, wr_bypass_1_wget;

  // register rg_reset_cycle
  reg [9 : 0] rg_reset_cycle;
  wire [9 : 0] rg_reset_cycle_D_IN;
  wire rg_reset_cycle_EN;

  // register rg_reset_done
  reg rg_reset_done;
  wire rg_reset_done_D_IN, rg_reset_done_EN;

  // register rg_reset_event
  reg rg_reset_event;
  wire rg_reset_event_D_IN, rg_reset_event_EN;

  // register wr_total_count
  reg [30 : 0] wr_total_count;
  wire [30 : 0] wr_total_count_D_IN;
  wire wr_total_count_EN;

  // ports of submodule fbox
  wire [211 : 0] fbox__start_m;
  wire [69 : 0] fbox_tx_output_enq_data;
  wire fbox_EN__start,
       fbox_EN_flush,
       fbox_RDY__start,
       fbox_fpu_ready,
       fbox_tx_output_enq_ena,
       fbox_tx_output_enq_rdy_b,
       fbox_tx_output_notFull_b;

  // ports of submodule ff_baseout
  wire [79 : 0] ff_baseout_D_IN, ff_baseout_D_OUT;
  wire ff_baseout_CLR,
       ff_baseout_DEQ,
       ff_baseout_EMPTY_N,
       ff_baseout_ENQ,
       ff_baseout_FULL_N;

  // ports of submodule ff_baseout_1
  wire [79 : 0] ff_baseout_1_D_IN, ff_baseout_1_D_OUT;
  wire ff_baseout_1_CLR,
       ff_baseout_1_DEQ,
       ff_baseout_1_EMPTY_N,
       ff_baseout_1_ENQ,
       ff_baseout_1_FULL_N;

  // ports of submodule ff_commitlog
  wire [308 : 0] ff_commitlog_D_IN, ff_commitlog_D_OUT;
  wire ff_commitlog_CLR,
       ff_commitlog_DEQ,
       ff_commitlog_EMPTY_N,
       ff_commitlog_ENQ,
       ff_commitlog_FULL_N;

  // ports of submodule ff_commitlog_1
  wire [308 : 0] ff_commitlog_1_D_IN, ff_commitlog_1_D_OUT;
  wire ff_commitlog_1_CLR,
       ff_commitlog_1_DEQ,
       ff_commitlog_1_EMPTY_N,
       ff_commitlog_1_ENQ,
       ff_commitlog_1_FULL_N;

  // ports of submodule ff_commitlog_2
  wire [308 : 0] ff_commitlog_2_D_IN, ff_commitlog_2_D_OUT;
  wire ff_commitlog_2_CLR,
       ff_commitlog_2_DEQ,
       ff_commitlog_2_EMPTY_N,
       ff_commitlog_2_ENQ,
       ff_commitlog_2_FULL_N;

  // ports of submodule ff_fbox_out_beforeDeq
  wire ff_fbox_out_beforeDeq_D_IN,
       ff_fbox_out_beforeDeq_EN,
       ff_fbox_out_beforeDeq_Q_OUT;

  // ports of submodule ff_fbox_out_beforeEnq
  wire ff_fbox_out_beforeEnq_D_IN,
       ff_fbox_out_beforeEnq_EN,
       ff_fbox_out_beforeEnq_Q_OUT;

  // ports of submodule ff_fbox_out_ff
  wire [69 : 0] ff_fbox_out_ff_D_IN, ff_fbox_out_ff_D_OUT;
  wire ff_fbox_out_ff_CLR,
       ff_fbox_out_ff_DEQ,
       ff_fbox_out_ff_EMPTY_N,
       ff_fbox_out_ff_ENQ,
       ff_fbox_out_ff_FULL_N;

  // ports of submodule ff_fuid
  wire [76 : 0] ff_fuid_D_IN, ff_fuid_D_OUT;
  wire ff_fuid_CLR, ff_fuid_DEQ, ff_fuid_EMPTY_N, ff_fuid_ENQ, ff_fuid_FULL_N;

  // ports of submodule ff_fuid_1
  wire [77 : 0] ff_fuid_1_D_IN, ff_fuid_1_D_OUT;
  wire ff_fuid_1_CLR,
       ff_fuid_1_DEQ,
       ff_fuid_1_EMPTY_N,
       ff_fuid_1_ENQ,
       ff_fuid_1_FULL_N;

  // ports of submodule ff_mbox_out_beforeDeq
  wire ff_mbox_out_beforeDeq_D_IN,
       ff_mbox_out_beforeDeq_EN,
       ff_mbox_out_beforeDeq_Q_OUT;

  // ports of submodule ff_mbox_out_beforeEnq
  wire ff_mbox_out_beforeEnq_D_IN,
       ff_mbox_out_beforeEnq_EN,
       ff_mbox_out_beforeEnq_Q_OUT;

  // ports of submodule ff_mbox_out_ff
  wire [63 : 0] ff_mbox_out_ff_D_IN, ff_mbox_out_ff_D_OUT;
  wire ff_mbox_out_ff_CLR,
       ff_mbox_out_ff_DEQ,
       ff_mbox_out_ff_EMPTY_N,
       ff_mbox_out_ff_ENQ,
       ff_mbox_out_ff_FULL_N;

  // ports of submodule ff_memoryout
  wire [8 : 0] ff_memoryout_D_IN, ff_memoryout_D_OUT;
  wire ff_memoryout_CLR,
       ff_memoryout_DEQ,
       ff_memoryout_EMPTY_N,
       ff_memoryout_ENQ,
       ff_memoryout_FULL_N;

  // ports of submodule ff_pipe1
  wire [119 : 0] ff_pipe1_D_IN, ff_pipe1_D_OUT;
  wire ff_pipe1_CLR,
       ff_pipe1_DEQ,
       ff_pipe1_EMPTY_N,
       ff_pipe1_ENQ,
       ff_pipe1_FULL_N;

  // ports of submodule ff_systemout
  wire [80 : 0] ff_systemout_D_IN, ff_systemout_D_OUT;
  wire ff_systemout_CLR,
       ff_systemout_DEQ,
       ff_systemout_EMPTY_N,
       ff_systemout_ENQ,
       ff_systemout_FULL_N;

  // ports of submodule ff_systemout_1
  wire [80 : 0] ff_systemout_1_D_IN, ff_systemout_1_D_OUT;
  wire ff_systemout_1_CLR,
       ff_systemout_1_DEQ,
       ff_systemout_1_EMPTY_N,
       ff_systemout_1_ENQ,
       ff_systemout_1_FULL_N;

  // ports of submodule ff_trapout
  wire [71 : 0] ff_trapout_D_IN, ff_trapout_D_OUT;
  wire ff_trapout_CLR,
       ff_trapout_DEQ,
       ff_trapout_EMPTY_N,
       ff_trapout_ENQ,
       ff_trapout_FULL_N;

  // ports of submodule ff_trapout_1
  wire [71 : 0] ff_trapout_1_D_IN, ff_trapout_1_D_OUT;
  wire ff_trapout_1_CLR,
       ff_trapout_1_DEQ,
       ff_trapout_1_EMPTY_N,
       ff_trapout_1_ENQ,
       ff_trapout_1_FULL_N;

  // ports of submodule ff_wbmemop
  wire [69 : 0] ff_wbmemop_D_IN, ff_wbmemop_D_OUT;
  wire ff_wbmemop_CLR,
       ff_wbmemop_DEQ,
       ff_wbmemop_EMPTY_N,
       ff_wbmemop_ENQ,
       ff_wbmemop_FULL_N;

  // ports of submodule mbox
  wire [131 : 0] mbox_ma_inputs_inputs;
  wire [63 : 0] mbox_tx_output_enq_data;
  wire [1 : 0] mbox_mv_ready;
  wire mbox_EN_ma_inputs,
       mbox_tx_output_enq_ena,
       mbox_tx_output_enq_rdy_b,
       mbox_tx_output_notFull_b;

  // ports of submodule pipe_s0s1_notEmpty_ff_pipe0
  wire [76 : 0] pipe_s0s1_notEmpty_ff_pipe0_D_IN,
		pipe_s0s1_notEmpty_ff_pipe0_D_OUT;
  wire pipe_s0s1_notEmpty_ff_pipe0_CLR,
       pipe_s0s1_notEmpty_ff_pipe0_DEQ,
       pipe_s0s1_notEmpty_ff_pipe0_EMPTY_N,
       pipe_s0s1_notEmpty_ff_pipe0_ENQ,
       pipe_s0s1_notEmpty_ff_pipe0_FULL_N;

  // ports of submodule pipe_s2s3_notEmpty_ff_commitlog
  wire [308 : 0] pipe_s2s3_notEmpty_ff_commitlog_D_IN,
		 pipe_s2s3_notEmpty_ff_commitlog_D_OUT;
  wire pipe_s2s3_notEmpty_ff_commitlog_CLR,
       pipe_s2s3_notEmpty_ff_commitlog_DEQ,
       pipe_s2s3_notEmpty_ff_commitlog_EMPTY_N,
       pipe_s2s3_notEmpty_ff_commitlog_ENQ,
       pipe_s2s3_notEmpty_ff_commitlog_FULL_N;

  // ports of submodule pipe_s2s3_notEmpty_ff_insttype
  wire [3 : 0] pipe_s2s3_notEmpty_ff_insttype_D_IN,
	       pipe_s2s3_notEmpty_ff_insttype_D_OUT;
  wire pipe_s2s3_notEmpty_ff_insttype_CLR,
       pipe_s2s3_notEmpty_ff_insttype_DEQ,
       pipe_s2s3_notEmpty_ff_insttype_EMPTY_N,
       pipe_s2s3_notEmpty_ff_insttype_ENQ,
       pipe_s2s3_notEmpty_ff_insttype_FULL_N;

  // ports of submodule pipe_s2s3_notEmpty_ff_meta
  wire [96 : 0] pipe_s2s3_notEmpty_ff_meta_D_IN,
		pipe_s2s3_notEmpty_ff_meta_D_OUT;
  wire pipe_s2s3_notEmpty_ff_meta_CLR,
       pipe_s2s3_notEmpty_ff_meta_DEQ,
       pipe_s2s3_notEmpty_ff_meta_EMPTY_N,
       pipe_s2s3_notEmpty_ff_meta_ENQ,
       pipe_s2s3_notEmpty_ff_meta_FULL_N;

  // ports of submodule pipe_s2s3_notEmpty_ff_mtval
  wire [63 : 0] pipe_s2s3_notEmpty_ff_mtval_D_IN,
		pipe_s2s3_notEmpty_ff_mtval_D_OUT;
  wire pipe_s2s3_notEmpty_ff_mtval_CLR,
       pipe_s2s3_notEmpty_ff_mtval_DEQ,
       pipe_s2s3_notEmpty_ff_mtval_EMPTY_N,
       pipe_s2s3_notEmpty_ff_mtval_ENQ,
       pipe_s2s3_notEmpty_ff_mtval_FULL_N;

  // ports of submodule pipe_s2s3_notEmpty_ff_opmeta
  wire [20 : 0] pipe_s2s3_notEmpty_ff_opmeta_D_IN,
		pipe_s2s3_notEmpty_ff_opmeta_D_OUT;
  wire pipe_s2s3_notEmpty_ff_opmeta_CLR,
       pipe_s2s3_notEmpty_ff_opmeta_DEQ,
       pipe_s2s3_notEmpty_ff_opmeta_EMPTY_N,
       pipe_s2s3_notEmpty_ff_opmeta_ENQ,
       pipe_s2s3_notEmpty_ff_opmeta_FULL_N;

  // ports of submodule stage0
  wire [141 : 0] stage0_s0_bpu_ma_train_bpu_td;
  wire [76 : 0] stage0_tx_tx_to_stage1_enq_data;
  wire [67 : 0] stage0_icache_to_icache_get;
  wire [65 : 0] stage0_common_ma_flush_fl;
  wire [8 : 0] stage0_s0_bpu_ma_mispredict_g;
  wire stage0_EN_common_ma_flush,
       stage0_EN_common_ma_reset_done,
       stage0_EN_common_ma_update_eEpoch,
       stage0_EN_common_ma_update_wEpoch,
       stage0_EN_icache_to_icache_get,
       stage0_EN_s0_bpu_ma_bpu_enable,
       stage0_EN_s0_bpu_ma_mispredict,
       stage0_EN_s0_bpu_ma_train_bpu,
       stage0_RDY_common_ma_flush,
       stage0_RDY_icache_to_icache_get,
       stage0_RDY_s0_bpu_ma_mispredict,
       stage0_RDY_s0_bpu_ma_train_bpu,
       stage0_common_ma_reset_done__done,
       stage0_s0_bpu_ma_bpu_enable_e,
       stage0_tx_tx_to_stage1_enq_ena,
       stage0_tx_tx_to_stage1_enq_rdy_b,
       stage0_tx_tx_to_stage1_notFull_b;

  // ports of submodule stage1
  wire [308 : 0] stage1_tx_tx_commitlog_enq_data;
  wire [119 : 0] stage1_tx_tx_to_stage2_enq_data;
  wire [76 : 0] stage1_rx_rx_from_stage0_first_x;
  wire [41 : 0] stage1_icache_inst_response_put;
  wire stage1_EN_common_ma_csr_misa_c,
       stage1_EN_common_ma_update_eEpoch,
       stage1_EN_common_ma_update_wEpoch,
       stage1_EN_icache_inst_response_put,
       stage1_RDY_icache_inst_response_put,
       stage1_common_ma_csr_misa_c_c,
       stage1_rx_rx_from_stage0_deq_ena,
       stage1_rx_rx_from_stage0_first_deq_rdy_b,
       stage1_rx_rx_from_stage0_notEmpty_b,
       stage1_tx_tx_commitlog_enq_ena,
       stage1_tx_tx_commitlog_enq_rdy_b,
       stage1_tx_tx_commitlog_notFull_b,
       stage1_tx_tx_to_stage2_enq_ena,
       stage1_tx_tx_to_stage2_enq_rdy_b,
       stage1_tx_tx_to_stage2_notFull_b;

  // ports of submodule stage2
  wire [308 : 0] stage2_rx_rx_commitlog_first_x,
		 stage2_tx_tx_commitlog_enq_data;
  wire [241 : 0] stage2_common_ma_csrs_csr;
  wire [119 : 0] stage2_rx_rx_from_stage1_first_x;
  wire [96 : 0] stage2_tx_tx_meta_to_stage3_enq_data;
  wire [75 : 0] stage2_rf_mv_op1, stage2_rf_mv_op2, stage2_rf_mv_op3;
  wire [74 : 0] stage2_common_ma_commit_rd_commit;
  wire [63 : 0] stage2_tx_tx_mtval_to_stage3_enq_data;
  wire [20 : 0] stage2_tx_tx_opmeta_to_stage3_enq_data;
  wire [4 : 0] stage2_debug_debug_status_status;
  wire [3 : 0] stage2_tx_tx_instrtype_to_stage3_enq_data;
  wire stage2_EN_common_ma_clear_stall,
       stage2_EN_common_ma_commit_rd,
       stage2_EN_common_ma_csrs,
       stage2_EN_common_ma_resume_wfi,
       stage2_EN_common_ma_update_eEpoch,
       stage2_EN_common_ma_update_wEpoch,
       stage2_RDY_common_ma_clear_stall,
       stage2_RDY_common_ma_commit_rd,
       stage2_common_ma_clear_stall_upd,
       stage2_common_ma_resume_wfi_w,
       stage2_mv_wfi_detected,
       stage2_rx_rx_commitlog_deq_ena,
       stage2_rx_rx_commitlog_first_deq_rdy_b,
       stage2_rx_rx_commitlog_notEmpty_b,
       stage2_rx_rx_from_stage1_deq_ena,
       stage2_rx_rx_from_stage1_first_deq_rdy_b,
       stage2_rx_rx_from_stage1_notEmpty_b,
       stage2_tx_tx_commitlog_enq_ena,
       stage2_tx_tx_commitlog_enq_rdy_b,
       stage2_tx_tx_commitlog_notFull_b,
       stage2_tx_tx_instrtype_to_stage3_enq_ena,
       stage2_tx_tx_instrtype_to_stage3_enq_rdy_b,
       stage2_tx_tx_instrtype_to_stage3_notFull_b,
       stage2_tx_tx_meta_to_stage3_enq_ena,
       stage2_tx_tx_meta_to_stage3_enq_rdy_b,
       stage2_tx_tx_meta_to_stage3_notFull_b,
       stage2_tx_tx_mtval_to_stage3_enq_ena,
       stage2_tx_tx_mtval_to_stage3_enq_rdy_b,
       stage2_tx_tx_mtval_to_stage3_notFull_b,
       stage2_tx_tx_opmeta_to_stage3_enq_ena,
       stage2_tx_tx_opmeta_to_stage3_enq_rdy_b,
       stage2_tx_tx_opmeta_to_stage3_notFull_b;

  // ports of submodule stage3
  wire [308 : 0] stage3_rx_rx_commitlog_first_x,
		 stage3_tx_tx_commitlog_enq_data;
  wire [211 : 0] stage3_float_mv_fbox_inputs;
  wire [151 : 0] stage3_bypass_ma_bypass_fwd;
  wire [144 : 0] stage3_cache_mv_memory_request_get;
  wire [141 : 0] stage3_bpu_mv_train_bpu;
  wire [131 : 0] stage3_muldiv_mv_mbox_inputs;
  wire [96 : 0] stage3_rx_rx_meta_from_stage2_first_x;
  wire [80 : 0] stage3_tx_tx_systemout_to_stage4_enq_data;
  wire [79 : 0] stage3_tx_tx_baseout_to_stage4_enq_data;
  wire [77 : 0] stage3_tx_tx_fuid_to_stage4_enq_data;
  wire [75 : 0] stage3_rf_ma_op1_i, stage3_rf_ma_op2_i, stage3_rf_ma_op3_i;
  wire [74 : 0] stage3_common_ma_sb_release_commit;
  wire [71 : 0] stage3_tx_tx_trapout_to_stage4_enq_data;
  wire [63 : 0] stage3_bpu_ma_next_pc_npc,
		stage3_common_ma_mstatus_mstatus,
		stage3_common_mv_flush_snd,
		stage3_rx_rx_mtval_from_stage2_first_x;
  wire [20 : 0] stage3_rx_rx_opmeta_from_stage2_first_x;
  wire [8 : 0] stage3_tx_tx_memoryout_to_stage4_enq_data;
  wire [7 : 0] stage3_bpu_mv_mispredict_snd;
  wire [3 : 0] stage3_rx_rx_instrtype_from_stage2_first_x;
  wire [1 : 0] stage3_common_ma_priv_priv, stage3_muldiv_ma_mbox_ready_rdy;
  wire stage3_EN_bpu_ma_next_pc,
       stage3_EN_cache_mv_memory_request_get,
       stage3_EN_common_ma_sb_release,
       stage3_EN_common_ma_update_wEpoch,
       stage3_RDY_bpu_mv_mispredict_fst,
       stage3_RDY_bpu_mv_mispredict_snd,
       stage3_RDY_bpu_mv_train_bpu,
       stage3_RDY_cache_mv_memory_request_get,
       stage3_RDY_float_mv_fbox_inputs,
       stage3_RDY_muldiv_mv_mbox_inputs,
       stage3_bpu_mv_mispredict_fst,
       stage3_cache_ma_cache_is_available_avail,
       stage3_common_ma_csr_misa_c_m,
       stage3_common_mv_flush_fst,
       stage3_float_ma_fbox_ready_rdy,
       stage3_perfmonitors_mv_count_branches,
       stage3_perfmonitors_mv_count_exestalls,
       stage3_perfmonitors_mv_count_floats,
       stage3_perfmonitors_mv_count_jumps,
       stage3_perfmonitors_mv_count_muldiv,
       stage3_perfmonitors_mv_count_rawstalls,
       stage3_rx_rx_commitlog_deq_ena,
       stage3_rx_rx_commitlog_first_deq_rdy_b,
       stage3_rx_rx_commitlog_notEmpty_b,
       stage3_rx_rx_instrtype_from_stage2_deq_ena,
       stage3_rx_rx_instrtype_from_stage2_first_deq_rdy_b,
       stage3_rx_rx_instrtype_from_stage2_notEmpty_b,
       stage3_rx_rx_meta_from_stage2_deq_ena,
       stage3_rx_rx_meta_from_stage2_first_deq_rdy_b,
       stage3_rx_rx_meta_from_stage2_notEmpty_b,
       stage3_rx_rx_mtval_from_stage2_deq_ena,
       stage3_rx_rx_mtval_from_stage2_first_deq_rdy_b,
       stage3_rx_rx_mtval_from_stage2_notEmpty_b,
       stage3_rx_rx_opmeta_from_stage2_deq_ena,
       stage3_rx_rx_opmeta_from_stage2_first_deq_rdy_b,
       stage3_rx_rx_opmeta_from_stage2_notEmpty_b,
       stage3_tx_tx_baseout_to_stage4_enq_ena,
       stage3_tx_tx_baseout_to_stage4_enq_rdy_b,
       stage3_tx_tx_baseout_to_stage4_notFull_b,
       stage3_tx_tx_commitlog_enq_ena,
       stage3_tx_tx_commitlog_enq_rdy_b,
       stage3_tx_tx_commitlog_notFull_b,
       stage3_tx_tx_fuid_to_stage4_enq_ena,
       stage3_tx_tx_fuid_to_stage4_enq_rdy_b,
       stage3_tx_tx_fuid_to_stage4_notFull_b,
       stage3_tx_tx_memoryout_to_stage4_enq_ena,
       stage3_tx_tx_memoryout_to_stage4_enq_rdy_b,
       stage3_tx_tx_memoryout_to_stage4_notFull_b,
       stage3_tx_tx_systemout_to_stage4_enq_ena,
       stage3_tx_tx_systemout_to_stage4_enq_rdy_b,
       stage3_tx_tx_systemout_to_stage4_notFull_b,
       stage3_tx_tx_trapout_to_stage4_enq_ena,
       stage3_tx_tx_trapout_to_stage4_enq_rdy_b,
       stage3_tx_tx_trapout_to_stage4_notFull_b;

  // ports of submodule stage4
  wire [308 : 0] stage4_rx_rx_commitlog_first_x,
		 stage4_tx_tx_commitlog_enq_data;
  wire [131 : 0] stage4_cache_memory_response_put;
  wire [80 : 0] stage4_rx_rx_systemout_from_stage3_first_x,
		stage4_tx_tx_systemout_to_stage5_enq_data;
  wire [79 : 0] stage4_rx_rx_baseout_from_stage3_first_x,
		stage4_tx_tx_baseout_to_stage5_enq_data;
  wire [77 : 0] stage4_rx_rx_fuid_from_stage3_first_x;
  wire [76 : 0] stage4_tx_tx_fuid_to_stage5_enq_data;
  wire [71 : 0] stage4_rx_rx_trapout_from_stage3_first_x,
		stage4_tx_tx_trapout_to_stage5_enq_data;
  wire [69 : 0] stage4_s4_fbox_rx_fbox_output_first_x,
		stage4_tx_tx_memio_to_stage5_enq_data;
  wire [63 : 0] stage4_s4_mbox_rx_mbox_output_first_x;
  wire [8 : 0] stage4_rx_rx_memoryout_from_stage3_first_x;
  wire stage4_EN_cache_memory_response_put,
       stage4_RDY_cache_memory_response_put,
       stage4_rx_rx_baseout_from_stage3_deq_ena,
       stage4_rx_rx_baseout_from_stage3_first_deq_rdy_b,
       stage4_rx_rx_baseout_from_stage3_notEmpty_b,
       stage4_rx_rx_commitlog_deq_ena,
       stage4_rx_rx_commitlog_first_deq_rdy_b,
       stage4_rx_rx_commitlog_notEmpty_b,
       stage4_rx_rx_fuid_from_stage3_deq_ena,
       stage4_rx_rx_fuid_from_stage3_first_deq_rdy_b,
       stage4_rx_rx_fuid_from_stage3_notEmpty_b,
       stage4_rx_rx_memoryout_from_stage3_deq_ena,
       stage4_rx_rx_memoryout_from_stage3_first_deq_rdy_b,
       stage4_rx_rx_memoryout_from_stage3_notEmpty_b,
       stage4_rx_rx_systemout_from_stage3_deq_ena,
       stage4_rx_rx_systemout_from_stage3_first_deq_rdy_b,
       stage4_rx_rx_systemout_from_stage3_notEmpty_b,
       stage4_rx_rx_trapout_from_stage3_deq_ena,
       stage4_rx_rx_trapout_from_stage3_first_deq_rdy_b,
       stage4_rx_rx_trapout_from_stage3_notEmpty_b,
       stage4_s4_fbox_rx_fbox_output_deq_ena,
       stage4_s4_fbox_rx_fbox_output_first_deq_rdy_b,
       stage4_s4_fbox_rx_fbox_output_notEmpty_b,
       stage4_s4_mbox_rx_mbox_output_deq_ena,
       stage4_s4_mbox_rx_mbox_output_first_deq_rdy_b,
       stage4_s4_mbox_rx_mbox_output_notEmpty_b,
       stage4_tx_tx_baseout_to_stage5_enq_ena,
       stage4_tx_tx_baseout_to_stage5_enq_rdy_b,
       stage4_tx_tx_baseout_to_stage5_notFull_b,
       stage4_tx_tx_commitlog_enq_ena,
       stage4_tx_tx_commitlog_enq_rdy_b,
       stage4_tx_tx_commitlog_notFull_b,
       stage4_tx_tx_fuid_to_stage5_enq_ena,
       stage4_tx_tx_fuid_to_stage5_enq_rdy_b,
       stage4_tx_tx_fuid_to_stage5_notFull_b,
       stage4_tx_tx_memio_to_stage5_enq_ena,
       stage4_tx_tx_memio_to_stage5_enq_rdy_b,
       stage4_tx_tx_memio_to_stage5_notFull_b,
       stage4_tx_tx_systemout_to_stage5_enq_ena,
       stage4_tx_tx_systemout_to_stage5_enq_rdy_b,
       stage4_tx_tx_systemout_to_stage5_notFull_b,
       stage4_tx_tx_trapout_to_stage5_enq_ena,
       stage4_tx_tx_trapout_to_stage5_enq_rdy_b,
       stage4_tx_tx_trapout_to_stage5_notFull_b;

  // ports of submodule stage5
  wire [309 : 0] stage5_common_mv_commit_log;
  wire [308 : 0] stage5_rx_rx_commitlog_first_x;
  wire [241 : 0] stage5_csrs_mv_csrs_to_decode;
  wire [132 : 0] stage5_cache_ma_io_response_r;
  wire [127 : 0] stage5_csrs_mv_pmp_addr;
  wire [80 : 0] stage5_rx_rx_systemout_from_stage4_first_x;
  wire [79 : 0] stage5_rx_rx_baseout_from_stage4_first_x;
  wire [76 : 0] stage5_rx_rx_fuid_from_stage4_first_x;
  wire [74 : 0] stage5_common_mv_commit_rd;
  wire [71 : 0] stage5_rx_rx_trapout_from_stage4_first_x;
  wire [69 : 0] stage5_rx_rx_memio_from_stage4_first_x;
  wire [66 : 0] stage5_common_mv_flush;
  wire [63 : 0] stage5_csrs_mv_csr_mstatus,
		stage5_csrs_mv_csr_satp,
		stage5_csrs_sbread_mv_csr_customcontrol,
		stage5_csrs_sbread_mv_csr_dcsr,
		stage5_csrs_sbread_mv_csr_dpc,
		stage5_csrs_sbread_mv_csr_dscratch0,
		stage5_csrs_sbread_mv_csr_dscratch1,
		stage5_csrs_sbread_mv_csr_fcsr,
		stage5_csrs_sbread_mv_csr_marchid,
		stage5_csrs_sbread_mv_csr_mcause,
		stage5_csrs_sbread_mv_csr_mcycle,
		stage5_csrs_sbread_mv_csr_medeleg,
		stage5_csrs_sbread_mv_csr_menvcfg,
		stage5_csrs_sbread_mv_csr_mepc,
		stage5_csrs_sbread_mv_csr_mhartid,
		stage5_csrs_sbread_mv_csr_mhpmcounter3,
		stage5_csrs_sbread_mv_csr_mhpmcounter4,
		stage5_csrs_sbread_mv_csr_mhpmcounter5,
		stage5_csrs_sbread_mv_csr_mhpmcounter6,
		stage5_csrs_sbread_mv_csr_mhpmevent3,
		stage5_csrs_sbread_mv_csr_mhpmevent4,
		stage5_csrs_sbread_mv_csr_mhpmevent5,
		stage5_csrs_sbread_mv_csr_mhpmevent6,
		stage5_csrs_sbread_mv_csr_mideleg,
		stage5_csrs_sbread_mv_csr_mie,
		stage5_csrs_sbread_mv_csr_mimpid,
		stage5_csrs_sbread_mv_csr_minstret,
		stage5_csrs_sbread_mv_csr_mip,
		stage5_csrs_sbread_mv_csr_misa,
		stage5_csrs_sbread_mv_csr_mscratch,
		stage5_csrs_sbread_mv_csr_mstatus,
		stage5_csrs_sbread_mv_csr_mtval,
		stage5_csrs_sbread_mv_csr_mtvec,
		stage5_csrs_sbread_mv_csr_pmpcfg0,
		stage5_csrs_sbread_mv_csr_satp,
		stage5_csrs_sbread_mv_csr_scause,
		stage5_csrs_sbread_mv_csr_senvcfg,
		stage5_csrs_sbread_mv_csr_sepc,
		stage5_csrs_sbread_mv_csr_sie,
		stage5_csrs_sbread_mv_csr_sip,
		stage5_csrs_sbread_mv_csr_sscratch,
		stage5_csrs_sbread_mv_csr_stval,
		stage5_csrs_sbread_mv_csr_stvec,
		stage5_csrs_sbread_mv_csr_time,
		stage5_debug_mv_csr_dcsr,
		stage5_interrupts_ma_clint_mtime_mtime;
  wire [31 : 0] stage5_csrs_mv_pmp_cfg,
		stage5_csrs_sbread_mv_csr_mcounteren,
		stage5_csrs_sbread_mv_csr_mcountinhibit,
		stage5_csrs_sbread_mv_csr_mvendorid,
		stage5_csrs_sbread_mv_csr_scounteren,
		stage5_perf_ma_events_e;
  wire [29 : 0] stage5_csrs_sbread_mv_csr_pmpaddr0,
		stage5_csrs_sbread_mv_csr_pmpaddr1,
		stage5_csrs_sbread_mv_csr_pmpaddr2,
		stage5_csrs_sbread_mv_csr_pmpaddr3;
  wire [5 : 0] stage5_csrs_mv_cacheenable;
  wire [4 : 0] stage5_csrs_sbread_mv_csr_fflags;
  wire [2 : 0] stage5_csrs_sbread_mv_csr_frm;
  wire [1 : 0] stage5_csrs_mv_curr_priv;
  wire stage5_EN_cache_ma_io_response,
       stage5_EN_debug_ma_debug_interrupt,
       stage5_EN_interrupts_ma_clint_msip,
       stage5_EN_interrupts_ma_clint_mtime,
       stage5_EN_interrupts_ma_clint_mtip,
       stage5_EN_interrupts_ma_plic_meip,
       stage5_EN_interrupts_ma_plic_seip,
       stage5_EN_perf_ma_events,
       stage5_RDY_cache_mv_initiate_ioop,
       stage5_RDY_cache_mv_initiate_store_fst,
       stage5_RDY_cache_mv_initiate_store_snd,
       stage5_RDY_common_mv_commit_rd,
       stage5_cache_mv_initiate_ioop,
       stage5_cache_mv_initiate_store_fst,
       stage5_cache_mv_initiate_store_snd,
       stage5_csrs_mv_csr_misa_c,
       stage5_csrs_mv_resume_wfi,
       stage5_debug_ma_debug_interrupt__int,
       stage5_debug_mv_core_debugenable,
       stage5_debug_mv_debug_mode,
       stage5_debug_mv_stop_count,
       stage5_debug_mv_stop_timer,
       stage5_interrupts_ma_clint_msip_intrpt,
       stage5_interrupts_ma_clint_mtip_intrpt,
       stage5_interrupts_ma_plic_meip_intrpt,
       stage5_interrupts_ma_plic_seip_intrpt,
       stage5_perf_mv_count_csrops,
       stage5_perf_mv_count_exceptions,
       stage5_perf_mv_count_interrupts,
       stage5_perf_mv_count_microtraps,
       stage5_rx_rx_baseout_from_stage4_deq_ena,
       stage5_rx_rx_baseout_from_stage4_first_deq_rdy_b,
       stage5_rx_rx_baseout_from_stage4_notEmpty_b,
       stage5_rx_rx_commitlog_deq_ena,
       stage5_rx_rx_commitlog_first_deq_rdy_b,
       stage5_rx_rx_commitlog_notEmpty_b,
       stage5_rx_rx_fuid_from_stage4_deq_ena,
       stage5_rx_rx_fuid_from_stage4_first_deq_rdy_b,
       stage5_rx_rx_fuid_from_stage4_notEmpty_b,
       stage5_rx_rx_memio_from_stage4_deq_ena,
       stage5_rx_rx_memio_from_stage4_first_deq_rdy_b,
       stage5_rx_rx_memio_from_stage4_notEmpty_b,
       stage5_rx_rx_systemout_from_stage4_deq_ena,
       stage5_rx_rx_systemout_from_stage4_first_deq_rdy_b,
       stage5_rx_rx_systemout_from_stage4_notEmpty_b,
       stage5_rx_rx_trapout_from_stage4_deq_ena,
       stage5_rx_rx_trapout_from_stage4_first_deq_rdy_b,
       stage5_rx_rx_trapout_from_stage4_notEmpty_b;

  // rule scheduling signals
  wire CAN_FIRE_RL_connect_ena,
       CAN_FIRE_RL_connect_ena_1,
       CAN_FIRE_RL_connect_ena_10,
       CAN_FIRE_RL_connect_ena_11,
       CAN_FIRE_RL_connect_ena_12,
       CAN_FIRE_RL_connect_ena_13,
       CAN_FIRE_RL_connect_ena_14,
       CAN_FIRE_RL_connect_ena_2,
       CAN_FIRE_RL_connect_ena_3,
       CAN_FIRE_RL_connect_ena_4,
       CAN_FIRE_RL_connect_ena_5,
       CAN_FIRE_RL_connect_ena_6,
       CAN_FIRE_RL_connect_ena_7,
       CAN_FIRE_RL_connect_ena_8,
       CAN_FIRE_RL_connect_ena_9,
       CAN_FIRE_RL_connect_ena_data,
       CAN_FIRE_RL_connect_ena_data_1,
       CAN_FIRE_RL_connect_ena_data_10,
       CAN_FIRE_RL_connect_ena_data_11,
       CAN_FIRE_RL_connect_ena_data_12,
       CAN_FIRE_RL_connect_ena_data_13,
       CAN_FIRE_RL_connect_ena_data_14,
       CAN_FIRE_RL_connect_ena_data_2,
       CAN_FIRE_RL_connect_ena_data_3,
       CAN_FIRE_RL_connect_ena_data_4,
       CAN_FIRE_RL_connect_ena_data_5,
       CAN_FIRE_RL_connect_ena_data_6,
       CAN_FIRE_RL_connect_ena_data_7,
       CAN_FIRE_RL_connect_ena_data_8,
       CAN_FIRE_RL_connect_ena_data_9,
       CAN_FIRE_RL_connect_first,
       CAN_FIRE_RL_connect_first_1,
       CAN_FIRE_RL_connect_first_10,
       CAN_FIRE_RL_connect_first_11,
       CAN_FIRE_RL_connect_first_12,
       CAN_FIRE_RL_connect_first_13,
       CAN_FIRE_RL_connect_first_14,
       CAN_FIRE_RL_connect_first_2,
       CAN_FIRE_RL_connect_first_3,
       CAN_FIRE_RL_connect_first_4,
       CAN_FIRE_RL_connect_first_5,
       CAN_FIRE_RL_connect_first_6,
       CAN_FIRE_RL_connect_first_7,
       CAN_FIRE_RL_connect_first_8,
       CAN_FIRE_RL_connect_first_9,
       CAN_FIRE_RL_connect_notEmpty,
       CAN_FIRE_RL_connect_notEmpty_1,
       CAN_FIRE_RL_connect_notEmpty_10,
       CAN_FIRE_RL_connect_notEmpty_11,
       CAN_FIRE_RL_connect_notEmpty_12,
       CAN_FIRE_RL_connect_notEmpty_13,
       CAN_FIRE_RL_connect_notEmpty_14,
       CAN_FIRE_RL_connect_notEmpty_2,
       CAN_FIRE_RL_connect_notEmpty_3,
       CAN_FIRE_RL_connect_notEmpty_4,
       CAN_FIRE_RL_connect_notEmpty_5,
       CAN_FIRE_RL_connect_notEmpty_6,
       CAN_FIRE_RL_connect_notEmpty_7,
       CAN_FIRE_RL_connect_notEmpty_8,
       CAN_FIRE_RL_connect_notEmpty_9,
       CAN_FIRE_RL_connect_notFull,
       CAN_FIRE_RL_connect_notFull_1,
       CAN_FIRE_RL_connect_notFull_10,
       CAN_FIRE_RL_connect_notFull_11,
       CAN_FIRE_RL_connect_notFull_12,
       CAN_FIRE_RL_connect_notFull_13,
       CAN_FIRE_RL_connect_notFull_14,
       CAN_FIRE_RL_connect_notFull_2,
       CAN_FIRE_RL_connect_notFull_3,
       CAN_FIRE_RL_connect_notFull_4,
       CAN_FIRE_RL_connect_notFull_5,
       CAN_FIRE_RL_connect_notFull_6,
       CAN_FIRE_RL_connect_notFull_7,
       CAN_FIRE_RL_connect_notFull_8,
       CAN_FIRE_RL_connect_notFull_9,
       CAN_FIRE_RL_connect_rdy,
       CAN_FIRE_RL_connect_rdy_1,
       CAN_FIRE_RL_connect_rdy_10,
       CAN_FIRE_RL_connect_rdy_11,
       CAN_FIRE_RL_connect_rdy_12,
       CAN_FIRE_RL_connect_rdy_13,
       CAN_FIRE_RL_connect_rdy_14,
       CAN_FIRE_RL_connect_rdy_15,
       CAN_FIRE_RL_connect_rdy_16,
       CAN_FIRE_RL_connect_rdy_17,
       CAN_FIRE_RL_connect_rdy_18,
       CAN_FIRE_RL_connect_rdy_19,
       CAN_FIRE_RL_connect_rdy_2,
       CAN_FIRE_RL_connect_rdy_20,
       CAN_FIRE_RL_connect_rdy_21,
       CAN_FIRE_RL_connect_rdy_22,
       CAN_FIRE_RL_connect_rdy_23,
       CAN_FIRE_RL_connect_rdy_24,
       CAN_FIRE_RL_connect_rdy_25,
       CAN_FIRE_RL_connect_rdy_26,
       CAN_FIRE_RL_connect_rdy_27,
       CAN_FIRE_RL_connect_rdy_28,
       CAN_FIRE_RL_connect_rdy_29,
       CAN_FIRE_RL_connect_rdy_3,
       CAN_FIRE_RL_connect_rdy_4,
       CAN_FIRE_RL_connect_rdy_5,
       CAN_FIRE_RL_connect_rdy_6,
       CAN_FIRE_RL_connect_rdy_7,
       CAN_FIRE_RL_connect_rdy_8,
       CAN_FIRE_RL_connect_rdy_9,
       CAN_FIRE_RL_ff_fbox_out_dequeue,
       CAN_FIRE_RL_ff_fbox_out_enqueue,
       CAN_FIRE_RL_ff_mbox_out_dequeue,
       CAN_FIRE_RL_ff_mbox_out_enqueue,
       CAN_FIRE_RL_mkConnectionVtoAf,
       CAN_FIRE_RL_mkConnectionVtoAf_1,
       CAN_FIRE_RL_mkConnectionVtoAf_10,
       CAN_FIRE_RL_mkConnectionVtoAf_11,
       CAN_FIRE_RL_mkConnectionVtoAf_12,
       CAN_FIRE_RL_mkConnectionVtoAf_13,
       CAN_FIRE_RL_mkConnectionVtoAf_14,
       CAN_FIRE_RL_mkConnectionVtoAf_15,
       CAN_FIRE_RL_mkConnectionVtoAf_16,
       CAN_FIRE_RL_mkConnectionVtoAf_17,
       CAN_FIRE_RL_mkConnectionVtoAf_18,
       CAN_FIRE_RL_mkConnectionVtoAf_2,
       CAN_FIRE_RL_mkConnectionVtoAf_3,
       CAN_FIRE_RL_mkConnectionVtoAf_4,
       CAN_FIRE_RL_mkConnectionVtoAf_5,
       CAN_FIRE_RL_mkConnectionVtoAf_6,
       CAN_FIRE_RL_mkConnectionVtoAf_7,
       CAN_FIRE_RL_mkConnectionVtoAf_8,
       CAN_FIRE_RL_mkConnectionVtoAf_9,
       CAN_FIRE_RL_pipe_s0s1_notEmpty_1_connect_ena,
       CAN_FIRE_RL_pipe_s0s1_notEmpty_1_connect_first,
       CAN_FIRE_RL_pipe_s0s1_notEmpty_1_connect_notEmpty,
       CAN_FIRE_RL_pipe_s0s1_notEmpty_1_connect_rdy,
       CAN_FIRE_RL_pipe_s0s1_notEmpty_connect_ena_data,
       CAN_FIRE_RL_pipe_s0s1_notEmpty_connect_notFull,
       CAN_FIRE_RL_pipe_s0s1_notEmpty_connect_rdy,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_1_connect_ena,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_1_connect_first,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_1_connect_notEmpty,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_1_connect_rdy,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_1,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_2,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_3,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_1,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_2,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_3,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_4,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_first,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_first_1,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_first_2,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_first_3,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_notEmpty,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_notEmpty_1,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_notEmpty_2,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_notEmpty_3,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull_1,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull_2,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull_3,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull_4,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_1,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_2,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_3,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_4,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_5,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_6,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_7,
       CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_8,
       CAN_FIRE_RL_rg_reset_event__dreg_update,
       CAN_FIRE_RL_rl_assert_reset_done,
       CAN_FIRE_RL_rl_clear_stall_in_decode_stage,
       CAN_FIRE_RL_rl_connect_bpu_enable,
       CAN_FIRE_RL_rl_connect_debug_decode,
       CAN_FIRE_RL_rl_connect_events,
       CAN_FIRE_RL_rl_connect_events1,
       CAN_FIRE_RL_rl_flush_stage0,
       CAN_FIRE_RL_rl_gen_bypass,
       CAN_FIRE_RL_rl_gen_bypass_1,
       CAN_FIRE_RL_rl_update_eEpoch,
       CAN_FIRE_RL_rl_update_wEpoch,
       CAN_FIRE_RL_s1_pipe1_connect_ena_data,
       CAN_FIRE_RL_s1_pipe1_connect_notFull,
       CAN_FIRE_RL_s1_pipe1_connect_rdy,
       CAN_FIRE_RL_s2_pipe1_connect_ena,
       CAN_FIRE_RL_s2_pipe1_connect_first,
       CAN_FIRE_RL_s2_pipe1_connect_notEmpty,
       CAN_FIRE_RL_s2_pipe1_connect_rdy,
       CAN_FIRE_interrupts_ma_clint_msip,
       CAN_FIRE_interrupts_ma_clint_mtime,
       CAN_FIRE_interrupts_ma_clint_mtip,
       CAN_FIRE_interrupts_ma_plic_meip,
       CAN_FIRE_interrupts_ma_plic_seip,
       CAN_FIRE_ma_debug_interrupt,
       CAN_FIRE_ma_debugger_available,
       CAN_FIRE_perfmonitors_ma_dcache_counters,
       CAN_FIRE_perfmonitors_ma_dtlb_counters,
       CAN_FIRE_perfmonitors_ma_icache_counters,
       CAN_FIRE_perfmonitors_ma_itlb_counters,
       CAN_FIRE_s0_icache_to_icache_get,
       CAN_FIRE_s1_icache_inst_response_put,
       CAN_FIRE_s3_cache_ma_cache_is_available,
       CAN_FIRE_s3_cache_mv_memory_request_get,
       CAN_FIRE_s4_cache_memory_response_put,
       CAN_FIRE_s5_cache_ma_io_response,
       WILL_FIRE_RL_connect_ena,
       WILL_FIRE_RL_connect_ena_1,
       WILL_FIRE_RL_connect_ena_10,
       WILL_FIRE_RL_connect_ena_11,
       WILL_FIRE_RL_connect_ena_12,
       WILL_FIRE_RL_connect_ena_13,
       WILL_FIRE_RL_connect_ena_14,
       WILL_FIRE_RL_connect_ena_2,
       WILL_FIRE_RL_connect_ena_3,
       WILL_FIRE_RL_connect_ena_4,
       WILL_FIRE_RL_connect_ena_5,
       WILL_FIRE_RL_connect_ena_6,
       WILL_FIRE_RL_connect_ena_7,
       WILL_FIRE_RL_connect_ena_8,
       WILL_FIRE_RL_connect_ena_9,
       WILL_FIRE_RL_connect_ena_data,
       WILL_FIRE_RL_connect_ena_data_1,
       WILL_FIRE_RL_connect_ena_data_10,
       WILL_FIRE_RL_connect_ena_data_11,
       WILL_FIRE_RL_connect_ena_data_12,
       WILL_FIRE_RL_connect_ena_data_13,
       WILL_FIRE_RL_connect_ena_data_14,
       WILL_FIRE_RL_connect_ena_data_2,
       WILL_FIRE_RL_connect_ena_data_3,
       WILL_FIRE_RL_connect_ena_data_4,
       WILL_FIRE_RL_connect_ena_data_5,
       WILL_FIRE_RL_connect_ena_data_6,
       WILL_FIRE_RL_connect_ena_data_7,
       WILL_FIRE_RL_connect_ena_data_8,
       WILL_FIRE_RL_connect_ena_data_9,
       WILL_FIRE_RL_connect_first,
       WILL_FIRE_RL_connect_first_1,
       WILL_FIRE_RL_connect_first_10,
       WILL_FIRE_RL_connect_first_11,
       WILL_FIRE_RL_connect_first_12,
       WILL_FIRE_RL_connect_first_13,
       WILL_FIRE_RL_connect_first_14,
       WILL_FIRE_RL_connect_first_2,
       WILL_FIRE_RL_connect_first_3,
       WILL_FIRE_RL_connect_first_4,
       WILL_FIRE_RL_connect_first_5,
       WILL_FIRE_RL_connect_first_6,
       WILL_FIRE_RL_connect_first_7,
       WILL_FIRE_RL_connect_first_8,
       WILL_FIRE_RL_connect_first_9,
       WILL_FIRE_RL_connect_notEmpty,
       WILL_FIRE_RL_connect_notEmpty_1,
       WILL_FIRE_RL_connect_notEmpty_10,
       WILL_FIRE_RL_connect_notEmpty_11,
       WILL_FIRE_RL_connect_notEmpty_12,
       WILL_FIRE_RL_connect_notEmpty_13,
       WILL_FIRE_RL_connect_notEmpty_14,
       WILL_FIRE_RL_connect_notEmpty_2,
       WILL_FIRE_RL_connect_notEmpty_3,
       WILL_FIRE_RL_connect_notEmpty_4,
       WILL_FIRE_RL_connect_notEmpty_5,
       WILL_FIRE_RL_connect_notEmpty_6,
       WILL_FIRE_RL_connect_notEmpty_7,
       WILL_FIRE_RL_connect_notEmpty_8,
       WILL_FIRE_RL_connect_notEmpty_9,
       WILL_FIRE_RL_connect_notFull,
       WILL_FIRE_RL_connect_notFull_1,
       WILL_FIRE_RL_connect_notFull_10,
       WILL_FIRE_RL_connect_notFull_11,
       WILL_FIRE_RL_connect_notFull_12,
       WILL_FIRE_RL_connect_notFull_13,
       WILL_FIRE_RL_connect_notFull_14,
       WILL_FIRE_RL_connect_notFull_2,
       WILL_FIRE_RL_connect_notFull_3,
       WILL_FIRE_RL_connect_notFull_4,
       WILL_FIRE_RL_connect_notFull_5,
       WILL_FIRE_RL_connect_notFull_6,
       WILL_FIRE_RL_connect_notFull_7,
       WILL_FIRE_RL_connect_notFull_8,
       WILL_FIRE_RL_connect_notFull_9,
       WILL_FIRE_RL_connect_rdy,
       WILL_FIRE_RL_connect_rdy_1,
       WILL_FIRE_RL_connect_rdy_10,
       WILL_FIRE_RL_connect_rdy_11,
       WILL_FIRE_RL_connect_rdy_12,
       WILL_FIRE_RL_connect_rdy_13,
       WILL_FIRE_RL_connect_rdy_14,
       WILL_FIRE_RL_connect_rdy_15,
       WILL_FIRE_RL_connect_rdy_16,
       WILL_FIRE_RL_connect_rdy_17,
       WILL_FIRE_RL_connect_rdy_18,
       WILL_FIRE_RL_connect_rdy_19,
       WILL_FIRE_RL_connect_rdy_2,
       WILL_FIRE_RL_connect_rdy_20,
       WILL_FIRE_RL_connect_rdy_21,
       WILL_FIRE_RL_connect_rdy_22,
       WILL_FIRE_RL_connect_rdy_23,
       WILL_FIRE_RL_connect_rdy_24,
       WILL_FIRE_RL_connect_rdy_25,
       WILL_FIRE_RL_connect_rdy_26,
       WILL_FIRE_RL_connect_rdy_27,
       WILL_FIRE_RL_connect_rdy_28,
       WILL_FIRE_RL_connect_rdy_29,
       WILL_FIRE_RL_connect_rdy_3,
       WILL_FIRE_RL_connect_rdy_4,
       WILL_FIRE_RL_connect_rdy_5,
       WILL_FIRE_RL_connect_rdy_6,
       WILL_FIRE_RL_connect_rdy_7,
       WILL_FIRE_RL_connect_rdy_8,
       WILL_FIRE_RL_connect_rdy_9,
       WILL_FIRE_RL_ff_fbox_out_dequeue,
       WILL_FIRE_RL_ff_fbox_out_enqueue,
       WILL_FIRE_RL_ff_mbox_out_dequeue,
       WILL_FIRE_RL_ff_mbox_out_enqueue,
       WILL_FIRE_RL_mkConnectionVtoAf,
       WILL_FIRE_RL_mkConnectionVtoAf_1,
       WILL_FIRE_RL_mkConnectionVtoAf_10,
       WILL_FIRE_RL_mkConnectionVtoAf_11,
       WILL_FIRE_RL_mkConnectionVtoAf_12,
       WILL_FIRE_RL_mkConnectionVtoAf_13,
       WILL_FIRE_RL_mkConnectionVtoAf_14,
       WILL_FIRE_RL_mkConnectionVtoAf_15,
       WILL_FIRE_RL_mkConnectionVtoAf_16,
       WILL_FIRE_RL_mkConnectionVtoAf_17,
       WILL_FIRE_RL_mkConnectionVtoAf_18,
       WILL_FIRE_RL_mkConnectionVtoAf_2,
       WILL_FIRE_RL_mkConnectionVtoAf_3,
       WILL_FIRE_RL_mkConnectionVtoAf_4,
       WILL_FIRE_RL_mkConnectionVtoAf_5,
       WILL_FIRE_RL_mkConnectionVtoAf_6,
       WILL_FIRE_RL_mkConnectionVtoAf_7,
       WILL_FIRE_RL_mkConnectionVtoAf_8,
       WILL_FIRE_RL_mkConnectionVtoAf_9,
       WILL_FIRE_RL_pipe_s0s1_notEmpty_1_connect_ena,
       WILL_FIRE_RL_pipe_s0s1_notEmpty_1_connect_first,
       WILL_FIRE_RL_pipe_s0s1_notEmpty_1_connect_notEmpty,
       WILL_FIRE_RL_pipe_s0s1_notEmpty_1_connect_rdy,
       WILL_FIRE_RL_pipe_s0s1_notEmpty_connect_ena_data,
       WILL_FIRE_RL_pipe_s0s1_notEmpty_connect_notFull,
       WILL_FIRE_RL_pipe_s0s1_notEmpty_connect_rdy,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_1_connect_ena,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_1_connect_first,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_1_connect_notEmpty,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_1_connect_rdy,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_ena,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_1,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_2,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_3,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_1,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_2,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_3,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_4,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_first,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_first_1,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_first_2,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_first_3,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_notEmpty,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_notEmpty_1,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_notEmpty_2,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_notEmpty_3,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull_1,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull_2,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull_3,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull_4,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_1,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_2,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_3,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_4,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_5,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_6,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_7,
       WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_8,
       WILL_FIRE_RL_rg_reset_event__dreg_update,
       WILL_FIRE_RL_rl_assert_reset_done,
       WILL_FIRE_RL_rl_clear_stall_in_decode_stage,
       WILL_FIRE_RL_rl_connect_bpu_enable,
       WILL_FIRE_RL_rl_connect_debug_decode,
       WILL_FIRE_RL_rl_connect_events,
       WILL_FIRE_RL_rl_connect_events1,
       WILL_FIRE_RL_rl_flush_stage0,
       WILL_FIRE_RL_rl_gen_bypass,
       WILL_FIRE_RL_rl_gen_bypass_1,
       WILL_FIRE_RL_rl_update_eEpoch,
       WILL_FIRE_RL_rl_update_wEpoch,
       WILL_FIRE_RL_s1_pipe1_connect_ena_data,
       WILL_FIRE_RL_s1_pipe1_connect_notFull,
       WILL_FIRE_RL_s1_pipe1_connect_rdy,
       WILL_FIRE_RL_s2_pipe1_connect_ena,
       WILL_FIRE_RL_s2_pipe1_connect_first,
       WILL_FIRE_RL_s2_pipe1_connect_notEmpty,
       WILL_FIRE_RL_s2_pipe1_connect_rdy,
       WILL_FIRE_interrupts_ma_clint_msip,
       WILL_FIRE_interrupts_ma_clint_mtime,
       WILL_FIRE_interrupts_ma_clint_mtip,
       WILL_FIRE_interrupts_ma_plic_meip,
       WILL_FIRE_interrupts_ma_plic_seip,
       WILL_FIRE_ma_debug_interrupt,
       WILL_FIRE_ma_debugger_available,
       WILL_FIRE_perfmonitors_ma_dcache_counters,
       WILL_FIRE_perfmonitors_ma_dtlb_counters,
       WILL_FIRE_perfmonitors_ma_icache_counters,
       WILL_FIRE_perfmonitors_ma_itlb_counters,
       WILL_FIRE_s0_icache_to_icache_get,
       WILL_FIRE_s1_icache_inst_response_put,
       WILL_FIRE_s3_cache_ma_cache_is_available,
       WILL_FIRE_s3_cache_mv_memory_request_get,
       WILL_FIRE_s4_cache_memory_response_put,
       WILL_FIRE_s5_cache_ma_io_response;

  // remaining internal signals
  wire [63 : 0] fl_pc__h22236;
  wire [12 : 0] IF_wr_dcache_counters_whas__46_THEN_wr_dcache__ETC___d348;
  wire [4 : 0] IF_wr_icache_counters_whas__69_THEN_wr_icache__ETC___d371;
  wire lv_count_dtlb_misses__h3181, lv_count_itlb_misses__h3180;

  // actionvalue method s0_icache_to_icache_get
  assign s0_icache_to_icache_get = stage0_icache_to_icache_get ;
  assign RDY_s0_icache_to_icache_get = stage0_RDY_icache_to_icache_get ;
  assign CAN_FIRE_s0_icache_to_icache_get = stage0_RDY_icache_to_icache_get ;
  assign WILL_FIRE_s0_icache_to_icache_get = EN_s0_icache_to_icache_get ;

  // action method s1_icache_inst_response_put
  assign RDY_s1_icache_inst_response_put =
	     stage1_RDY_icache_inst_response_put ;
  assign CAN_FIRE_s1_icache_inst_response_put =
	     stage1_RDY_icache_inst_response_put ;
  assign WILL_FIRE_s1_icache_inst_response_put =
	     EN_s1_icache_inst_response_put ;

  // actionvalue method s3_cache_mv_memory_request_get
  assign s3_cache_mv_memory_request_get = stage3_cache_mv_memory_request_get ;
  assign RDY_s3_cache_mv_memory_request_get =
	     stage3_RDY_cache_mv_memory_request_get ;
  assign CAN_FIRE_s3_cache_mv_memory_request_get =
	     stage3_RDY_cache_mv_memory_request_get ;
  assign WILL_FIRE_s3_cache_mv_memory_request_get =
	     EN_s3_cache_mv_memory_request_get ;

  // action method s3_cache_ma_cache_is_available
  assign CAN_FIRE_s3_cache_ma_cache_is_available = 1'd1 ;
  assign WILL_FIRE_s3_cache_ma_cache_is_available = 1'd1 ;

  // action method s4_cache_memory_response_put
  assign RDY_s4_cache_memory_response_put =
	     stage4_RDY_cache_memory_response_put ;
  assign CAN_FIRE_s4_cache_memory_response_put =
	     stage4_RDY_cache_memory_response_put ;
  assign WILL_FIRE_s4_cache_memory_response_put =
	     EN_s4_cache_memory_response_put ;

  // action method interrupts_ma_clint_msip
  assign RDY_interrupts_ma_clint_msip = 1'd1 ;
  assign CAN_FIRE_interrupts_ma_clint_msip = 1'd1 ;
  assign WILL_FIRE_interrupts_ma_clint_msip = EN_interrupts_ma_clint_msip ;

  // action method interrupts_ma_clint_mtip
  assign RDY_interrupts_ma_clint_mtip = 1'd1 ;
  assign CAN_FIRE_interrupts_ma_clint_mtip = 1'd1 ;
  assign WILL_FIRE_interrupts_ma_clint_mtip = EN_interrupts_ma_clint_mtip ;

  // action method interrupts_ma_clint_mtime
  assign RDY_interrupts_ma_clint_mtime = 1'd1 ;
  assign CAN_FIRE_interrupts_ma_clint_mtime = 1'd1 ;
  assign WILL_FIRE_interrupts_ma_clint_mtime = EN_interrupts_ma_clint_mtime ;

  // action method interrupts_ma_plic_meip
  assign RDY_interrupts_ma_plic_meip = 1'd1 ;
  assign CAN_FIRE_interrupts_ma_plic_meip = 1'd1 ;
  assign WILL_FIRE_interrupts_ma_plic_meip = EN_interrupts_ma_plic_meip ;

  // action method interrupts_ma_plic_seip
  assign RDY_interrupts_ma_plic_seip = 1'd1 ;
  assign CAN_FIRE_interrupts_ma_plic_seip = 1'd1 ;
  assign WILL_FIRE_interrupts_ma_plic_seip = EN_interrupts_ma_plic_seip ;

  // value method s5_cache_mv_initiate_store_fst
  assign s5_cache_mv_initiate_store_fst = stage5_cache_mv_initiate_store_fst ;
  assign RDY_s5_cache_mv_initiate_store_fst =
	     stage5_RDY_cache_mv_initiate_store_fst ;

  // value method s5_cache_mv_initiate_store_snd
  assign s5_cache_mv_initiate_store_snd = stage5_cache_mv_initiate_store_snd ;
  assign RDY_s5_cache_mv_initiate_store_snd =
	     stage5_RDY_cache_mv_initiate_store_snd ;

  // value method s5_cache_mv_initiate_ioop
  assign s5_cache_mv_initiate_ioop = stage5_cache_mv_initiate_ioop ;
  assign RDY_s5_cache_mv_initiate_ioop = stage5_RDY_cache_mv_initiate_ioop ;

  // action method s5_cache_ma_io_response
  assign RDY_s5_cache_ma_io_response = 1'd1 ;
  assign CAN_FIRE_s5_cache_ma_io_response = 1'd1 ;
  assign WILL_FIRE_s5_cache_ma_io_response = EN_s5_cache_ma_io_response ;

  // value method csrs_mv_csr_mstatus
  assign csrs_mv_csr_mstatus = stage5_csrs_mv_csr_mstatus ;
  assign RDY_csrs_mv_csr_mstatus = 1'd1 ;

  // value method csrs_mv_cacheenable
  assign csrs_mv_cacheenable = stage5_csrs_mv_cacheenable[3:0] ;
  assign RDY_csrs_mv_cacheenable = 1'd1 ;

  // value method csrs_mv_curr_priv
  assign csrs_mv_curr_priv = stage5_csrs_mv_curr_priv ;
  assign RDY_csrs_mv_curr_priv = 1'd1 ;

  // value method csrs_mv_csr_satp
  assign csrs_mv_csr_satp = stage5_csrs_mv_csr_satp ;
  assign RDY_csrs_mv_csr_satp = 1'd1 ;

  // value method csrs_mv_pmp_cfg
  assign csrs_mv_pmp_cfg = stage5_csrs_mv_pmp_cfg ;
  assign RDY_csrs_mv_pmp_cfg = 1'd1 ;

  // value method csrs_mv_pmp_addr
  assign csrs_mv_pmp_addr = stage5_csrs_mv_pmp_addr ;
  assign RDY_csrs_mv_pmp_addr = 1'd1 ;

  // value method pipe_status_mv_pipe_isbs_empty
  assign pipe_status_mv_pipe_isbs_empty =
	     { !ff_fuid_EMPTY_N,
	       !ff_fuid_1_EMPTY_N,
	       !pipe_s2s3_notEmpty_ff_meta_EMPTY_N,
	       !ff_pipe1_EMPTY_N,
	       !pipe_s0s1_notEmpty_ff_pipe0_EMPTY_N } ;
  assign RDY_pipe_status_mv_pipe_isbs_empty = 1'd1 ;

  // value method pipe_status_mv_wfi_detected
  assign pipe_status_mv_wfi_detected = stage2_mv_wfi_detected ;
  assign RDY_pipe_status_mv_wfi_detected = 1'd1 ;

  // action method perfmonitors_ma_icache_counters
  assign RDY_perfmonitors_ma_icache_counters = 1'd1 ;
  assign CAN_FIRE_perfmonitors_ma_icache_counters = 1'd1 ;
  assign WILL_FIRE_perfmonitors_ma_icache_counters =
	     EN_perfmonitors_ma_icache_counters ;

  // action method perfmonitors_ma_dcache_counters
  assign RDY_perfmonitors_ma_dcache_counters = 1'd1 ;
  assign CAN_FIRE_perfmonitors_ma_dcache_counters = 1'd1 ;
  assign WILL_FIRE_perfmonitors_ma_dcache_counters =
	     EN_perfmonitors_ma_dcache_counters ;

  // action method perfmonitors_ma_dtlb_counters
  assign RDY_perfmonitors_ma_dtlb_counters = 1'd1 ;
  assign CAN_FIRE_perfmonitors_ma_dtlb_counters = 1'd1 ;
  assign WILL_FIRE_perfmonitors_ma_dtlb_counters =
	     EN_perfmonitors_ma_dtlb_counters ;

  // action method perfmonitors_ma_itlb_counters
  assign RDY_perfmonitors_ma_itlb_counters = 1'd1 ;
  assign CAN_FIRE_perfmonitors_ma_itlb_counters = 1'd1 ;
  assign WILL_FIRE_perfmonitors_ma_itlb_counters =
	     EN_perfmonitors_ma_itlb_counters ;

  // action method ma_debug_interrupt
  assign RDY_ma_debug_interrupt = 1'd1 ;
  assign CAN_FIRE_ma_debug_interrupt = 1'd1 ;
  assign WILL_FIRE_ma_debug_interrupt = EN_ma_debug_interrupt ;

  // value method mv_core_is_reset
  assign mv_core_is_reset = rg_reset_event ;
  assign RDY_mv_core_is_reset = 1'd1 ;

  // value method mv_core_debugenable
  assign mv_core_debugenable = stage5_debug_mv_core_debugenable ;
  assign RDY_mv_core_debugenable = 1'd1 ;

  // action method ma_debugger_available
  assign CAN_FIRE_ma_debugger_available = 1'd1 ;
  assign WILL_FIRE_ma_debugger_available = 1'd1 ;

  // value method mv_stop_timer
  assign mv_stop_timer = stage5_debug_mv_stop_timer ;
  assign RDY_mv_stop_timer = 1'd1 ;

  // value method mv_stop_count
  assign mv_stop_count = stage5_debug_mv_stop_count ;
  assign RDY_mv_stop_count = 1'd1 ;

  // value method commitlog
  assign commitlog = stage5_common_mv_commit_log ;
  assign RDY_commitlog = 1'd1 ;

  // value method sbread_mv_csr_misa
  assign sbread_mv_csr_misa = stage5_csrs_sbread_mv_csr_misa ;
  assign RDY_sbread_mv_csr_misa = 1'd1 ;

  // value method sbread_mv_csr_mvendorid
  assign sbread_mv_csr_mvendorid = stage5_csrs_sbread_mv_csr_mvendorid ;
  assign RDY_sbread_mv_csr_mvendorid = 1'd1 ;

  // value method sbread_mv_csr_stvec
  assign sbread_mv_csr_stvec = stage5_csrs_sbread_mv_csr_stvec ;
  assign RDY_sbread_mv_csr_stvec = 1'd1 ;

  // value method sbread_mv_csr_mtvec
  assign sbread_mv_csr_mtvec = stage5_csrs_sbread_mv_csr_mtvec ;
  assign RDY_sbread_mv_csr_mtvec = 1'd1 ;

  // value method sbread_mv_csr_mstatus
  assign sbread_mv_csr_mstatus = stage5_csrs_sbread_mv_csr_mstatus ;
  assign RDY_sbread_mv_csr_mstatus = 1'd1 ;

  // value method sbread_mv_csr_marchid
  assign sbread_mv_csr_marchid = stage5_csrs_sbread_mv_csr_marchid ;
  assign RDY_sbread_mv_csr_marchid = 1'd1 ;

  // value method sbread_mv_csr_mimpid
  assign sbread_mv_csr_mimpid = stage5_csrs_sbread_mv_csr_mimpid ;
  assign RDY_sbread_mv_csr_mimpid = 1'd1 ;

  // value method sbread_mv_csr_mhartid
  assign sbread_mv_csr_mhartid = stage5_csrs_sbread_mv_csr_mhartid ;
  assign RDY_sbread_mv_csr_mhartid = 1'd1 ;

  // value method sbread_mv_csr_mip
  assign sbread_mv_csr_mip = stage5_csrs_sbread_mv_csr_mip ;
  assign RDY_sbread_mv_csr_mip = 1'd1 ;

  // value method sbread_mv_csr_sip
  assign sbread_mv_csr_sip = stage5_csrs_sbread_mv_csr_sip ;
  assign RDY_sbread_mv_csr_sip = 1'd1 ;

  // value method sbread_mv_csr_mie
  assign sbread_mv_csr_mie = stage5_csrs_sbread_mv_csr_mie ;
  assign RDY_sbread_mv_csr_mie = 1'd1 ;

  // value method sbread_mv_csr_sie
  assign sbread_mv_csr_sie = stage5_csrs_sbread_mv_csr_sie ;
  assign RDY_sbread_mv_csr_sie = 1'd1 ;

  // value method sbread_mv_csr_mscratch
  assign sbread_mv_csr_mscratch = stage5_csrs_sbread_mv_csr_mscratch ;
  assign RDY_sbread_mv_csr_mscratch = 1'd1 ;

  // value method sbread_mv_csr_sscratch
  assign sbread_mv_csr_sscratch = stage5_csrs_sbread_mv_csr_sscratch ;
  assign RDY_sbread_mv_csr_sscratch = 1'd1 ;

  // value method sbread_mv_csr_sepc
  assign sbread_mv_csr_sepc = stage5_csrs_sbread_mv_csr_sepc ;
  assign RDY_sbread_mv_csr_sepc = 1'd1 ;

  // value method sbread_mv_csr_stval
  assign sbread_mv_csr_stval = stage5_csrs_sbread_mv_csr_stval ;
  assign RDY_sbread_mv_csr_stval = 1'd1 ;

  // value method sbread_mv_csr_scause
  assign sbread_mv_csr_scause = stage5_csrs_sbread_mv_csr_scause ;
  assign RDY_sbread_mv_csr_scause = 1'd1 ;

  // value method sbread_mv_csr_mepc
  assign sbread_mv_csr_mepc = stage5_csrs_sbread_mv_csr_mepc ;
  assign RDY_sbread_mv_csr_mepc = 1'd1 ;

  // value method sbread_mv_csr_mtval
  assign sbread_mv_csr_mtval = stage5_csrs_sbread_mv_csr_mtval ;
  assign RDY_sbread_mv_csr_mtval = 1'd1 ;

  // value method sbread_mv_csr_mcause
  assign sbread_mv_csr_mcause = stage5_csrs_sbread_mv_csr_mcause ;
  assign RDY_sbread_mv_csr_mcause = 1'd1 ;

  // value method sbread_mv_csr_mcycle
  assign sbread_mv_csr_mcycle = stage5_csrs_sbread_mv_csr_mcycle ;
  assign RDY_sbread_mv_csr_mcycle = 1'd1 ;

  // value method sbread_mv_csr_minstret
  assign sbread_mv_csr_minstret = stage5_csrs_sbread_mv_csr_minstret ;
  assign RDY_sbread_mv_csr_minstret = 1'd1 ;

  // value method sbread_mv_csr_fcsr
  assign sbread_mv_csr_fcsr = stage5_csrs_sbread_mv_csr_fcsr ;
  assign RDY_sbread_mv_csr_fcsr = 1'd1 ;

  // value method sbread_mv_csr_time
  assign sbread_mv_csr_time = stage5_csrs_sbread_mv_csr_time ;
  assign RDY_sbread_mv_csr_time = 1'd1 ;

  // value method sbread_mv_csr_mideleg
  assign sbread_mv_csr_mideleg = stage5_csrs_sbread_mv_csr_mideleg ;
  assign RDY_sbread_mv_csr_mideleg = 1'd1 ;

  // value method sbread_mv_csr_medeleg
  assign sbread_mv_csr_medeleg = stage5_csrs_sbread_mv_csr_medeleg ;
  assign RDY_sbread_mv_csr_medeleg = 1'd1 ;

  // value method sbread_mv_csr_pmpcfg0
  assign sbread_mv_csr_pmpcfg0 = stage5_csrs_sbread_mv_csr_pmpcfg0 ;
  assign RDY_sbread_mv_csr_pmpcfg0 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr0
  assign sbread_mv_csr_pmpaddr0 = stage5_csrs_sbread_mv_csr_pmpaddr0 ;
  assign RDY_sbread_mv_csr_pmpaddr0 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr1
  assign sbread_mv_csr_pmpaddr1 = stage5_csrs_sbread_mv_csr_pmpaddr1 ;
  assign RDY_sbread_mv_csr_pmpaddr1 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr2
  assign sbread_mv_csr_pmpaddr2 = stage5_csrs_sbread_mv_csr_pmpaddr2 ;
  assign RDY_sbread_mv_csr_pmpaddr2 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr3
  assign sbread_mv_csr_pmpaddr3 = stage5_csrs_sbread_mv_csr_pmpaddr3 ;
  assign RDY_sbread_mv_csr_pmpaddr3 = 1'd1 ;

  // value method sbread_mv_csr_mcounteren
  assign sbread_mv_csr_mcounteren = stage5_csrs_sbread_mv_csr_mcounteren ;
  assign RDY_sbread_mv_csr_mcounteren = 1'd1 ;

  // value method sbread_mv_csr_scounteren
  assign sbread_mv_csr_scounteren = stage5_csrs_sbread_mv_csr_scounteren ;
  assign RDY_sbread_mv_csr_scounteren = 1'd1 ;

  // value method sbread_mv_csr_menvcfg
  assign sbread_mv_csr_menvcfg = stage5_csrs_sbread_mv_csr_menvcfg ;
  assign RDY_sbread_mv_csr_menvcfg = 1'd1 ;

  // value method sbread_mv_csr_senvcfg
  assign sbread_mv_csr_senvcfg = stage5_csrs_sbread_mv_csr_senvcfg ;
  assign RDY_sbread_mv_csr_senvcfg = 1'd1 ;

  // value method sbread_mv_csr_satp
  assign sbread_mv_csr_satp = stage5_csrs_sbread_mv_csr_satp ;
  assign RDY_sbread_mv_csr_satp = 1'd1 ;

  // value method sbread_mv_csr_mcountinhibit
  assign sbread_mv_csr_mcountinhibit =
	     stage5_csrs_sbread_mv_csr_mcountinhibit ;
  assign RDY_sbread_mv_csr_mcountinhibit = 1'd1 ;

  // value method sbread_mv_csr_fflags
  assign sbread_mv_csr_fflags = stage5_csrs_sbread_mv_csr_fflags ;
  assign RDY_sbread_mv_csr_fflags = 1'd1 ;

  // value method sbread_mv_csr_frm
  assign sbread_mv_csr_frm = stage5_csrs_sbread_mv_csr_frm ;
  assign RDY_sbread_mv_csr_frm = 1'd1 ;

  // value method sbread_mv_csr_customcontrol
  assign sbread_mv_csr_customcontrol =
	     stage5_csrs_sbread_mv_csr_customcontrol ;
  assign RDY_sbread_mv_csr_customcontrol = 1'd1 ;

  // value method sbread_mv_csr_mhpmcounter3
  assign sbread_mv_csr_mhpmcounter3 = stage5_csrs_sbread_mv_csr_mhpmcounter3 ;
  assign RDY_sbread_mv_csr_mhpmcounter3 = 1'd1 ;

  // value method sbread_mv_csr_mhpmcounter4
  assign sbread_mv_csr_mhpmcounter4 = stage5_csrs_sbread_mv_csr_mhpmcounter4 ;
  assign RDY_sbread_mv_csr_mhpmcounter4 = 1'd1 ;

  // value method sbread_mv_csr_mhpmcounter5
  assign sbread_mv_csr_mhpmcounter5 = stage5_csrs_sbread_mv_csr_mhpmcounter5 ;
  assign RDY_sbread_mv_csr_mhpmcounter5 = 1'd1 ;

  // value method sbread_mv_csr_mhpmcounter6
  assign sbread_mv_csr_mhpmcounter6 = stage5_csrs_sbread_mv_csr_mhpmcounter6 ;
  assign RDY_sbread_mv_csr_mhpmcounter6 = 1'd1 ;

  // value method sbread_mv_csr_mhpmevent3
  assign sbread_mv_csr_mhpmevent3 = stage5_csrs_sbread_mv_csr_mhpmevent3 ;
  assign RDY_sbread_mv_csr_mhpmevent3 = 1'd1 ;

  // value method sbread_mv_csr_mhpmevent4
  assign sbread_mv_csr_mhpmevent4 = stage5_csrs_sbread_mv_csr_mhpmevent4 ;
  assign RDY_sbread_mv_csr_mhpmevent4 = 1'd1 ;

  // value method sbread_mv_csr_mhpmevent5
  assign sbread_mv_csr_mhpmevent5 = stage5_csrs_sbread_mv_csr_mhpmevent5 ;
  assign RDY_sbread_mv_csr_mhpmevent5 = 1'd1 ;

  // value method sbread_mv_csr_mhpmevent6
  assign sbread_mv_csr_mhpmevent6 = stage5_csrs_sbread_mv_csr_mhpmevent6 ;
  assign RDY_sbread_mv_csr_mhpmevent6 = 1'd1 ;

  // value method sbread_mv_csr_dcsr
  assign sbread_mv_csr_dcsr = stage5_csrs_sbread_mv_csr_dcsr ;
  assign RDY_sbread_mv_csr_dcsr = 1'd1 ;

  // value method sbread_mv_csr_dpc
  assign sbread_mv_csr_dpc = stage5_csrs_sbread_mv_csr_dpc ;
  assign RDY_sbread_mv_csr_dpc = 1'd1 ;

  // value method sbread_mv_csr_dscratch0
  assign sbread_mv_csr_dscratch0 = stage5_csrs_sbread_mv_csr_dscratch0 ;
  assign RDY_sbread_mv_csr_dscratch0 = 1'd1 ;

  // value method sbread_mv_csr_dscratch1
  assign sbread_mv_csr_dscratch1 = stage5_csrs_sbread_mv_csr_dscratch1 ;
  assign RDY_sbread_mv_csr_dscratch1 = 1'd1 ;

  // submodule fbox
  mkfpu fbox(.CLK(CLK),
	     .RST_N(RST_N),
	     ._start_m(fbox__start_m),
	     .tx_output_enq_rdy_b(fbox_tx_output_enq_rdy_b),
	     .tx_output_notFull_b(fbox_tx_output_notFull_b),
	     .EN__start(fbox_EN__start),
	     .EN_flush(fbox_EN_flush),
	     .RDY__start(fbox_RDY__start),
	     .tx_output_enq_ena(fbox_tx_output_enq_ena),
	     .tx_output_enq_data(fbox_tx_output_enq_data),
	     .RDY_flush(),
	     .fpu_ready(fbox_fpu_ready),
	     .RDY_fpu_ready());

  // submodule ff_baseout
  SizedFIFO #(.p1width(32'd80),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_baseout(.RST(RST_N),
					 .CLK(CLK),
					 .D_IN(ff_baseout_D_IN),
					 .ENQ(ff_baseout_ENQ),
					 .DEQ(ff_baseout_DEQ),
					 .CLR(ff_baseout_CLR),
					 .D_OUT(ff_baseout_D_OUT),
					 .FULL_N(ff_baseout_FULL_N),
					 .EMPTY_N(ff_baseout_EMPTY_N));

  // submodule ff_baseout_1
  SizedFIFO #(.p1width(32'd80),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_baseout_1(.RST(RST_N),
					   .CLK(CLK),
					   .D_IN(ff_baseout_1_D_IN),
					   .ENQ(ff_baseout_1_ENQ),
					   .DEQ(ff_baseout_1_DEQ),
					   .CLR(ff_baseout_1_CLR),
					   .D_OUT(ff_baseout_1_D_OUT),
					   .FULL_N(ff_baseout_1_FULL_N),
					   .EMPTY_N(ff_baseout_1_EMPTY_N));

  // submodule ff_commitlog
  SizedFIFO #(.p1width(32'd309),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_commitlog(.RST(RST_N),
					   .CLK(CLK),
					   .D_IN(ff_commitlog_D_IN),
					   .ENQ(ff_commitlog_ENQ),
					   .DEQ(ff_commitlog_DEQ),
					   .CLR(ff_commitlog_CLR),
					   .D_OUT(ff_commitlog_D_OUT),
					   .FULL_N(ff_commitlog_FULL_N),
					   .EMPTY_N(ff_commitlog_EMPTY_N));

  // submodule ff_commitlog_1
  SizedFIFO #(.p1width(32'd309),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_commitlog_1(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(ff_commitlog_1_D_IN),
					     .ENQ(ff_commitlog_1_ENQ),
					     .DEQ(ff_commitlog_1_DEQ),
					     .CLR(ff_commitlog_1_CLR),
					     .D_OUT(ff_commitlog_1_D_OUT),
					     .FULL_N(ff_commitlog_1_FULL_N),
					     .EMPTY_N(ff_commitlog_1_EMPTY_N));

  // submodule ff_commitlog_2
  FIFO2 #(.width(32'd309), .guarded(1'd1)) ff_commitlog_2(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(ff_commitlog_2_D_IN),
							  .ENQ(ff_commitlog_2_ENQ),
							  .DEQ(ff_commitlog_2_DEQ),
							  .CLR(ff_commitlog_2_CLR),
							  .D_OUT(ff_commitlog_2_D_OUT),
							  .FULL_N(ff_commitlog_2_FULL_N),
							  .EMPTY_N(ff_commitlog_2_EMPTY_N));

  // submodule ff_fbox_out_beforeDeq
  RevertReg #(.width(32'd1), .init(1'd1)) ff_fbox_out_beforeDeq(.CLK(CLK),
								.D_IN(ff_fbox_out_beforeDeq_D_IN),
								.EN(ff_fbox_out_beforeDeq_EN),
								.Q_OUT(ff_fbox_out_beforeDeq_Q_OUT));

  // submodule ff_fbox_out_beforeEnq
  RevertReg #(.width(32'd1), .init(1'd1)) ff_fbox_out_beforeEnq(.CLK(CLK),
								.D_IN(ff_fbox_out_beforeEnq_D_IN),
								.EN(ff_fbox_out_beforeEnq_EN),
								.Q_OUT(ff_fbox_out_beforeEnq_Q_OUT));

  // submodule ff_fbox_out_ff
  SizedFIFO #(.p1width(32'd70),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd0)) ff_fbox_out_ff(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(ff_fbox_out_ff_D_IN),
					     .ENQ(ff_fbox_out_ff_ENQ),
					     .DEQ(ff_fbox_out_ff_DEQ),
					     .CLR(ff_fbox_out_ff_CLR),
					     .D_OUT(ff_fbox_out_ff_D_OUT),
					     .FULL_N(ff_fbox_out_ff_FULL_N),
					     .EMPTY_N(ff_fbox_out_ff_EMPTY_N));

  // submodule ff_fuid
  SizedFIFO #(.p1width(32'd77),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_fuid(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(ff_fuid_D_IN),
				      .ENQ(ff_fuid_ENQ),
				      .DEQ(ff_fuid_DEQ),
				      .CLR(ff_fuid_CLR),
				      .D_OUT(ff_fuid_D_OUT),
				      .FULL_N(ff_fuid_FULL_N),
				      .EMPTY_N(ff_fuid_EMPTY_N));

  // submodule ff_fuid_1
  SizedFIFO #(.p1width(32'd78),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_fuid_1(.RST(RST_N),
					.CLK(CLK),
					.D_IN(ff_fuid_1_D_IN),
					.ENQ(ff_fuid_1_ENQ),
					.DEQ(ff_fuid_1_DEQ),
					.CLR(ff_fuid_1_CLR),
					.D_OUT(ff_fuid_1_D_OUT),
					.FULL_N(ff_fuid_1_FULL_N),
					.EMPTY_N(ff_fuid_1_EMPTY_N));

  // submodule ff_mbox_out_beforeDeq
  RevertReg #(.width(32'd1), .init(1'd1)) ff_mbox_out_beforeDeq(.CLK(CLK),
								.D_IN(ff_mbox_out_beforeDeq_D_IN),
								.EN(ff_mbox_out_beforeDeq_EN),
								.Q_OUT(ff_mbox_out_beforeDeq_Q_OUT));

  // submodule ff_mbox_out_beforeEnq
  RevertReg #(.width(32'd1), .init(1'd1)) ff_mbox_out_beforeEnq(.CLK(CLK),
								.D_IN(ff_mbox_out_beforeEnq_D_IN),
								.EN(ff_mbox_out_beforeEnq_EN),
								.Q_OUT(ff_mbox_out_beforeEnq_Q_OUT));

  // submodule ff_mbox_out_ff
  SizedFIFO #(.p1width(32'd64),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd0)) ff_mbox_out_ff(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(ff_mbox_out_ff_D_IN),
					     .ENQ(ff_mbox_out_ff_ENQ),
					     .DEQ(ff_mbox_out_ff_DEQ),
					     .CLR(ff_mbox_out_ff_CLR),
					     .D_OUT(ff_mbox_out_ff_D_OUT),
					     .FULL_N(ff_mbox_out_ff_FULL_N),
					     .EMPTY_N(ff_mbox_out_ff_EMPTY_N));

  // submodule ff_memoryout
  SizedFIFO #(.p1width(32'd9),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_memoryout(.RST(RST_N),
					   .CLK(CLK),
					   .D_IN(ff_memoryout_D_IN),
					   .ENQ(ff_memoryout_ENQ),
					   .DEQ(ff_memoryout_DEQ),
					   .CLR(ff_memoryout_CLR),
					   .D_OUT(ff_memoryout_D_OUT),
					   .FULL_N(ff_memoryout_FULL_N),
					   .EMPTY_N(ff_memoryout_EMPTY_N));

  // submodule ff_pipe1
  FIFO2 #(.width(32'd120), .guarded(1'd1)) ff_pipe1(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ff_pipe1_D_IN),
						    .ENQ(ff_pipe1_ENQ),
						    .DEQ(ff_pipe1_DEQ),
						    .CLR(ff_pipe1_CLR),
						    .D_OUT(ff_pipe1_D_OUT),
						    .FULL_N(ff_pipe1_FULL_N),
						    .EMPTY_N(ff_pipe1_EMPTY_N));

  // submodule ff_systemout
  SizedFIFO #(.p1width(32'd81),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_systemout(.RST(RST_N),
					   .CLK(CLK),
					   .D_IN(ff_systemout_D_IN),
					   .ENQ(ff_systemout_ENQ),
					   .DEQ(ff_systemout_DEQ),
					   .CLR(ff_systemout_CLR),
					   .D_OUT(ff_systemout_D_OUT),
					   .FULL_N(ff_systemout_FULL_N),
					   .EMPTY_N(ff_systemout_EMPTY_N));

  // submodule ff_systemout_1
  SizedFIFO #(.p1width(32'd81),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_systemout_1(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(ff_systemout_1_D_IN),
					     .ENQ(ff_systemout_1_ENQ),
					     .DEQ(ff_systemout_1_DEQ),
					     .CLR(ff_systemout_1_CLR),
					     .D_OUT(ff_systemout_1_D_OUT),
					     .FULL_N(ff_systemout_1_FULL_N),
					     .EMPTY_N(ff_systemout_1_EMPTY_N));

  // submodule ff_trapout
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_trapout(.RST(RST_N),
					 .CLK(CLK),
					 .D_IN(ff_trapout_D_IN),
					 .ENQ(ff_trapout_ENQ),
					 .DEQ(ff_trapout_DEQ),
					 .CLR(ff_trapout_CLR),
					 .D_OUT(ff_trapout_D_OUT),
					 .FULL_N(ff_trapout_FULL_N),
					 .EMPTY_N(ff_trapout_EMPTY_N));

  // submodule ff_trapout_1
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_trapout_1(.RST(RST_N),
					   .CLK(CLK),
					   .D_IN(ff_trapout_1_D_IN),
					   .ENQ(ff_trapout_1_ENQ),
					   .DEQ(ff_trapout_1_DEQ),
					   .CLR(ff_trapout_1_CLR),
					   .D_OUT(ff_trapout_1_D_OUT),
					   .FULL_N(ff_trapout_1_FULL_N),
					   .EMPTY_N(ff_trapout_1_EMPTY_N));

  // submodule ff_wbmemop
  SizedFIFO #(.p1width(32'd70),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_wbmemop(.RST(RST_N),
					 .CLK(CLK),
					 .D_IN(ff_wbmemop_D_IN),
					 .ENQ(ff_wbmemop_ENQ),
					 .DEQ(ff_wbmemop_DEQ),
					 .CLR(ff_wbmemop_CLR),
					 .D_OUT(ff_wbmemop_D_OUT),
					 .FULL_N(ff_wbmemop_FULL_N),
					 .EMPTY_N(ff_wbmemop_EMPTY_N));

  // submodule mbox
  mkmbox #(.hartid(64'd0)) mbox(.CLK(CLK),
				.RST_N(RST_N),
				.ma_inputs_inputs(mbox_ma_inputs_inputs),
				.tx_output_enq_rdy_b(mbox_tx_output_enq_rdy_b),
				.tx_output_notFull_b(mbox_tx_output_notFull_b),
				.EN_ma_inputs(mbox_EN_ma_inputs),
				.RDY_ma_inputs(),
				.mv_ready(mbox_mv_ready),
				.RDY_mv_ready(),
				.tx_output_enq_ena(mbox_tx_output_enq_ena),
				.tx_output_enq_data(mbox_tx_output_enq_data));

  // submodule pipe_s0s1_notEmpty_ff_pipe0
  FIFO2 #(.width(32'd77),
	  .guarded(1'd1)) pipe_s0s1_notEmpty_ff_pipe0(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(pipe_s0s1_notEmpty_ff_pipe0_D_IN),
						      .ENQ(pipe_s0s1_notEmpty_ff_pipe0_ENQ),
						      .DEQ(pipe_s0s1_notEmpty_ff_pipe0_DEQ),
						      .CLR(pipe_s0s1_notEmpty_ff_pipe0_CLR),
						      .D_OUT(pipe_s0s1_notEmpty_ff_pipe0_D_OUT),
						      .FULL_N(pipe_s0s1_notEmpty_ff_pipe0_FULL_N),
						      .EMPTY_N(pipe_s0s1_notEmpty_ff_pipe0_EMPTY_N));

  // submodule pipe_s2s3_notEmpty_ff_commitlog
  FIFOL1 #(.width(32'd309)) pipe_s2s3_notEmpty_ff_commitlog(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(pipe_s2s3_notEmpty_ff_commitlog_D_IN),
							    .ENQ(pipe_s2s3_notEmpty_ff_commitlog_ENQ),
							    .DEQ(pipe_s2s3_notEmpty_ff_commitlog_DEQ),
							    .CLR(pipe_s2s3_notEmpty_ff_commitlog_CLR),
							    .D_OUT(pipe_s2s3_notEmpty_ff_commitlog_D_OUT),
							    .FULL_N(pipe_s2s3_notEmpty_ff_commitlog_FULL_N),
							    .EMPTY_N(pipe_s2s3_notEmpty_ff_commitlog_EMPTY_N));

  // submodule pipe_s2s3_notEmpty_ff_insttype
  FIFOL1 #(.width(32'd4)) pipe_s2s3_notEmpty_ff_insttype(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(pipe_s2s3_notEmpty_ff_insttype_D_IN),
							 .ENQ(pipe_s2s3_notEmpty_ff_insttype_ENQ),
							 .DEQ(pipe_s2s3_notEmpty_ff_insttype_DEQ),
							 .CLR(pipe_s2s3_notEmpty_ff_insttype_CLR),
							 .D_OUT(pipe_s2s3_notEmpty_ff_insttype_D_OUT),
							 .FULL_N(pipe_s2s3_notEmpty_ff_insttype_FULL_N),
							 .EMPTY_N(pipe_s2s3_notEmpty_ff_insttype_EMPTY_N));

  // submodule pipe_s2s3_notEmpty_ff_meta
  FIFOL1 #(.width(32'd97)) pipe_s2s3_notEmpty_ff_meta(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(pipe_s2s3_notEmpty_ff_meta_D_IN),
						      .ENQ(pipe_s2s3_notEmpty_ff_meta_ENQ),
						      .DEQ(pipe_s2s3_notEmpty_ff_meta_DEQ),
						      .CLR(pipe_s2s3_notEmpty_ff_meta_CLR),
						      .D_OUT(pipe_s2s3_notEmpty_ff_meta_D_OUT),
						      .FULL_N(pipe_s2s3_notEmpty_ff_meta_FULL_N),
						      .EMPTY_N(pipe_s2s3_notEmpty_ff_meta_EMPTY_N));

  // submodule pipe_s2s3_notEmpty_ff_mtval
  FIFOL1 #(.width(32'd64)) pipe_s2s3_notEmpty_ff_mtval(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(pipe_s2s3_notEmpty_ff_mtval_D_IN),
						       .ENQ(pipe_s2s3_notEmpty_ff_mtval_ENQ),
						       .DEQ(pipe_s2s3_notEmpty_ff_mtval_DEQ),
						       .CLR(pipe_s2s3_notEmpty_ff_mtval_CLR),
						       .D_OUT(pipe_s2s3_notEmpty_ff_mtval_D_OUT),
						       .FULL_N(pipe_s2s3_notEmpty_ff_mtval_FULL_N),
						       .EMPTY_N(pipe_s2s3_notEmpty_ff_mtval_EMPTY_N));

  // submodule pipe_s2s3_notEmpty_ff_opmeta
  FIFOL1 #(.width(32'd21)) pipe_s2s3_notEmpty_ff_opmeta(.RST(RST_N),
							.CLK(CLK),
							.D_IN(pipe_s2s3_notEmpty_ff_opmeta_D_IN),
							.ENQ(pipe_s2s3_notEmpty_ff_opmeta_ENQ),
							.DEQ(pipe_s2s3_notEmpty_ff_opmeta_DEQ),
							.CLR(pipe_s2s3_notEmpty_ff_opmeta_CLR),
							.D_OUT(pipe_s2s3_notEmpty_ff_opmeta_D_OUT),
							.FULL_N(pipe_s2s3_notEmpty_ff_opmeta_FULL_N),
							.EMPTY_N(pipe_s2s3_notEmpty_ff_opmeta_EMPTY_N));

  // submodule stage0
  mkstage0 #(.hartid(hartid)) stage0(.resetpc(resetpc),
				     .CLK(CLK),
				     .RST_N(RST_N),
				     .common_ma_flush_fl(stage0_common_ma_flush_fl),
				     .common_ma_reset_done__done(stage0_common_ma_reset_done__done),
				     .s0_bpu_ma_bpu_enable_e(stage0_s0_bpu_ma_bpu_enable_e),
				     .s0_bpu_ma_mispredict_g(stage0_s0_bpu_ma_mispredict_g),
				     .s0_bpu_ma_train_bpu_td(stage0_s0_bpu_ma_train_bpu_td),
				     .tx_tx_to_stage1_enq_rdy_b(stage0_tx_tx_to_stage1_enq_rdy_b),
				     .tx_tx_to_stage1_notFull_b(stage0_tx_tx_to_stage1_notFull_b),
				     .EN_common_ma_update_eEpoch(stage0_EN_common_ma_update_eEpoch),
				     .EN_common_ma_update_wEpoch(stage0_EN_common_ma_update_wEpoch),
				     .EN_common_ma_flush(stage0_EN_common_ma_flush),
				     .EN_common_ma_reset_done(stage0_EN_common_ma_reset_done),
				     .EN_icache_to_icache_get(stage0_EN_icache_to_icache_get),
				     .EN_s0_bpu_ma_train_bpu(stage0_EN_s0_bpu_ma_train_bpu),
				     .EN_s0_bpu_ma_mispredict(stage0_EN_s0_bpu_ma_mispredict),
				     .EN_s0_bpu_ma_bpu_enable(stage0_EN_s0_bpu_ma_bpu_enable),
				     .RDY_common_ma_update_eEpoch(),
				     .RDY_common_ma_update_wEpoch(),
				     .RDY_common_ma_flush(stage0_RDY_common_ma_flush),
				     .RDY_common_ma_reset_done(),
				     .icache_to_icache_get(stage0_icache_to_icache_get),
				     .RDY_icache_to_icache_get(stage0_RDY_icache_to_icache_get),
				     .tx_tx_to_stage1_enq_ena(stage0_tx_tx_to_stage1_enq_ena),
				     .tx_tx_to_stage1_enq_data(stage0_tx_tx_to_stage1_enq_data),
				     .RDY_s0_bpu_ma_train_bpu(stage0_RDY_s0_bpu_ma_train_bpu),
				     .RDY_s0_bpu_ma_mispredict(stage0_RDY_s0_bpu_ma_mispredict),
				     .RDY_s0_bpu_ma_bpu_enable());

  // submodule stage1
  mkstage1 #(.hartid(hartid)) stage1(.CLK(CLK),
				     .RST_N(RST_N),
				     .common_ma_csr_misa_c_c(stage1_common_ma_csr_misa_c_c),
				     .icache_inst_response_put(stage1_icache_inst_response_put),
				     .rx_rx_from_stage0_first_deq_rdy_b(stage1_rx_rx_from_stage0_first_deq_rdy_b),
				     .rx_rx_from_stage0_first_x(stage1_rx_rx_from_stage0_first_x),
				     .rx_rx_from_stage0_notEmpty_b(stage1_rx_rx_from_stage0_notEmpty_b),
				     .tx_tx_commitlog_enq_rdy_b(stage1_tx_tx_commitlog_enq_rdy_b),
				     .tx_tx_commitlog_notFull_b(stage1_tx_tx_commitlog_notFull_b),
				     .tx_tx_to_stage2_enq_rdy_b(stage1_tx_tx_to_stage2_enq_rdy_b),
				     .tx_tx_to_stage2_notFull_b(stage1_tx_tx_to_stage2_notFull_b),
				     .EN_icache_inst_response_put(stage1_EN_icache_inst_response_put),
				     .EN_common_ma_update_eEpoch(stage1_EN_common_ma_update_eEpoch),
				     .EN_common_ma_update_wEpoch(stage1_EN_common_ma_update_wEpoch),
				     .EN_common_ma_csr_misa_c(stage1_EN_common_ma_csr_misa_c),
				     .rx_rx_from_stage0_deq_ena(stage1_rx_rx_from_stage0_deq_ena),
				     .tx_tx_to_stage2_enq_ena(stage1_tx_tx_to_stage2_enq_ena),
				     .tx_tx_to_stage2_enq_data(stage1_tx_tx_to_stage2_enq_data),
				     .tx_tx_commitlog_enq_ena(stage1_tx_tx_commitlog_enq_ena),
				     .tx_tx_commitlog_enq_data(stage1_tx_tx_commitlog_enq_data),
				     .RDY_icache_inst_response_put(stage1_RDY_icache_inst_response_put),
				     .RDY_common_ma_update_eEpoch(),
				     .RDY_common_ma_update_wEpoch(),
				     .RDY_common_ma_csr_misa_c());

  // submodule stage2
  mkstage2 #(.hartid(hartid)) stage2(.CLK(CLK),
				     .RST_N(RST_N),
				     .common_ma_clear_stall_upd(stage2_common_ma_clear_stall_upd),
				     .common_ma_commit_rd_commit(stage2_common_ma_commit_rd_commit),
				     .common_ma_csrs_csr(stage2_common_ma_csrs_csr),
				     .common_ma_resume_wfi_w(stage2_common_ma_resume_wfi_w),
				     .debug_debug_status_status(stage2_debug_debug_status_status),
				     .rx_rx_commitlog_first_deq_rdy_b(stage2_rx_rx_commitlog_first_deq_rdy_b),
				     .rx_rx_commitlog_first_x(stage2_rx_rx_commitlog_first_x),
				     .rx_rx_commitlog_notEmpty_b(stage2_rx_rx_commitlog_notEmpty_b),
				     .rx_rx_from_stage1_first_deq_rdy_b(stage2_rx_rx_from_stage1_first_deq_rdy_b),
				     .rx_rx_from_stage1_first_x(stage2_rx_rx_from_stage1_first_x),
				     .rx_rx_from_stage1_notEmpty_b(stage2_rx_rx_from_stage1_notEmpty_b),
				     .tx_tx_commitlog_enq_rdy_b(stage2_tx_tx_commitlog_enq_rdy_b),
				     .tx_tx_commitlog_notFull_b(stage2_tx_tx_commitlog_notFull_b),
				     .tx_tx_instrtype_to_stage3_enq_rdy_b(stage2_tx_tx_instrtype_to_stage3_enq_rdy_b),
				     .tx_tx_instrtype_to_stage3_notFull_b(stage2_tx_tx_instrtype_to_stage3_notFull_b),
				     .tx_tx_meta_to_stage3_enq_rdy_b(stage2_tx_tx_meta_to_stage3_enq_rdy_b),
				     .tx_tx_meta_to_stage3_notFull_b(stage2_tx_tx_meta_to_stage3_notFull_b),
				     .tx_tx_mtval_to_stage3_enq_rdy_b(stage2_tx_tx_mtval_to_stage3_enq_rdy_b),
				     .tx_tx_mtval_to_stage3_notFull_b(stage2_tx_tx_mtval_to_stage3_notFull_b),
				     .tx_tx_opmeta_to_stage3_enq_rdy_b(stage2_tx_tx_opmeta_to_stage3_enq_rdy_b),
				     .tx_tx_opmeta_to_stage3_notFull_b(stage2_tx_tx_opmeta_to_stage3_notFull_b),
				     .EN_common_ma_commit_rd(stage2_EN_common_ma_commit_rd),
				     .EN_common_ma_update_eEpoch(stage2_EN_common_ma_update_eEpoch),
				     .EN_common_ma_update_wEpoch(stage2_EN_common_ma_update_wEpoch),
				     .EN_common_ma_csrs(stage2_EN_common_ma_csrs),
				     .EN_common_ma_clear_stall(stage2_EN_common_ma_clear_stall),
				     .EN_common_ma_resume_wfi(stage2_EN_common_ma_resume_wfi),
				     .rx_rx_from_stage1_deq_ena(stage2_rx_rx_from_stage1_deq_ena),
				     .rx_rx_commitlog_deq_ena(stage2_rx_rx_commitlog_deq_ena),
				     .tx_tx_meta_to_stage3_enq_ena(stage2_tx_tx_meta_to_stage3_enq_ena),
				     .tx_tx_meta_to_stage3_enq_data(stage2_tx_tx_meta_to_stage3_enq_data),
				     .tx_tx_mtval_to_stage3_enq_ena(stage2_tx_tx_mtval_to_stage3_enq_ena),
				     .tx_tx_mtval_to_stage3_enq_data(stage2_tx_tx_mtval_to_stage3_enq_data),
				     .tx_tx_instrtype_to_stage3_enq_ena(stage2_tx_tx_instrtype_to_stage3_enq_ena),
				     .tx_tx_instrtype_to_stage3_enq_data(stage2_tx_tx_instrtype_to_stage3_enq_data),
				     .tx_tx_opmeta_to_stage3_enq_ena(stage2_tx_tx_opmeta_to_stage3_enq_ena),
				     .tx_tx_opmeta_to_stage3_enq_data(stage2_tx_tx_opmeta_to_stage3_enq_data),
				     .tx_tx_commitlog_enq_ena(stage2_tx_tx_commitlog_enq_ena),
				     .tx_tx_commitlog_enq_data(stage2_tx_tx_commitlog_enq_data),
				     .rf_mv_op1(stage2_rf_mv_op1),
				     .rf_mv_op2(stage2_rf_mv_op2),
				     .rf_mv_op3(stage2_rf_mv_op3),
				     .RDY_common_ma_commit_rd(stage2_RDY_common_ma_commit_rd),
				     .RDY_common_ma_clear_stall(stage2_RDY_common_ma_clear_stall),
				     .mv_wfi_detected(stage2_mv_wfi_detected),
				     .RDY_mv_wfi_detected());

  // submodule stage3
  mkstage3 #(.hartid(hartid)) stage3(.CLK(CLK),
				     .RST_N(RST_N),
				     .bpu_ma_next_pc_npc(stage3_bpu_ma_next_pc_npc),
				     .bypass_ma_bypass_fwd(stage3_bypass_ma_bypass_fwd),
				     .cache_ma_cache_is_available_avail(stage3_cache_ma_cache_is_available_avail),
				     .common_ma_csr_misa_c_m(stage3_common_ma_csr_misa_c_m),
				     .common_ma_mstatus_mstatus(stage3_common_ma_mstatus_mstatus),
				     .common_ma_priv_priv(stage3_common_ma_priv_priv),
				     .common_ma_sb_release_commit(stage3_common_ma_sb_release_commit),
				     .float_ma_fbox_ready_rdy(stage3_float_ma_fbox_ready_rdy),
				     .muldiv_ma_mbox_ready_rdy(stage3_muldiv_ma_mbox_ready_rdy),
				     .rf_ma_op1_i(stage3_rf_ma_op1_i),
				     .rf_ma_op2_i(stage3_rf_ma_op2_i),
				     .rf_ma_op3_i(stage3_rf_ma_op3_i),
				     .rx_rx_commitlog_first_deq_rdy_b(stage3_rx_rx_commitlog_first_deq_rdy_b),
				     .rx_rx_commitlog_first_x(stage3_rx_rx_commitlog_first_x),
				     .rx_rx_commitlog_notEmpty_b(stage3_rx_rx_commitlog_notEmpty_b),
				     .rx_rx_instrtype_from_stage2_first_deq_rdy_b(stage3_rx_rx_instrtype_from_stage2_first_deq_rdy_b),
				     .rx_rx_instrtype_from_stage2_first_x(stage3_rx_rx_instrtype_from_stage2_first_x),
				     .rx_rx_instrtype_from_stage2_notEmpty_b(stage3_rx_rx_instrtype_from_stage2_notEmpty_b),
				     .rx_rx_meta_from_stage2_first_deq_rdy_b(stage3_rx_rx_meta_from_stage2_first_deq_rdy_b),
				     .rx_rx_meta_from_stage2_first_x(stage3_rx_rx_meta_from_stage2_first_x),
				     .rx_rx_meta_from_stage2_notEmpty_b(stage3_rx_rx_meta_from_stage2_notEmpty_b),
				     .rx_rx_mtval_from_stage2_first_deq_rdy_b(stage3_rx_rx_mtval_from_stage2_first_deq_rdy_b),
				     .rx_rx_mtval_from_stage2_first_x(stage3_rx_rx_mtval_from_stage2_first_x),
				     .rx_rx_mtval_from_stage2_notEmpty_b(stage3_rx_rx_mtval_from_stage2_notEmpty_b),
				     .rx_rx_opmeta_from_stage2_first_deq_rdy_b(stage3_rx_rx_opmeta_from_stage2_first_deq_rdy_b),
				     .rx_rx_opmeta_from_stage2_first_x(stage3_rx_rx_opmeta_from_stage2_first_x),
				     .rx_rx_opmeta_from_stage2_notEmpty_b(stage3_rx_rx_opmeta_from_stage2_notEmpty_b),
				     .tx_tx_baseout_to_stage4_enq_rdy_b(stage3_tx_tx_baseout_to_stage4_enq_rdy_b),
				     .tx_tx_baseout_to_stage4_notFull_b(stage3_tx_tx_baseout_to_stage4_notFull_b),
				     .tx_tx_commitlog_enq_rdy_b(stage3_tx_tx_commitlog_enq_rdy_b),
				     .tx_tx_commitlog_notFull_b(stage3_tx_tx_commitlog_notFull_b),
				     .tx_tx_fuid_to_stage4_enq_rdy_b(stage3_tx_tx_fuid_to_stage4_enq_rdy_b),
				     .tx_tx_fuid_to_stage4_notFull_b(stage3_tx_tx_fuid_to_stage4_notFull_b),
				     .tx_tx_memoryout_to_stage4_enq_rdy_b(stage3_tx_tx_memoryout_to_stage4_enq_rdy_b),
				     .tx_tx_memoryout_to_stage4_notFull_b(stage3_tx_tx_memoryout_to_stage4_notFull_b),
				     .tx_tx_systemout_to_stage4_enq_rdy_b(stage3_tx_tx_systemout_to_stage4_enq_rdy_b),
				     .tx_tx_systemout_to_stage4_notFull_b(stage3_tx_tx_systemout_to_stage4_notFull_b),
				     .tx_tx_trapout_to_stage4_enq_rdy_b(stage3_tx_tx_trapout_to_stage4_enq_rdy_b),
				     .tx_tx_trapout_to_stage4_notFull_b(stage3_tx_tx_trapout_to_stage4_notFull_b),
				     .EN_common_ma_update_wEpoch(stage3_EN_common_ma_update_wEpoch),
				     .EN_common_ma_sb_release(stage3_EN_common_ma_sb_release),
				     .EN_cache_mv_memory_request_get(stage3_EN_cache_mv_memory_request_get),
				     .EN_bpu_ma_next_pc(stage3_EN_bpu_ma_next_pc),
				     .common_mv_flush_fst(stage3_common_mv_flush_fst),
				     .common_mv_flush_snd(stage3_common_mv_flush_snd),
				     .RDY_common_ma_sb_release(),
				     .rx_rx_meta_from_stage2_deq_ena(stage3_rx_rx_meta_from_stage2_deq_ena),
				     .rx_rx_mtval_from_stage2_deq_ena(stage3_rx_rx_mtval_from_stage2_deq_ena),
				     .rx_rx_instrtype_from_stage2_deq_ena(stage3_rx_rx_instrtype_from_stage2_deq_ena),
				     .rx_rx_opmeta_from_stage2_deq_ena(stage3_rx_rx_opmeta_from_stage2_deq_ena),
				     .rx_rx_commitlog_deq_ena(stage3_rx_rx_commitlog_deq_ena),
				     .tx_tx_baseout_to_stage4_enq_ena(stage3_tx_tx_baseout_to_stage4_enq_ena),
				     .tx_tx_baseout_to_stage4_enq_data(stage3_tx_tx_baseout_to_stage4_enq_data),
				     .tx_tx_trapout_to_stage4_enq_ena(stage3_tx_tx_trapout_to_stage4_enq_ena),
				     .tx_tx_trapout_to_stage4_enq_data(stage3_tx_tx_trapout_to_stage4_enq_data),
				     .tx_tx_systemout_to_stage4_enq_ena(stage3_tx_tx_systemout_to_stage4_enq_ena),
				     .tx_tx_systemout_to_stage4_enq_data(stage3_tx_tx_systemout_to_stage4_enq_data),
				     .tx_tx_memoryout_to_stage4_enq_ena(stage3_tx_tx_memoryout_to_stage4_enq_ena),
				     .tx_tx_memoryout_to_stage4_enq_data(stage3_tx_tx_memoryout_to_stage4_enq_data),
				     .tx_tx_fuid_to_stage4_enq_ena(stage3_tx_tx_fuid_to_stage4_enq_ena),
				     .tx_tx_fuid_to_stage4_enq_data(stage3_tx_tx_fuid_to_stage4_enq_data),
				     .tx_tx_commitlog_enq_ena(stage3_tx_tx_commitlog_enq_ena),
				     .tx_tx_commitlog_enq_data(stage3_tx_tx_commitlog_enq_data),
				     .cache_mv_memory_request_get(stage3_cache_mv_memory_request_get),
				     .RDY_cache_mv_memory_request_get(stage3_RDY_cache_mv_memory_request_get),
				     .RDY_bpu_ma_next_pc(),
				     .bpu_mv_train_bpu(stage3_bpu_mv_train_bpu),
				     .RDY_bpu_mv_train_bpu(stage3_RDY_bpu_mv_train_bpu),
				     .bpu_mv_mispredict_fst(stage3_bpu_mv_mispredict_fst),
				     .RDY_bpu_mv_mispredict_fst(stage3_RDY_bpu_mv_mispredict_fst),
				     .bpu_mv_mispredict_snd(stage3_bpu_mv_mispredict_snd),
				     .RDY_bpu_mv_mispredict_snd(stage3_RDY_bpu_mv_mispredict_snd),
				     .muldiv_mv_mbox_inputs(stage3_muldiv_mv_mbox_inputs),
				     .RDY_muldiv_mv_mbox_inputs(stage3_RDY_muldiv_mv_mbox_inputs),
				     .float_mv_fbox_inputs(stage3_float_mv_fbox_inputs),
				     .RDY_float_mv_fbox_inputs(stage3_RDY_float_mv_fbox_inputs),
				     .perfmonitors_mv_count_floats(stage3_perfmonitors_mv_count_floats),
				     .perfmonitors_mv_count_muldiv(stage3_perfmonitors_mv_count_muldiv),
				     .perfmonitors_mv_count_jumps(stage3_perfmonitors_mv_count_jumps),
				     .perfmonitors_mv_count_branches(stage3_perfmonitors_mv_count_branches),
				     .perfmonitors_mv_count_rawstalls(stage3_perfmonitors_mv_count_rawstalls),
				     .perfmonitors_mv_count_exestalls(stage3_perfmonitors_mv_count_exestalls));

  // submodule stage4
  mkstage4 #(.hartid(hartid)) stage4(.CLK(CLK),
				     .RST_N(RST_N),
				     .cache_memory_response_put(stage4_cache_memory_response_put),
				     .rx_rx_baseout_from_stage3_first_deq_rdy_b(stage4_rx_rx_baseout_from_stage3_first_deq_rdy_b),
				     .rx_rx_baseout_from_stage3_first_x(stage4_rx_rx_baseout_from_stage3_first_x),
				     .rx_rx_baseout_from_stage3_notEmpty_b(stage4_rx_rx_baseout_from_stage3_notEmpty_b),
				     .rx_rx_commitlog_first_deq_rdy_b(stage4_rx_rx_commitlog_first_deq_rdy_b),
				     .rx_rx_commitlog_first_x(stage4_rx_rx_commitlog_first_x),
				     .rx_rx_commitlog_notEmpty_b(stage4_rx_rx_commitlog_notEmpty_b),
				     .rx_rx_fuid_from_stage3_first_deq_rdy_b(stage4_rx_rx_fuid_from_stage3_first_deq_rdy_b),
				     .rx_rx_fuid_from_stage3_first_x(stage4_rx_rx_fuid_from_stage3_first_x),
				     .rx_rx_fuid_from_stage3_notEmpty_b(stage4_rx_rx_fuid_from_stage3_notEmpty_b),
				     .rx_rx_memoryout_from_stage3_first_deq_rdy_b(stage4_rx_rx_memoryout_from_stage3_first_deq_rdy_b),
				     .rx_rx_memoryout_from_stage3_first_x(stage4_rx_rx_memoryout_from_stage3_first_x),
				     .rx_rx_memoryout_from_stage3_notEmpty_b(stage4_rx_rx_memoryout_from_stage3_notEmpty_b),
				     .rx_rx_systemout_from_stage3_first_deq_rdy_b(stage4_rx_rx_systemout_from_stage3_first_deq_rdy_b),
				     .rx_rx_systemout_from_stage3_first_x(stage4_rx_rx_systemout_from_stage3_first_x),
				     .rx_rx_systemout_from_stage3_notEmpty_b(stage4_rx_rx_systemout_from_stage3_notEmpty_b),
				     .rx_rx_trapout_from_stage3_first_deq_rdy_b(stage4_rx_rx_trapout_from_stage3_first_deq_rdy_b),
				     .rx_rx_trapout_from_stage3_first_x(stage4_rx_rx_trapout_from_stage3_first_x),
				     .rx_rx_trapout_from_stage3_notEmpty_b(stage4_rx_rx_trapout_from_stage3_notEmpty_b),
				     .s4_fbox_rx_fbox_output_first_deq_rdy_b(stage4_s4_fbox_rx_fbox_output_first_deq_rdy_b),
				     .s4_fbox_rx_fbox_output_first_x(stage4_s4_fbox_rx_fbox_output_first_x),
				     .s4_fbox_rx_fbox_output_notEmpty_b(stage4_s4_fbox_rx_fbox_output_notEmpty_b),
				     .s4_mbox_rx_mbox_output_first_deq_rdy_b(stage4_s4_mbox_rx_mbox_output_first_deq_rdy_b),
				     .s4_mbox_rx_mbox_output_first_x(stage4_s4_mbox_rx_mbox_output_first_x),
				     .s4_mbox_rx_mbox_output_notEmpty_b(stage4_s4_mbox_rx_mbox_output_notEmpty_b),
				     .tx_tx_baseout_to_stage5_enq_rdy_b(stage4_tx_tx_baseout_to_stage5_enq_rdy_b),
				     .tx_tx_baseout_to_stage5_notFull_b(stage4_tx_tx_baseout_to_stage5_notFull_b),
				     .tx_tx_commitlog_enq_rdy_b(stage4_tx_tx_commitlog_enq_rdy_b),
				     .tx_tx_commitlog_notFull_b(stage4_tx_tx_commitlog_notFull_b),
				     .tx_tx_fuid_to_stage5_enq_rdy_b(stage4_tx_tx_fuid_to_stage5_enq_rdy_b),
				     .tx_tx_fuid_to_stage5_notFull_b(stage4_tx_tx_fuid_to_stage5_notFull_b),
				     .tx_tx_memio_to_stage5_enq_rdy_b(stage4_tx_tx_memio_to_stage5_enq_rdy_b),
				     .tx_tx_memio_to_stage5_notFull_b(stage4_tx_tx_memio_to_stage5_notFull_b),
				     .tx_tx_systemout_to_stage5_enq_rdy_b(stage4_tx_tx_systemout_to_stage5_enq_rdy_b),
				     .tx_tx_systemout_to_stage5_notFull_b(stage4_tx_tx_systemout_to_stage5_notFull_b),
				     .tx_tx_trapout_to_stage5_enq_rdy_b(stage4_tx_tx_trapout_to_stage5_enq_rdy_b),
				     .tx_tx_trapout_to_stage5_notFull_b(stage4_tx_tx_trapout_to_stage5_notFull_b),
				     .EN_cache_memory_response_put(stage4_EN_cache_memory_response_put),
				     .rx_rx_baseout_from_stage3_deq_ena(stage4_rx_rx_baseout_from_stage3_deq_ena),
				     .rx_rx_trapout_from_stage3_deq_ena(stage4_rx_rx_trapout_from_stage3_deq_ena),
				     .rx_rx_systemout_from_stage3_deq_ena(stage4_rx_rx_systemout_from_stage3_deq_ena),
				     .rx_rx_memoryout_from_stage3_deq_ena(stage4_rx_rx_memoryout_from_stage3_deq_ena),
				     .rx_rx_fuid_from_stage3_deq_ena(stage4_rx_rx_fuid_from_stage3_deq_ena),
				     .rx_rx_commitlog_deq_ena(stage4_rx_rx_commitlog_deq_ena),
				     .tx_tx_systemout_to_stage5_enq_ena(stage4_tx_tx_systemout_to_stage5_enq_ena),
				     .tx_tx_systemout_to_stage5_enq_data(stage4_tx_tx_systemout_to_stage5_enq_data),
				     .tx_tx_trapout_to_stage5_enq_ena(stage4_tx_tx_trapout_to_stage5_enq_ena),
				     .tx_tx_trapout_to_stage5_enq_data(stage4_tx_tx_trapout_to_stage5_enq_data),
				     .tx_tx_baseout_to_stage5_enq_ena(stage4_tx_tx_baseout_to_stage5_enq_ena),
				     .tx_tx_baseout_to_stage5_enq_data(stage4_tx_tx_baseout_to_stage5_enq_data),
				     .tx_tx_memio_to_stage5_enq_ena(stage4_tx_tx_memio_to_stage5_enq_ena),
				     .tx_tx_memio_to_stage5_enq_data(stage4_tx_tx_memio_to_stage5_enq_data),
				     .tx_tx_fuid_to_stage5_enq_ena(stage4_tx_tx_fuid_to_stage5_enq_ena),
				     .tx_tx_fuid_to_stage5_enq_data(stage4_tx_tx_fuid_to_stage5_enq_data),
				     .tx_tx_commitlog_enq_ena(stage4_tx_tx_commitlog_enq_ena),
				     .tx_tx_commitlog_enq_data(stage4_tx_tx_commitlog_enq_data),
				     .RDY_cache_memory_response_put(stage4_RDY_cache_memory_response_put),
				     .s4_mbox_rx_mbox_output_deq_ena(stage4_s4_mbox_rx_mbox_output_deq_ena),
				     .s4_fbox_rx_fbox_output_deq_ena(stage4_s4_fbox_rx_fbox_output_deq_ena));

  // submodule stage5
  mkstage5 #(.hartid(hartid)) stage5(.CLK(CLK),
				     .RST_N(RST_N),
				     .cache_ma_io_response_r(stage5_cache_ma_io_response_r),
				     .debug_ma_debug_interrupt__int(stage5_debug_ma_debug_interrupt__int),
				     .interrupts_ma_clint_msip_intrpt(stage5_interrupts_ma_clint_msip_intrpt),
				     .interrupts_ma_clint_mtime_mtime(stage5_interrupts_ma_clint_mtime_mtime),
				     .interrupts_ma_clint_mtip_intrpt(stage5_interrupts_ma_clint_mtip_intrpt),
				     .interrupts_ma_plic_meip_intrpt(stage5_interrupts_ma_plic_meip_intrpt),
				     .interrupts_ma_plic_seip_intrpt(stage5_interrupts_ma_plic_seip_intrpt),
				     .perf_ma_events_e(stage5_perf_ma_events_e),
				     .rx_rx_baseout_from_stage4_first_deq_rdy_b(stage5_rx_rx_baseout_from_stage4_first_deq_rdy_b),
				     .rx_rx_baseout_from_stage4_first_x(stage5_rx_rx_baseout_from_stage4_first_x),
				     .rx_rx_baseout_from_stage4_notEmpty_b(stage5_rx_rx_baseout_from_stage4_notEmpty_b),
				     .rx_rx_commitlog_first_deq_rdy_b(stage5_rx_rx_commitlog_first_deq_rdy_b),
				     .rx_rx_commitlog_first_x(stage5_rx_rx_commitlog_first_x),
				     .rx_rx_commitlog_notEmpty_b(stage5_rx_rx_commitlog_notEmpty_b),
				     .rx_rx_fuid_from_stage4_first_deq_rdy_b(stage5_rx_rx_fuid_from_stage4_first_deq_rdy_b),
				     .rx_rx_fuid_from_stage4_first_x(stage5_rx_rx_fuid_from_stage4_first_x),
				     .rx_rx_fuid_from_stage4_notEmpty_b(stage5_rx_rx_fuid_from_stage4_notEmpty_b),
				     .rx_rx_memio_from_stage4_first_deq_rdy_b(stage5_rx_rx_memio_from_stage4_first_deq_rdy_b),
				     .rx_rx_memio_from_stage4_first_x(stage5_rx_rx_memio_from_stage4_first_x),
				     .rx_rx_memio_from_stage4_notEmpty_b(stage5_rx_rx_memio_from_stage4_notEmpty_b),
				     .rx_rx_systemout_from_stage4_first_deq_rdy_b(stage5_rx_rx_systemout_from_stage4_first_deq_rdy_b),
				     .rx_rx_systemout_from_stage4_first_x(stage5_rx_rx_systemout_from_stage4_first_x),
				     .rx_rx_systemout_from_stage4_notEmpty_b(stage5_rx_rx_systemout_from_stage4_notEmpty_b),
				     .rx_rx_trapout_from_stage4_first_deq_rdy_b(stage5_rx_rx_trapout_from_stage4_first_deq_rdy_b),
				     .rx_rx_trapout_from_stage4_first_x(stage5_rx_rx_trapout_from_stage4_first_x),
				     .rx_rx_trapout_from_stage4_notEmpty_b(stage5_rx_rx_trapout_from_stage4_notEmpty_b),
				     .EN_debug_ma_debug_interrupt(stage5_EN_debug_ma_debug_interrupt),
				     .EN_perf_ma_events(stage5_EN_perf_ma_events),
				     .EN_interrupts_ma_clint_msip(stage5_EN_interrupts_ma_clint_msip),
				     .EN_interrupts_ma_clint_mtip(stage5_EN_interrupts_ma_clint_mtip),
				     .EN_interrupts_ma_clint_mtime(stage5_EN_interrupts_ma_clint_mtime),
				     .EN_interrupts_ma_plic_meip(stage5_EN_interrupts_ma_plic_meip),
				     .EN_interrupts_ma_plic_seip(stage5_EN_interrupts_ma_plic_seip),
				     .EN_cache_ma_io_response(stage5_EN_cache_ma_io_response),
				     .debug_mv_csr_dcsr(stage5_debug_mv_csr_dcsr),
				     .RDY_debug_mv_csr_dcsr(),
				     .RDY_debug_ma_debug_interrupt(),
				     .debug_mv_debug_mode(stage5_debug_mv_debug_mode),
				     .RDY_debug_mv_debug_mode(),
				     .debug_mv_core_debugenable(stage5_debug_mv_core_debugenable),
				     .RDY_debug_mv_core_debugenable(),
				     .debug_mv_stop_timer(stage5_debug_mv_stop_timer),
				     .RDY_debug_mv_stop_timer(),
				     .debug_mv_stop_count(stage5_debug_mv_stop_count),
				     .RDY_debug_mv_stop_count(),
				     .RDY_perf_ma_events(),
				     .perf_mv_count_exceptions(stage5_perf_mv_count_exceptions),
				     .RDY_perf_mv_count_exceptions(),
				     .perf_mv_count_interrupts(stage5_perf_mv_count_interrupts),
				     .RDY_perf_mv_count_interrupts(),
				     .perf_mv_count_csrops(stage5_perf_mv_count_csrops),
				     .RDY_perf_mv_count_csrops(),
				     .perf_mv_count_microtraps(stage5_perf_mv_count_microtraps),
				     .RDY_perf_mv_count_microtraps(),
				     .rx_rx_systemout_from_stage4_deq_ena(stage5_rx_rx_systemout_from_stage4_deq_ena),
				     .rx_rx_trapout_from_stage4_deq_ena(stage5_rx_rx_trapout_from_stage4_deq_ena),
				     .rx_rx_baseout_from_stage4_deq_ena(stage5_rx_rx_baseout_from_stage4_deq_ena),
				     .rx_rx_memio_from_stage4_deq_ena(stage5_rx_rx_memio_from_stage4_deq_ena),
				     .rx_rx_fuid_from_stage4_deq_ena(stage5_rx_rx_fuid_from_stage4_deq_ena),
				     .rx_rx_commitlog_deq_ena(stage5_rx_rx_commitlog_deq_ena),
				     .RDY_interrupts_ma_clint_msip(),
				     .RDY_interrupts_ma_clint_mtip(),
				     .RDY_interrupts_ma_clint_mtime(),
				     .RDY_interrupts_ma_plic_meip(),
				     .RDY_interrupts_ma_plic_seip(),
				     .common_mv_commit_rd(stage5_common_mv_commit_rd),
				     .RDY_common_mv_commit_rd(stage5_RDY_common_mv_commit_rd),
				     .common_mv_flush(stage5_common_mv_flush),
				     .RDY_common_mv_flush(),
				     .common_mv_commit_log(stage5_common_mv_commit_log),
				     .RDY_common_mv_commit_log(),
				     .cache_mv_initiate_store_fst(stage5_cache_mv_initiate_store_fst),
				     .RDY_cache_mv_initiate_store_fst(stage5_RDY_cache_mv_initiate_store_fst),
				     .cache_mv_initiate_store_snd(stage5_cache_mv_initiate_store_snd),
				     .RDY_cache_mv_initiate_store_snd(stage5_RDY_cache_mv_initiate_store_snd),
				     .cache_mv_initiate_ioop(stage5_cache_mv_initiate_ioop),
				     .RDY_cache_mv_initiate_ioop(stage5_RDY_cache_mv_initiate_ioop),
				     .RDY_cache_ma_io_response(),
				     .csrs_mv_csr_misa_c(stage5_csrs_mv_csr_misa_c),
				     .RDY_csrs_mv_csr_misa_c(),
				     .csrs_mv_cacheenable(stage5_csrs_mv_cacheenable),
				     .RDY_csrs_mv_cacheenable(),
				     .csrs_mv_curr_priv(stage5_csrs_mv_curr_priv),
				     .RDY_csrs_mv_curr_priv(),
				     .csrs_mv_csr_mstatus(stage5_csrs_mv_csr_mstatus),
				     .RDY_csrs_mv_csr_mstatus(),
				     .csrs_mv_csrs_to_decode(stage5_csrs_mv_csrs_to_decode),
				     .RDY_csrs_mv_csrs_to_decode(),
				     .csrs_mv_resume_wfi(stage5_csrs_mv_resume_wfi),
				     .RDY_csrs_mv_resume_wfi(),
				     .csrs_mv_csr_satp(stage5_csrs_mv_csr_satp),
				     .RDY_csrs_mv_csr_satp(),
				     .csrs_mv_pmp_cfg(stage5_csrs_mv_pmp_cfg),
				     .RDY_csrs_mv_pmp_cfg(),
				     .csrs_mv_pmp_addr(stage5_csrs_mv_pmp_addr),
				     .RDY_csrs_mv_pmp_addr(),
				     .csrs_sbread_mv_csr_misa(stage5_csrs_sbread_mv_csr_misa),
				     .RDY_csrs_sbread_mv_csr_misa(),
				     .csrs_sbread_mv_csr_mvendorid(stage5_csrs_sbread_mv_csr_mvendorid),
				     .RDY_csrs_sbread_mv_csr_mvendorid(),
				     .csrs_sbread_mv_csr_stvec(stage5_csrs_sbread_mv_csr_stvec),
				     .RDY_csrs_sbread_mv_csr_stvec(),
				     .csrs_sbread_mv_csr_mtvec(stage5_csrs_sbread_mv_csr_mtvec),
				     .RDY_csrs_sbread_mv_csr_mtvec(),
				     .csrs_sbread_mv_csr_mstatus(stage5_csrs_sbread_mv_csr_mstatus),
				     .RDY_csrs_sbread_mv_csr_mstatus(),
				     .csrs_sbread_mv_csr_marchid(stage5_csrs_sbread_mv_csr_marchid),
				     .RDY_csrs_sbread_mv_csr_marchid(),
				     .csrs_sbread_mv_csr_mimpid(stage5_csrs_sbread_mv_csr_mimpid),
				     .RDY_csrs_sbread_mv_csr_mimpid(),
				     .csrs_sbread_mv_csr_mhartid(stage5_csrs_sbread_mv_csr_mhartid),
				     .RDY_csrs_sbread_mv_csr_mhartid(),
				     .csrs_sbread_mv_csr_mip(stage5_csrs_sbread_mv_csr_mip),
				     .RDY_csrs_sbread_mv_csr_mip(),
				     .csrs_sbread_mv_csr_sip(stage5_csrs_sbread_mv_csr_sip),
				     .RDY_csrs_sbread_mv_csr_sip(),
				     .csrs_sbread_mv_csr_mie(stage5_csrs_sbread_mv_csr_mie),
				     .RDY_csrs_sbread_mv_csr_mie(),
				     .csrs_sbread_mv_csr_sie(stage5_csrs_sbread_mv_csr_sie),
				     .RDY_csrs_sbread_mv_csr_sie(),
				     .csrs_sbread_mv_csr_mscratch(stage5_csrs_sbread_mv_csr_mscratch),
				     .RDY_csrs_sbread_mv_csr_mscratch(),
				     .csrs_sbread_mv_csr_sscratch(stage5_csrs_sbread_mv_csr_sscratch),
				     .RDY_csrs_sbread_mv_csr_sscratch(),
				     .csrs_sbread_mv_csr_sepc(stage5_csrs_sbread_mv_csr_sepc),
				     .RDY_csrs_sbread_mv_csr_sepc(),
				     .csrs_sbread_mv_csr_stval(stage5_csrs_sbread_mv_csr_stval),
				     .RDY_csrs_sbread_mv_csr_stval(),
				     .csrs_sbread_mv_csr_scause(stage5_csrs_sbread_mv_csr_scause),
				     .RDY_csrs_sbread_mv_csr_scause(),
				     .csrs_sbread_mv_csr_mepc(stage5_csrs_sbread_mv_csr_mepc),
				     .RDY_csrs_sbread_mv_csr_mepc(),
				     .csrs_sbread_mv_csr_mtval(stage5_csrs_sbread_mv_csr_mtval),
				     .RDY_csrs_sbread_mv_csr_mtval(),
				     .csrs_sbread_mv_csr_mcause(stage5_csrs_sbread_mv_csr_mcause),
				     .RDY_csrs_sbread_mv_csr_mcause(),
				     .csrs_sbread_mv_csr_mcycle(stage5_csrs_sbread_mv_csr_mcycle),
				     .RDY_csrs_sbread_mv_csr_mcycle(),
				     .csrs_sbread_mv_csr_minstret(stage5_csrs_sbread_mv_csr_minstret),
				     .RDY_csrs_sbread_mv_csr_minstret(),
				     .csrs_sbread_mv_csr_fcsr(stage5_csrs_sbread_mv_csr_fcsr),
				     .RDY_csrs_sbread_mv_csr_fcsr(),
				     .csrs_sbread_mv_csr_time(stage5_csrs_sbread_mv_csr_time),
				     .RDY_csrs_sbread_mv_csr_time(),
				     .csrs_sbread_mv_csr_mideleg(stage5_csrs_sbread_mv_csr_mideleg),
				     .RDY_csrs_sbread_mv_csr_mideleg(),
				     .csrs_sbread_mv_csr_medeleg(stage5_csrs_sbread_mv_csr_medeleg),
				     .RDY_csrs_sbread_mv_csr_medeleg(),
				     .csrs_sbread_mv_csr_pmpcfg0(stage5_csrs_sbread_mv_csr_pmpcfg0),
				     .RDY_csrs_sbread_mv_csr_pmpcfg0(),
				     .csrs_sbread_mv_csr_pmpaddr0(stage5_csrs_sbread_mv_csr_pmpaddr0),
				     .RDY_csrs_sbread_mv_csr_pmpaddr0(),
				     .csrs_sbread_mv_csr_pmpaddr1(stage5_csrs_sbread_mv_csr_pmpaddr1),
				     .RDY_csrs_sbread_mv_csr_pmpaddr1(),
				     .csrs_sbread_mv_csr_pmpaddr2(stage5_csrs_sbread_mv_csr_pmpaddr2),
				     .RDY_csrs_sbread_mv_csr_pmpaddr2(),
				     .csrs_sbread_mv_csr_pmpaddr3(stage5_csrs_sbread_mv_csr_pmpaddr3),
				     .RDY_csrs_sbread_mv_csr_pmpaddr3(),
				     .csrs_sbread_mv_csr_mcounteren(stage5_csrs_sbread_mv_csr_mcounteren),
				     .RDY_csrs_sbread_mv_csr_mcounteren(),
				     .csrs_sbread_mv_csr_scounteren(stage5_csrs_sbread_mv_csr_scounteren),
				     .RDY_csrs_sbread_mv_csr_scounteren(),
				     .csrs_sbread_mv_csr_menvcfg(stage5_csrs_sbread_mv_csr_menvcfg),
				     .RDY_csrs_sbread_mv_csr_menvcfg(),
				     .csrs_sbread_mv_csr_senvcfg(stage5_csrs_sbread_mv_csr_senvcfg),
				     .RDY_csrs_sbread_mv_csr_senvcfg(),
				     .csrs_sbread_mv_csr_satp(stage5_csrs_sbread_mv_csr_satp),
				     .RDY_csrs_sbread_mv_csr_satp(),
				     .csrs_sbread_mv_csr_mcountinhibit(stage5_csrs_sbread_mv_csr_mcountinhibit),
				     .RDY_csrs_sbread_mv_csr_mcountinhibit(),
				     .csrs_sbread_mv_csr_fflags(stage5_csrs_sbread_mv_csr_fflags),
				     .RDY_csrs_sbread_mv_csr_fflags(),
				     .csrs_sbread_mv_csr_frm(stage5_csrs_sbread_mv_csr_frm),
				     .RDY_csrs_sbread_mv_csr_frm(),
				     .csrs_sbread_mv_csr_customcontrol(stage5_csrs_sbread_mv_csr_customcontrol),
				     .RDY_csrs_sbread_mv_csr_customcontrol(),
				     .csrs_sbread_mv_csr_mhpmcounter3(stage5_csrs_sbread_mv_csr_mhpmcounter3),
				     .RDY_csrs_sbread_mv_csr_mhpmcounter3(),
				     .csrs_sbread_mv_csr_mhpmcounter4(stage5_csrs_sbread_mv_csr_mhpmcounter4),
				     .RDY_csrs_sbread_mv_csr_mhpmcounter4(),
				     .csrs_sbread_mv_csr_mhpmcounter5(stage5_csrs_sbread_mv_csr_mhpmcounter5),
				     .RDY_csrs_sbread_mv_csr_mhpmcounter5(),
				     .csrs_sbread_mv_csr_mhpmcounter6(stage5_csrs_sbread_mv_csr_mhpmcounter6),
				     .RDY_csrs_sbread_mv_csr_mhpmcounter6(),
				     .csrs_sbread_mv_csr_mhpmevent3(stage5_csrs_sbread_mv_csr_mhpmevent3),
				     .RDY_csrs_sbread_mv_csr_mhpmevent3(),
				     .csrs_sbread_mv_csr_mhpmevent4(stage5_csrs_sbread_mv_csr_mhpmevent4),
				     .RDY_csrs_sbread_mv_csr_mhpmevent4(),
				     .csrs_sbread_mv_csr_mhpmevent5(stage5_csrs_sbread_mv_csr_mhpmevent5),
				     .RDY_csrs_sbread_mv_csr_mhpmevent5(),
				     .csrs_sbread_mv_csr_mhpmevent6(stage5_csrs_sbread_mv_csr_mhpmevent6),
				     .RDY_csrs_sbread_mv_csr_mhpmevent6(),
				     .csrs_sbread_mv_csr_dcsr(stage5_csrs_sbread_mv_csr_dcsr),
				     .RDY_csrs_sbread_mv_csr_dcsr(),
				     .csrs_sbread_mv_csr_dpc(stage5_csrs_sbread_mv_csr_dpc),
				     .RDY_csrs_sbread_mv_csr_dpc(),
				     .csrs_sbread_mv_csr_dscratch0(stage5_csrs_sbread_mv_csr_dscratch0),
				     .RDY_csrs_sbread_mv_csr_dscratch0(),
				     .csrs_sbread_mv_csr_dscratch1(stage5_csrs_sbread_mv_csr_dscratch1),
				     .RDY_csrs_sbread_mv_csr_dscratch1());

  // rule RL_rl_gen_bypass
  assign CAN_FIRE_RL_rl_gen_bypass = ff_baseout_EMPTY_N ;
  assign WILL_FIRE_RL_rl_gen_bypass = ff_baseout_EMPTY_N ;

  // rule RL_connect_notFull
  assign CAN_FIRE_RL_connect_notFull = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull = 1'd1 ;

  // rule RL_connect_rdy
  assign CAN_FIRE_RL_connect_rdy = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy = 1'd1 ;

  // rule RL_connect_notEmpty
  assign CAN_FIRE_RL_connect_notEmpty = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty = 1'd1 ;

  // rule RL_connect_rdy_1
  assign CAN_FIRE_RL_connect_rdy_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_1 = 1'd1 ;

  // rule RL_connect_first
  assign CAN_FIRE_RL_connect_first = ff_systemout_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first = ff_systemout_EMPTY_N ;

  // rule RL_connect_notFull_1
  assign CAN_FIRE_RL_connect_notFull_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_1 = 1'd1 ;

  // rule RL_connect_rdy_2
  assign CAN_FIRE_RL_connect_rdy_2 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_2 = 1'd1 ;

  // rule RL_connect_notEmpty_1
  assign CAN_FIRE_RL_connect_notEmpty_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_1 = 1'd1 ;

  // rule RL_connect_rdy_3
  assign CAN_FIRE_RL_connect_rdy_3 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_3 = 1'd1 ;

  // rule RL_connect_first_1
  assign CAN_FIRE_RL_connect_first_1 = ff_trapout_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_1 = ff_trapout_EMPTY_N ;

  // rule RL_connect_notFull_2
  assign CAN_FIRE_RL_connect_notFull_2 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_2 = 1'd1 ;

  // rule RL_connect_rdy_4
  assign CAN_FIRE_RL_connect_rdy_4 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_4 = 1'd1 ;

  // rule RL_connect_notEmpty_2
  assign CAN_FIRE_RL_connect_notEmpty_2 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_2 = 1'd1 ;

  // rule RL_connect_rdy_5
  assign CAN_FIRE_RL_connect_rdy_5 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_5 = 1'd1 ;

  // rule RL_connect_first_2
  assign CAN_FIRE_RL_connect_first_2 = ff_baseout_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_2 = ff_baseout_EMPTY_N ;

  // rule RL_connect_notFull_3
  assign CAN_FIRE_RL_connect_notFull_3 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_3 = 1'd1 ;

  // rule RL_connect_rdy_6
  assign CAN_FIRE_RL_connect_rdy_6 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_6 = 1'd1 ;

  // rule RL_connect_notEmpty_3
  assign CAN_FIRE_RL_connect_notEmpty_3 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_3 = 1'd1 ;

  // rule RL_connect_rdy_7
  assign CAN_FIRE_RL_connect_rdy_7 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_7 = 1'd1 ;

  // rule RL_connect_first_3
  assign CAN_FIRE_RL_connect_first_3 = ff_wbmemop_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_3 = ff_wbmemop_EMPTY_N ;

  // rule RL_connect_notFull_4
  assign CAN_FIRE_RL_connect_notFull_4 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_4 = 1'd1 ;

  // rule RL_connect_rdy_8
  assign CAN_FIRE_RL_connect_rdy_8 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_8 = 1'd1 ;

  // rule RL_connect_notEmpty_4
  assign CAN_FIRE_RL_connect_notEmpty_4 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_4 = 1'd1 ;

  // rule RL_connect_rdy_9
  assign CAN_FIRE_RL_connect_rdy_9 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_9 = 1'd1 ;

  // rule RL_connect_first_4
  assign CAN_FIRE_RL_connect_first_4 = ff_fuid_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_4 = ff_fuid_EMPTY_N ;

  // rule RL_connect_notFull_5
  assign CAN_FIRE_RL_connect_notFull_5 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_5 = 1'd1 ;

  // rule RL_connect_rdy_10
  assign CAN_FIRE_RL_connect_rdy_10 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_10 = 1'd1 ;

  // rule RL_connect_notEmpty_5
  assign CAN_FIRE_RL_connect_notEmpty_5 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_5 = 1'd1 ;

  // rule RL_connect_rdy_11
  assign CAN_FIRE_RL_connect_rdy_11 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_11 = 1'd1 ;

  // rule RL_connect_first_5
  assign CAN_FIRE_RL_connect_first_5 = ff_commitlog_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_5 = ff_commitlog_EMPTY_N ;

  // rule RL_rl_gen_bypass_1
  assign CAN_FIRE_RL_rl_gen_bypass_1 = ff_baseout_1_EMPTY_N ;
  assign WILL_FIRE_RL_rl_gen_bypass_1 = ff_baseout_1_EMPTY_N ;

  // rule RL_connect_notFull_6
  assign CAN_FIRE_RL_connect_notFull_6 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_6 = 1'd1 ;

  // rule RL_connect_rdy_12
  assign CAN_FIRE_RL_connect_rdy_12 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_12 = 1'd1 ;

  // rule RL_connect_notEmpty_6
  assign CAN_FIRE_RL_connect_notEmpty_6 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_6 = 1'd1 ;

  // rule RL_connect_rdy_13
  assign CAN_FIRE_RL_connect_rdy_13 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_13 = 1'd1 ;

  // rule RL_connect_first_6
  assign CAN_FIRE_RL_connect_first_6 = ff_baseout_1_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_6 = ff_baseout_1_EMPTY_N ;

  // rule RL_connect_notFull_7
  assign CAN_FIRE_RL_connect_notFull_7 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_7 = 1'd1 ;

  // rule RL_connect_rdy_14
  assign CAN_FIRE_RL_connect_rdy_14 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_14 = 1'd1 ;

  // rule RL_connect_notEmpty_7
  assign CAN_FIRE_RL_connect_notEmpty_7 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_7 = 1'd1 ;

  // rule RL_connect_rdy_15
  assign CAN_FIRE_RL_connect_rdy_15 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_15 = 1'd1 ;

  // rule RL_connect_first_7
  assign CAN_FIRE_RL_connect_first_7 = ff_trapout_1_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_7 = ff_trapout_1_EMPTY_N ;

  // rule RL_connect_notFull_8
  assign CAN_FIRE_RL_connect_notFull_8 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_8 = 1'd1 ;

  // rule RL_connect_rdy_16
  assign CAN_FIRE_RL_connect_rdy_16 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_16 = 1'd1 ;

  // rule RL_connect_notEmpty_8
  assign CAN_FIRE_RL_connect_notEmpty_8 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_8 = 1'd1 ;

  // rule RL_connect_rdy_17
  assign CAN_FIRE_RL_connect_rdy_17 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_17 = 1'd1 ;

  // rule RL_connect_first_8
  assign CAN_FIRE_RL_connect_first_8 = ff_systemout_1_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_8 = ff_systemout_1_EMPTY_N ;

  // rule RL_connect_notFull_9
  assign CAN_FIRE_RL_connect_notFull_9 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_9 = 1'd1 ;

  // rule RL_connect_rdy_18
  assign CAN_FIRE_RL_connect_rdy_18 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_18 = 1'd1 ;

  // rule RL_connect_notEmpty_9
  assign CAN_FIRE_RL_connect_notEmpty_9 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_9 = 1'd1 ;

  // rule RL_connect_rdy_19
  assign CAN_FIRE_RL_connect_rdy_19 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_19 = 1'd1 ;

  // rule RL_connect_first_9
  assign CAN_FIRE_RL_connect_first_9 = ff_memoryout_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_9 = ff_memoryout_EMPTY_N ;

  // rule RL_connect_notFull_10
  assign CAN_FIRE_RL_connect_notFull_10 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_10 = 1'd1 ;

  // rule RL_connect_rdy_20
  assign CAN_FIRE_RL_connect_rdy_20 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_20 = 1'd1 ;

  // rule RL_connect_notEmpty_10
  assign CAN_FIRE_RL_connect_notEmpty_10 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_10 = 1'd1 ;

  // rule RL_connect_rdy_21
  assign CAN_FIRE_RL_connect_rdy_21 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_21 = 1'd1 ;

  // rule RL_connect_first_10
  assign CAN_FIRE_RL_connect_first_10 = ff_fuid_1_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_10 = ff_fuid_1_EMPTY_N ;

  // rule RL_connect_notFull_11
  assign CAN_FIRE_RL_connect_notFull_11 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_11 = 1'd1 ;

  // rule RL_connect_rdy_22
  assign CAN_FIRE_RL_connect_rdy_22 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_22 = 1'd1 ;

  // rule RL_connect_notEmpty_11
  assign CAN_FIRE_RL_connect_notEmpty_11 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_11 = 1'd1 ;

  // rule RL_connect_rdy_23
  assign CAN_FIRE_RL_connect_rdy_23 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_23 = 1'd1 ;

  // rule RL_connect_first_11
  assign CAN_FIRE_RL_connect_first_11 = ff_commitlog_1_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_11 = ff_commitlog_1_EMPTY_N ;

  // rule RL_connect_ena_data
  assign CAN_FIRE_RL_connect_ena_data =
	     ff_systemout_FULL_N && stage4_tx_tx_systemout_to_stage5_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data = CAN_FIRE_RL_connect_ena_data ;

  // rule RL_connect_ena_data_1
  assign CAN_FIRE_RL_connect_ena_data_1 =
	     ff_trapout_FULL_N && stage4_tx_tx_trapout_to_stage5_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_1 = CAN_FIRE_RL_connect_ena_data_1 ;

  // rule RL_connect_ena_data_3
  assign CAN_FIRE_RL_connect_ena_data_3 =
	     ff_wbmemop_FULL_N && stage4_tx_tx_memio_to_stage5_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_3 = CAN_FIRE_RL_connect_ena_data_3 ;

  // rule RL_connect_ena_6
  assign CAN_FIRE_RL_connect_ena_6 =
	     ff_baseout_1_EMPTY_N &&
	     stage4_rx_rx_baseout_from_stage3_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_6 = CAN_FIRE_RL_connect_ena_6 ;

  // rule RL_connect_ena_7
  assign CAN_FIRE_RL_connect_ena_7 =
	     ff_trapout_1_EMPTY_N &&
	     stage4_rx_rx_trapout_from_stage3_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_7 = CAN_FIRE_RL_connect_ena_7 ;

  // rule RL_connect_ena_8
  assign CAN_FIRE_RL_connect_ena_8 =
	     ff_systemout_1_EMPTY_N &&
	     stage4_rx_rx_systemout_from_stage3_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_8 = CAN_FIRE_RL_connect_ena_8 ;

  // rule RL_connect_ena_9
  assign CAN_FIRE_RL_connect_ena_9 =
	     ff_memoryout_EMPTY_N &&
	     stage4_rx_rx_memoryout_from_stage3_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_9 = CAN_FIRE_RL_connect_ena_9 ;

  // rule RL_connect_notFull_12
  assign CAN_FIRE_RL_connect_notFull_12 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_12 = 1'd1 ;

  // rule RL_connect_rdy_24
  assign CAN_FIRE_RL_connect_rdy_24 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_24 = 1'd1 ;

  // rule RL_connect_notEmpty_12
  assign CAN_FIRE_RL_connect_notEmpty_12 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_12 = 1'd1 ;

  // rule RL_connect_rdy_25
  assign CAN_FIRE_RL_connect_rdy_25 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_25 = 1'd1 ;

  // rule RL_connect_first_12
  assign CAN_FIRE_RL_connect_first_12 = ff_commitlog_2_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_12 = ff_commitlog_2_EMPTY_N ;

  // rule RL_mkConnectionVtoAf
  assign CAN_FIRE_RL_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf = 1'd1 ;

  // rule RL_mkConnectionVtoAf_3
  assign CAN_FIRE_RL_mkConnectionVtoAf_3 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_3 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_4
  assign CAN_FIRE_RL_mkConnectionVtoAf_4 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_4 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_5
  assign CAN_FIRE_RL_mkConnectionVtoAf_5 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_5 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_6
  assign CAN_FIRE_RL_mkConnectionVtoAf_6 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_6 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_7
  assign CAN_FIRE_RL_mkConnectionVtoAf_7 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_7 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_8
  assign CAN_FIRE_RL_mkConnectionVtoAf_8 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_8 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_9
  assign CAN_FIRE_RL_mkConnectionVtoAf_9 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_9 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_10
  assign CAN_FIRE_RL_mkConnectionVtoAf_10 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_10 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_11
  assign CAN_FIRE_RL_mkConnectionVtoAf_11 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_11 = 1'd1 ;

  // rule RL_connect_ena_2
  assign CAN_FIRE_RL_connect_ena_2 =
	     ff_baseout_EMPTY_N && stage5_rx_rx_baseout_from_stage4_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_2 = CAN_FIRE_RL_connect_ena_2 ;

  // rule RL_mkConnectionVtoAf_12
  assign CAN_FIRE_RL_mkConnectionVtoAf_12 = ff_pipe1_EMPTY_N ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_12 = ff_pipe1_EMPTY_N ;

  // rule RL_connect_notFull_13
  assign CAN_FIRE_RL_connect_notFull_13 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_13 = 1'd1 ;

  // rule RL_connect_rdy_26
  assign CAN_FIRE_RL_connect_rdy_26 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_26 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_15
  assign CAN_FIRE_RL_mkConnectionVtoAf_15 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_15 = 1'd1 ;

  // rule RL_connect_ena_data_13
  assign CAN_FIRE_RL_connect_ena_data_13 =
	     ff_mbox_out_ff_FULL_N && mbox_tx_output_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_13 = CAN_FIRE_RL_connect_ena_data_13 ;

  // rule RL_connect_notEmpty_13
  assign CAN_FIRE_RL_connect_notEmpty_13 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_13 = 1'd1 ;

  // rule RL_connect_rdy_27
  assign CAN_FIRE_RL_connect_rdy_27 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_27 = 1'd1 ;

  // rule RL_connect_first_13
  assign CAN_FIRE_RL_connect_first_13 =
	     ff_mbox_out_beforeDeq_Q_OUT &&
	     (ff_mbox_out_ff_EMPTY_N || CAN_FIRE_RL_connect_ena_data_13) ;
  assign WILL_FIRE_RL_connect_first_13 = CAN_FIRE_RL_connect_first_13 ;

  // rule RL_connect_ena_13
  assign CAN_FIRE_RL_connect_ena_13 =
	     (ff_mbox_out_ff_EMPTY_N || CAN_FIRE_RL_connect_ena_data_13) &&
	     stage4_s4_mbox_rx_mbox_output_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_13 = CAN_FIRE_RL_connect_ena_13 ;

  // rule RL_mkConnectionVtoAf_17
  assign CAN_FIRE_RL_mkConnectionVtoAf_17 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_17 = 1'd1 ;

  // rule RL_connect_notFull_14
  assign CAN_FIRE_RL_connect_notFull_14 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_14 = 1'd1 ;

  // rule RL_connect_rdy_28
  assign CAN_FIRE_RL_connect_rdy_28 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_28 = 1'd1 ;

  // rule RL_rl_connect_bpu_enable
  assign CAN_FIRE_RL_rl_connect_bpu_enable = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_bpu_enable = 1'd1 ;

  // rule RL_rl_connect_events1
  assign CAN_FIRE_RL_rl_connect_events1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_events1 = 1'd1 ;

  // rule RL_rl_assert_reset_done
  assign CAN_FIRE_RL_rl_assert_reset_done = 1'd1 ;
  assign WILL_FIRE_RL_rl_assert_reset_done = 1'd1 ;

  // rule RL_rl_connect_debug_decode
  assign CAN_FIRE_RL_rl_connect_debug_decode = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_debug_decode = 1'd1 ;

  // rule RL_connect_ena
  assign CAN_FIRE_RL_connect_ena =
	     ff_systemout_EMPTY_N &&
	     stage5_rx_rx_systemout_from_stage4_deq_ena ;
  assign WILL_FIRE_RL_connect_ena = CAN_FIRE_RL_connect_ena ;

  // rule RL_connect_ena_1
  assign CAN_FIRE_RL_connect_ena_1 =
	     ff_trapout_EMPTY_N && stage5_rx_rx_trapout_from_stage4_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_1 = CAN_FIRE_RL_connect_ena_1 ;

  // rule RL_connect_ena_3
  assign CAN_FIRE_RL_connect_ena_3 =
	     ff_wbmemop_EMPTY_N && stage5_rx_rx_memio_from_stage4_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_3 = CAN_FIRE_RL_connect_ena_3 ;

  // rule RL_connect_ena_4
  assign CAN_FIRE_RL_connect_ena_4 =
	     ff_fuid_EMPTY_N && stage5_rx_rx_fuid_from_stage4_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_4 = CAN_FIRE_RL_connect_ena_4 ;

  // rule RL_connect_ena_5
  assign CAN_FIRE_RL_connect_ena_5 =
	     ff_commitlog_EMPTY_N && stage5_rx_rx_commitlog_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_5 = CAN_FIRE_RL_connect_ena_5 ;

  // rule RL_rg_reset_event__dreg_update
  assign CAN_FIRE_RL_rg_reset_event__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_reset_event__dreg_update = 1'd1 ;

  // rule RL_ff_mbox_out_enqueue
  assign CAN_FIRE_RL_ff_mbox_out_enqueue =
	     CAN_FIRE_RL_connect_ena_data_13 &&
	     (!CAN_FIRE_RL_connect_ena_13 || ff_mbox_out_ff_EMPTY_N) ;
  assign WILL_FIRE_RL_ff_mbox_out_enqueue = CAN_FIRE_RL_ff_mbox_out_enqueue ;

  // rule RL_ff_mbox_out_dequeue
  assign CAN_FIRE_RL_ff_mbox_out_dequeue =
	     CAN_FIRE_RL_connect_ena_13 && ff_mbox_out_ff_EMPTY_N ;
  assign WILL_FIRE_RL_ff_mbox_out_dequeue = CAN_FIRE_RL_ff_mbox_out_dequeue ;

  // rule RL_pipe_s2s3_notEmpty_connect_notEmpty
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_notEmpty = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_notEmpty = 1'd1 ;

  // rule RL_pipe_s2s3_notEmpty_connect_rdy_1
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_1 = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_1 = 1'd1 ;

  // rule RL_pipe_s2s3_notEmpty_connect_first
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_first =
	     pipe_s2s3_notEmpty_ff_meta_EMPTY_N ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_first =
	     pipe_s2s3_notEmpty_ff_meta_EMPTY_N ;

  // rule RL_pipe_s2s3_notEmpty_connect_notEmpty_1
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_notEmpty_1 = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_notEmpty_1 = 1'd1 ;

  // rule RL_pipe_s2s3_notEmpty_connect_rdy_3
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_3 = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_3 = 1'd1 ;

  // rule RL_pipe_s2s3_notEmpty_connect_first_1
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_first_1 =
	     pipe_s2s3_notEmpty_ff_mtval_EMPTY_N ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_first_1 =
	     pipe_s2s3_notEmpty_ff_mtval_EMPTY_N ;

  // rule RL_pipe_s2s3_notEmpty_connect_notEmpty_2
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_notEmpty_2 = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_notEmpty_2 = 1'd1 ;

  // rule RL_pipe_s2s3_notEmpty_connect_rdy_5
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_5 = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_5 = 1'd1 ;

  // rule RL_pipe_s2s3_notEmpty_connect_first_2
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_first_2 =
	     pipe_s2s3_notEmpty_ff_insttype_EMPTY_N ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_first_2 =
	     pipe_s2s3_notEmpty_ff_insttype_EMPTY_N ;

  // rule RL_pipe_s2s3_notEmpty_connect_notEmpty_3
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_notEmpty_3 = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_notEmpty_3 = 1'd1 ;

  // rule RL_pipe_s2s3_notEmpty_connect_rdy_7
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_7 = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_7 = 1'd1 ;

  // rule RL_pipe_s2s3_notEmpty_connect_first_3
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_first_3 =
	     pipe_s2s3_notEmpty_ff_opmeta_EMPTY_N ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_first_3 =
	     pipe_s2s3_notEmpty_ff_opmeta_EMPTY_N ;

  // rule RL_pipe_s2s3_notEmpty_1_connect_notEmpty
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_1_connect_notEmpty = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_1_connect_notEmpty = 1'd1 ;

  // rule RL_pipe_s2s3_notEmpty_1_connect_rdy
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_1_connect_rdy = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_1_connect_rdy = 1'd1 ;

  // rule RL_pipe_s2s3_notEmpty_1_connect_first
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_1_connect_first =
	     pipe_s2s3_notEmpty_ff_commitlog_EMPTY_N ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_1_connect_first =
	     pipe_s2s3_notEmpty_ff_commitlog_EMPTY_N ;

  // rule RL_connect_ena_data_6
  assign CAN_FIRE_RL_connect_ena_data_6 =
	     ff_baseout_1_FULL_N && stage3_tx_tx_baseout_to_stage4_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_6 = CAN_FIRE_RL_connect_ena_data_6 ;

  // rule RL_connect_ena_data_7
  assign CAN_FIRE_RL_connect_ena_data_7 =
	     ff_trapout_1_FULL_N && stage3_tx_tx_trapout_to_stage4_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_7 = CAN_FIRE_RL_connect_ena_data_7 ;

  // rule RL_connect_ena_data_8
  assign CAN_FIRE_RL_connect_ena_data_8 =
	     ff_systemout_1_FULL_N &&
	     stage3_tx_tx_systemout_to_stage4_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_8 = CAN_FIRE_RL_connect_ena_data_8 ;

  // rule RL_connect_ena_data_9
  assign CAN_FIRE_RL_connect_ena_data_9 =
	     ff_memoryout_FULL_N && stage3_tx_tx_memoryout_to_stage4_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_9 = CAN_FIRE_RL_connect_ena_data_9 ;

  // rule RL_connect_ena_data_10
  assign CAN_FIRE_RL_connect_ena_data_10 =
	     ff_fuid_1_FULL_N && stage3_tx_tx_fuid_to_stage4_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_10 = CAN_FIRE_RL_connect_ena_data_10 ;

  // rule RL_connect_ena_data_11
  assign CAN_FIRE_RL_connect_ena_data_11 =
	     ff_commitlog_1_FULL_N && stage3_tx_tx_commitlog_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_11 = CAN_FIRE_RL_connect_ena_data_11 ;

  // rule RL_mkConnectionVtoAf_2
  assign CAN_FIRE_RL_mkConnectionVtoAf_2 = stage5_RDY_common_mv_commit_rd ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_2 = stage5_RDY_common_mv_commit_rd ;

  // rule RL_mkConnectionVtoAf_16
  assign CAN_FIRE_RL_mkConnectionVtoAf_16 = stage3_RDY_muldiv_mv_mbox_inputs ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_16 =
	     stage3_RDY_muldiv_mv_mbox_inputs ;

  // rule RL_mkConnectionVtoAf_18
  assign CAN_FIRE_RL_mkConnectionVtoAf_18 =
	     fbox_RDY__start && stage3_RDY_float_mv_fbox_inputs ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_18 =
	     CAN_FIRE_RL_mkConnectionVtoAf_18 ;

  // rule RL_connect_ena_data_14
  assign CAN_FIRE_RL_connect_ena_data_14 =
	     ff_fbox_out_ff_FULL_N && fbox_tx_output_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_14 = CAN_FIRE_RL_connect_ena_data_14 ;

  // rule RL_connect_notEmpty_14
  assign CAN_FIRE_RL_connect_notEmpty_14 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_14 = 1'd1 ;

  // rule RL_connect_rdy_29
  assign CAN_FIRE_RL_connect_rdy_29 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_29 = 1'd1 ;

  // rule RL_connect_first_14
  assign CAN_FIRE_RL_connect_first_14 =
	     ff_fbox_out_beforeDeq_Q_OUT &&
	     (ff_fbox_out_ff_EMPTY_N || CAN_FIRE_RL_connect_ena_data_14) ;
  assign WILL_FIRE_RL_connect_first_14 = CAN_FIRE_RL_connect_first_14 ;

  // rule RL_connect_ena_data_2
  assign CAN_FIRE_RL_connect_ena_data_2 =
	     ff_baseout_FULL_N && stage4_tx_tx_baseout_to_stage5_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_2 = CAN_FIRE_RL_connect_ena_data_2 ;

  // rule RL_connect_ena_data_4
  assign CAN_FIRE_RL_connect_ena_data_4 =
	     ff_fuid_FULL_N && stage4_tx_tx_fuid_to_stage5_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_4 = CAN_FIRE_RL_connect_ena_data_4 ;

  // rule RL_connect_ena_data_5
  assign CAN_FIRE_RL_connect_ena_data_5 =
	     ff_commitlog_FULL_N && stage4_tx_tx_commitlog_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_5 = CAN_FIRE_RL_connect_ena_data_5 ;

  // rule RL_connect_ena_10
  assign CAN_FIRE_RL_connect_ena_10 =
	     ff_fuid_1_EMPTY_N && stage4_rx_rx_fuid_from_stage3_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_10 = CAN_FIRE_RL_connect_ena_10 ;

  // rule RL_connect_ena_11
  assign CAN_FIRE_RL_connect_ena_11 =
	     ff_commitlog_1_EMPTY_N && stage4_rx_rx_commitlog_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_11 = CAN_FIRE_RL_connect_ena_11 ;

  // rule RL_connect_ena_14
  assign CAN_FIRE_RL_connect_ena_14 =
	     (ff_fbox_out_ff_EMPTY_N || CAN_FIRE_RL_connect_ena_data_14) &&
	     stage4_s4_fbox_rx_fbox_output_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_14 = CAN_FIRE_RL_connect_ena_14 ;

  // rule RL_rl_connect_events
  assign CAN_FIRE_RL_rl_connect_events = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_events = 1'd1 ;

  // rule RL_rl_clear_stall_in_decode_stage
  assign CAN_FIRE_RL_rl_clear_stall_in_decode_stage =
	     stage2_RDY_common_ma_clear_stall &&
	     (stage3_common_mv_flush_fst || stage5_common_mv_flush[65]) ;
  assign WILL_FIRE_RL_rl_clear_stall_in_decode_stage =
	     CAN_FIRE_RL_rl_clear_stall_in_decode_stage ;

  // rule RL_ff_fbox_out_enqueue
  assign CAN_FIRE_RL_ff_fbox_out_enqueue =
	     CAN_FIRE_RL_connect_ena_data_14 &&
	     (!CAN_FIRE_RL_connect_ena_14 || ff_fbox_out_ff_EMPTY_N) ;
  assign WILL_FIRE_RL_ff_fbox_out_enqueue = CAN_FIRE_RL_ff_fbox_out_enqueue ;

  // rule RL_ff_fbox_out_dequeue
  assign CAN_FIRE_RL_ff_fbox_out_dequeue =
	     CAN_FIRE_RL_connect_ena_14 && ff_fbox_out_ff_EMPTY_N ;
  assign WILL_FIRE_RL_ff_fbox_out_dequeue = CAN_FIRE_RL_ff_fbox_out_dequeue ;

  // rule RL_pipe_s2s3_notEmpty_connect_ena
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena =
	     pipe_s2s3_notEmpty_ff_meta_EMPTY_N &&
	     stage3_rx_rx_meta_from_stage2_deq_ena ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_ena =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena ;

  // rule RL_pipe_s2s3_notEmpty_connect_notFull
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull = 1'd1 ;

  // rule RL_pipe_s2s3_notEmpty_connect_rdy
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy = 1'd1 ;

  // rule RL_pipe_s2s3_notEmpty_connect_ena_1
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_1 =
	     pipe_s2s3_notEmpty_ff_mtval_EMPTY_N &&
	     stage3_rx_rx_mtval_from_stage2_deq_ena ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_1 =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_1 ;

  // rule RL_pipe_s2s3_notEmpty_connect_notFull_1
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull_1 = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull_1 = 1'd1 ;

  // rule RL_pipe_s2s3_notEmpty_connect_rdy_2
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_2 = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_2 = 1'd1 ;

  // rule RL_pipe_s2s3_notEmpty_connect_ena_2
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_2 =
	     pipe_s2s3_notEmpty_ff_insttype_EMPTY_N &&
	     stage3_rx_rx_instrtype_from_stage2_deq_ena ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_2 =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_2 ;

  // rule RL_pipe_s2s3_notEmpty_connect_notFull_2
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull_2 = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull_2 = 1'd1 ;

  // rule RL_pipe_s2s3_notEmpty_connect_rdy_4
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_4 = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_4 = 1'd1 ;

  // rule RL_pipe_s2s3_notEmpty_connect_ena_3
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_3 =
	     pipe_s2s3_notEmpty_ff_opmeta_EMPTY_N &&
	     stage3_rx_rx_opmeta_from_stage2_deq_ena ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_3 =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_3 ;

  // rule RL_pipe_s2s3_notEmpty_connect_notFull_3
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull_3 = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull_3 = 1'd1 ;

  // rule RL_pipe_s2s3_notEmpty_connect_rdy_6
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_6 = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_6 = 1'd1 ;

  // rule RL_pipe_s2s3_notEmpty_1_connect_ena
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_1_connect_ena =
	     pipe_s2s3_notEmpty_ff_commitlog_EMPTY_N &&
	     stage3_rx_rx_commitlog_deq_ena ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_1_connect_ena =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_1_connect_ena ;

  // rule RL_pipe_s2s3_notEmpty_connect_notFull_4
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull_4 = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_notFull_4 = 1'd1 ;

  // rule RL_pipe_s2s3_notEmpty_connect_rdy_8
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_8 = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_rdy_8 = 1'd1 ;

  // rule RL_s1_pipe1_connect_notFull
  assign CAN_FIRE_RL_s1_pipe1_connect_notFull = 1'd1 ;
  assign WILL_FIRE_RL_s1_pipe1_connect_notFull = 1'd1 ;

  // rule RL_s1_pipe1_connect_rdy
  assign CAN_FIRE_RL_s1_pipe1_connect_rdy = 1'd1 ;
  assign WILL_FIRE_RL_s1_pipe1_connect_rdy = 1'd1 ;

  // rule RL_s2_pipe1_connect_notEmpty
  assign CAN_FIRE_RL_s2_pipe1_connect_notEmpty = 1'd1 ;
  assign WILL_FIRE_RL_s2_pipe1_connect_notEmpty = 1'd1 ;

  // rule RL_s2_pipe1_connect_rdy
  assign CAN_FIRE_RL_s2_pipe1_connect_rdy = 1'd1 ;
  assign WILL_FIRE_RL_s2_pipe1_connect_rdy = 1'd1 ;

  // rule RL_s2_pipe1_connect_first
  assign CAN_FIRE_RL_s2_pipe1_connect_first = ff_pipe1_EMPTY_N ;
  assign WILL_FIRE_RL_s2_pipe1_connect_first = ff_pipe1_EMPTY_N ;

  // rule RL_pipe_s0s1_notEmpty_connect_notFull
  assign CAN_FIRE_RL_pipe_s0s1_notEmpty_connect_notFull = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s0s1_notEmpty_connect_notFull = 1'd1 ;

  // rule RL_pipe_s0s1_notEmpty_connect_rdy
  assign CAN_FIRE_RL_pipe_s0s1_notEmpty_connect_rdy = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s0s1_notEmpty_connect_rdy = 1'd1 ;

  // rule RL_mkConnectionVtoAf_13
  assign CAN_FIRE_RL_mkConnectionVtoAf_13 =
	     stage0_RDY_s0_bpu_ma_train_bpu && stage3_RDY_bpu_mv_train_bpu ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_13 =
	     CAN_FIRE_RL_mkConnectionVtoAf_13 ;

  // rule RL_mkConnectionVtoAf_14
  assign CAN_FIRE_RL_mkConnectionVtoAf_14 =
	     stage0_RDY_s0_bpu_ma_mispredict &&
	     stage3_RDY_bpu_mv_mispredict_fst &&
	     stage3_RDY_bpu_mv_mispredict_snd ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_14 =
	     CAN_FIRE_RL_mkConnectionVtoAf_14 ;

  // rule RL_rl_flush_stage0
  assign CAN_FIRE_RL_rl_flush_stage0 =
	     stage0_RDY_common_ma_flush &&
	     (stage3_common_mv_flush_fst || stage5_common_mv_flush[65]) ;
  assign WILL_FIRE_RL_rl_flush_stage0 = CAN_FIRE_RL_rl_flush_stage0 ;

  // rule RL_pipe_s0s1_notEmpty_1_connect_notEmpty
  assign CAN_FIRE_RL_pipe_s0s1_notEmpty_1_connect_notEmpty = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s0s1_notEmpty_1_connect_notEmpty = 1'd1 ;

  // rule RL_pipe_s0s1_notEmpty_1_connect_rdy
  assign CAN_FIRE_RL_pipe_s0s1_notEmpty_1_connect_rdy = 1'd1 ;
  assign WILL_FIRE_RL_pipe_s0s1_notEmpty_1_connect_rdy = 1'd1 ;

  // rule RL_pipe_s0s1_notEmpty_1_connect_first
  assign CAN_FIRE_RL_pipe_s0s1_notEmpty_1_connect_first =
	     pipe_s0s1_notEmpty_ff_pipe0_EMPTY_N ;
  assign WILL_FIRE_RL_pipe_s0s1_notEmpty_1_connect_first =
	     pipe_s0s1_notEmpty_ff_pipe0_EMPTY_N ;

  // rule RL_connect_ena_data_12
  assign CAN_FIRE_RL_connect_ena_data_12 =
	     ff_commitlog_2_FULL_N && stage1_tx_tx_commitlog_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_12 = CAN_FIRE_RL_connect_ena_data_12 ;

  // rule RL_rl_update_eEpoch
  assign CAN_FIRE_RL_rl_update_eEpoch = stage3_common_mv_flush_fst ;
  assign WILL_FIRE_RL_rl_update_eEpoch = stage3_common_mv_flush_fst ;

  // rule RL_rl_update_wEpoch
  assign CAN_FIRE_RL_rl_update_wEpoch = stage5_common_mv_flush[65] ;
  assign WILL_FIRE_RL_rl_update_wEpoch = CAN_FIRE_RL_rl_update_wEpoch ;

  // rule RL_connect_ena_12
  assign CAN_FIRE_RL_connect_ena_12 =
	     ff_commitlog_2_EMPTY_N && stage2_rx_rx_commitlog_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_12 = CAN_FIRE_RL_connect_ena_12 ;

  // rule RL_mkConnectionVtoAf_1
  assign CAN_FIRE_RL_mkConnectionVtoAf_1 =
	     stage2_RDY_common_ma_commit_rd &&
	     stage5_RDY_common_mv_commit_rd ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_1 = CAN_FIRE_RL_mkConnectionVtoAf_1 ;

  // rule RL_pipe_s2s3_notEmpty_connect_ena_data
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data =
	     pipe_s2s3_notEmpty_ff_meta_FULL_N &&
	     stage2_tx_tx_meta_to_stage3_enq_ena ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data ;

  // rule RL_pipe_s2s3_notEmpty_connect_ena_data_1
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_1 =
	     pipe_s2s3_notEmpty_ff_mtval_FULL_N &&
	     stage2_tx_tx_mtval_to_stage3_enq_ena ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_1 =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_1 ;

  // rule RL_pipe_s2s3_notEmpty_connect_ena_data_2
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_2 =
	     pipe_s2s3_notEmpty_ff_insttype_FULL_N &&
	     stage2_tx_tx_instrtype_to_stage3_enq_ena ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_2 =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_2 ;

  // rule RL_pipe_s2s3_notEmpty_connect_ena_data_4
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_4 =
	     pipe_s2s3_notEmpty_ff_commitlog_FULL_N &&
	     stage2_tx_tx_commitlog_enq_ena ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_4 =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_4 ;

  // rule RL_pipe_s2s3_notEmpty_connect_ena_data_3
  assign CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_3 =
	     pipe_s2s3_notEmpty_ff_opmeta_FULL_N &&
	     stage2_tx_tx_opmeta_to_stage3_enq_ena ;
  assign WILL_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_3 =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_3 ;

  // rule RL_s1_pipe1_connect_ena_data
  assign CAN_FIRE_RL_s1_pipe1_connect_ena_data =
	     ff_pipe1_FULL_N && stage1_tx_tx_to_stage2_enq_ena ;
  assign WILL_FIRE_RL_s1_pipe1_connect_ena_data =
	     CAN_FIRE_RL_s1_pipe1_connect_ena_data ;

  // rule RL_s2_pipe1_connect_ena
  assign CAN_FIRE_RL_s2_pipe1_connect_ena =
	     ff_pipe1_EMPTY_N && stage2_rx_rx_from_stage1_deq_ena ;
  assign WILL_FIRE_RL_s2_pipe1_connect_ena =
	     CAN_FIRE_RL_s2_pipe1_connect_ena ;

  // rule RL_pipe_s0s1_notEmpty_connect_ena_data
  assign CAN_FIRE_RL_pipe_s0s1_notEmpty_connect_ena_data =
	     pipe_s0s1_notEmpty_ff_pipe0_FULL_N &&
	     stage0_tx_tx_to_stage1_enq_ena ;
  assign WILL_FIRE_RL_pipe_s0s1_notEmpty_connect_ena_data =
	     CAN_FIRE_RL_pipe_s0s1_notEmpty_connect_ena_data ;

  // rule RL_pipe_s0s1_notEmpty_1_connect_ena
  assign CAN_FIRE_RL_pipe_s0s1_notEmpty_1_connect_ena =
	     pipe_s0s1_notEmpty_ff_pipe0_EMPTY_N &&
	     stage1_rx_rx_from_stage0_deq_ena ;
  assign WILL_FIRE_RL_pipe_s0s1_notEmpty_1_connect_ena =
	     CAN_FIRE_RL_pipe_s0s1_notEmpty_1_connect_ena ;

  // inlined wires
  assign wr_bypass_wget =
	     { ff_baseout_D_OUT[79:76],
	       ff_baseout_D_OUT[70],
	       ff_baseout_EMPTY_N &&
	       (ff_baseout_D_OUT[5:1] != 5'd0 || ff_baseout_D_OUT[70]),
	       ff_baseout_D_OUT[5:1],
	       ff_baseout_D_OUT[69:6],
	       ff_baseout_D_OUT[0] } ;
  assign wr_bypass_1_wget =
	     { ff_baseout_1_D_OUT[79:76],
	       ff_baseout_1_D_OUT[70],
	       ff_baseout_1_EMPTY_N &&
	       (ff_baseout_1_D_OUT[5:1] != 5'd0 || ff_baseout_1_D_OUT[70]),
	       ff_baseout_1_D_OUT[5:1],
	       ff_baseout_1_D_OUT[69:6],
	       ff_baseout_1_D_OUT[0] } ;

  // register rg_reset_cycle
  assign rg_reset_cycle_D_IN = rg_reset_cycle + 10'd1 ;
  assign rg_reset_cycle_EN =
	     rg_reset_cycle == 10'd512 || rg_reset_cycle < 10'd512 ;

  // register rg_reset_done
  assign rg_reset_done_D_IN = 1'd1 ;
  assign rg_reset_done_EN = rg_reset_cycle == 10'd512 ;

  // register rg_reset_event
  assign rg_reset_event_D_IN = rg_reset_cycle == 10'd512 ;
  assign rg_reset_event_EN = 1'd1 ;

  // register wr_total_count
  assign wr_total_count_D_IN =
	     { lv_count_dtlb_misses__h3181,
	       lv_count_itlb_misses__h3180,
	       IF_wr_dcache_counters_whas__46_THEN_wr_dcache__ETC___d348[0],
	       IF_wr_dcache_counters_whas__46_THEN_wr_dcache__ETC___d348[1],
	       IF_wr_dcache_counters_whas__46_THEN_wr_dcache__ETC___d348[2],
	       IF_wr_dcache_counters_whas__46_THEN_wr_dcache__ETC___d348[3],
	       IF_wr_dcache_counters_whas__46_THEN_wr_dcache__ETC___d348[4],
	       IF_wr_dcache_counters_whas__46_THEN_wr_dcache__ETC___d348[5],
	       IF_wr_dcache_counters_whas__46_THEN_wr_dcache__ETC___d348[6],
	       IF_wr_dcache_counters_whas__46_THEN_wr_dcache__ETC___d348[7],
	       IF_wr_dcache_counters_whas__46_THEN_wr_dcache__ETC___d348[8],
	       IF_wr_dcache_counters_whas__46_THEN_wr_dcache__ETC___d348[9],
	       IF_wr_dcache_counters_whas__46_THEN_wr_dcache__ETC___d348[10],
	       IF_wr_dcache_counters_whas__46_THEN_wr_dcache__ETC___d348[11],
	       IF_wr_dcache_counters_whas__46_THEN_wr_dcache__ETC___d348[12],
	       IF_wr_icache_counters_whas__69_THEN_wr_icache__ETC___d371[1],
	       IF_wr_icache_counters_whas__69_THEN_wr_icache__ETC___d371[3],
	       IF_wr_icache_counters_whas__69_THEN_wr_icache__ETC___d371[0],
	       IF_wr_icache_counters_whas__69_THEN_wr_icache__ETC___d371[2],
	       IF_wr_icache_counters_whas__69_THEN_wr_icache__ETC___d371[4],
	       stage3_perfmonitors_mv_count_exestalls,
	       stage3_perfmonitors_mv_count_rawstalls,
	       stage3_perfmonitors_mv_count_muldiv,
	       stage3_perfmonitors_mv_count_floats,
	       stage3_perfmonitors_mv_count_branches,
	       stage3_perfmonitors_mv_count_jumps,
	       stage5_perf_mv_count_csrops,
	       stage5_perf_mv_count_microtraps,
	       stage5_perf_mv_count_interrupts,
	       stage5_perf_mv_count_exceptions,
	       stage3_common_mv_flush_fst && !stage5_common_mv_flush[65] } ;
  assign wr_total_count_EN = 1'd1 ;

  // submodule fbox
  assign fbox__start_m = stage3_float_mv_fbox_inputs ;
  assign fbox_tx_output_enq_rdy_b =
	     ff_fbox_out_beforeEnq_Q_OUT && ff_fbox_out_beforeDeq_Q_OUT &&
	     ff_fbox_out_ff_FULL_N ;
  assign fbox_tx_output_notFull_b =
	     ff_fbox_out_beforeEnq_Q_OUT && ff_fbox_out_beforeDeq_Q_OUT &&
	     ff_fbox_out_ff_FULL_N ;
  assign fbox_EN__start = CAN_FIRE_RL_mkConnectionVtoAf_18 ;
  assign fbox_EN_flush = 1'b0 ;

  // submodule ff_baseout
  assign ff_baseout_D_IN = stage4_tx_tx_baseout_to_stage5_enq_data ;
  assign ff_baseout_ENQ = CAN_FIRE_RL_connect_ena_data_2 ;
  assign ff_baseout_DEQ = CAN_FIRE_RL_connect_ena_2 ;
  assign ff_baseout_CLR = 1'b0 ;

  // submodule ff_baseout_1
  assign ff_baseout_1_D_IN = stage3_tx_tx_baseout_to_stage4_enq_data ;
  assign ff_baseout_1_ENQ = CAN_FIRE_RL_connect_ena_data_6 ;
  assign ff_baseout_1_DEQ = CAN_FIRE_RL_connect_ena_6 ;
  assign ff_baseout_1_CLR = 1'b0 ;

  // submodule ff_commitlog
  assign ff_commitlog_D_IN = stage4_tx_tx_commitlog_enq_data ;
  assign ff_commitlog_ENQ = CAN_FIRE_RL_connect_ena_data_5 ;
  assign ff_commitlog_DEQ = CAN_FIRE_RL_connect_ena_5 ;
  assign ff_commitlog_CLR = 1'b0 ;

  // submodule ff_commitlog_1
  assign ff_commitlog_1_D_IN = stage3_tx_tx_commitlog_enq_data ;
  assign ff_commitlog_1_ENQ = CAN_FIRE_RL_connect_ena_data_11 ;
  assign ff_commitlog_1_DEQ = CAN_FIRE_RL_connect_ena_11 ;
  assign ff_commitlog_1_CLR = 1'b0 ;

  // submodule ff_commitlog_2
  assign ff_commitlog_2_D_IN = stage1_tx_tx_commitlog_enq_data ;
  assign ff_commitlog_2_ENQ = CAN_FIRE_RL_connect_ena_data_12 ;
  assign ff_commitlog_2_DEQ = CAN_FIRE_RL_connect_ena_12 ;
  assign ff_commitlog_2_CLR = 1'b0 ;

  // submodule ff_fbox_out_beforeDeq
  assign ff_fbox_out_beforeDeq_D_IN = 1'd1 ;
  assign ff_fbox_out_beforeDeq_EN = CAN_FIRE_RL_connect_ena_14 ;

  // submodule ff_fbox_out_beforeEnq
  assign ff_fbox_out_beforeEnq_D_IN = 1'd1 ;
  assign ff_fbox_out_beforeEnq_EN = CAN_FIRE_RL_connect_ena_data_14 ;

  // submodule ff_fbox_out_ff
  assign ff_fbox_out_ff_D_IN = fbox_tx_output_enq_data ;
  assign ff_fbox_out_ff_ENQ = CAN_FIRE_RL_ff_fbox_out_enqueue ;
  assign ff_fbox_out_ff_DEQ = CAN_FIRE_RL_ff_fbox_out_dequeue ;
  assign ff_fbox_out_ff_CLR = 1'b0 ;

  // submodule ff_fuid
  assign ff_fuid_D_IN = stage4_tx_tx_fuid_to_stage5_enq_data ;
  assign ff_fuid_ENQ = CAN_FIRE_RL_connect_ena_data_4 ;
  assign ff_fuid_DEQ = CAN_FIRE_RL_connect_ena_4 ;
  assign ff_fuid_CLR = 1'b0 ;

  // submodule ff_fuid_1
  assign ff_fuid_1_D_IN = stage3_tx_tx_fuid_to_stage4_enq_data ;
  assign ff_fuid_1_ENQ = CAN_FIRE_RL_connect_ena_data_10 ;
  assign ff_fuid_1_DEQ = CAN_FIRE_RL_connect_ena_10 ;
  assign ff_fuid_1_CLR = 1'b0 ;

  // submodule ff_mbox_out_beforeDeq
  assign ff_mbox_out_beforeDeq_D_IN = 1'd1 ;
  assign ff_mbox_out_beforeDeq_EN = CAN_FIRE_RL_connect_ena_13 ;

  // submodule ff_mbox_out_beforeEnq
  assign ff_mbox_out_beforeEnq_D_IN = 1'd1 ;
  assign ff_mbox_out_beforeEnq_EN = CAN_FIRE_RL_connect_ena_data_13 ;

  // submodule ff_mbox_out_ff
  assign ff_mbox_out_ff_D_IN = mbox_tx_output_enq_data ;
  assign ff_mbox_out_ff_ENQ = CAN_FIRE_RL_ff_mbox_out_enqueue ;
  assign ff_mbox_out_ff_DEQ = CAN_FIRE_RL_ff_mbox_out_dequeue ;
  assign ff_mbox_out_ff_CLR = 1'b0 ;

  // submodule ff_memoryout
  assign ff_memoryout_D_IN = stage3_tx_tx_memoryout_to_stage4_enq_data ;
  assign ff_memoryout_ENQ = CAN_FIRE_RL_connect_ena_data_9 ;
  assign ff_memoryout_DEQ = CAN_FIRE_RL_connect_ena_9 ;
  assign ff_memoryout_CLR = 1'b0 ;

  // submodule ff_pipe1
  assign ff_pipe1_D_IN = stage1_tx_tx_to_stage2_enq_data ;
  assign ff_pipe1_ENQ = CAN_FIRE_RL_s1_pipe1_connect_ena_data ;
  assign ff_pipe1_DEQ = CAN_FIRE_RL_s2_pipe1_connect_ena ;
  assign ff_pipe1_CLR = 1'b0 ;

  // submodule ff_systemout
  assign ff_systemout_D_IN = stage4_tx_tx_systemout_to_stage5_enq_data ;
  assign ff_systemout_ENQ = CAN_FIRE_RL_connect_ena_data ;
  assign ff_systemout_DEQ = CAN_FIRE_RL_connect_ena ;
  assign ff_systemout_CLR = 1'b0 ;

  // submodule ff_systemout_1
  assign ff_systemout_1_D_IN = stage3_tx_tx_systemout_to_stage4_enq_data ;
  assign ff_systemout_1_ENQ = CAN_FIRE_RL_connect_ena_data_8 ;
  assign ff_systemout_1_DEQ = CAN_FIRE_RL_connect_ena_8 ;
  assign ff_systemout_1_CLR = 1'b0 ;

  // submodule ff_trapout
  assign ff_trapout_D_IN = stage4_tx_tx_trapout_to_stage5_enq_data ;
  assign ff_trapout_ENQ = CAN_FIRE_RL_connect_ena_data_1 ;
  assign ff_trapout_DEQ = CAN_FIRE_RL_connect_ena_1 ;
  assign ff_trapout_CLR = 1'b0 ;

  // submodule ff_trapout_1
  assign ff_trapout_1_D_IN = stage3_tx_tx_trapout_to_stage4_enq_data ;
  assign ff_trapout_1_ENQ = CAN_FIRE_RL_connect_ena_data_7 ;
  assign ff_trapout_1_DEQ = CAN_FIRE_RL_connect_ena_7 ;
  assign ff_trapout_1_CLR = 1'b0 ;

  // submodule ff_wbmemop
  assign ff_wbmemop_D_IN = stage4_tx_tx_memio_to_stage5_enq_data ;
  assign ff_wbmemop_ENQ = CAN_FIRE_RL_connect_ena_data_3 ;
  assign ff_wbmemop_DEQ = CAN_FIRE_RL_connect_ena_3 ;
  assign ff_wbmemop_CLR = 1'b0 ;

  // submodule mbox
  assign mbox_ma_inputs_inputs = stage3_muldiv_mv_mbox_inputs ;
  assign mbox_tx_output_enq_rdy_b =
	     ff_mbox_out_beforeEnq_Q_OUT && ff_mbox_out_beforeDeq_Q_OUT &&
	     ff_mbox_out_ff_FULL_N ;
  assign mbox_tx_output_notFull_b =
	     ff_mbox_out_beforeEnq_Q_OUT && ff_mbox_out_beforeDeq_Q_OUT &&
	     ff_mbox_out_ff_FULL_N ;
  assign mbox_EN_ma_inputs = stage3_RDY_muldiv_mv_mbox_inputs ;

  // submodule pipe_s0s1_notEmpty_ff_pipe0
  assign pipe_s0s1_notEmpty_ff_pipe0_D_IN = stage0_tx_tx_to_stage1_enq_data ;
  assign pipe_s0s1_notEmpty_ff_pipe0_ENQ =
	     CAN_FIRE_RL_pipe_s0s1_notEmpty_connect_ena_data ;
  assign pipe_s0s1_notEmpty_ff_pipe0_DEQ =
	     CAN_FIRE_RL_pipe_s0s1_notEmpty_1_connect_ena ;
  assign pipe_s0s1_notEmpty_ff_pipe0_CLR = 1'b0 ;

  // submodule pipe_s2s3_notEmpty_ff_commitlog
  assign pipe_s2s3_notEmpty_ff_commitlog_D_IN =
	     stage2_tx_tx_commitlog_enq_data ;
  assign pipe_s2s3_notEmpty_ff_commitlog_ENQ =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_4 ;
  assign pipe_s2s3_notEmpty_ff_commitlog_DEQ =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_1_connect_ena ;
  assign pipe_s2s3_notEmpty_ff_commitlog_CLR = 1'b0 ;

  // submodule pipe_s2s3_notEmpty_ff_insttype
  assign pipe_s2s3_notEmpty_ff_insttype_D_IN =
	     stage2_tx_tx_instrtype_to_stage3_enq_data ;
  assign pipe_s2s3_notEmpty_ff_insttype_ENQ =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_2 ;
  assign pipe_s2s3_notEmpty_ff_insttype_DEQ =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_2 ;
  assign pipe_s2s3_notEmpty_ff_insttype_CLR = 1'b0 ;

  // submodule pipe_s2s3_notEmpty_ff_meta
  assign pipe_s2s3_notEmpty_ff_meta_D_IN =
	     stage2_tx_tx_meta_to_stage3_enq_data ;
  assign pipe_s2s3_notEmpty_ff_meta_ENQ =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data ;
  assign pipe_s2s3_notEmpty_ff_meta_DEQ =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena ;
  assign pipe_s2s3_notEmpty_ff_meta_CLR = 1'b0 ;

  // submodule pipe_s2s3_notEmpty_ff_mtval
  assign pipe_s2s3_notEmpty_ff_mtval_D_IN =
	     stage2_tx_tx_mtval_to_stage3_enq_data ;
  assign pipe_s2s3_notEmpty_ff_mtval_ENQ =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_1 ;
  assign pipe_s2s3_notEmpty_ff_mtval_DEQ =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_1 ;
  assign pipe_s2s3_notEmpty_ff_mtval_CLR = 1'b0 ;

  // submodule pipe_s2s3_notEmpty_ff_opmeta
  assign pipe_s2s3_notEmpty_ff_opmeta_D_IN =
	     stage2_tx_tx_opmeta_to_stage3_enq_data ;
  assign pipe_s2s3_notEmpty_ff_opmeta_ENQ =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_data_3 ;
  assign pipe_s2s3_notEmpty_ff_opmeta_DEQ =
	     CAN_FIRE_RL_pipe_s2s3_notEmpty_connect_ena_3 ;
  assign pipe_s2s3_notEmpty_ff_opmeta_CLR = 1'b0 ;

  // submodule stage0
  assign stage0_common_ma_flush_fl =
	     { stage5_common_mv_flush[0],
	       stage5_common_mv_flush[66],
	       fl_pc__h22236 } ;
  assign stage0_common_ma_reset_done__done = rg_reset_done ;
  assign stage0_s0_bpu_ma_bpu_enable_e = stage5_csrs_mv_cacheenable[2] ;
  assign stage0_s0_bpu_ma_mispredict_g =
	     { stage3_bpu_mv_mispredict_fst, stage3_bpu_mv_mispredict_snd } ;
  assign stage0_s0_bpu_ma_train_bpu_td = stage3_bpu_mv_train_bpu ;
  assign stage0_tx_tx_to_stage1_enq_rdy_b =
	     pipe_s0s1_notEmpty_ff_pipe0_FULL_N ;
  assign stage0_tx_tx_to_stage1_notFull_b =
	     pipe_s0s1_notEmpty_ff_pipe0_FULL_N ;
  assign stage0_EN_common_ma_update_eEpoch = stage3_common_mv_flush_fst ;
  assign stage0_EN_common_ma_update_wEpoch = CAN_FIRE_RL_rl_update_wEpoch ;
  assign stage0_EN_common_ma_flush = CAN_FIRE_RL_rl_flush_stage0 ;
  assign stage0_EN_common_ma_reset_done = 1'd1 ;
  assign stage0_EN_icache_to_icache_get = EN_s0_icache_to_icache_get ;
  assign stage0_EN_s0_bpu_ma_train_bpu = CAN_FIRE_RL_mkConnectionVtoAf_13 ;
  assign stage0_EN_s0_bpu_ma_mispredict = CAN_FIRE_RL_mkConnectionVtoAf_14 ;
  assign stage0_EN_s0_bpu_ma_bpu_enable = 1'd1 ;

  // submodule stage1
  assign stage1_common_ma_csr_misa_c_c = stage5_csrs_mv_csr_misa_c ;
  assign stage1_icache_inst_response_put = s1_icache_inst_response_put ;
  assign stage1_rx_rx_from_stage0_first_deq_rdy_b =
	     pipe_s0s1_notEmpty_ff_pipe0_EMPTY_N ;
  assign stage1_rx_rx_from_stage0_first_x =
	     pipe_s0s1_notEmpty_ff_pipe0_D_OUT ;
  assign stage1_rx_rx_from_stage0_notEmpty_b =
	     pipe_s0s1_notEmpty_ff_pipe0_EMPTY_N ;
  assign stage1_tx_tx_commitlog_enq_rdy_b = ff_commitlog_2_FULL_N ;
  assign stage1_tx_tx_commitlog_notFull_b = ff_commitlog_2_FULL_N ;
  assign stage1_tx_tx_to_stage2_enq_rdy_b = ff_pipe1_FULL_N ;
  assign stage1_tx_tx_to_stage2_notFull_b = ff_pipe1_FULL_N ;
  assign stage1_EN_icache_inst_response_put = EN_s1_icache_inst_response_put ;
  assign stage1_EN_common_ma_update_eEpoch = stage3_common_mv_flush_fst ;
  assign stage1_EN_common_ma_update_wEpoch = CAN_FIRE_RL_rl_update_wEpoch ;
  assign stage1_EN_common_ma_csr_misa_c = 1'd1 ;

  // submodule stage2
  assign stage2_common_ma_clear_stall_upd = 1'd1 ;
  assign stage2_common_ma_commit_rd_commit = stage5_common_mv_commit_rd ;
  assign stage2_common_ma_csrs_csr = stage5_csrs_mv_csrs_to_decode ;
  assign stage2_common_ma_resume_wfi_w = stage5_csrs_mv_resume_wfi ;
  assign stage2_debug_debug_status_status =
	     { ma_debugger_available_avail,
	       stage5_debug_mv_debug_mode,
	       stage5_debug_mv_csr_dcsr[2],
	       stage5_debug_mv_csr_dcsr[11],
	       stage5_debug_mv_core_debugenable } ;
  assign stage2_rx_rx_commitlog_first_deq_rdy_b = ff_commitlog_2_EMPTY_N ;
  assign stage2_rx_rx_commitlog_first_x = ff_commitlog_2_D_OUT ;
  assign stage2_rx_rx_commitlog_notEmpty_b = ff_commitlog_2_EMPTY_N ;
  assign stage2_rx_rx_from_stage1_first_deq_rdy_b = ff_pipe1_EMPTY_N ;
  assign stage2_rx_rx_from_stage1_first_x = ff_pipe1_D_OUT ;
  assign stage2_rx_rx_from_stage1_notEmpty_b = ff_pipe1_EMPTY_N ;
  assign stage2_tx_tx_commitlog_enq_rdy_b =
	     pipe_s2s3_notEmpty_ff_commitlog_FULL_N ;
  assign stage2_tx_tx_commitlog_notFull_b =
	     pipe_s2s3_notEmpty_ff_commitlog_FULL_N ;
  assign stage2_tx_tx_instrtype_to_stage3_enq_rdy_b =
	     pipe_s2s3_notEmpty_ff_insttype_FULL_N ;
  assign stage2_tx_tx_instrtype_to_stage3_notFull_b =
	     pipe_s2s3_notEmpty_ff_insttype_FULL_N ;
  assign stage2_tx_tx_meta_to_stage3_enq_rdy_b =
	     pipe_s2s3_notEmpty_ff_meta_FULL_N ;
  assign stage2_tx_tx_meta_to_stage3_notFull_b =
	     pipe_s2s3_notEmpty_ff_meta_FULL_N ;
  assign stage2_tx_tx_mtval_to_stage3_enq_rdy_b =
	     pipe_s2s3_notEmpty_ff_mtval_FULL_N ;
  assign stage2_tx_tx_mtval_to_stage3_notFull_b =
	     pipe_s2s3_notEmpty_ff_mtval_FULL_N ;
  assign stage2_tx_tx_opmeta_to_stage3_enq_rdy_b =
	     pipe_s2s3_notEmpty_ff_opmeta_FULL_N ;
  assign stage2_tx_tx_opmeta_to_stage3_notFull_b =
	     pipe_s2s3_notEmpty_ff_opmeta_FULL_N ;
  assign stage2_EN_common_ma_commit_rd = CAN_FIRE_RL_mkConnectionVtoAf_1 ;
  assign stage2_EN_common_ma_update_eEpoch = stage3_common_mv_flush_fst ;
  assign stage2_EN_common_ma_update_wEpoch = CAN_FIRE_RL_rl_update_wEpoch ;
  assign stage2_EN_common_ma_csrs = 1'd1 ;
  assign stage2_EN_common_ma_clear_stall =
	     CAN_FIRE_RL_rl_clear_stall_in_decode_stage ;
  assign stage2_EN_common_ma_resume_wfi = 1'd1 ;

  // submodule stage3
  assign stage3_bpu_ma_next_pc_npc = ff_pipe1_D_OUT[105:42] ;
  assign stage3_bypass_ma_bypass_fwd =
	     { wr_bypass_wget[75:71],
	       ff_baseout_EMPTY_N && wr_bypass_wget[70],
	       wr_bypass_wget[69:0],
	       wr_bypass_1_wget[75:71],
	       ff_baseout_1_EMPTY_N && wr_bypass_1_wget[70],
	       wr_bypass_1_wget[69:0] } ;
  assign stage3_cache_ma_cache_is_available_avail =
	     s3_cache_ma_cache_is_available_avail ;
  assign stage3_common_ma_csr_misa_c_m = stage5_csrs_mv_csr_misa_c ;
  assign stage3_common_ma_mstatus_mstatus = stage5_csrs_mv_csr_mstatus ;
  assign stage3_common_ma_priv_priv = stage5_csrs_mv_curr_priv ;
  assign stage3_common_ma_sb_release_commit = stage5_common_mv_commit_rd ;
  assign stage3_float_ma_fbox_ready_rdy = fbox_fpu_ready ;
  assign stage3_muldiv_ma_mbox_ready_rdy = mbox_mv_ready ;
  assign stage3_rf_ma_op1_i = stage2_rf_mv_op1 ;
  assign stage3_rf_ma_op2_i = stage2_rf_mv_op2 ;
  assign stage3_rf_ma_op3_i = stage2_rf_mv_op3 ;
  assign stage3_rx_rx_commitlog_first_deq_rdy_b =
	     pipe_s2s3_notEmpty_ff_commitlog_EMPTY_N ;
  assign stage3_rx_rx_commitlog_first_x =
	     pipe_s2s3_notEmpty_ff_commitlog_D_OUT ;
  assign stage3_rx_rx_commitlog_notEmpty_b =
	     pipe_s2s3_notEmpty_ff_commitlog_EMPTY_N ;
  assign stage3_rx_rx_instrtype_from_stage2_first_deq_rdy_b =
	     pipe_s2s3_notEmpty_ff_insttype_EMPTY_N ;
  assign stage3_rx_rx_instrtype_from_stage2_first_x =
	     pipe_s2s3_notEmpty_ff_insttype_D_OUT ;
  assign stage3_rx_rx_instrtype_from_stage2_notEmpty_b =
	     pipe_s2s3_notEmpty_ff_insttype_EMPTY_N ;
  assign stage3_rx_rx_meta_from_stage2_first_deq_rdy_b =
	     pipe_s2s3_notEmpty_ff_meta_EMPTY_N ;
  assign stage3_rx_rx_meta_from_stage2_first_x =
	     pipe_s2s3_notEmpty_ff_meta_D_OUT ;
  assign stage3_rx_rx_meta_from_stage2_notEmpty_b =
	     pipe_s2s3_notEmpty_ff_meta_EMPTY_N ;
  assign stage3_rx_rx_mtval_from_stage2_first_deq_rdy_b =
	     pipe_s2s3_notEmpty_ff_mtval_EMPTY_N ;
  assign stage3_rx_rx_mtval_from_stage2_first_x =
	     pipe_s2s3_notEmpty_ff_mtval_D_OUT ;
  assign stage3_rx_rx_mtval_from_stage2_notEmpty_b =
	     pipe_s2s3_notEmpty_ff_mtval_EMPTY_N ;
  assign stage3_rx_rx_opmeta_from_stage2_first_deq_rdy_b =
	     pipe_s2s3_notEmpty_ff_opmeta_EMPTY_N ;
  assign stage3_rx_rx_opmeta_from_stage2_first_x =
	     pipe_s2s3_notEmpty_ff_opmeta_D_OUT ;
  assign stage3_rx_rx_opmeta_from_stage2_notEmpty_b =
	     pipe_s2s3_notEmpty_ff_opmeta_EMPTY_N ;
  assign stage3_tx_tx_baseout_to_stage4_enq_rdy_b = ff_baseout_1_FULL_N ;
  assign stage3_tx_tx_baseout_to_stage4_notFull_b = ff_baseout_1_FULL_N ;
  assign stage3_tx_tx_commitlog_enq_rdy_b = ff_commitlog_1_FULL_N ;
  assign stage3_tx_tx_commitlog_notFull_b = ff_commitlog_1_FULL_N ;
  assign stage3_tx_tx_fuid_to_stage4_enq_rdy_b = ff_fuid_1_FULL_N ;
  assign stage3_tx_tx_fuid_to_stage4_notFull_b = ff_fuid_1_FULL_N ;
  assign stage3_tx_tx_memoryout_to_stage4_enq_rdy_b = ff_memoryout_FULL_N ;
  assign stage3_tx_tx_memoryout_to_stage4_notFull_b = ff_memoryout_FULL_N ;
  assign stage3_tx_tx_systemout_to_stage4_enq_rdy_b = ff_systemout_1_FULL_N ;
  assign stage3_tx_tx_systemout_to_stage4_notFull_b = ff_systemout_1_FULL_N ;
  assign stage3_tx_tx_trapout_to_stage4_enq_rdy_b = ff_trapout_1_FULL_N ;
  assign stage3_tx_tx_trapout_to_stage4_notFull_b = ff_trapout_1_FULL_N ;
  assign stage3_EN_common_ma_update_wEpoch = CAN_FIRE_RL_rl_update_wEpoch ;
  assign stage3_EN_common_ma_sb_release = stage5_RDY_common_mv_commit_rd ;
  assign stage3_EN_cache_mv_memory_request_get =
	     EN_s3_cache_mv_memory_request_get ;
  assign stage3_EN_bpu_ma_next_pc = ff_pipe1_EMPTY_N ;

  // submodule stage4
  assign stage4_cache_memory_response_put = s4_cache_memory_response_put ;
  assign stage4_rx_rx_baseout_from_stage3_first_deq_rdy_b =
	     ff_baseout_1_EMPTY_N ;
  assign stage4_rx_rx_baseout_from_stage3_first_x = ff_baseout_1_D_OUT ;
  assign stage4_rx_rx_baseout_from_stage3_notEmpty_b = ff_baseout_1_EMPTY_N ;
  assign stage4_rx_rx_commitlog_first_deq_rdy_b = ff_commitlog_1_EMPTY_N ;
  assign stage4_rx_rx_commitlog_first_x = ff_commitlog_1_D_OUT ;
  assign stage4_rx_rx_commitlog_notEmpty_b = ff_commitlog_1_EMPTY_N ;
  assign stage4_rx_rx_fuid_from_stage3_first_deq_rdy_b = ff_fuid_1_EMPTY_N ;
  assign stage4_rx_rx_fuid_from_stage3_first_x = ff_fuid_1_D_OUT ;
  assign stage4_rx_rx_fuid_from_stage3_notEmpty_b = ff_fuid_1_EMPTY_N ;
  assign stage4_rx_rx_memoryout_from_stage3_first_deq_rdy_b =
	     ff_memoryout_EMPTY_N ;
  assign stage4_rx_rx_memoryout_from_stage3_first_x = ff_memoryout_D_OUT ;
  assign stage4_rx_rx_memoryout_from_stage3_notEmpty_b =
	     ff_memoryout_EMPTY_N ;
  assign stage4_rx_rx_systemout_from_stage3_first_deq_rdy_b =
	     ff_systemout_1_EMPTY_N ;
  assign stage4_rx_rx_systemout_from_stage3_first_x = ff_systemout_1_D_OUT ;
  assign stage4_rx_rx_systemout_from_stage3_notEmpty_b =
	     ff_systemout_1_EMPTY_N ;
  assign stage4_rx_rx_trapout_from_stage3_first_deq_rdy_b =
	     ff_trapout_1_EMPTY_N ;
  assign stage4_rx_rx_trapout_from_stage3_first_x = ff_trapout_1_D_OUT ;
  assign stage4_rx_rx_trapout_from_stage3_notEmpty_b = ff_trapout_1_EMPTY_N ;
  assign stage4_s4_fbox_rx_fbox_output_first_deq_rdy_b =
	     CAN_FIRE_RL_connect_first_14 ;
  assign stage4_s4_fbox_rx_fbox_output_first_x =
	     ff_fbox_out_ff_EMPTY_N ?
	       ff_fbox_out_ff_D_OUT :
	       fbox_tx_output_enq_data ;
  assign stage4_s4_fbox_rx_fbox_output_notEmpty_b =
	     CAN_FIRE_RL_connect_first_14 ;
  assign stage4_s4_mbox_rx_mbox_output_first_deq_rdy_b =
	     CAN_FIRE_RL_connect_first_13 ;
  assign stage4_s4_mbox_rx_mbox_output_first_x =
	     ff_mbox_out_ff_EMPTY_N ?
	       ff_mbox_out_ff_D_OUT :
	       mbox_tx_output_enq_data ;
  assign stage4_s4_mbox_rx_mbox_output_notEmpty_b =
	     CAN_FIRE_RL_connect_first_13 ;
  assign stage4_tx_tx_baseout_to_stage5_enq_rdy_b = ff_baseout_FULL_N ;
  assign stage4_tx_tx_baseout_to_stage5_notFull_b = ff_baseout_FULL_N ;
  assign stage4_tx_tx_commitlog_enq_rdy_b = ff_commitlog_FULL_N ;
  assign stage4_tx_tx_commitlog_notFull_b = ff_commitlog_FULL_N ;
  assign stage4_tx_tx_fuid_to_stage5_enq_rdy_b = ff_fuid_FULL_N ;
  assign stage4_tx_tx_fuid_to_stage5_notFull_b = ff_fuid_FULL_N ;
  assign stage4_tx_tx_memio_to_stage5_enq_rdy_b = ff_wbmemop_FULL_N ;
  assign stage4_tx_tx_memio_to_stage5_notFull_b = ff_wbmemop_FULL_N ;
  assign stage4_tx_tx_systemout_to_stage5_enq_rdy_b = ff_systemout_FULL_N ;
  assign stage4_tx_tx_systemout_to_stage5_notFull_b = ff_systemout_FULL_N ;
  assign stage4_tx_tx_trapout_to_stage5_enq_rdy_b = ff_trapout_FULL_N ;
  assign stage4_tx_tx_trapout_to_stage5_notFull_b = ff_trapout_FULL_N ;
  assign stage4_EN_cache_memory_response_put =
	     EN_s4_cache_memory_response_put ;

  // submodule stage5
  assign stage5_cache_ma_io_response_r = s5_cache_ma_io_response_r ;
  assign stage5_debug_ma_debug_interrupt__int = ma_debug_interrupt__int ;
  assign stage5_interrupts_ma_clint_msip_intrpt =
	     interrupts_ma_clint_msip_intrpt ;
  assign stage5_interrupts_ma_clint_mtime_mtime =
	     interrupts_ma_clint_mtime_mtime ;
  assign stage5_interrupts_ma_clint_mtip_intrpt =
	     interrupts_ma_clint_mtip_intrpt ;
  assign stage5_interrupts_ma_plic_meip_intrpt =
	     interrupts_ma_plic_meip_intrpt ;
  assign stage5_interrupts_ma_plic_seip_intrpt =
	     interrupts_ma_plic_seip_intrpt ;
  assign stage5_perf_ma_events_e = { wr_total_count, 1'b0 } ;
  assign stage5_rx_rx_baseout_from_stage4_first_deq_rdy_b =
	     ff_baseout_EMPTY_N ;
  assign stage5_rx_rx_baseout_from_stage4_first_x = ff_baseout_D_OUT ;
  assign stage5_rx_rx_baseout_from_stage4_notEmpty_b = ff_baseout_EMPTY_N ;
  assign stage5_rx_rx_commitlog_first_deq_rdy_b = ff_commitlog_EMPTY_N ;
  assign stage5_rx_rx_commitlog_first_x = ff_commitlog_D_OUT ;
  assign stage5_rx_rx_commitlog_notEmpty_b = ff_commitlog_EMPTY_N ;
  assign stage5_rx_rx_fuid_from_stage4_first_deq_rdy_b = ff_fuid_EMPTY_N ;
  assign stage5_rx_rx_fuid_from_stage4_first_x = ff_fuid_D_OUT ;
  assign stage5_rx_rx_fuid_from_stage4_notEmpty_b = ff_fuid_EMPTY_N ;
  assign stage5_rx_rx_memio_from_stage4_first_deq_rdy_b = ff_wbmemop_EMPTY_N ;
  assign stage5_rx_rx_memio_from_stage4_first_x = ff_wbmemop_D_OUT ;
  assign stage5_rx_rx_memio_from_stage4_notEmpty_b = ff_wbmemop_EMPTY_N ;
  assign stage5_rx_rx_systemout_from_stage4_first_deq_rdy_b =
	     ff_systemout_EMPTY_N ;
  assign stage5_rx_rx_systemout_from_stage4_first_x = ff_systemout_D_OUT ;
  assign stage5_rx_rx_systemout_from_stage4_notEmpty_b =
	     ff_systemout_EMPTY_N ;
  assign stage5_rx_rx_trapout_from_stage4_first_deq_rdy_b =
	     ff_trapout_EMPTY_N ;
  assign stage5_rx_rx_trapout_from_stage4_first_x = ff_trapout_D_OUT ;
  assign stage5_rx_rx_trapout_from_stage4_notEmpty_b = ff_trapout_EMPTY_N ;
  assign stage5_EN_debug_ma_debug_interrupt = EN_ma_debug_interrupt ;
  assign stage5_EN_perf_ma_events = 1'd1 ;
  assign stage5_EN_interrupts_ma_clint_msip = EN_interrupts_ma_clint_msip ;
  assign stage5_EN_interrupts_ma_clint_mtip = EN_interrupts_ma_clint_mtip ;
  assign stage5_EN_interrupts_ma_clint_mtime = EN_interrupts_ma_clint_mtime ;
  assign stage5_EN_interrupts_ma_plic_meip = EN_interrupts_ma_plic_meip ;
  assign stage5_EN_interrupts_ma_plic_seip = EN_interrupts_ma_plic_seip ;
  assign stage5_EN_cache_ma_io_response = EN_s5_cache_ma_io_response ;

  // remaining internal signals
  assign IF_wr_dcache_counters_whas__46_THEN_wr_dcache__ETC___d348 =
	     EN_perfmonitors_ma_dcache_counters ?
	       perfmonitors_ma_dcache_counters_i :
	       13'd0 ;
  assign IF_wr_icache_counters_whas__69_THEN_wr_icache__ETC___d371 =
	     EN_perfmonitors_ma_icache_counters ?
	       perfmonitors_ma_icache_counters_i :
	       5'd0 ;
  assign fl_pc__h22236 =
	     stage5_common_mv_flush[65] ?
	       stage5_common_mv_flush[64:1] :
	       stage3_common_mv_flush_snd ;
  assign lv_count_dtlb_misses__h3181 =
	     EN_perfmonitors_ma_dtlb_counters &&
	     perfmonitors_ma_dtlb_counters_i ;
  assign lv_count_itlb_misses__h3180 =
	     EN_perfmonitors_ma_itlb_counters &&
	     perfmonitors_ma_itlb_counters_i ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_reset_cycle <= `BSV_ASSIGNMENT_DELAY 10'd0;
	rg_reset_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_reset_event <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wr_total_count <= `BSV_ASSIGNMENT_DELAY 31'd0;
      end
    else
      begin
        if (rg_reset_cycle_EN)
	  rg_reset_cycle <= `BSV_ASSIGNMENT_DELAY rg_reset_cycle_D_IN;
	if (rg_reset_done_EN)
	  rg_reset_done <= `BSV_ASSIGNMENT_DELAY rg_reset_done_D_IN;
	if (rg_reset_event_EN)
	  rg_reset_event <= `BSV_ASSIGNMENT_DELAY rg_reset_event_D_IN;
	if (wr_total_count_EN)
	  wr_total_count <= `BSV_ASSIGNMENT_DELAY wr_total_count_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_reset_cycle = 10'h2AA;
    rg_reset_done = 1'h0;
    rg_reset_event = 1'h0;
    wr_total_count = 31'h2AAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkriscv

