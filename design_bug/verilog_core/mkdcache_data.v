//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
//
// On Tue Jul 29 14:28:02 +04 2025
//
//
// Ports:
// Name                         I/O  size props
// RDY_ma_request                 O     1 const
// mv_word_select                 O   576
// RDY_mv_word_select             O     1 const
// mv_line_select                 O   512
// RDY_mv_line_select             O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ma_request_read_write          I     1
// ma_request_index               I     6
// ma_request_dataline            I   512
// ma_request_way                 I     2
// ma_request_banks               I     8
// mv_word_select_blocknum        I     3
// mv_word_select_wayselect       I     4
// mv_line_select_wayselect       I     4
// EN_ma_request                  I     1
// EN_mv_word_select              I     1 unused
// EN_mv_line_select              I     1 unused
//
// Combinational paths from inputs to outputs:
//   (mv_word_select_blocknum, mv_word_select_wayselect) -> mv_word_select
//   mv_line_select_wayselect -> mv_line_select
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkdcache_data(CLK,
		     RST_N,

		     ma_request_read_write,
		     ma_request_index,
		     ma_request_dataline,
		     ma_request_way,
		     ma_request_banks,
		     EN_ma_request,
		     RDY_ma_request,

		     mv_word_select_blocknum,
		     mv_word_select_wayselect,
		     EN_mv_word_select,
		     mv_word_select,
		     RDY_mv_word_select,

		     mv_line_select_wayselect,
		     EN_mv_line_select,
		     mv_line_select,
		     RDY_mv_line_select);
  parameter [31 : 0] id = 32'b0;
  input  CLK;
  input  RST_N;

  // action method ma_request
  input  ma_request_read_write;
  input  [5 : 0] ma_request_index;
  input  [511 : 0] ma_request_dataline;
  input  [1 : 0] ma_request_way;
  input  [7 : 0] ma_request_banks;
  input  EN_ma_request;
  output RDY_ma_request;

  // actionvalue method mv_word_select
  input  [2 : 0] mv_word_select_blocknum;
  input  [3 : 0] mv_word_select_wayselect;
  input  EN_mv_word_select;
  output [575 : 0] mv_word_select;
  output RDY_mv_word_select;

  // actionvalue method mv_line_select
  input  [3 : 0] mv_line_select_wayselect;
  input  EN_mv_line_select;
  output [511 : 0] mv_line_select;
  output RDY_mv_line_select;

  // signals for module outputs
  wire [575 : 0] mv_word_select;
  wire [511 : 0] mv_line_select;
  wire RDY_ma_request, RDY_mv_line_select, RDY_mv_word_select;

  // register v_data_0_rg_output_0
  reg [63 : 0] v_data_0_rg_output_0;
  wire [63 : 0] v_data_0_rg_output_0_D_IN;
  wire v_data_0_rg_output_0_EN;

  // register v_data_0_rg_output_1
  reg [63 : 0] v_data_0_rg_output_1;
  wire [63 : 0] v_data_0_rg_output_1_D_IN;
  wire v_data_0_rg_output_1_EN;

  // register v_data_0_rg_output_2
  reg [63 : 0] v_data_0_rg_output_2;
  wire [63 : 0] v_data_0_rg_output_2_D_IN;
  wire v_data_0_rg_output_2_EN;

  // register v_data_0_rg_output_3
  reg [63 : 0] v_data_0_rg_output_3;
  wire [63 : 0] v_data_0_rg_output_3_D_IN;
  wire v_data_0_rg_output_3_EN;

  // register v_data_0_rg_output_4
  reg [63 : 0] v_data_0_rg_output_4;
  wire [63 : 0] v_data_0_rg_output_4_D_IN;
  wire v_data_0_rg_output_4_EN;

  // register v_data_0_rg_output_5
  reg [63 : 0] v_data_0_rg_output_5;
  wire [63 : 0] v_data_0_rg_output_5_D_IN;
  wire v_data_0_rg_output_5_EN;

  // register v_data_0_rg_output_6
  reg [63 : 0] v_data_0_rg_output_6;
  wire [63 : 0] v_data_0_rg_output_6_D_IN;
  wire v_data_0_rg_output_6_EN;

  // register v_data_0_rg_output_7
  reg [63 : 0] v_data_0_rg_output_7;
  wire [63 : 0] v_data_0_rg_output_7_D_IN;
  wire v_data_0_rg_output_7_EN;

  // register v_data_1_rg_output_0
  reg [63 : 0] v_data_1_rg_output_0;
  wire [63 : 0] v_data_1_rg_output_0_D_IN;
  wire v_data_1_rg_output_0_EN;

  // register v_data_1_rg_output_1
  reg [63 : 0] v_data_1_rg_output_1;
  wire [63 : 0] v_data_1_rg_output_1_D_IN;
  wire v_data_1_rg_output_1_EN;

  // register v_data_1_rg_output_2
  reg [63 : 0] v_data_1_rg_output_2;
  wire [63 : 0] v_data_1_rg_output_2_D_IN;
  wire v_data_1_rg_output_2_EN;

  // register v_data_1_rg_output_3
  reg [63 : 0] v_data_1_rg_output_3;
  wire [63 : 0] v_data_1_rg_output_3_D_IN;
  wire v_data_1_rg_output_3_EN;

  // register v_data_1_rg_output_4
  reg [63 : 0] v_data_1_rg_output_4;
  wire [63 : 0] v_data_1_rg_output_4_D_IN;
  wire v_data_1_rg_output_4_EN;

  // register v_data_1_rg_output_5
  reg [63 : 0] v_data_1_rg_output_5;
  wire [63 : 0] v_data_1_rg_output_5_D_IN;
  wire v_data_1_rg_output_5_EN;

  // register v_data_1_rg_output_6
  reg [63 : 0] v_data_1_rg_output_6;
  wire [63 : 0] v_data_1_rg_output_6_D_IN;
  wire v_data_1_rg_output_6_EN;

  // register v_data_1_rg_output_7
  reg [63 : 0] v_data_1_rg_output_7;
  wire [63 : 0] v_data_1_rg_output_7_D_IN;
  wire v_data_1_rg_output_7_EN;

  // register v_data_2_rg_output_0
  reg [63 : 0] v_data_2_rg_output_0;
  wire [63 : 0] v_data_2_rg_output_0_D_IN;
  wire v_data_2_rg_output_0_EN;

  // register v_data_2_rg_output_1
  reg [63 : 0] v_data_2_rg_output_1;
  wire [63 : 0] v_data_2_rg_output_1_D_IN;
  wire v_data_2_rg_output_1_EN;

  // register v_data_2_rg_output_2
  reg [63 : 0] v_data_2_rg_output_2;
  wire [63 : 0] v_data_2_rg_output_2_D_IN;
  wire v_data_2_rg_output_2_EN;

  // register v_data_2_rg_output_3
  reg [63 : 0] v_data_2_rg_output_3;
  wire [63 : 0] v_data_2_rg_output_3_D_IN;
  wire v_data_2_rg_output_3_EN;

  // register v_data_2_rg_output_4
  reg [63 : 0] v_data_2_rg_output_4;
  wire [63 : 0] v_data_2_rg_output_4_D_IN;
  wire v_data_2_rg_output_4_EN;

  // register v_data_2_rg_output_5
  reg [63 : 0] v_data_2_rg_output_5;
  wire [63 : 0] v_data_2_rg_output_5_D_IN;
  wire v_data_2_rg_output_5_EN;

  // register v_data_2_rg_output_6
  reg [63 : 0] v_data_2_rg_output_6;
  wire [63 : 0] v_data_2_rg_output_6_D_IN;
  wire v_data_2_rg_output_6_EN;

  // register v_data_2_rg_output_7
  reg [63 : 0] v_data_2_rg_output_7;
  wire [63 : 0] v_data_2_rg_output_7_D_IN;
  wire v_data_2_rg_output_7_EN;

  // register v_data_3_rg_output_0
  reg [63 : 0] v_data_3_rg_output_0;
  wire [63 : 0] v_data_3_rg_output_0_D_IN;
  wire v_data_3_rg_output_0_EN;

  // register v_data_3_rg_output_1
  reg [63 : 0] v_data_3_rg_output_1;
  wire [63 : 0] v_data_3_rg_output_1_D_IN;
  wire v_data_3_rg_output_1_EN;

  // register v_data_3_rg_output_2
  reg [63 : 0] v_data_3_rg_output_2;
  wire [63 : 0] v_data_3_rg_output_2_D_IN;
  wire v_data_3_rg_output_2_EN;

  // register v_data_3_rg_output_3
  reg [63 : 0] v_data_3_rg_output_3;
  wire [63 : 0] v_data_3_rg_output_3_D_IN;
  wire v_data_3_rg_output_3_EN;

  // register v_data_3_rg_output_4
  reg [63 : 0] v_data_3_rg_output_4;
  wire [63 : 0] v_data_3_rg_output_4_D_IN;
  wire v_data_3_rg_output_4_EN;

  // register v_data_3_rg_output_5
  reg [63 : 0] v_data_3_rg_output_5;
  wire [63 : 0] v_data_3_rg_output_5_D_IN;
  wire v_data_3_rg_output_5_EN;

  // register v_data_3_rg_output_6
  reg [63 : 0] v_data_3_rg_output_6;
  wire [63 : 0] v_data_3_rg_output_6_D_IN;
  wire v_data_3_rg_output_6_EN;

  // register v_data_3_rg_output_7
  reg [63 : 0] v_data_3_rg_output_7;
  wire [63 : 0] v_data_3_rg_output_7_D_IN;
  wire v_data_3_rg_output_7_EN;

  // ports of submodule v_data_0_ram_single_0
  wire [63 : 0] v_data_0_ram_single_0_dina, v_data_0_ram_single_0_douta;
  wire [5 : 0] v_data_0_ram_single_0_addra;
  wire v_data_0_ram_single_0_ena, v_data_0_ram_single_0_wea;

  // ports of submodule v_data_0_ram_single_1
  wire [63 : 0] v_data_0_ram_single_1_dina, v_data_0_ram_single_1_douta;
  wire [5 : 0] v_data_0_ram_single_1_addra;
  wire v_data_0_ram_single_1_ena, v_data_0_ram_single_1_wea;

  // ports of submodule v_data_0_ram_single_2
  wire [63 : 0] v_data_0_ram_single_2_dina, v_data_0_ram_single_2_douta;
  wire [5 : 0] v_data_0_ram_single_2_addra;
  wire v_data_0_ram_single_2_ena, v_data_0_ram_single_2_wea;

  // ports of submodule v_data_0_ram_single_3
  wire [63 : 0] v_data_0_ram_single_3_dina, v_data_0_ram_single_3_douta;
  wire [5 : 0] v_data_0_ram_single_3_addra;
  wire v_data_0_ram_single_3_ena, v_data_0_ram_single_3_wea;

  // ports of submodule v_data_0_ram_single_4
  wire [63 : 0] v_data_0_ram_single_4_dina, v_data_0_ram_single_4_douta;
  wire [5 : 0] v_data_0_ram_single_4_addra;
  wire v_data_0_ram_single_4_ena, v_data_0_ram_single_4_wea;

  // ports of submodule v_data_0_ram_single_5
  wire [63 : 0] v_data_0_ram_single_5_dina, v_data_0_ram_single_5_douta;
  wire [5 : 0] v_data_0_ram_single_5_addra;
  wire v_data_0_ram_single_5_ena, v_data_0_ram_single_5_wea;

  // ports of submodule v_data_0_ram_single_6
  wire [63 : 0] v_data_0_ram_single_6_dina, v_data_0_ram_single_6_douta;
  wire [5 : 0] v_data_0_ram_single_6_addra;
  wire v_data_0_ram_single_6_ena, v_data_0_ram_single_6_wea;

  // ports of submodule v_data_0_ram_single_7
  wire [63 : 0] v_data_0_ram_single_7_dina, v_data_0_ram_single_7_douta;
  wire [5 : 0] v_data_0_ram_single_7_addra;
  wire v_data_0_ram_single_7_ena, v_data_0_ram_single_7_wea;

  // ports of submodule v_data_1_ram_single_0
  wire [63 : 0] v_data_1_ram_single_0_dina, v_data_1_ram_single_0_douta;
  wire [5 : 0] v_data_1_ram_single_0_addra;
  wire v_data_1_ram_single_0_ena, v_data_1_ram_single_0_wea;

  // ports of submodule v_data_1_ram_single_1
  wire [63 : 0] v_data_1_ram_single_1_dina, v_data_1_ram_single_1_douta;
  wire [5 : 0] v_data_1_ram_single_1_addra;
  wire v_data_1_ram_single_1_ena, v_data_1_ram_single_1_wea;

  // ports of submodule v_data_1_ram_single_2
  wire [63 : 0] v_data_1_ram_single_2_dina, v_data_1_ram_single_2_douta;
  wire [5 : 0] v_data_1_ram_single_2_addra;
  wire v_data_1_ram_single_2_ena, v_data_1_ram_single_2_wea;

  // ports of submodule v_data_1_ram_single_3
  wire [63 : 0] v_data_1_ram_single_3_dina, v_data_1_ram_single_3_douta;
  wire [5 : 0] v_data_1_ram_single_3_addra;
  wire v_data_1_ram_single_3_ena, v_data_1_ram_single_3_wea;

  // ports of submodule v_data_1_ram_single_4
  wire [63 : 0] v_data_1_ram_single_4_dina, v_data_1_ram_single_4_douta;
  wire [5 : 0] v_data_1_ram_single_4_addra;
  wire v_data_1_ram_single_4_ena, v_data_1_ram_single_4_wea;

  // ports of submodule v_data_1_ram_single_5
  wire [63 : 0] v_data_1_ram_single_5_dina, v_data_1_ram_single_5_douta;
  wire [5 : 0] v_data_1_ram_single_5_addra;
  wire v_data_1_ram_single_5_ena, v_data_1_ram_single_5_wea;

  // ports of submodule v_data_1_ram_single_6
  wire [63 : 0] v_data_1_ram_single_6_dina, v_data_1_ram_single_6_douta;
  wire [5 : 0] v_data_1_ram_single_6_addra;
  wire v_data_1_ram_single_6_ena, v_data_1_ram_single_6_wea;

  // ports of submodule v_data_1_ram_single_7
  wire [63 : 0] v_data_1_ram_single_7_dina, v_data_1_ram_single_7_douta;
  wire [5 : 0] v_data_1_ram_single_7_addra;
  wire v_data_1_ram_single_7_ena, v_data_1_ram_single_7_wea;

  // ports of submodule v_data_2_ram_single_0
  wire [63 : 0] v_data_2_ram_single_0_dina, v_data_2_ram_single_0_douta;
  wire [5 : 0] v_data_2_ram_single_0_addra;
  wire v_data_2_ram_single_0_ena, v_data_2_ram_single_0_wea;

  // ports of submodule v_data_2_ram_single_1
  wire [63 : 0] v_data_2_ram_single_1_dina, v_data_2_ram_single_1_douta;
  wire [5 : 0] v_data_2_ram_single_1_addra;
  wire v_data_2_ram_single_1_ena, v_data_2_ram_single_1_wea;

  // ports of submodule v_data_2_ram_single_2
  wire [63 : 0] v_data_2_ram_single_2_dina, v_data_2_ram_single_2_douta;
  wire [5 : 0] v_data_2_ram_single_2_addra;
  wire v_data_2_ram_single_2_ena, v_data_2_ram_single_2_wea;

  // ports of submodule v_data_2_ram_single_3
  wire [63 : 0] v_data_2_ram_single_3_dina, v_data_2_ram_single_3_douta;
  wire [5 : 0] v_data_2_ram_single_3_addra;
  wire v_data_2_ram_single_3_ena, v_data_2_ram_single_3_wea;

  // ports of submodule v_data_2_ram_single_4
  wire [63 : 0] v_data_2_ram_single_4_dina, v_data_2_ram_single_4_douta;
  wire [5 : 0] v_data_2_ram_single_4_addra;
  wire v_data_2_ram_single_4_ena, v_data_2_ram_single_4_wea;

  // ports of submodule v_data_2_ram_single_5
  wire [63 : 0] v_data_2_ram_single_5_dina, v_data_2_ram_single_5_douta;
  wire [5 : 0] v_data_2_ram_single_5_addra;
  wire v_data_2_ram_single_5_ena, v_data_2_ram_single_5_wea;

  // ports of submodule v_data_2_ram_single_6
  wire [63 : 0] v_data_2_ram_single_6_dina, v_data_2_ram_single_6_douta;
  wire [5 : 0] v_data_2_ram_single_6_addra;
  wire v_data_2_ram_single_6_ena, v_data_2_ram_single_6_wea;

  // ports of submodule v_data_2_ram_single_7
  wire [63 : 0] v_data_2_ram_single_7_dina, v_data_2_ram_single_7_douta;
  wire [5 : 0] v_data_2_ram_single_7_addra;
  wire v_data_2_ram_single_7_ena, v_data_2_ram_single_7_wea;

  // ports of submodule v_data_3_ram_single_0
  wire [63 : 0] v_data_3_ram_single_0_dina, v_data_3_ram_single_0_douta;
  wire [5 : 0] v_data_3_ram_single_0_addra;
  wire v_data_3_ram_single_0_ena, v_data_3_ram_single_0_wea;

  // ports of submodule v_data_3_ram_single_1
  wire [63 : 0] v_data_3_ram_single_1_dina, v_data_3_ram_single_1_douta;
  wire [5 : 0] v_data_3_ram_single_1_addra;
  wire v_data_3_ram_single_1_ena, v_data_3_ram_single_1_wea;

  // ports of submodule v_data_3_ram_single_2
  wire [63 : 0] v_data_3_ram_single_2_dina, v_data_3_ram_single_2_douta;
  wire [5 : 0] v_data_3_ram_single_2_addra;
  wire v_data_3_ram_single_2_ena, v_data_3_ram_single_2_wea;

  // ports of submodule v_data_3_ram_single_3
  wire [63 : 0] v_data_3_ram_single_3_dina, v_data_3_ram_single_3_douta;
  wire [5 : 0] v_data_3_ram_single_3_addra;
  wire v_data_3_ram_single_3_ena, v_data_3_ram_single_3_wea;

  // ports of submodule v_data_3_ram_single_4
  wire [63 : 0] v_data_3_ram_single_4_dina, v_data_3_ram_single_4_douta;
  wire [5 : 0] v_data_3_ram_single_4_addra;
  wire v_data_3_ram_single_4_ena, v_data_3_ram_single_4_wea;

  // ports of submodule v_data_3_ram_single_5
  wire [63 : 0] v_data_3_ram_single_5_dina, v_data_3_ram_single_5_douta;
  wire [5 : 0] v_data_3_ram_single_5_addra;
  wire v_data_3_ram_single_5_ena, v_data_3_ram_single_5_wea;

  // ports of submodule v_data_3_ram_single_6
  wire [63 : 0] v_data_3_ram_single_6_dina, v_data_3_ram_single_6_douta;
  wire [5 : 0] v_data_3_ram_single_6_addra;
  wire v_data_3_ram_single_6_ena, v_data_3_ram_single_6_wea;

  // ports of submodule v_data_3_ram_single_7
  wire [63 : 0] v_data_3_ram_single_7_dina, v_data_3_ram_single_7_douta;
  wire [5 : 0] v_data_3_ram_single_7_addra;
  wire v_data_3_ram_single_7_ena, v_data_3_ram_single_7_wea;

  // rule scheduling signals
  wire CAN_FIRE_RL_v_data_0_capture_output,
       CAN_FIRE_RL_v_data_0_capture_output_1,
       CAN_FIRE_RL_v_data_0_capture_output_2,
       CAN_FIRE_RL_v_data_0_capture_output_3,
       CAN_FIRE_RL_v_data_0_capture_output_4,
       CAN_FIRE_RL_v_data_0_capture_output_5,
       CAN_FIRE_RL_v_data_0_capture_output_6,
       CAN_FIRE_RL_v_data_0_capture_output_7,
       CAN_FIRE_RL_v_data_1_capture_output,
       CAN_FIRE_RL_v_data_1_capture_output_1,
       CAN_FIRE_RL_v_data_1_capture_output_2,
       CAN_FIRE_RL_v_data_1_capture_output_3,
       CAN_FIRE_RL_v_data_1_capture_output_4,
       CAN_FIRE_RL_v_data_1_capture_output_5,
       CAN_FIRE_RL_v_data_1_capture_output_6,
       CAN_FIRE_RL_v_data_1_capture_output_7,
       CAN_FIRE_RL_v_data_2_capture_output,
       CAN_FIRE_RL_v_data_2_capture_output_1,
       CAN_FIRE_RL_v_data_2_capture_output_2,
       CAN_FIRE_RL_v_data_2_capture_output_3,
       CAN_FIRE_RL_v_data_2_capture_output_4,
       CAN_FIRE_RL_v_data_2_capture_output_5,
       CAN_FIRE_RL_v_data_2_capture_output_6,
       CAN_FIRE_RL_v_data_2_capture_output_7,
       CAN_FIRE_RL_v_data_3_capture_output,
       CAN_FIRE_RL_v_data_3_capture_output_1,
       CAN_FIRE_RL_v_data_3_capture_output_2,
       CAN_FIRE_RL_v_data_3_capture_output_3,
       CAN_FIRE_RL_v_data_3_capture_output_4,
       CAN_FIRE_RL_v_data_3_capture_output_5,
       CAN_FIRE_RL_v_data_3_capture_output_6,
       CAN_FIRE_RL_v_data_3_capture_output_7,
       CAN_FIRE_ma_request,
       CAN_FIRE_mv_line_select,
       CAN_FIRE_mv_word_select,
       WILL_FIRE_RL_v_data_0_capture_output,
       WILL_FIRE_RL_v_data_0_capture_output_1,
       WILL_FIRE_RL_v_data_0_capture_output_2,
       WILL_FIRE_RL_v_data_0_capture_output_3,
       WILL_FIRE_RL_v_data_0_capture_output_4,
       WILL_FIRE_RL_v_data_0_capture_output_5,
       WILL_FIRE_RL_v_data_0_capture_output_6,
       WILL_FIRE_RL_v_data_0_capture_output_7,
       WILL_FIRE_RL_v_data_1_capture_output,
       WILL_FIRE_RL_v_data_1_capture_output_1,
       WILL_FIRE_RL_v_data_1_capture_output_2,
       WILL_FIRE_RL_v_data_1_capture_output_3,
       WILL_FIRE_RL_v_data_1_capture_output_4,
       WILL_FIRE_RL_v_data_1_capture_output_5,
       WILL_FIRE_RL_v_data_1_capture_output_6,
       WILL_FIRE_RL_v_data_1_capture_output_7,
       WILL_FIRE_RL_v_data_2_capture_output,
       WILL_FIRE_RL_v_data_2_capture_output_1,
       WILL_FIRE_RL_v_data_2_capture_output_2,
       WILL_FIRE_RL_v_data_2_capture_output_3,
       WILL_FIRE_RL_v_data_2_capture_output_4,
       WILL_FIRE_RL_v_data_2_capture_output_5,
       WILL_FIRE_RL_v_data_2_capture_output_6,
       WILL_FIRE_RL_v_data_2_capture_output_7,
       WILL_FIRE_RL_v_data_3_capture_output,
       WILL_FIRE_RL_v_data_3_capture_output_1,
       WILL_FIRE_RL_v_data_3_capture_output_2,
       WILL_FIRE_RL_v_data_3_capture_output_3,
       WILL_FIRE_RL_v_data_3_capture_output_4,
       WILL_FIRE_RL_v_data_3_capture_output_5,
       WILL_FIRE_RL_v_data_3_capture_output_6,
       WILL_FIRE_RL_v_data_3_capture_output_7,
       WILL_FIRE_ma_request,
       WILL_FIRE_mv_line_select,
       WILL_FIRE_mv_word_select;

  // remaining internal signals
  wire [575 : 0] IF_mv_word_select_wayselect_BIT_1_03_THEN_v_da_ETC___d173,
		 IF_mv_word_select_wayselect_BIT_2_00_THEN_v_da_ETC___d174;
  wire [511 : 0] IF_mv_line_select_wayselect_BIT_2_77_THEN_v_da_ETC___d190,
		 lv_selected_line__h21915,
		 lv_selected_line__h21947,
		 lv_selected_line__h21979,
		 lv_selected_line__h22011,
		 x__h18878,
		 x__h19568,
		 x__h20257,
		 x__h20946;
  wire [8 : 0] block_offset__h18784;
  wire [2 : 0] x__h18566,
	       x__h18578,
	       x__h18590,
	       x__h21641,
	       x__h21653,
	       x__h21665,
	       y__h18567,
	       y__h18579,
	       y__h18591,
	       y__h21642,
	       y__h21654,
	       y__h21666;
  wire NOT_0_CONCAT_mv_word_select_wayselect_BIT_3_8__ETC___d110;

  // action method ma_request
  assign RDY_ma_request = 1'd1 ;
  assign CAN_FIRE_ma_request = 1'd1 ;
  assign WILL_FIRE_ma_request = EN_ma_request ;

  // actionvalue method mv_word_select
  assign mv_word_select =
	     mv_word_select_wayselect[3] ?
	       { x__h18878[63:0], lv_selected_line__h21915 } :
	       IF_mv_word_select_wayselect_BIT_2_00_THEN_v_da_ETC___d174 ;
  assign RDY_mv_word_select = 1'd1 ;
  assign CAN_FIRE_mv_word_select = 1'd1 ;
  assign WILL_FIRE_mv_word_select = EN_mv_word_select ;

  // actionvalue method mv_line_select
  assign mv_line_select =
	     mv_line_select_wayselect[3] ?
	       lv_selected_line__h21915 :
	       IF_mv_line_select_wayselect_BIT_2_77_THEN_v_da_ETC___d190 ;
  assign RDY_mv_line_select = 1'd1 ;
  assign CAN_FIRE_mv_line_select = 1'd1 ;
  assign WILL_FIRE_mv_line_select = EN_mv_line_select ;

  // submodule v_data_0_ram_single_0
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_0_ram_single_0(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_0_ram_single_0_addra),
						     .dina(v_data_0_ram_single_0_dina),
						     .wea(v_data_0_ram_single_0_wea),
						     .ena(v_data_0_ram_single_0_ena),
						     .douta(v_data_0_ram_single_0_douta));

  // submodule v_data_0_ram_single_1
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_0_ram_single_1(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_0_ram_single_1_addra),
						     .dina(v_data_0_ram_single_1_dina),
						     .wea(v_data_0_ram_single_1_wea),
						     .ena(v_data_0_ram_single_1_ena),
						     .douta(v_data_0_ram_single_1_douta));

  // submodule v_data_0_ram_single_2
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_0_ram_single_2(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_0_ram_single_2_addra),
						     .dina(v_data_0_ram_single_2_dina),
						     .wea(v_data_0_ram_single_2_wea),
						     .ena(v_data_0_ram_single_2_ena),
						     .douta(v_data_0_ram_single_2_douta));

  // submodule v_data_0_ram_single_3
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_0_ram_single_3(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_0_ram_single_3_addra),
						     .dina(v_data_0_ram_single_3_dina),
						     .wea(v_data_0_ram_single_3_wea),
						     .ena(v_data_0_ram_single_3_ena),
						     .douta(v_data_0_ram_single_3_douta));

  // submodule v_data_0_ram_single_4
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_0_ram_single_4(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_0_ram_single_4_addra),
						     .dina(v_data_0_ram_single_4_dina),
						     .wea(v_data_0_ram_single_4_wea),
						     .ena(v_data_0_ram_single_4_ena),
						     .douta(v_data_0_ram_single_4_douta));

  // submodule v_data_0_ram_single_5
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_0_ram_single_5(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_0_ram_single_5_addra),
						     .dina(v_data_0_ram_single_5_dina),
						     .wea(v_data_0_ram_single_5_wea),
						     .ena(v_data_0_ram_single_5_ena),
						     .douta(v_data_0_ram_single_5_douta));

  // submodule v_data_0_ram_single_6
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_0_ram_single_6(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_0_ram_single_6_addra),
						     .dina(v_data_0_ram_single_6_dina),
						     .wea(v_data_0_ram_single_6_wea),
						     .ena(v_data_0_ram_single_6_ena),
						     .douta(v_data_0_ram_single_6_douta));

  // submodule v_data_0_ram_single_7
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_0_ram_single_7(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_0_ram_single_7_addra),
						     .dina(v_data_0_ram_single_7_dina),
						     .wea(v_data_0_ram_single_7_wea),
						     .ena(v_data_0_ram_single_7_ena),
						     .douta(v_data_0_ram_single_7_douta));

  // submodule v_data_1_ram_single_0
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_1_ram_single_0(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_1_ram_single_0_addra),
						     .dina(v_data_1_ram_single_0_dina),
						     .wea(v_data_1_ram_single_0_wea),
						     .ena(v_data_1_ram_single_0_ena),
						     .douta(v_data_1_ram_single_0_douta));

  // submodule v_data_1_ram_single_1
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_1_ram_single_1(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_1_ram_single_1_addra),
						     .dina(v_data_1_ram_single_1_dina),
						     .wea(v_data_1_ram_single_1_wea),
						     .ena(v_data_1_ram_single_1_ena),
						     .douta(v_data_1_ram_single_1_douta));

  // submodule v_data_1_ram_single_2
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_1_ram_single_2(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_1_ram_single_2_addra),
						     .dina(v_data_1_ram_single_2_dina),
						     .wea(v_data_1_ram_single_2_wea),
						     .ena(v_data_1_ram_single_2_ena),
						     .douta(v_data_1_ram_single_2_douta));

  // submodule v_data_1_ram_single_3
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_1_ram_single_3(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_1_ram_single_3_addra),
						     .dina(v_data_1_ram_single_3_dina),
						     .wea(v_data_1_ram_single_3_wea),
						     .ena(v_data_1_ram_single_3_ena),
						     .douta(v_data_1_ram_single_3_douta));

  // submodule v_data_1_ram_single_4
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_1_ram_single_4(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_1_ram_single_4_addra),
						     .dina(v_data_1_ram_single_4_dina),
						     .wea(v_data_1_ram_single_4_wea),
						     .ena(v_data_1_ram_single_4_ena),
						     .douta(v_data_1_ram_single_4_douta));

  // submodule v_data_1_ram_single_5
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_1_ram_single_5(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_1_ram_single_5_addra),
						     .dina(v_data_1_ram_single_5_dina),
						     .wea(v_data_1_ram_single_5_wea),
						     .ena(v_data_1_ram_single_5_ena),
						     .douta(v_data_1_ram_single_5_douta));

  // submodule v_data_1_ram_single_6
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_1_ram_single_6(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_1_ram_single_6_addra),
						     .dina(v_data_1_ram_single_6_dina),
						     .wea(v_data_1_ram_single_6_wea),
						     .ena(v_data_1_ram_single_6_ena),
						     .douta(v_data_1_ram_single_6_douta));

  // submodule v_data_1_ram_single_7
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_1_ram_single_7(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_1_ram_single_7_addra),
						     .dina(v_data_1_ram_single_7_dina),
						     .wea(v_data_1_ram_single_7_wea),
						     .ena(v_data_1_ram_single_7_ena),
						     .douta(v_data_1_ram_single_7_douta));

  // submodule v_data_2_ram_single_0
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_2_ram_single_0(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_2_ram_single_0_addra),
						     .dina(v_data_2_ram_single_0_dina),
						     .wea(v_data_2_ram_single_0_wea),
						     .ena(v_data_2_ram_single_0_ena),
						     .douta(v_data_2_ram_single_0_douta));

  // submodule v_data_2_ram_single_1
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_2_ram_single_1(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_2_ram_single_1_addra),
						     .dina(v_data_2_ram_single_1_dina),
						     .wea(v_data_2_ram_single_1_wea),
						     .ena(v_data_2_ram_single_1_ena),
						     .douta(v_data_2_ram_single_1_douta));

  // submodule v_data_2_ram_single_2
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_2_ram_single_2(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_2_ram_single_2_addra),
						     .dina(v_data_2_ram_single_2_dina),
						     .wea(v_data_2_ram_single_2_wea),
						     .ena(v_data_2_ram_single_2_ena),
						     .douta(v_data_2_ram_single_2_douta));

  // submodule v_data_2_ram_single_3
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_2_ram_single_3(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_2_ram_single_3_addra),
						     .dina(v_data_2_ram_single_3_dina),
						     .wea(v_data_2_ram_single_3_wea),
						     .ena(v_data_2_ram_single_3_ena),
						     .douta(v_data_2_ram_single_3_douta));

  // submodule v_data_2_ram_single_4
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_2_ram_single_4(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_2_ram_single_4_addra),
						     .dina(v_data_2_ram_single_4_dina),
						     .wea(v_data_2_ram_single_4_wea),
						     .ena(v_data_2_ram_single_4_ena),
						     .douta(v_data_2_ram_single_4_douta));

  // submodule v_data_2_ram_single_5
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_2_ram_single_5(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_2_ram_single_5_addra),
						     .dina(v_data_2_ram_single_5_dina),
						     .wea(v_data_2_ram_single_5_wea),
						     .ena(v_data_2_ram_single_5_ena),
						     .douta(v_data_2_ram_single_5_douta));

  // submodule v_data_2_ram_single_6
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_2_ram_single_6(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_2_ram_single_6_addra),
						     .dina(v_data_2_ram_single_6_dina),
						     .wea(v_data_2_ram_single_6_wea),
						     .ena(v_data_2_ram_single_6_ena),
						     .douta(v_data_2_ram_single_6_douta));

  // submodule v_data_2_ram_single_7
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_2_ram_single_7(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_2_ram_single_7_addra),
						     .dina(v_data_2_ram_single_7_dina),
						     .wea(v_data_2_ram_single_7_wea),
						     .ena(v_data_2_ram_single_7_ena),
						     .douta(v_data_2_ram_single_7_douta));

  // submodule v_data_3_ram_single_0
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_3_ram_single_0(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_3_ram_single_0_addra),
						     .dina(v_data_3_ram_single_0_dina),
						     .wea(v_data_3_ram_single_0_wea),
						     .ena(v_data_3_ram_single_0_ena),
						     .douta(v_data_3_ram_single_0_douta));

  // submodule v_data_3_ram_single_1
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_3_ram_single_1(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_3_ram_single_1_addra),
						     .dina(v_data_3_ram_single_1_dina),
						     .wea(v_data_3_ram_single_1_wea),
						     .ena(v_data_3_ram_single_1_ena),
						     .douta(v_data_3_ram_single_1_douta));

  // submodule v_data_3_ram_single_2
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_3_ram_single_2(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_3_ram_single_2_addra),
						     .dina(v_data_3_ram_single_2_dina),
						     .wea(v_data_3_ram_single_2_wea),
						     .ena(v_data_3_ram_single_2_ena),
						     .douta(v_data_3_ram_single_2_douta));

  // submodule v_data_3_ram_single_3
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_3_ram_single_3(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_3_ram_single_3_addra),
						     .dina(v_data_3_ram_single_3_dina),
						     .wea(v_data_3_ram_single_3_wea),
						     .ena(v_data_3_ram_single_3_ena),
						     .douta(v_data_3_ram_single_3_douta));

  // submodule v_data_3_ram_single_4
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_3_ram_single_4(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_3_ram_single_4_addra),
						     .dina(v_data_3_ram_single_4_dina),
						     .wea(v_data_3_ram_single_4_wea),
						     .ena(v_data_3_ram_single_4_ena),
						     .douta(v_data_3_ram_single_4_douta));

  // submodule v_data_3_ram_single_5
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_3_ram_single_5(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_3_ram_single_5_addra),
						     .dina(v_data_3_ram_single_5_dina),
						     .wea(v_data_3_ram_single_5_wea),
						     .ena(v_data_3_ram_single_5_ena),
						     .douta(v_data_3_ram_single_5_douta));

  // submodule v_data_3_ram_single_6
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_3_ram_single_6(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_3_ram_single_6_addra),
						     .dina(v_data_3_ram_single_6_dina),
						     .wea(v_data_3_ram_single_6_wea),
						     .ena(v_data_3_ram_single_6_ena),
						     .douta(v_data_3_ram_single_6_douta));

  // submodule v_data_3_ram_single_7
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd64),
	     .MEMSIZE(32'd64)) v_data_3_ram_single_7(.clka(CLK),
						     .rst_n(RST_N),
						     .addra(v_data_3_ram_single_7_addra),
						     .dina(v_data_3_ram_single_7_dina),
						     .wea(v_data_3_ram_single_7_wea),
						     .ena(v_data_3_ram_single_7_ena),
						     .douta(v_data_3_ram_single_7_douta));

  // rule RL_v_data_0_capture_output
  assign CAN_FIRE_RL_v_data_0_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_v_data_0_capture_output = 1'd1 ;

  // rule RL_v_data_0_capture_output_1
  assign CAN_FIRE_RL_v_data_0_capture_output_1 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_0_capture_output_1 = 1'd1 ;

  // rule RL_v_data_0_capture_output_2
  assign CAN_FIRE_RL_v_data_0_capture_output_2 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_0_capture_output_2 = 1'd1 ;

  // rule RL_v_data_0_capture_output_3
  assign CAN_FIRE_RL_v_data_0_capture_output_3 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_0_capture_output_3 = 1'd1 ;

  // rule RL_v_data_0_capture_output_4
  assign CAN_FIRE_RL_v_data_0_capture_output_4 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_0_capture_output_4 = 1'd1 ;

  // rule RL_v_data_0_capture_output_5
  assign CAN_FIRE_RL_v_data_0_capture_output_5 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_0_capture_output_5 = 1'd1 ;

  // rule RL_v_data_0_capture_output_6
  assign CAN_FIRE_RL_v_data_0_capture_output_6 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_0_capture_output_6 = 1'd1 ;

  // rule RL_v_data_0_capture_output_7
  assign CAN_FIRE_RL_v_data_0_capture_output_7 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_0_capture_output_7 = 1'd1 ;

  // rule RL_v_data_1_capture_output
  assign CAN_FIRE_RL_v_data_1_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_v_data_1_capture_output = 1'd1 ;

  // rule RL_v_data_1_capture_output_1
  assign CAN_FIRE_RL_v_data_1_capture_output_1 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_1_capture_output_1 = 1'd1 ;

  // rule RL_v_data_1_capture_output_2
  assign CAN_FIRE_RL_v_data_1_capture_output_2 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_1_capture_output_2 = 1'd1 ;

  // rule RL_v_data_1_capture_output_3
  assign CAN_FIRE_RL_v_data_1_capture_output_3 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_1_capture_output_3 = 1'd1 ;

  // rule RL_v_data_1_capture_output_4
  assign CAN_FIRE_RL_v_data_1_capture_output_4 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_1_capture_output_4 = 1'd1 ;

  // rule RL_v_data_1_capture_output_5
  assign CAN_FIRE_RL_v_data_1_capture_output_5 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_1_capture_output_5 = 1'd1 ;

  // rule RL_v_data_1_capture_output_6
  assign CAN_FIRE_RL_v_data_1_capture_output_6 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_1_capture_output_6 = 1'd1 ;

  // rule RL_v_data_1_capture_output_7
  assign CAN_FIRE_RL_v_data_1_capture_output_7 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_1_capture_output_7 = 1'd1 ;

  // rule RL_v_data_2_capture_output
  assign CAN_FIRE_RL_v_data_2_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_v_data_2_capture_output = 1'd1 ;

  // rule RL_v_data_2_capture_output_1
  assign CAN_FIRE_RL_v_data_2_capture_output_1 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_2_capture_output_1 = 1'd1 ;

  // rule RL_v_data_2_capture_output_2
  assign CAN_FIRE_RL_v_data_2_capture_output_2 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_2_capture_output_2 = 1'd1 ;

  // rule RL_v_data_2_capture_output_3
  assign CAN_FIRE_RL_v_data_2_capture_output_3 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_2_capture_output_3 = 1'd1 ;

  // rule RL_v_data_2_capture_output_4
  assign CAN_FIRE_RL_v_data_2_capture_output_4 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_2_capture_output_4 = 1'd1 ;

  // rule RL_v_data_2_capture_output_5
  assign CAN_FIRE_RL_v_data_2_capture_output_5 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_2_capture_output_5 = 1'd1 ;

  // rule RL_v_data_2_capture_output_6
  assign CAN_FIRE_RL_v_data_2_capture_output_6 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_2_capture_output_6 = 1'd1 ;

  // rule RL_v_data_2_capture_output_7
  assign CAN_FIRE_RL_v_data_2_capture_output_7 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_2_capture_output_7 = 1'd1 ;

  // rule RL_v_data_3_capture_output
  assign CAN_FIRE_RL_v_data_3_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_v_data_3_capture_output = 1'd1 ;

  // rule RL_v_data_3_capture_output_1
  assign CAN_FIRE_RL_v_data_3_capture_output_1 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_3_capture_output_1 = 1'd1 ;

  // rule RL_v_data_3_capture_output_2
  assign CAN_FIRE_RL_v_data_3_capture_output_2 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_3_capture_output_2 = 1'd1 ;

  // rule RL_v_data_3_capture_output_3
  assign CAN_FIRE_RL_v_data_3_capture_output_3 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_3_capture_output_3 = 1'd1 ;

  // rule RL_v_data_3_capture_output_4
  assign CAN_FIRE_RL_v_data_3_capture_output_4 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_3_capture_output_4 = 1'd1 ;

  // rule RL_v_data_3_capture_output_5
  assign CAN_FIRE_RL_v_data_3_capture_output_5 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_3_capture_output_5 = 1'd1 ;

  // rule RL_v_data_3_capture_output_6
  assign CAN_FIRE_RL_v_data_3_capture_output_6 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_3_capture_output_6 = 1'd1 ;

  // rule RL_v_data_3_capture_output_7
  assign CAN_FIRE_RL_v_data_3_capture_output_7 = 1'd1 ;
  assign WILL_FIRE_RL_v_data_3_capture_output_7 = 1'd1 ;

  // register v_data_0_rg_output_0
  assign v_data_0_rg_output_0_D_IN = v_data_0_ram_single_0_douta ;
  assign v_data_0_rg_output_0_EN = 1'b1 ;

  // register v_data_0_rg_output_1
  assign v_data_0_rg_output_1_D_IN = v_data_0_ram_single_1_douta ;
  assign v_data_0_rg_output_1_EN = 1'b1 ;

  // register v_data_0_rg_output_2
  assign v_data_0_rg_output_2_D_IN = v_data_0_ram_single_2_douta ;
  assign v_data_0_rg_output_2_EN = 1'b1 ;

  // register v_data_0_rg_output_3
  assign v_data_0_rg_output_3_D_IN = v_data_0_ram_single_3_douta ;
  assign v_data_0_rg_output_3_EN = 1'b1 ;

  // register v_data_0_rg_output_4
  assign v_data_0_rg_output_4_D_IN = v_data_0_ram_single_4_douta ;
  assign v_data_0_rg_output_4_EN = 1'b1 ;

  // register v_data_0_rg_output_5
  assign v_data_0_rg_output_5_D_IN = v_data_0_ram_single_5_douta ;
  assign v_data_0_rg_output_5_EN = 1'b1 ;

  // register v_data_0_rg_output_6
  assign v_data_0_rg_output_6_D_IN = v_data_0_ram_single_6_douta ;
  assign v_data_0_rg_output_6_EN = 1'b1 ;

  // register v_data_0_rg_output_7
  assign v_data_0_rg_output_7_D_IN = v_data_0_ram_single_7_douta ;
  assign v_data_0_rg_output_7_EN = 1'b1 ;

  // register v_data_1_rg_output_0
  assign v_data_1_rg_output_0_D_IN = v_data_1_ram_single_0_douta ;
  assign v_data_1_rg_output_0_EN = 1'b1 ;

  // register v_data_1_rg_output_1
  assign v_data_1_rg_output_1_D_IN = v_data_1_ram_single_1_douta ;
  assign v_data_1_rg_output_1_EN = 1'b1 ;

  // register v_data_1_rg_output_2
  assign v_data_1_rg_output_2_D_IN = v_data_1_ram_single_2_douta ;
  assign v_data_1_rg_output_2_EN = 1'b1 ;

  // register v_data_1_rg_output_3
  assign v_data_1_rg_output_3_D_IN = v_data_1_ram_single_3_douta ;
  assign v_data_1_rg_output_3_EN = 1'b1 ;

  // register v_data_1_rg_output_4
  assign v_data_1_rg_output_4_D_IN = v_data_1_ram_single_4_douta ;
  assign v_data_1_rg_output_4_EN = 1'b1 ;

  // register v_data_1_rg_output_5
  assign v_data_1_rg_output_5_D_IN = v_data_1_ram_single_5_douta ;
  assign v_data_1_rg_output_5_EN = 1'b1 ;

  // register v_data_1_rg_output_6
  assign v_data_1_rg_output_6_D_IN = v_data_1_ram_single_6_douta ;
  assign v_data_1_rg_output_6_EN = 1'b1 ;

  // register v_data_1_rg_output_7
  assign v_data_1_rg_output_7_D_IN = v_data_1_ram_single_7_douta ;
  assign v_data_1_rg_output_7_EN = 1'b1 ;

  // register v_data_2_rg_output_0
  assign v_data_2_rg_output_0_D_IN = v_data_2_ram_single_0_douta ;
  assign v_data_2_rg_output_0_EN = 1'b1 ;

  // register v_data_2_rg_output_1
  assign v_data_2_rg_output_1_D_IN = v_data_2_ram_single_1_douta ;
  assign v_data_2_rg_output_1_EN = 1'b1 ;

  // register v_data_2_rg_output_2
  assign v_data_2_rg_output_2_D_IN = v_data_2_ram_single_2_douta ;
  assign v_data_2_rg_output_2_EN = 1'b1 ;

  // register v_data_2_rg_output_3
  assign v_data_2_rg_output_3_D_IN = v_data_2_ram_single_3_douta ;
  assign v_data_2_rg_output_3_EN = 1'b1 ;

  // register v_data_2_rg_output_4
  assign v_data_2_rg_output_4_D_IN = v_data_2_ram_single_4_douta ;
  assign v_data_2_rg_output_4_EN = 1'b1 ;

  // register v_data_2_rg_output_5
  assign v_data_2_rg_output_5_D_IN = v_data_2_ram_single_5_douta ;
  assign v_data_2_rg_output_5_EN = 1'b1 ;

  // register v_data_2_rg_output_6
  assign v_data_2_rg_output_6_D_IN = v_data_2_ram_single_6_douta ;
  assign v_data_2_rg_output_6_EN = 1'b1 ;

  // register v_data_2_rg_output_7
  assign v_data_2_rg_output_7_D_IN = v_data_2_ram_single_7_douta ;
  assign v_data_2_rg_output_7_EN = 1'b1 ;

  // register v_data_3_rg_output_0
  assign v_data_3_rg_output_0_D_IN = v_data_3_ram_single_0_douta ;
  assign v_data_3_rg_output_0_EN = 1'b1 ;

  // register v_data_3_rg_output_1
  assign v_data_3_rg_output_1_D_IN = v_data_3_ram_single_1_douta ;
  assign v_data_3_rg_output_1_EN = 1'b1 ;

  // register v_data_3_rg_output_2
  assign v_data_3_rg_output_2_D_IN = v_data_3_ram_single_2_douta ;
  assign v_data_3_rg_output_2_EN = 1'b1 ;

  // register v_data_3_rg_output_3
  assign v_data_3_rg_output_3_D_IN = v_data_3_ram_single_3_douta ;
  assign v_data_3_rg_output_3_EN = 1'b1 ;

  // register v_data_3_rg_output_4
  assign v_data_3_rg_output_4_D_IN = v_data_3_ram_single_4_douta ;
  assign v_data_3_rg_output_4_EN = 1'b1 ;

  // register v_data_3_rg_output_5
  assign v_data_3_rg_output_5_D_IN = v_data_3_ram_single_5_douta ;
  assign v_data_3_rg_output_5_EN = 1'b1 ;

  // register v_data_3_rg_output_6
  assign v_data_3_rg_output_6_D_IN = v_data_3_ram_single_6_douta ;
  assign v_data_3_rg_output_6_EN = 1'b1 ;

  // register v_data_3_rg_output_7
  assign v_data_3_rg_output_7_D_IN = v_data_3_ram_single_7_douta ;
  assign v_data_3_rg_output_7_EN = 1'b1 ;

  // submodule v_data_0_ram_single_0
  assign v_data_0_ram_single_0_addra = ma_request_index ;
  assign v_data_0_ram_single_0_dina = ma_request_dataline[63:0] ;
  assign v_data_0_ram_single_0_wea =
	     ma_request_banks[0] && ma_request_way == 2'd0 &&
	     ma_request_read_write ;
  assign v_data_0_ram_single_0_ena =
	     EN_ma_request &&
	     (ma_request_banks[0] && ma_request_way == 2'd0 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[0]) ;

  // submodule v_data_0_ram_single_1
  assign v_data_0_ram_single_1_addra = ma_request_index ;
  assign v_data_0_ram_single_1_dina = ma_request_dataline[127:64] ;
  assign v_data_0_ram_single_1_wea =
	     ma_request_banks[1] && ma_request_way == 2'd0 &&
	     ma_request_read_write ;
  assign v_data_0_ram_single_1_ena =
	     EN_ma_request &&
	     (ma_request_banks[1] && ma_request_way == 2'd0 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[1]) ;

  // submodule v_data_0_ram_single_2
  assign v_data_0_ram_single_2_addra = ma_request_index ;
  assign v_data_0_ram_single_2_dina = ma_request_dataline[191:128] ;
  assign v_data_0_ram_single_2_wea =
	     ma_request_banks[2] && ma_request_way == 2'd0 &&
	     ma_request_read_write ;
  assign v_data_0_ram_single_2_ena =
	     EN_ma_request &&
	     (ma_request_banks[2] && ma_request_way == 2'd0 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[2]) ;

  // submodule v_data_0_ram_single_3
  assign v_data_0_ram_single_3_addra = ma_request_index ;
  assign v_data_0_ram_single_3_dina = ma_request_dataline[255:192] ;
  assign v_data_0_ram_single_3_wea =
	     ma_request_banks[3] && ma_request_way == 2'd0 &&
	     ma_request_read_write ;
  assign v_data_0_ram_single_3_ena =
	     EN_ma_request &&
	     (ma_request_banks[3] && ma_request_way == 2'd0 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[3]) ;

  // submodule v_data_0_ram_single_4
  assign v_data_0_ram_single_4_addra = ma_request_index ;
  assign v_data_0_ram_single_4_dina = ma_request_dataline[319:256] ;
  assign v_data_0_ram_single_4_wea =
	     ma_request_banks[4] && ma_request_way == 2'd0 &&
	     ma_request_read_write ;
  assign v_data_0_ram_single_4_ena =
	     EN_ma_request &&
	     (ma_request_banks[4] && ma_request_way == 2'd0 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[4]) ;

  // submodule v_data_0_ram_single_5
  assign v_data_0_ram_single_5_addra = ma_request_index ;
  assign v_data_0_ram_single_5_dina = ma_request_dataline[383:320] ;
  assign v_data_0_ram_single_5_wea =
	     ma_request_banks[5] && ma_request_way == 2'd0 &&
	     ma_request_read_write ;
  assign v_data_0_ram_single_5_ena =
	     EN_ma_request &&
	     (ma_request_banks[5] && ma_request_way == 2'd0 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[5]) ;

  // submodule v_data_0_ram_single_6
  assign v_data_0_ram_single_6_addra = ma_request_index ;
  assign v_data_0_ram_single_6_dina = ma_request_dataline[447:384] ;
  assign v_data_0_ram_single_6_wea =
	     ma_request_banks[6] && ma_request_way == 2'd0 &&
	     ma_request_read_write ;
  assign v_data_0_ram_single_6_ena =
	     EN_ma_request &&
	     (ma_request_banks[6] && ma_request_way == 2'd0 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[6]) ;

  // submodule v_data_0_ram_single_7
  assign v_data_0_ram_single_7_addra = ma_request_index ;
  assign v_data_0_ram_single_7_dina = ma_request_dataline[511:448] ;
  assign v_data_0_ram_single_7_wea =
	     ma_request_banks[7] && ma_request_way == 2'd0 &&
	     ma_request_read_write ;
  assign v_data_0_ram_single_7_ena =
	     EN_ma_request &&
	     (ma_request_banks[7] && ma_request_way == 2'd0 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[7]) ;

  // submodule v_data_1_ram_single_0
  assign v_data_1_ram_single_0_addra = ma_request_index ;
  assign v_data_1_ram_single_0_dina = ma_request_dataline[63:0] ;
  assign v_data_1_ram_single_0_wea =
	     ma_request_banks[0] && ma_request_way == 2'd1 &&
	     ma_request_read_write ;
  assign v_data_1_ram_single_0_ena =
	     EN_ma_request &&
	     (ma_request_banks[0] && ma_request_way == 2'd1 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[0]) ;

  // submodule v_data_1_ram_single_1
  assign v_data_1_ram_single_1_addra = ma_request_index ;
  assign v_data_1_ram_single_1_dina = ma_request_dataline[127:64] ;
  assign v_data_1_ram_single_1_wea =
	     ma_request_banks[1] && ma_request_way == 2'd1 &&
	     ma_request_read_write ;
  assign v_data_1_ram_single_1_ena =
	     EN_ma_request &&
	     (ma_request_banks[1] && ma_request_way == 2'd1 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[1]) ;

  // submodule v_data_1_ram_single_2
  assign v_data_1_ram_single_2_addra = ma_request_index ;
  assign v_data_1_ram_single_2_dina = ma_request_dataline[191:128] ;
  assign v_data_1_ram_single_2_wea =
	     ma_request_banks[2] && ma_request_way == 2'd1 &&
	     ma_request_read_write ;
  assign v_data_1_ram_single_2_ena =
	     EN_ma_request &&
	     (ma_request_banks[2] && ma_request_way == 2'd1 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[2]) ;

  // submodule v_data_1_ram_single_3
  assign v_data_1_ram_single_3_addra = ma_request_index ;
  assign v_data_1_ram_single_3_dina = ma_request_dataline[255:192] ;
  assign v_data_1_ram_single_3_wea =
	     ma_request_banks[3] && ma_request_way == 2'd1 &&
	     ma_request_read_write ;
  assign v_data_1_ram_single_3_ena =
	     EN_ma_request &&
	     (ma_request_banks[3] && ma_request_way == 2'd1 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[3]) ;

  // submodule v_data_1_ram_single_4
  assign v_data_1_ram_single_4_addra = ma_request_index ;
  assign v_data_1_ram_single_4_dina = ma_request_dataline[319:256] ;
  assign v_data_1_ram_single_4_wea =
	     ma_request_banks[4] && ma_request_way == 2'd1 &&
	     ma_request_read_write ;
  assign v_data_1_ram_single_4_ena =
	     EN_ma_request &&
	     (ma_request_banks[4] && ma_request_way == 2'd1 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[4]) ;

  // submodule v_data_1_ram_single_5
  assign v_data_1_ram_single_5_addra = ma_request_index ;
  assign v_data_1_ram_single_5_dina = ma_request_dataline[383:320] ;
  assign v_data_1_ram_single_5_wea =
	     ma_request_banks[5] && ma_request_way == 2'd1 &&
	     ma_request_read_write ;
  assign v_data_1_ram_single_5_ena =
	     EN_ma_request &&
	     (ma_request_banks[5] && ma_request_way == 2'd1 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[5]) ;

  // submodule v_data_1_ram_single_6
  assign v_data_1_ram_single_6_addra = ma_request_index ;
  assign v_data_1_ram_single_6_dina = ma_request_dataline[447:384] ;
  assign v_data_1_ram_single_6_wea =
	     ma_request_banks[6] && ma_request_way == 2'd1 &&
	     ma_request_read_write ;
  assign v_data_1_ram_single_6_ena =
	     EN_ma_request &&
	     (ma_request_banks[6] && ma_request_way == 2'd1 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[6]) ;

  // submodule v_data_1_ram_single_7
  assign v_data_1_ram_single_7_addra = ma_request_index ;
  assign v_data_1_ram_single_7_dina = ma_request_dataline[511:448] ;
  assign v_data_1_ram_single_7_wea =
	     ma_request_banks[7] && ma_request_way == 2'd1 &&
	     ma_request_read_write ;
  assign v_data_1_ram_single_7_ena =
	     EN_ma_request &&
	     (ma_request_banks[7] && ma_request_way == 2'd1 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[7]) ;

  // submodule v_data_2_ram_single_0
  assign v_data_2_ram_single_0_addra = ma_request_index ;
  assign v_data_2_ram_single_0_dina = ma_request_dataline[63:0] ;
  assign v_data_2_ram_single_0_wea =
	     ma_request_banks[0] && ma_request_way == 2'd2 &&
	     ma_request_read_write ;
  assign v_data_2_ram_single_0_ena =
	     EN_ma_request &&
	     (ma_request_banks[0] && ma_request_way == 2'd2 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[0]) ;

  // submodule v_data_2_ram_single_1
  assign v_data_2_ram_single_1_addra = ma_request_index ;
  assign v_data_2_ram_single_1_dina = ma_request_dataline[127:64] ;
  assign v_data_2_ram_single_1_wea =
	     ma_request_banks[1] && ma_request_way == 2'd2 &&
	     ma_request_read_write ;
  assign v_data_2_ram_single_1_ena =
	     EN_ma_request &&
	     (ma_request_banks[1] && ma_request_way == 2'd2 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[1]) ;

  // submodule v_data_2_ram_single_2
  assign v_data_2_ram_single_2_addra = ma_request_index ;
  assign v_data_2_ram_single_2_dina = ma_request_dataline[191:128] ;
  assign v_data_2_ram_single_2_wea =
	     ma_request_banks[2] && ma_request_way == 2'd2 &&
	     ma_request_read_write ;
  assign v_data_2_ram_single_2_ena =
	     EN_ma_request &&
	     (ma_request_banks[2] && ma_request_way == 2'd2 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[2]) ;

  // submodule v_data_2_ram_single_3
  assign v_data_2_ram_single_3_addra = ma_request_index ;
  assign v_data_2_ram_single_3_dina = ma_request_dataline[255:192] ;
  assign v_data_2_ram_single_3_wea =
	     ma_request_banks[3] && ma_request_way == 2'd2 &&
	     ma_request_read_write ;
  assign v_data_2_ram_single_3_ena =
	     EN_ma_request &&
	     (ma_request_banks[3] && ma_request_way == 2'd2 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[3]) ;

  // submodule v_data_2_ram_single_4
  assign v_data_2_ram_single_4_addra = ma_request_index ;
  assign v_data_2_ram_single_4_dina = ma_request_dataline[319:256] ;
  assign v_data_2_ram_single_4_wea =
	     ma_request_banks[4] && ma_request_way == 2'd2 &&
	     ma_request_read_write ;
  assign v_data_2_ram_single_4_ena =
	     EN_ma_request &&
	     (ma_request_banks[4] && ma_request_way == 2'd2 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[4]) ;

  // submodule v_data_2_ram_single_5
  assign v_data_2_ram_single_5_addra = ma_request_index ;
  assign v_data_2_ram_single_5_dina = ma_request_dataline[383:320] ;
  assign v_data_2_ram_single_5_wea =
	     ma_request_banks[5] && ma_request_way == 2'd2 &&
	     ma_request_read_write ;
  assign v_data_2_ram_single_5_ena =
	     EN_ma_request &&
	     (ma_request_banks[5] && ma_request_way == 2'd2 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[5]) ;

  // submodule v_data_2_ram_single_6
  assign v_data_2_ram_single_6_addra = ma_request_index ;
  assign v_data_2_ram_single_6_dina = ma_request_dataline[447:384] ;
  assign v_data_2_ram_single_6_wea =
	     ma_request_banks[6] && ma_request_way == 2'd2 &&
	     ma_request_read_write ;
  assign v_data_2_ram_single_6_ena =
	     EN_ma_request &&
	     (ma_request_banks[6] && ma_request_way == 2'd2 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[6]) ;

  // submodule v_data_2_ram_single_7
  assign v_data_2_ram_single_7_addra = ma_request_index ;
  assign v_data_2_ram_single_7_dina = ma_request_dataline[511:448] ;
  assign v_data_2_ram_single_7_wea =
	     ma_request_banks[7] && ma_request_way == 2'd2 &&
	     ma_request_read_write ;
  assign v_data_2_ram_single_7_ena =
	     EN_ma_request &&
	     (ma_request_banks[7] && ma_request_way == 2'd2 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[7]) ;

  // submodule v_data_3_ram_single_0
  assign v_data_3_ram_single_0_addra = ma_request_index ;
  assign v_data_3_ram_single_0_dina = ma_request_dataline[63:0] ;
  assign v_data_3_ram_single_0_wea =
	     ma_request_banks[0] && ma_request_way == 2'd3 &&
	     ma_request_read_write ;
  assign v_data_3_ram_single_0_ena =
	     EN_ma_request &&
	     (ma_request_banks[0] && ma_request_way == 2'd3 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[0]) ;

  // submodule v_data_3_ram_single_1
  assign v_data_3_ram_single_1_addra = ma_request_index ;
  assign v_data_3_ram_single_1_dina = ma_request_dataline[127:64] ;
  assign v_data_3_ram_single_1_wea =
	     ma_request_banks[1] && ma_request_way == 2'd3 &&
	     ma_request_read_write ;
  assign v_data_3_ram_single_1_ena =
	     EN_ma_request &&
	     (ma_request_banks[1] && ma_request_way == 2'd3 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[1]) ;

  // submodule v_data_3_ram_single_2
  assign v_data_3_ram_single_2_addra = ma_request_index ;
  assign v_data_3_ram_single_2_dina = ma_request_dataline[191:128] ;
  assign v_data_3_ram_single_2_wea =
	     ma_request_banks[2] && ma_request_way == 2'd3 &&
	     ma_request_read_write ;
  assign v_data_3_ram_single_2_ena =
	     EN_ma_request &&
	     (ma_request_banks[2] && ma_request_way == 2'd3 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[2]) ;

  // submodule v_data_3_ram_single_3
  assign v_data_3_ram_single_3_addra = ma_request_index ;
  assign v_data_3_ram_single_3_dina = ma_request_dataline[255:192] ;
  assign v_data_3_ram_single_3_wea =
	     ma_request_banks[3] && ma_request_way == 2'd3 &&
	     ma_request_read_write ;
  assign v_data_3_ram_single_3_ena =
	     EN_ma_request &&
	     (ma_request_banks[3] && ma_request_way == 2'd3 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[3]) ;

  // submodule v_data_3_ram_single_4
  assign v_data_3_ram_single_4_addra = ma_request_index ;
  assign v_data_3_ram_single_4_dina = ma_request_dataline[319:256] ;
  assign v_data_3_ram_single_4_wea =
	     ma_request_banks[4] && ma_request_way == 2'd3 &&
	     ma_request_read_write ;
  assign v_data_3_ram_single_4_ena =
	     EN_ma_request &&
	     (ma_request_banks[4] && ma_request_way == 2'd3 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[4]) ;

  // submodule v_data_3_ram_single_5
  assign v_data_3_ram_single_5_addra = ma_request_index ;
  assign v_data_3_ram_single_5_dina = ma_request_dataline[383:320] ;
  assign v_data_3_ram_single_5_wea =
	     ma_request_banks[5] && ma_request_way == 2'd3 &&
	     ma_request_read_write ;
  assign v_data_3_ram_single_5_ena =
	     EN_ma_request &&
	     (ma_request_banks[5] && ma_request_way == 2'd3 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[5]) ;

  // submodule v_data_3_ram_single_6
  assign v_data_3_ram_single_6_addra = ma_request_index ;
  assign v_data_3_ram_single_6_dina = ma_request_dataline[447:384] ;
  assign v_data_3_ram_single_6_wea =
	     ma_request_banks[6] && ma_request_way == 2'd3 &&
	     ma_request_read_write ;
  assign v_data_3_ram_single_6_ena =
	     EN_ma_request &&
	     (ma_request_banks[6] && ma_request_way == 2'd3 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[6]) ;

  // submodule v_data_3_ram_single_7
  assign v_data_3_ram_single_7_addra = ma_request_index ;
  assign v_data_3_ram_single_7_dina = ma_request_dataline[511:448] ;
  assign v_data_3_ram_single_7_wea =
	     ma_request_banks[7] && ma_request_way == 2'd3 &&
	     ma_request_read_write ;
  assign v_data_3_ram_single_7_ena =
	     EN_ma_request &&
	     (ma_request_banks[7] && ma_request_way == 2'd3 &&
	      ma_request_read_write ||
	      !ma_request_read_write && ma_request_banks[7]) ;

  // remaining internal signals
  assign IF_mv_line_select_wayselect_BIT_2_77_THEN_v_da_ETC___d190 =
	     mv_line_select_wayselect[2] ?
	       lv_selected_line__h21947 :
	       (mv_line_select_wayselect[1] ?
		  lv_selected_line__h21979 :
		  lv_selected_line__h22011) ;
  assign IF_mv_word_select_wayselect_BIT_1_03_THEN_v_da_ETC___d173 =
	     mv_word_select_wayselect[1] ?
	       { x__h20257[63:0], lv_selected_line__h21979 } :
	       { x__h20946[63:0], lv_selected_line__h22011 } ;
  assign IF_mv_word_select_wayselect_BIT_2_00_THEN_v_da_ETC___d174 =
	     mv_word_select_wayselect[2] ?
	       { x__h19568[63:0], lv_selected_line__h21947 } :
	       IF_mv_word_select_wayselect_BIT_1_03_THEN_v_da_ETC___d173 ;
  assign NOT_0_CONCAT_mv_word_select_wayselect_BIT_3_8__ETC___d110 =
	     x__h18566 + y__h18567 > 3'd1 ;
  assign block_offset__h18784 = { mv_word_select_blocknum, 6'd0 } ;
  assign lv_selected_line__h21915 =
	     { v_data_3_ram_single_7_douta,
	       v_data_3_ram_single_6_douta,
	       v_data_3_ram_single_5_douta,
	       v_data_3_ram_single_4_douta,
	       v_data_3_ram_single_3_douta,
	       v_data_3_ram_single_2_douta,
	       v_data_3_ram_single_1_douta,
	       v_data_3_ram_single_0_douta } ;
  assign lv_selected_line__h21947 =
	     { v_data_2_ram_single_7_douta,
	       v_data_2_ram_single_6_douta,
	       v_data_2_ram_single_5_douta,
	       v_data_2_ram_single_4_douta,
	       v_data_2_ram_single_3_douta,
	       v_data_2_ram_single_2_douta,
	       v_data_2_ram_single_1_douta,
	       v_data_2_ram_single_0_douta } ;
  assign lv_selected_line__h21979 =
	     { v_data_1_ram_single_7_douta,
	       v_data_1_ram_single_6_douta,
	       v_data_1_ram_single_5_douta,
	       v_data_1_ram_single_4_douta,
	       v_data_1_ram_single_3_douta,
	       v_data_1_ram_single_2_douta,
	       v_data_1_ram_single_1_douta,
	       v_data_1_ram_single_0_douta } ;
  assign lv_selected_line__h22011 =
	     { v_data_0_ram_single_7_douta,
	       v_data_0_ram_single_6_douta,
	       v_data_0_ram_single_5_douta,
	       v_data_0_ram_single_4_douta,
	       v_data_0_ram_single_3_douta,
	       v_data_0_ram_single_2_douta,
	       v_data_0_ram_single_1_douta,
	       v_data_0_ram_single_0_douta } ;
  assign x__h18566 = x__h18578 + y__h18579 ;
  assign x__h18578 = x__h18590 + y__h18591 ;
  assign x__h18590 = { 2'd0, mv_word_select_wayselect[3] } ;
  assign x__h18878 = lv_selected_line__h21915 >> block_offset__h18784 ;
  assign x__h19568 = lv_selected_line__h21947 >> block_offset__h18784 ;
  assign x__h20257 = lv_selected_line__h21979 >> block_offset__h18784 ;
  assign x__h20946 = lv_selected_line__h22011 >> block_offset__h18784 ;
  assign x__h21641 = x__h21653 + y__h21654 ;
  assign x__h21653 = x__h21665 + y__h21666 ;
  assign x__h21665 = { 2'd0, mv_line_select_wayselect[3] } ;
  assign y__h18567 = { 2'd0, mv_word_select_wayselect[0] } ;
  assign y__h18579 = { 2'd0, mv_word_select_wayselect[1] } ;
  assign y__h18591 = { 2'd0, mv_word_select_wayselect[2] } ;
  assign y__h21642 = { 2'd0, mv_line_select_wayselect[0] } ;
  assign y__h21654 = { 2'd0, mv_line_select_wayselect[1] } ;
  assign y__h21666 = { 2'd0, mv_line_select_wayselect[2] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        v_data_0_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_0_rg_output_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_0_rg_output_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_0_rg_output_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_0_rg_output_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_0_rg_output_5 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_0_rg_output_6 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_0_rg_output_7 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_1_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_1_rg_output_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_1_rg_output_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_1_rg_output_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_1_rg_output_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_1_rg_output_5 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_1_rg_output_6 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_1_rg_output_7 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_2_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_2_rg_output_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_2_rg_output_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_2_rg_output_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_2_rg_output_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_2_rg_output_5 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_2_rg_output_6 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_2_rg_output_7 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_3_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_3_rg_output_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_3_rg_output_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_3_rg_output_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_3_rg_output_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_3_rg_output_5 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_3_rg_output_6 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_data_3_rg_output_7 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (v_data_0_rg_output_0_EN)
	  v_data_0_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      v_data_0_rg_output_0_D_IN;
	if (v_data_0_rg_output_1_EN)
	  v_data_0_rg_output_1 <= `BSV_ASSIGNMENT_DELAY
	      v_data_0_rg_output_1_D_IN;
	if (v_data_0_rg_output_2_EN)
	  v_data_0_rg_output_2 <= `BSV_ASSIGNMENT_DELAY
	      v_data_0_rg_output_2_D_IN;
	if (v_data_0_rg_output_3_EN)
	  v_data_0_rg_output_3 <= `BSV_ASSIGNMENT_DELAY
	      v_data_0_rg_output_3_D_IN;
	if (v_data_0_rg_output_4_EN)
	  v_data_0_rg_output_4 <= `BSV_ASSIGNMENT_DELAY
	      v_data_0_rg_output_4_D_IN;
	if (v_data_0_rg_output_5_EN)
	  v_data_0_rg_output_5 <= `BSV_ASSIGNMENT_DELAY
	      v_data_0_rg_output_5_D_IN;
	if (v_data_0_rg_output_6_EN)
	  v_data_0_rg_output_6 <= `BSV_ASSIGNMENT_DELAY
	      v_data_0_rg_output_6_D_IN;
	if (v_data_0_rg_output_7_EN)
	  v_data_0_rg_output_7 <= `BSV_ASSIGNMENT_DELAY
	      v_data_0_rg_output_7_D_IN;
	if (v_data_1_rg_output_0_EN)
	  v_data_1_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      v_data_1_rg_output_0_D_IN;
	if (v_data_1_rg_output_1_EN)
	  v_data_1_rg_output_1 <= `BSV_ASSIGNMENT_DELAY
	      v_data_1_rg_output_1_D_IN;
	if (v_data_1_rg_output_2_EN)
	  v_data_1_rg_output_2 <= `BSV_ASSIGNMENT_DELAY
	      v_data_1_rg_output_2_D_IN;
	if (v_data_1_rg_output_3_EN)
	  v_data_1_rg_output_3 <= `BSV_ASSIGNMENT_DELAY
	      v_data_1_rg_output_3_D_IN;
	if (v_data_1_rg_output_4_EN)
	  v_data_1_rg_output_4 <= `BSV_ASSIGNMENT_DELAY
	      v_data_1_rg_output_4_D_IN;
	if (v_data_1_rg_output_5_EN)
	  v_data_1_rg_output_5 <= `BSV_ASSIGNMENT_DELAY
	      v_data_1_rg_output_5_D_IN;
	if (v_data_1_rg_output_6_EN)
	  v_data_1_rg_output_6 <= `BSV_ASSIGNMENT_DELAY
	      v_data_1_rg_output_6_D_IN;
	if (v_data_1_rg_output_7_EN)
	  v_data_1_rg_output_7 <= `BSV_ASSIGNMENT_DELAY
	      v_data_1_rg_output_7_D_IN;
	if (v_data_2_rg_output_0_EN)
	  v_data_2_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      v_data_2_rg_output_0_D_IN;
	if (v_data_2_rg_output_1_EN)
	  v_data_2_rg_output_1 <= `BSV_ASSIGNMENT_DELAY
	      v_data_2_rg_output_1_D_IN;
	if (v_data_2_rg_output_2_EN)
	  v_data_2_rg_output_2 <= `BSV_ASSIGNMENT_DELAY
	      v_data_2_rg_output_2_D_IN;
	if (v_data_2_rg_output_3_EN)
	  v_data_2_rg_output_3 <= `BSV_ASSIGNMENT_DELAY
	      v_data_2_rg_output_3_D_IN;
	if (v_data_2_rg_output_4_EN)
	  v_data_2_rg_output_4 <= `BSV_ASSIGNMENT_DELAY
	      v_data_2_rg_output_4_D_IN;
	if (v_data_2_rg_output_5_EN)
	  v_data_2_rg_output_5 <= `BSV_ASSIGNMENT_DELAY
	      v_data_2_rg_output_5_D_IN;
	if (v_data_2_rg_output_6_EN)
	  v_data_2_rg_output_6 <= `BSV_ASSIGNMENT_DELAY
	      v_data_2_rg_output_6_D_IN;
	if (v_data_2_rg_output_7_EN)
	  v_data_2_rg_output_7 <= `BSV_ASSIGNMENT_DELAY
	      v_data_2_rg_output_7_D_IN;
	if (v_data_3_rg_output_0_EN)
	  v_data_3_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      v_data_3_rg_output_0_D_IN;
	if (v_data_3_rg_output_1_EN)
	  v_data_3_rg_output_1 <= `BSV_ASSIGNMENT_DELAY
	      v_data_3_rg_output_1_D_IN;
	if (v_data_3_rg_output_2_EN)
	  v_data_3_rg_output_2 <= `BSV_ASSIGNMENT_DELAY
	      v_data_3_rg_output_2_D_IN;
	if (v_data_3_rg_output_3_EN)
	  v_data_3_rg_output_3 <= `BSV_ASSIGNMENT_DELAY
	      v_data_3_rg_output_3_D_IN;
	if (v_data_3_rg_output_4_EN)
	  v_data_3_rg_output_4 <= `BSV_ASSIGNMENT_DELAY
	      v_data_3_rg_output_4_D_IN;
	if (v_data_3_rg_output_5_EN)
	  v_data_3_rg_output_5 <= `BSV_ASSIGNMENT_DELAY
	      v_data_3_rg_output_5_D_IN;
	if (v_data_3_rg_output_6_EN)
	  v_data_3_rg_output_6 <= `BSV_ASSIGNMENT_DELAY
	      v_data_3_rg_output_6_D_IN;
	if (v_data_3_rg_output_7_EN)
	  v_data_3_rg_output_7 <= `BSV_ASSIGNMENT_DELAY
	      v_data_3_rg_output_7_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    v_data_0_rg_output_0 = 64'hAAAAAAAAAAAAAAAA;
    v_data_0_rg_output_1 = 64'hAAAAAAAAAAAAAAAA;
    v_data_0_rg_output_2 = 64'hAAAAAAAAAAAAAAAA;
    v_data_0_rg_output_3 = 64'hAAAAAAAAAAAAAAAA;
    v_data_0_rg_output_4 = 64'hAAAAAAAAAAAAAAAA;
    v_data_0_rg_output_5 = 64'hAAAAAAAAAAAAAAAA;
    v_data_0_rg_output_6 = 64'hAAAAAAAAAAAAAAAA;
    v_data_0_rg_output_7 = 64'hAAAAAAAAAAAAAAAA;
    v_data_1_rg_output_0 = 64'hAAAAAAAAAAAAAAAA;
    v_data_1_rg_output_1 = 64'hAAAAAAAAAAAAAAAA;
    v_data_1_rg_output_2 = 64'hAAAAAAAAAAAAAAAA;
    v_data_1_rg_output_3 = 64'hAAAAAAAAAAAAAAAA;
    v_data_1_rg_output_4 = 64'hAAAAAAAAAAAAAAAA;
    v_data_1_rg_output_5 = 64'hAAAAAAAAAAAAAAAA;
    v_data_1_rg_output_6 = 64'hAAAAAAAAAAAAAAAA;
    v_data_1_rg_output_7 = 64'hAAAAAAAAAAAAAAAA;
    v_data_2_rg_output_0 = 64'hAAAAAAAAAAAAAAAA;
    v_data_2_rg_output_1 = 64'hAAAAAAAAAAAAAAAA;
    v_data_2_rg_output_2 = 64'hAAAAAAAAAAAAAAAA;
    v_data_2_rg_output_3 = 64'hAAAAAAAAAAAAAAAA;
    v_data_2_rg_output_4 = 64'hAAAAAAAAAAAAAAAA;
    v_data_2_rg_output_5 = 64'hAAAAAAAAAAAAAAAA;
    v_data_2_rg_output_6 = 64'hAAAAAAAAAAAAAAAA;
    v_data_2_rg_output_7 = 64'hAAAAAAAAAAAAAAAA;
    v_data_3_rg_output_0 = 64'hAAAAAAAAAAAAAAAA;
    v_data_3_rg_output_1 = 64'hAAAAAAAAAAAAAAAA;
    v_data_3_rg_output_2 = 64'hAAAAAAAAAAAAAAAA;
    v_data_3_rg_output_3 = 64'hAAAAAAAAAAAAAAAA;
    v_data_3_rg_output_4 = 64'hAAAAAAAAAAAAAAAA;
    v_data_3_rg_output_5 = 64'hAAAAAAAAAAAAAAAA;
    v_data_3_rg_output_6 = 64'hAAAAAAAAAAAAAAAA;
    v_data_3_rg_output_7 = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mv_word_select &&
	  NOT_0_CONCAT_mv_word_select_wayselect_BIT_3_8__ETC___d110)
	$display("Dynamic assertion failed: \"caches_mmu/src/dcache/dcache_lib.bsv\", line 725, column 45\nWayselect should be one-hot.");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mv_word_select &&
	  NOT_0_CONCAT_mv_word_select_wayselect_BIT_3_8__ETC___d110)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mv_line_select && x__h21641 + y__h21642 != 3'd1)
	$display("Dynamic assertion failed: \"caches_mmu/src/dcache/dcache_lib.bsv\", line 649, column 45\nWayselect should be one-hot.");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mv_line_select && x__h21641 + y__h21642 != 3'd1) $finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkdcache_data

