//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
//
// On Tue Jul 29 14:28:35 +04 2025
//
//
// Ports:
// Name                         I/O  size props
// soc_sb_sbread_mv_csr_misa      O    64
// RDY_soc_sb_sbread_mv_csr_misa  O     1 const
// soc_sb_sbread_mv_csr_mvendorid  O    32 const
// RDY_soc_sb_sbread_mv_csr_mvendorid  O     1 const
// soc_sb_sbread_mv_csr_stvec     O    64 reg
// RDY_soc_sb_sbread_mv_csr_stvec  O     1 const
// soc_sb_sbread_mv_csr_mtvec     O    64 reg
// RDY_soc_sb_sbread_mv_csr_mtvec  O     1 const
// soc_sb_sbread_mv_csr_mstatus   O    64
// RDY_soc_sb_sbread_mv_csr_mstatus  O     1 const
// soc_sb_sbread_mv_csr_marchid   O    64 const
// RDY_soc_sb_sbread_mv_csr_marchid  O     1 const
// soc_sb_sbread_mv_csr_mimpid    O    64 const
// RDY_soc_sb_sbread_mv_csr_mimpid  O     1 const
// soc_sb_sbread_mv_csr_mhartid   O    64 const
// RDY_soc_sb_sbread_mv_csr_mhartid  O     1 const
// soc_sb_sbread_mv_csr_mip       O    64
// RDY_soc_sb_sbread_mv_csr_mip   O     1 const
// soc_sb_sbread_mv_csr_sip       O    64
// RDY_soc_sb_sbread_mv_csr_sip   O     1 const
// soc_sb_sbread_mv_csr_mie       O    64
// RDY_soc_sb_sbread_mv_csr_mie   O     1 const
// soc_sb_sbread_mv_csr_sie       O    64
// RDY_soc_sb_sbread_mv_csr_sie   O     1 const
// soc_sb_sbread_mv_csr_mscratch  O    64 reg
// RDY_soc_sb_sbread_mv_csr_mscratch  O     1 const
// soc_sb_sbread_mv_csr_sscratch  O    64 reg
// RDY_soc_sb_sbread_mv_csr_sscratch  O     1 const
// soc_sb_sbread_mv_csr_sepc      O    64 reg
// RDY_soc_sb_sbread_mv_csr_sepc  O     1 const
// soc_sb_sbread_mv_csr_stval     O    64 reg
// RDY_soc_sb_sbread_mv_csr_stval  O     1 const
// soc_sb_sbread_mv_csr_scause    O    64
// RDY_soc_sb_sbread_mv_csr_scause  O     1 const
// soc_sb_sbread_mv_csr_mepc      O    64 reg
// RDY_soc_sb_sbread_mv_csr_mepc  O     1 const
// soc_sb_sbread_mv_csr_mtval     O    64 reg
// RDY_soc_sb_sbread_mv_csr_mtval  O     1 const
// soc_sb_sbread_mv_csr_mcause    O    64
// RDY_soc_sb_sbread_mv_csr_mcause  O     1 const
// soc_sb_sbread_mv_csr_mcycle    O    64
// RDY_soc_sb_sbread_mv_csr_mcycle  O     1 const
// soc_sb_sbread_mv_csr_minstret  O    64
// RDY_soc_sb_sbread_mv_csr_minstret  O     1 const
// soc_sb_sbread_mv_csr_fcsr      O    64
// RDY_soc_sb_sbread_mv_csr_fcsr  O     1 const
// soc_sb_sbread_mv_csr_time      O    64 reg
// RDY_soc_sb_sbread_mv_csr_time  O     1 const
// soc_sb_sbread_mv_csr_mideleg   O    64 reg
// RDY_soc_sb_sbread_mv_csr_mideleg  O     1 const
// soc_sb_sbread_mv_csr_medeleg   O    64 reg
// RDY_soc_sb_sbread_mv_csr_medeleg  O     1 const
// soc_sb_sbread_mv_csr_pmpcfg0   O    64
// RDY_soc_sb_sbread_mv_csr_pmpcfg0  O     1 const
// soc_sb_sbread_mv_csr_pmpaddr0  O    30
// RDY_soc_sb_sbread_mv_csr_pmpaddr0  O     1 const
// soc_sb_sbread_mv_csr_pmpaddr1  O    30
// RDY_soc_sb_sbread_mv_csr_pmpaddr1  O     1 const
// soc_sb_sbread_mv_csr_pmpaddr2  O    30
// RDY_soc_sb_sbread_mv_csr_pmpaddr2  O     1 const
// soc_sb_sbread_mv_csr_pmpaddr3  O    30
// RDY_soc_sb_sbread_mv_csr_pmpaddr3  O     1 const
// soc_sb_sbread_mv_csr_mcounteren  O    32 reg
// RDY_soc_sb_sbread_mv_csr_mcounteren  O     1 const
// soc_sb_sbread_mv_csr_scounteren  O    32 reg
// RDY_soc_sb_sbread_mv_csr_scounteren  O     1 const
// soc_sb_sbread_mv_csr_menvcfg   O    64
// RDY_soc_sb_sbread_mv_csr_menvcfg  O     1 const
// soc_sb_sbread_mv_csr_senvcfg   O    64
// RDY_soc_sb_sbread_mv_csr_senvcfg  O     1 const
// soc_sb_sbread_mv_csr_satp      O    64 reg
// RDY_soc_sb_sbread_mv_csr_satp  O     1 const
// soc_sb_sbread_mv_csr_mcountinhibit  O    32 const
// RDY_soc_sb_sbread_mv_csr_mcountinhibit  O     1 const
// soc_sb_sbread_mv_csr_fflags    O     5 reg
// RDY_soc_sb_sbread_mv_csr_fflags  O     1 const
// soc_sb_sbread_mv_csr_frm       O     3 reg
// RDY_soc_sb_sbread_mv_csr_frm   O     1 const
// soc_sb_sbread_mv_csr_customcontrol  O    64 const
// RDY_soc_sb_sbread_mv_csr_customcontrol  O     1 const
// soc_sb_sbread_mv_csr_mhpmcounter3  O    64 reg
// RDY_soc_sb_sbread_mv_csr_mhpmcounter3  O     1 const
// soc_sb_sbread_mv_csr_mhpmcounter4  O    64 reg
// RDY_soc_sb_sbread_mv_csr_mhpmcounter4  O     1 const
// soc_sb_sbread_mv_csr_mhpmcounter5  O    64 reg
// RDY_soc_sb_sbread_mv_csr_mhpmcounter5  O     1 const
// soc_sb_sbread_mv_csr_mhpmcounter6  O    64 reg
// RDY_soc_sb_sbread_mv_csr_mhpmcounter6  O     1 const
// soc_sb_sbread_mv_csr_mhpmevent3  O    64 reg
// RDY_soc_sb_sbread_mv_csr_mhpmevent3  O     1 const
// soc_sb_sbread_mv_csr_mhpmevent4  O    64 reg
// RDY_soc_sb_sbread_mv_csr_mhpmevent4  O     1 const
// soc_sb_sbread_mv_csr_mhpmevent5  O    64 reg
// RDY_soc_sb_sbread_mv_csr_mhpmevent5  O     1 const
// soc_sb_sbread_mv_csr_mhpmevent6  O    64 reg
// RDY_soc_sb_sbread_mv_csr_mhpmevent6  O     1 const
// soc_sb_sbread_mv_csr_dcsr      O    64
// RDY_soc_sb_sbread_mv_csr_dcsr  O     1 const
// soc_sb_sbread_mv_csr_dpc       O    64 reg
// RDY_soc_sb_sbread_mv_csr_dpc   O     1 const
// soc_sb_sbread_mv_csr_dscratch0  O    64 reg
// RDY_soc_sb_sbread_mv_csr_dscratch0  O     1 const
// soc_sb_sbread_mv_csr_dscratch1  O    64 reg
// RDY_soc_sb_sbread_mv_csr_dscratch1  O     1 const
// soc_sb_commitlog               O   310 reg
// RDY_soc_sb_commitlog           O     1 const
// uart_io_SOUT                   O     1 reg
// uart_io_SOUT_EN                O     1 reg
// wire_tdo                       O     1
// RST_N_soc_reset                O     1 reset
// CLK_tck_clk                    I     1 clock
// RST_N_trst                     I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// uart_io_SIN                    I     1 reg
// wire_tms_tms_in                I     1
// wire_tdi_tdi_in                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDebugSoc(CLK_tck_clk,
		  RST_N_trst,
		  CLK,
		  RST_N,

		  soc_sb_sbread_mv_csr_misa,
		  RDY_soc_sb_sbread_mv_csr_misa,

		  soc_sb_sbread_mv_csr_mvendorid,
		  RDY_soc_sb_sbread_mv_csr_mvendorid,

		  soc_sb_sbread_mv_csr_stvec,
		  RDY_soc_sb_sbread_mv_csr_stvec,

		  soc_sb_sbread_mv_csr_mtvec,
		  RDY_soc_sb_sbread_mv_csr_mtvec,

		  soc_sb_sbread_mv_csr_mstatus,
		  RDY_soc_sb_sbread_mv_csr_mstatus,

		  soc_sb_sbread_mv_csr_marchid,
		  RDY_soc_sb_sbread_mv_csr_marchid,

		  soc_sb_sbread_mv_csr_mimpid,
		  RDY_soc_sb_sbread_mv_csr_mimpid,

		  soc_sb_sbread_mv_csr_mhartid,
		  RDY_soc_sb_sbread_mv_csr_mhartid,

		  soc_sb_sbread_mv_csr_mip,
		  RDY_soc_sb_sbread_mv_csr_mip,

		  soc_sb_sbread_mv_csr_sip,
		  RDY_soc_sb_sbread_mv_csr_sip,

		  soc_sb_sbread_mv_csr_mie,
		  RDY_soc_sb_sbread_mv_csr_mie,

		  soc_sb_sbread_mv_csr_sie,
		  RDY_soc_sb_sbread_mv_csr_sie,

		  soc_sb_sbread_mv_csr_mscratch,
		  RDY_soc_sb_sbread_mv_csr_mscratch,

		  soc_sb_sbread_mv_csr_sscratch,
		  RDY_soc_sb_sbread_mv_csr_sscratch,

		  soc_sb_sbread_mv_csr_sepc,
		  RDY_soc_sb_sbread_mv_csr_sepc,

		  soc_sb_sbread_mv_csr_stval,
		  RDY_soc_sb_sbread_mv_csr_stval,

		  soc_sb_sbread_mv_csr_scause,
		  RDY_soc_sb_sbread_mv_csr_scause,

		  soc_sb_sbread_mv_csr_mepc,
		  RDY_soc_sb_sbread_mv_csr_mepc,

		  soc_sb_sbread_mv_csr_mtval,
		  RDY_soc_sb_sbread_mv_csr_mtval,

		  soc_sb_sbread_mv_csr_mcause,
		  RDY_soc_sb_sbread_mv_csr_mcause,

		  soc_sb_sbread_mv_csr_mcycle,
		  RDY_soc_sb_sbread_mv_csr_mcycle,

		  soc_sb_sbread_mv_csr_minstret,
		  RDY_soc_sb_sbread_mv_csr_minstret,

		  soc_sb_sbread_mv_csr_fcsr,
		  RDY_soc_sb_sbread_mv_csr_fcsr,

		  soc_sb_sbread_mv_csr_time,
		  RDY_soc_sb_sbread_mv_csr_time,

		  soc_sb_sbread_mv_csr_mideleg,
		  RDY_soc_sb_sbread_mv_csr_mideleg,

		  soc_sb_sbread_mv_csr_medeleg,
		  RDY_soc_sb_sbread_mv_csr_medeleg,

		  soc_sb_sbread_mv_csr_pmpcfg0,
		  RDY_soc_sb_sbread_mv_csr_pmpcfg0,

		  soc_sb_sbread_mv_csr_pmpaddr0,
		  RDY_soc_sb_sbread_mv_csr_pmpaddr0,

		  soc_sb_sbread_mv_csr_pmpaddr1,
		  RDY_soc_sb_sbread_mv_csr_pmpaddr1,

		  soc_sb_sbread_mv_csr_pmpaddr2,
		  RDY_soc_sb_sbread_mv_csr_pmpaddr2,

		  soc_sb_sbread_mv_csr_pmpaddr3,
		  RDY_soc_sb_sbread_mv_csr_pmpaddr3,

		  soc_sb_sbread_mv_csr_mcounteren,
		  RDY_soc_sb_sbread_mv_csr_mcounteren,

		  soc_sb_sbread_mv_csr_scounteren,
		  RDY_soc_sb_sbread_mv_csr_scounteren,

		  soc_sb_sbread_mv_csr_menvcfg,
		  RDY_soc_sb_sbread_mv_csr_menvcfg,

		  soc_sb_sbread_mv_csr_senvcfg,
		  RDY_soc_sb_sbread_mv_csr_senvcfg,

		  soc_sb_sbread_mv_csr_satp,
		  RDY_soc_sb_sbread_mv_csr_satp,

		  soc_sb_sbread_mv_csr_mcountinhibit,
		  RDY_soc_sb_sbread_mv_csr_mcountinhibit,

		  soc_sb_sbread_mv_csr_fflags,
		  RDY_soc_sb_sbread_mv_csr_fflags,

		  soc_sb_sbread_mv_csr_frm,
		  RDY_soc_sb_sbread_mv_csr_frm,

		  soc_sb_sbread_mv_csr_customcontrol,
		  RDY_soc_sb_sbread_mv_csr_customcontrol,

		  soc_sb_sbread_mv_csr_mhpmcounter3,
		  RDY_soc_sb_sbread_mv_csr_mhpmcounter3,

		  soc_sb_sbread_mv_csr_mhpmcounter4,
		  RDY_soc_sb_sbread_mv_csr_mhpmcounter4,

		  soc_sb_sbread_mv_csr_mhpmcounter5,
		  RDY_soc_sb_sbread_mv_csr_mhpmcounter5,

		  soc_sb_sbread_mv_csr_mhpmcounter6,
		  RDY_soc_sb_sbread_mv_csr_mhpmcounter6,

		  soc_sb_sbread_mv_csr_mhpmevent3,
		  RDY_soc_sb_sbread_mv_csr_mhpmevent3,

		  soc_sb_sbread_mv_csr_mhpmevent4,
		  RDY_soc_sb_sbread_mv_csr_mhpmevent4,

		  soc_sb_sbread_mv_csr_mhpmevent5,
		  RDY_soc_sb_sbread_mv_csr_mhpmevent5,

		  soc_sb_sbread_mv_csr_mhpmevent6,
		  RDY_soc_sb_sbread_mv_csr_mhpmevent6,

		  soc_sb_sbread_mv_csr_dcsr,
		  RDY_soc_sb_sbread_mv_csr_dcsr,

		  soc_sb_sbread_mv_csr_dpc,
		  RDY_soc_sb_sbread_mv_csr_dpc,

		  soc_sb_sbread_mv_csr_dscratch0,
		  RDY_soc_sb_sbread_mv_csr_dscratch0,

		  soc_sb_sbread_mv_csr_dscratch1,
		  RDY_soc_sb_sbread_mv_csr_dscratch1,

		  soc_sb_commitlog,
		  RDY_soc_sb_commitlog,

		  uart_io_SIN,

		  uart_io_SOUT,

		  uart_io_SOUT_EN,

		  wire_tms_tms_in,

		  wire_tdi_tdi_in,

		  wire_tdo,

		  RST_N_soc_reset);
  input  CLK_tck_clk;
  input  RST_N_trst;
  input  CLK;
  input  RST_N;

  // value method soc_sb_sbread_mv_csr_misa
  output [63 : 0] soc_sb_sbread_mv_csr_misa;
  output RDY_soc_sb_sbread_mv_csr_misa;

  // value method soc_sb_sbread_mv_csr_mvendorid
  output [31 : 0] soc_sb_sbread_mv_csr_mvendorid;
  output RDY_soc_sb_sbread_mv_csr_mvendorid;

  // value method soc_sb_sbread_mv_csr_stvec
  output [63 : 0] soc_sb_sbread_mv_csr_stvec;
  output RDY_soc_sb_sbread_mv_csr_stvec;

  // value method soc_sb_sbread_mv_csr_mtvec
  output [63 : 0] soc_sb_sbread_mv_csr_mtvec;
  output RDY_soc_sb_sbread_mv_csr_mtvec;

  // value method soc_sb_sbread_mv_csr_mstatus
  output [63 : 0] soc_sb_sbread_mv_csr_mstatus;
  output RDY_soc_sb_sbread_mv_csr_mstatus;

  // value method soc_sb_sbread_mv_csr_marchid
  output [63 : 0] soc_sb_sbread_mv_csr_marchid;
  output RDY_soc_sb_sbread_mv_csr_marchid;

  // value method soc_sb_sbread_mv_csr_mimpid
  output [63 : 0] soc_sb_sbread_mv_csr_mimpid;
  output RDY_soc_sb_sbread_mv_csr_mimpid;

  // value method soc_sb_sbread_mv_csr_mhartid
  output [63 : 0] soc_sb_sbread_mv_csr_mhartid;
  output RDY_soc_sb_sbread_mv_csr_mhartid;

  // value method soc_sb_sbread_mv_csr_mip
  output [63 : 0] soc_sb_sbread_mv_csr_mip;
  output RDY_soc_sb_sbread_mv_csr_mip;

  // value method soc_sb_sbread_mv_csr_sip
  output [63 : 0] soc_sb_sbread_mv_csr_sip;
  output RDY_soc_sb_sbread_mv_csr_sip;

  // value method soc_sb_sbread_mv_csr_mie
  output [63 : 0] soc_sb_sbread_mv_csr_mie;
  output RDY_soc_sb_sbread_mv_csr_mie;

  // value method soc_sb_sbread_mv_csr_sie
  output [63 : 0] soc_sb_sbread_mv_csr_sie;
  output RDY_soc_sb_sbread_mv_csr_sie;

  // value method soc_sb_sbread_mv_csr_mscratch
  output [63 : 0] soc_sb_sbread_mv_csr_mscratch;
  output RDY_soc_sb_sbread_mv_csr_mscratch;

  // value method soc_sb_sbread_mv_csr_sscratch
  output [63 : 0] soc_sb_sbread_mv_csr_sscratch;
  output RDY_soc_sb_sbread_mv_csr_sscratch;

  // value method soc_sb_sbread_mv_csr_sepc
  output [63 : 0] soc_sb_sbread_mv_csr_sepc;
  output RDY_soc_sb_sbread_mv_csr_sepc;

  // value method soc_sb_sbread_mv_csr_stval
  output [63 : 0] soc_sb_sbread_mv_csr_stval;
  output RDY_soc_sb_sbread_mv_csr_stval;

  // value method soc_sb_sbread_mv_csr_scause
  output [63 : 0] soc_sb_sbread_mv_csr_scause;
  output RDY_soc_sb_sbread_mv_csr_scause;

  // value method soc_sb_sbread_mv_csr_mepc
  output [63 : 0] soc_sb_sbread_mv_csr_mepc;
  output RDY_soc_sb_sbread_mv_csr_mepc;

  // value method soc_sb_sbread_mv_csr_mtval
  output [63 : 0] soc_sb_sbread_mv_csr_mtval;
  output RDY_soc_sb_sbread_mv_csr_mtval;

  // value method soc_sb_sbread_mv_csr_mcause
  output [63 : 0] soc_sb_sbread_mv_csr_mcause;
  output RDY_soc_sb_sbread_mv_csr_mcause;

  // value method soc_sb_sbread_mv_csr_mcycle
  output [63 : 0] soc_sb_sbread_mv_csr_mcycle;
  output RDY_soc_sb_sbread_mv_csr_mcycle;

  // value method soc_sb_sbread_mv_csr_minstret
  output [63 : 0] soc_sb_sbread_mv_csr_minstret;
  output RDY_soc_sb_sbread_mv_csr_minstret;

  // value method soc_sb_sbread_mv_csr_fcsr
  output [63 : 0] soc_sb_sbread_mv_csr_fcsr;
  output RDY_soc_sb_sbread_mv_csr_fcsr;

  // value method soc_sb_sbread_mv_csr_time
  output [63 : 0] soc_sb_sbread_mv_csr_time;
  output RDY_soc_sb_sbread_mv_csr_time;

  // value method soc_sb_sbread_mv_csr_mideleg
  output [63 : 0] soc_sb_sbread_mv_csr_mideleg;
  output RDY_soc_sb_sbread_mv_csr_mideleg;

  // value method soc_sb_sbread_mv_csr_medeleg
  output [63 : 0] soc_sb_sbread_mv_csr_medeleg;
  output RDY_soc_sb_sbread_mv_csr_medeleg;

  // value method soc_sb_sbread_mv_csr_pmpcfg0
  output [63 : 0] soc_sb_sbread_mv_csr_pmpcfg0;
  output RDY_soc_sb_sbread_mv_csr_pmpcfg0;

  // value method soc_sb_sbread_mv_csr_pmpaddr0
  output [29 : 0] soc_sb_sbread_mv_csr_pmpaddr0;
  output RDY_soc_sb_sbread_mv_csr_pmpaddr0;

  // value method soc_sb_sbread_mv_csr_pmpaddr1
  output [29 : 0] soc_sb_sbread_mv_csr_pmpaddr1;
  output RDY_soc_sb_sbread_mv_csr_pmpaddr1;

  // value method soc_sb_sbread_mv_csr_pmpaddr2
  output [29 : 0] soc_sb_sbread_mv_csr_pmpaddr2;
  output RDY_soc_sb_sbread_mv_csr_pmpaddr2;

  // value method soc_sb_sbread_mv_csr_pmpaddr3
  output [29 : 0] soc_sb_sbread_mv_csr_pmpaddr3;
  output RDY_soc_sb_sbread_mv_csr_pmpaddr3;

  // value method soc_sb_sbread_mv_csr_mcounteren
  output [31 : 0] soc_sb_sbread_mv_csr_mcounteren;
  output RDY_soc_sb_sbread_mv_csr_mcounteren;

  // value method soc_sb_sbread_mv_csr_scounteren
  output [31 : 0] soc_sb_sbread_mv_csr_scounteren;
  output RDY_soc_sb_sbread_mv_csr_scounteren;

  // value method soc_sb_sbread_mv_csr_menvcfg
  output [63 : 0] soc_sb_sbread_mv_csr_menvcfg;
  output RDY_soc_sb_sbread_mv_csr_menvcfg;

  // value method soc_sb_sbread_mv_csr_senvcfg
  output [63 : 0] soc_sb_sbread_mv_csr_senvcfg;
  output RDY_soc_sb_sbread_mv_csr_senvcfg;

  // value method soc_sb_sbread_mv_csr_satp
  output [63 : 0] soc_sb_sbread_mv_csr_satp;
  output RDY_soc_sb_sbread_mv_csr_satp;

  // value method soc_sb_sbread_mv_csr_mcountinhibit
  output [31 : 0] soc_sb_sbread_mv_csr_mcountinhibit;
  output RDY_soc_sb_sbread_mv_csr_mcountinhibit;

  // value method soc_sb_sbread_mv_csr_fflags
  output [4 : 0] soc_sb_sbread_mv_csr_fflags;
  output RDY_soc_sb_sbread_mv_csr_fflags;

  // value method soc_sb_sbread_mv_csr_frm
  output [2 : 0] soc_sb_sbread_mv_csr_frm;
  output RDY_soc_sb_sbread_mv_csr_frm;

  // value method soc_sb_sbread_mv_csr_customcontrol
  output [63 : 0] soc_sb_sbread_mv_csr_customcontrol;
  output RDY_soc_sb_sbread_mv_csr_customcontrol;

  // value method soc_sb_sbread_mv_csr_mhpmcounter3
  output [63 : 0] soc_sb_sbread_mv_csr_mhpmcounter3;
  output RDY_soc_sb_sbread_mv_csr_mhpmcounter3;

  // value method soc_sb_sbread_mv_csr_mhpmcounter4
  output [63 : 0] soc_sb_sbread_mv_csr_mhpmcounter4;
  output RDY_soc_sb_sbread_mv_csr_mhpmcounter4;

  // value method soc_sb_sbread_mv_csr_mhpmcounter5
  output [63 : 0] soc_sb_sbread_mv_csr_mhpmcounter5;
  output RDY_soc_sb_sbread_mv_csr_mhpmcounter5;

  // value method soc_sb_sbread_mv_csr_mhpmcounter6
  output [63 : 0] soc_sb_sbread_mv_csr_mhpmcounter6;
  output RDY_soc_sb_sbread_mv_csr_mhpmcounter6;

  // value method soc_sb_sbread_mv_csr_mhpmevent3
  output [63 : 0] soc_sb_sbread_mv_csr_mhpmevent3;
  output RDY_soc_sb_sbread_mv_csr_mhpmevent3;

  // value method soc_sb_sbread_mv_csr_mhpmevent4
  output [63 : 0] soc_sb_sbread_mv_csr_mhpmevent4;
  output RDY_soc_sb_sbread_mv_csr_mhpmevent4;

  // value method soc_sb_sbread_mv_csr_mhpmevent5
  output [63 : 0] soc_sb_sbread_mv_csr_mhpmevent5;
  output RDY_soc_sb_sbread_mv_csr_mhpmevent5;

  // value method soc_sb_sbread_mv_csr_mhpmevent6
  output [63 : 0] soc_sb_sbread_mv_csr_mhpmevent6;
  output RDY_soc_sb_sbread_mv_csr_mhpmevent6;

  // value method soc_sb_sbread_mv_csr_dcsr
  output [63 : 0] soc_sb_sbread_mv_csr_dcsr;
  output RDY_soc_sb_sbread_mv_csr_dcsr;

  // value method soc_sb_sbread_mv_csr_dpc
  output [63 : 0] soc_sb_sbread_mv_csr_dpc;
  output RDY_soc_sb_sbread_mv_csr_dpc;

  // value method soc_sb_sbread_mv_csr_dscratch0
  output [63 : 0] soc_sb_sbread_mv_csr_dscratch0;
  output RDY_soc_sb_sbread_mv_csr_dscratch0;

  // value method soc_sb_sbread_mv_csr_dscratch1
  output [63 : 0] soc_sb_sbread_mv_csr_dscratch1;
  output RDY_soc_sb_sbread_mv_csr_dscratch1;

  // value method soc_sb_commitlog
  output [309 : 0] soc_sb_commitlog;
  output RDY_soc_sb_commitlog;

  // action method uart_io_sin
  input  uart_io_SIN;

  // value method uart_io_sout
  output uart_io_SOUT;

  // value method uart_io_sout_en
  output uart_io_SOUT_EN;

  // action method wire_tms
  input  wire_tms_tms_in;

  // action method wire_tdi
  input  wire_tdi_tdi_in;

  // value method wire_tdo
  output wire_tdo;

  // output resets
  output RST_N_soc_reset;

  // signals for module outputs
  wire [309 : 0] soc_sb_commitlog;
  wire [63 : 0] soc_sb_sbread_mv_csr_customcontrol,
		soc_sb_sbread_mv_csr_dcsr,
		soc_sb_sbread_mv_csr_dpc,
		soc_sb_sbread_mv_csr_dscratch0,
		soc_sb_sbread_mv_csr_dscratch1,
		soc_sb_sbread_mv_csr_fcsr,
		soc_sb_sbread_mv_csr_marchid,
		soc_sb_sbread_mv_csr_mcause,
		soc_sb_sbread_mv_csr_mcycle,
		soc_sb_sbread_mv_csr_medeleg,
		soc_sb_sbread_mv_csr_menvcfg,
		soc_sb_sbread_mv_csr_mepc,
		soc_sb_sbread_mv_csr_mhartid,
		soc_sb_sbread_mv_csr_mhpmcounter3,
		soc_sb_sbread_mv_csr_mhpmcounter4,
		soc_sb_sbread_mv_csr_mhpmcounter5,
		soc_sb_sbread_mv_csr_mhpmcounter6,
		soc_sb_sbread_mv_csr_mhpmevent3,
		soc_sb_sbread_mv_csr_mhpmevent4,
		soc_sb_sbread_mv_csr_mhpmevent5,
		soc_sb_sbread_mv_csr_mhpmevent6,
		soc_sb_sbread_mv_csr_mideleg,
		soc_sb_sbread_mv_csr_mie,
		soc_sb_sbread_mv_csr_mimpid,
		soc_sb_sbread_mv_csr_minstret,
		soc_sb_sbread_mv_csr_mip,
		soc_sb_sbread_mv_csr_misa,
		soc_sb_sbread_mv_csr_mscratch,
		soc_sb_sbread_mv_csr_mstatus,
		soc_sb_sbread_mv_csr_mtval,
		soc_sb_sbread_mv_csr_mtvec,
		soc_sb_sbread_mv_csr_pmpcfg0,
		soc_sb_sbread_mv_csr_satp,
		soc_sb_sbread_mv_csr_scause,
		soc_sb_sbread_mv_csr_senvcfg,
		soc_sb_sbread_mv_csr_sepc,
		soc_sb_sbread_mv_csr_sie,
		soc_sb_sbread_mv_csr_sip,
		soc_sb_sbread_mv_csr_sscratch,
		soc_sb_sbread_mv_csr_stval,
		soc_sb_sbread_mv_csr_stvec,
		soc_sb_sbread_mv_csr_time;
  wire [31 : 0] soc_sb_sbread_mv_csr_mcounteren,
		soc_sb_sbread_mv_csr_mcountinhibit,
		soc_sb_sbread_mv_csr_mvendorid,
		soc_sb_sbread_mv_csr_scounteren;
  wire [29 : 0] soc_sb_sbread_mv_csr_pmpaddr0,
		soc_sb_sbread_mv_csr_pmpaddr1,
		soc_sb_sbread_mv_csr_pmpaddr2,
		soc_sb_sbread_mv_csr_pmpaddr3;
  wire [4 : 0] soc_sb_sbread_mv_csr_fflags;
  wire [2 : 0] soc_sb_sbread_mv_csr_frm;
  wire RDY_soc_sb_commitlog,
       RDY_soc_sb_sbread_mv_csr_customcontrol,
       RDY_soc_sb_sbread_mv_csr_dcsr,
       RDY_soc_sb_sbread_mv_csr_dpc,
       RDY_soc_sb_sbread_mv_csr_dscratch0,
       RDY_soc_sb_sbread_mv_csr_dscratch1,
       RDY_soc_sb_sbread_mv_csr_fcsr,
       RDY_soc_sb_sbread_mv_csr_fflags,
       RDY_soc_sb_sbread_mv_csr_frm,
       RDY_soc_sb_sbread_mv_csr_marchid,
       RDY_soc_sb_sbread_mv_csr_mcause,
       RDY_soc_sb_sbread_mv_csr_mcounteren,
       RDY_soc_sb_sbread_mv_csr_mcountinhibit,
       RDY_soc_sb_sbread_mv_csr_mcycle,
       RDY_soc_sb_sbread_mv_csr_medeleg,
       RDY_soc_sb_sbread_mv_csr_menvcfg,
       RDY_soc_sb_sbread_mv_csr_mepc,
       RDY_soc_sb_sbread_mv_csr_mhartid,
       RDY_soc_sb_sbread_mv_csr_mhpmcounter3,
       RDY_soc_sb_sbread_mv_csr_mhpmcounter4,
       RDY_soc_sb_sbread_mv_csr_mhpmcounter5,
       RDY_soc_sb_sbread_mv_csr_mhpmcounter6,
       RDY_soc_sb_sbread_mv_csr_mhpmevent3,
       RDY_soc_sb_sbread_mv_csr_mhpmevent4,
       RDY_soc_sb_sbread_mv_csr_mhpmevent5,
       RDY_soc_sb_sbread_mv_csr_mhpmevent6,
       RDY_soc_sb_sbread_mv_csr_mideleg,
       RDY_soc_sb_sbread_mv_csr_mie,
       RDY_soc_sb_sbread_mv_csr_mimpid,
       RDY_soc_sb_sbread_mv_csr_minstret,
       RDY_soc_sb_sbread_mv_csr_mip,
       RDY_soc_sb_sbread_mv_csr_misa,
       RDY_soc_sb_sbread_mv_csr_mscratch,
       RDY_soc_sb_sbread_mv_csr_mstatus,
       RDY_soc_sb_sbread_mv_csr_mtval,
       RDY_soc_sb_sbread_mv_csr_mtvec,
       RDY_soc_sb_sbread_mv_csr_mvendorid,
       RDY_soc_sb_sbread_mv_csr_pmpaddr0,
       RDY_soc_sb_sbread_mv_csr_pmpaddr1,
       RDY_soc_sb_sbread_mv_csr_pmpaddr2,
       RDY_soc_sb_sbread_mv_csr_pmpaddr3,
       RDY_soc_sb_sbread_mv_csr_pmpcfg0,
       RDY_soc_sb_sbread_mv_csr_satp,
       RDY_soc_sb_sbread_mv_csr_scause,
       RDY_soc_sb_sbread_mv_csr_scounteren,
       RDY_soc_sb_sbread_mv_csr_senvcfg,
       RDY_soc_sb_sbread_mv_csr_sepc,
       RDY_soc_sb_sbread_mv_csr_sie,
       RDY_soc_sb_sbread_mv_csr_sip,
       RDY_soc_sb_sbread_mv_csr_sscratch,
       RDY_soc_sb_sbread_mv_csr_stval,
       RDY_soc_sb_sbread_mv_csr_stvec,
       RDY_soc_sb_sbread_mv_csr_time,
       RST_N_soc_reset,
       uart_io_SOUT,
       uart_io_SOUT_EN,
       wire_tdo;

  // register tdi
  reg tdi;
  wire tdi_D_IN, tdi_EN;

  // register tdo
  reg tdo;
  wire tdo_D_IN, tdo_EN;

  // register tms
  reg tms;
  wire tms_D_IN, tms_EN;

  // ports of submodule debug_module
  wire [63 : 0] debug_module_debug_master_RDATA,
		debug_module_debug_master_WDATA,
		debug_module_debug_slave_RDATA,
		debug_module_debug_slave_WDATA;
  wire [40 : 0] debug_module_dtm_access_putCommand_put;
  wire [33 : 0] debug_module_dtm_access_getResponse_get;
  wire [31 : 0] debug_module_debug_master_ARADDR,
		debug_module_debug_master_AWADDR,
		debug_module_debug_slave_ARADDR,
		debug_module_debug_slave_AWADDR;
  wire [7 : 0] debug_module_debug_master_ARLEN,
	       debug_module_debug_master_AWLEN,
	       debug_module_debug_master_WSTRB,
	       debug_module_debug_slave_ARLEN,
	       debug_module_debug_slave_AWLEN,
	       debug_module_debug_slave_WSTRB;
  wire [3 : 0] debug_module_debug_master_ARID,
	       debug_module_debug_master_AWID,
	       debug_module_debug_master_BID,
	       debug_module_debug_master_RID,
	       debug_module_debug_master_WID,
	       debug_module_debug_slave_ARID,
	       debug_module_debug_slave_AWID,
	       debug_module_debug_slave_BID,
	       debug_module_debug_slave_RID,
	       debug_module_debug_slave_WID;
  wire [2 : 0] debug_module_debug_master_ARPROT,
	       debug_module_debug_master_ARSIZE,
	       debug_module_debug_master_AWPROT,
	       debug_module_debug_master_AWSIZE,
	       debug_module_debug_slave_ARPROT,
	       debug_module_debug_slave_ARSIZE,
	       debug_module_debug_slave_AWPROT,
	       debug_module_debug_slave_AWSIZE;
  wire [1 : 0] debug_module_debug_master_ARBURST,
	       debug_module_debug_master_AWBURST,
	       debug_module_debug_master_BRESP,
	       debug_module_debug_master_RRESP,
	       debug_module_debug_slave_ARBURST,
	       debug_module_debug_slave_AWBURST,
	       debug_module_debug_slave_BRESP,
	       debug_module_debug_slave_RRESP;
  wire debug_module_EN_dtm_access_getResponse_get,
       debug_module_EN_dtm_access_putCommand_put,
       debug_module_EN_hartside_ma_debugenable,
       debug_module_EN_hartside_ma_havereset,
       debug_module_RDY_dtm_access_getResponse_get,
       debug_module_RDY_dtm_access_putCommand_put,
       debug_module_debug_master_ARREADY,
       debug_module_debug_master_ARVALID,
       debug_module_debug_master_AWREADY,
       debug_module_debug_master_AWVALID,
       debug_module_debug_master_BREADY,
       debug_module_debug_master_BVALID,
       debug_module_debug_master_RLAST,
       debug_module_debug_master_RREADY,
       debug_module_debug_master_RVALID,
       debug_module_debug_master_WLAST,
       debug_module_debug_master_WREADY,
       debug_module_debug_master_WVALID,
       debug_module_debug_slave_ARREADY,
       debug_module_debug_slave_ARVALID,
       debug_module_debug_slave_AWREADY,
       debug_module_debug_slave_AWVALID,
       debug_module_debug_slave_BREADY,
       debug_module_debug_slave_BVALID,
       debug_module_debug_slave_RLAST,
       debug_module_debug_slave_RREADY,
       debug_module_debug_slave_RVALID,
       debug_module_debug_slave_WLAST,
       debug_module_debug_slave_WREADY,
       debug_module_debug_slave_WVALID,
       debug_module_hartside_ma_debugenable__debugenable,
       debug_module_hartside_ma_havereset_resetack,
       debug_module_hartside_mv_harthaltreq,
       debug_module_hartside_mv_hartreset,
       debug_module_mv_ndm_reset;

  // ports of submodule hart_reset_0
  wire hart_reset_0_ASSERT_IN, hart_reset_0_OUT_RST;

  // ports of submodule jtag_tap
  wire [39 : 0] jtag_tap_request_to_dm;
  wire [33 : 0] jtag_tap_response_from_dm_responsedm;
  wire jtag_tap_EN_bs_chain_i,
       jtag_tap_EN_debug_tdi_i,
       jtag_tap_EN_request_to_dm,
       jtag_tap_EN_response_from_dm,
       jtag_tap_RDY_request_to_dm,
       jtag_tap_RDY_response_from_dm,
       jtag_tap_bs_chain_i_bs_chain,
       jtag_tap_debug_tdi_i_debug_tdi,
       jtag_tap_tdi_i_tdi,
       jtag_tap_tdo,
       jtag_tap_tms_i_tms;

  // ports of submodule ndm_reset
  wire ndm_reset_ASSERT_IN, ndm_reset_OUT_RST;

  // ports of submodule soc
  wire [309 : 0] soc_soc_sb_commitlog;
  wire [63 : 0] soc_soc_sb_sbread_mv_csr_customcontrol,
		soc_soc_sb_sbread_mv_csr_dcsr,
		soc_soc_sb_sbread_mv_csr_dpc,
		soc_soc_sb_sbread_mv_csr_dscratch0,
		soc_soc_sb_sbread_mv_csr_dscratch1,
		soc_soc_sb_sbread_mv_csr_fcsr,
		soc_soc_sb_sbread_mv_csr_marchid,
		soc_soc_sb_sbread_mv_csr_mcause,
		soc_soc_sb_sbread_mv_csr_mcycle,
		soc_soc_sb_sbread_mv_csr_medeleg,
		soc_soc_sb_sbread_mv_csr_menvcfg,
		soc_soc_sb_sbread_mv_csr_mepc,
		soc_soc_sb_sbread_mv_csr_mhartid,
		soc_soc_sb_sbread_mv_csr_mhpmcounter3,
		soc_soc_sb_sbread_mv_csr_mhpmcounter4,
		soc_soc_sb_sbread_mv_csr_mhpmcounter5,
		soc_soc_sb_sbread_mv_csr_mhpmcounter6,
		soc_soc_sb_sbread_mv_csr_mhpmevent3,
		soc_soc_sb_sbread_mv_csr_mhpmevent4,
		soc_soc_sb_sbread_mv_csr_mhpmevent5,
		soc_soc_sb_sbread_mv_csr_mhpmevent6,
		soc_soc_sb_sbread_mv_csr_mideleg,
		soc_soc_sb_sbread_mv_csr_mie,
		soc_soc_sb_sbread_mv_csr_mimpid,
		soc_soc_sb_sbread_mv_csr_minstret,
		soc_soc_sb_sbread_mv_csr_mip,
		soc_soc_sb_sbread_mv_csr_misa,
		soc_soc_sb_sbread_mv_csr_mscratch,
		soc_soc_sb_sbread_mv_csr_mstatus,
		soc_soc_sb_sbread_mv_csr_mtval,
		soc_soc_sb_sbread_mv_csr_mtvec,
		soc_soc_sb_sbread_mv_csr_pmpcfg0,
		soc_soc_sb_sbread_mv_csr_satp,
		soc_soc_sb_sbread_mv_csr_scause,
		soc_soc_sb_sbread_mv_csr_senvcfg,
		soc_soc_sb_sbread_mv_csr_sepc,
		soc_soc_sb_sbread_mv_csr_sie,
		soc_soc_sb_sbread_mv_csr_sip,
		soc_soc_sb_sbread_mv_csr_sscratch,
		soc_soc_sb_sbread_mv_csr_stval,
		soc_soc_sb_sbread_mv_csr_stvec,
		soc_soc_sb_sbread_mv_csr_time,
		soc_to_debug_master_RDATA,
		soc_to_debug_master_WDATA,
		soc_to_debug_slave_RDATA,
		soc_to_debug_slave_WDATA;
  wire [31 : 0] soc_soc_sb_sbread_mv_csr_mcounteren,
		soc_soc_sb_sbread_mv_csr_mcountinhibit,
		soc_soc_sb_sbread_mv_csr_mvendorid,
		soc_soc_sb_sbread_mv_csr_scounteren,
		soc_to_debug_master_ARADDR,
		soc_to_debug_master_AWADDR,
		soc_to_debug_slave_ARADDR,
		soc_to_debug_slave_AWADDR;
  wire [29 : 0] soc_soc_sb_sbread_mv_csr_pmpaddr0,
		soc_soc_sb_sbread_mv_csr_pmpaddr1,
		soc_soc_sb_sbread_mv_csr_pmpaddr2,
		soc_soc_sb_sbread_mv_csr_pmpaddr3;
  wire [7 : 0] soc_to_debug_master_ARLEN,
	       soc_to_debug_master_AWLEN,
	       soc_to_debug_master_WSTRB,
	       soc_to_debug_slave_ARLEN,
	       soc_to_debug_slave_AWLEN,
	       soc_to_debug_slave_WSTRB;
  wire [4 : 0] soc_soc_sb_sbread_mv_csr_fflags;
  wire [3 : 0] soc_to_debug_master_ARID,
	       soc_to_debug_master_AWID,
	       soc_to_debug_master_BID,
	       soc_to_debug_master_RID,
	       soc_to_debug_master_WID,
	       soc_to_debug_slave_ARID,
	       soc_to_debug_slave_AWID,
	       soc_to_debug_slave_BID,
	       soc_to_debug_slave_RID,
	       soc_to_debug_slave_WID;
  wire [2 : 0] soc_soc_sb_sbread_mv_csr_frm,
	       soc_to_debug_master_ARPROT,
	       soc_to_debug_master_ARSIZE,
	       soc_to_debug_master_AWPROT,
	       soc_to_debug_master_AWSIZE,
	       soc_to_debug_slave_ARPROT,
	       soc_to_debug_slave_ARSIZE,
	       soc_to_debug_slave_AWPROT,
	       soc_to_debug_slave_AWSIZE;
  wire [1 : 0] soc_to_debug_master_ARBURST,
	       soc_to_debug_master_AWBURST,
	       soc_to_debug_master_BRESP,
	       soc_to_debug_master_RRESP,
	       soc_to_debug_slave_ARBURST,
	       soc_to_debug_slave_AWBURST,
	       soc_to_debug_slave_BRESP,
	       soc_to_debug_slave_RRESP;
  wire soc_EN_ma_hart_interrupts,
       soc_ma_hart_interrupts_i,
       soc_mv_core_debugenable,
       soc_mv_harts_have_reset,
       soc_to_debug_master_ARREADY,
       soc_to_debug_master_ARVALID,
       soc_to_debug_master_AWREADY,
       soc_to_debug_master_AWVALID,
       soc_to_debug_master_BREADY,
       soc_to_debug_master_BVALID,
       soc_to_debug_master_RLAST,
       soc_to_debug_master_RREADY,
       soc_to_debug_master_RVALID,
       soc_to_debug_master_WLAST,
       soc_to_debug_master_WREADY,
       soc_to_debug_master_WVALID,
       soc_to_debug_slave_ARREADY,
       soc_to_debug_slave_ARVALID,
       soc_to_debug_slave_AWREADY,
       soc_to_debug_slave_AWVALID,
       soc_to_debug_slave_BREADY,
       soc_to_debug_slave_BVALID,
       soc_to_debug_slave_RLAST,
       soc_to_debug_slave_RREADY,
       soc_to_debug_slave_RVALID,
       soc_to_debug_slave_WLAST,
       soc_to_debug_slave_WREADY,
       soc_to_debug_slave_WVALID,
       soc_uart_io_SIN,
       soc_uart_io_SOUT,
       soc_uart_io_SOUT_EN;

  // ports of submodule sync_request_to_dm
  wire [40 : 0] sync_request_to_dm_dD_OUT, sync_request_to_dm_sD_IN;
  wire sync_request_to_dm_dDEQ,
       sync_request_to_dm_dEMPTY_N,
       sync_request_to_dm_sENQ,
       sync_request_to_dm_sFULL_N;

  // ports of submodule sync_response_from_dm
  wire [33 : 0] sync_response_from_dm_dD_OUT, sync_response_from_dm_sD_IN;
  wire sync_response_from_dm_dDEQ,
       sync_response_from_dm_dEMPTY_N,
       sync_response_from_dm_sENQ,
       sync_response_from_dm_sFULL_N;

  // ports of submodule system_reset
  wire system_reset_RST_OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_assign_jtag_inputs,
       CAN_FIRE_RL_assign_jtag_output,
       CAN_FIRE_RL_connect_debug_response_to_syncfifo,
       CAN_FIRE_RL_connect_tap_request_to_syncfifo,
       CAN_FIRE_RL_read_synced_request_to_dm,
       CAN_FIRE_RL_read_synced_response_from_dm,
       CAN_FIRE_RL_rl_connect_debug_enables,
       CAN_FIRE_RL_rl_connect_debug_haveresets,
       CAN_FIRE_RL_rl_connect_debug_interrupts,
       CAN_FIRE_RL_rl_generate_hartreset,
       CAN_FIRE_RL_rl_generate_ndmreset,
       CAN_FIRE_RL_rl_rd_addr_channel,
       CAN_FIRE_RL_rl_rd_addr_channel_1,
       CAN_FIRE_RL_rl_rd_data_channel,
       CAN_FIRE_RL_rl_rd_data_channel_1,
       CAN_FIRE_RL_rl_wr_addr_channel,
       CAN_FIRE_RL_rl_wr_addr_channel_1,
       CAN_FIRE_RL_rl_wr_data_channel,
       CAN_FIRE_RL_rl_wr_data_channel_1,
       CAN_FIRE_RL_rl_wr_response_channel,
       CAN_FIRE_RL_rl_wr_response_channel_1,
       CAN_FIRE_uart_io_sin,
       CAN_FIRE_wire_tdi,
       CAN_FIRE_wire_tms,
       WILL_FIRE_RL_assign_jtag_inputs,
       WILL_FIRE_RL_assign_jtag_output,
       WILL_FIRE_RL_connect_debug_response_to_syncfifo,
       WILL_FIRE_RL_connect_tap_request_to_syncfifo,
       WILL_FIRE_RL_read_synced_request_to_dm,
       WILL_FIRE_RL_read_synced_response_from_dm,
       WILL_FIRE_RL_rl_connect_debug_enables,
       WILL_FIRE_RL_rl_connect_debug_haveresets,
       WILL_FIRE_RL_rl_connect_debug_interrupts,
       WILL_FIRE_RL_rl_generate_hartreset,
       WILL_FIRE_RL_rl_generate_ndmreset,
       WILL_FIRE_RL_rl_rd_addr_channel,
       WILL_FIRE_RL_rl_rd_addr_channel_1,
       WILL_FIRE_RL_rl_rd_data_channel,
       WILL_FIRE_RL_rl_rd_data_channel_1,
       WILL_FIRE_RL_rl_wr_addr_channel,
       WILL_FIRE_RL_rl_wr_addr_channel_1,
       WILL_FIRE_RL_rl_wr_data_channel,
       WILL_FIRE_RL_rl_wr_data_channel_1,
       WILL_FIRE_RL_rl_wr_response_channel,
       WILL_FIRE_RL_rl_wr_response_channel_1,
       WILL_FIRE_uart_io_sin,
       WILL_FIRE_wire_tdi,
       WILL_FIRE_wire_tms;

  // output resets
  assign RST_N_soc_reset = system_reset_RST_OUT ;

  // value method soc_sb_sbread_mv_csr_misa
  assign soc_sb_sbread_mv_csr_misa = soc_soc_sb_sbread_mv_csr_misa ;
  assign RDY_soc_sb_sbread_mv_csr_misa = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mvendorid
  assign soc_sb_sbread_mv_csr_mvendorid = soc_soc_sb_sbread_mv_csr_mvendorid ;
  assign RDY_soc_sb_sbread_mv_csr_mvendorid = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_stvec
  assign soc_sb_sbread_mv_csr_stvec = soc_soc_sb_sbread_mv_csr_stvec ;
  assign RDY_soc_sb_sbread_mv_csr_stvec = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mtvec
  assign soc_sb_sbread_mv_csr_mtvec = soc_soc_sb_sbread_mv_csr_mtvec ;
  assign RDY_soc_sb_sbread_mv_csr_mtvec = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mstatus
  assign soc_sb_sbread_mv_csr_mstatus = soc_soc_sb_sbread_mv_csr_mstatus ;
  assign RDY_soc_sb_sbread_mv_csr_mstatus = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_marchid
  assign soc_sb_sbread_mv_csr_marchid = soc_soc_sb_sbread_mv_csr_marchid ;
  assign RDY_soc_sb_sbread_mv_csr_marchid = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mimpid
  assign soc_sb_sbread_mv_csr_mimpid = soc_soc_sb_sbread_mv_csr_mimpid ;
  assign RDY_soc_sb_sbread_mv_csr_mimpid = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mhartid
  assign soc_sb_sbread_mv_csr_mhartid = soc_soc_sb_sbread_mv_csr_mhartid ;
  assign RDY_soc_sb_sbread_mv_csr_mhartid = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mip
  assign soc_sb_sbread_mv_csr_mip = soc_soc_sb_sbread_mv_csr_mip ;
  assign RDY_soc_sb_sbread_mv_csr_mip = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_sip
  assign soc_sb_sbread_mv_csr_sip = soc_soc_sb_sbread_mv_csr_sip ;
  assign RDY_soc_sb_sbread_mv_csr_sip = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mie
  assign soc_sb_sbread_mv_csr_mie = soc_soc_sb_sbread_mv_csr_mie ;
  assign RDY_soc_sb_sbread_mv_csr_mie = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_sie
  assign soc_sb_sbread_mv_csr_sie = soc_soc_sb_sbread_mv_csr_sie ;
  assign RDY_soc_sb_sbread_mv_csr_sie = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mscratch
  assign soc_sb_sbread_mv_csr_mscratch = soc_soc_sb_sbread_mv_csr_mscratch ;
  assign RDY_soc_sb_sbread_mv_csr_mscratch = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_sscratch
  assign soc_sb_sbread_mv_csr_sscratch = soc_soc_sb_sbread_mv_csr_sscratch ;
  assign RDY_soc_sb_sbread_mv_csr_sscratch = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_sepc
  assign soc_sb_sbread_mv_csr_sepc = soc_soc_sb_sbread_mv_csr_sepc ;
  assign RDY_soc_sb_sbread_mv_csr_sepc = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_stval
  assign soc_sb_sbread_mv_csr_stval = soc_soc_sb_sbread_mv_csr_stval ;
  assign RDY_soc_sb_sbread_mv_csr_stval = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_scause
  assign soc_sb_sbread_mv_csr_scause = soc_soc_sb_sbread_mv_csr_scause ;
  assign RDY_soc_sb_sbread_mv_csr_scause = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mepc
  assign soc_sb_sbread_mv_csr_mepc = soc_soc_sb_sbread_mv_csr_mepc ;
  assign RDY_soc_sb_sbread_mv_csr_mepc = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mtval
  assign soc_sb_sbread_mv_csr_mtval = soc_soc_sb_sbread_mv_csr_mtval ;
  assign RDY_soc_sb_sbread_mv_csr_mtval = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mcause
  assign soc_sb_sbread_mv_csr_mcause = soc_soc_sb_sbread_mv_csr_mcause ;
  assign RDY_soc_sb_sbread_mv_csr_mcause = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mcycle
  assign soc_sb_sbread_mv_csr_mcycle = soc_soc_sb_sbread_mv_csr_mcycle ;
  assign RDY_soc_sb_sbread_mv_csr_mcycle = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_minstret
  assign soc_sb_sbread_mv_csr_minstret = soc_soc_sb_sbread_mv_csr_minstret ;
  assign RDY_soc_sb_sbread_mv_csr_minstret = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_fcsr
  assign soc_sb_sbread_mv_csr_fcsr = soc_soc_sb_sbread_mv_csr_fcsr ;
  assign RDY_soc_sb_sbread_mv_csr_fcsr = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_time
  assign soc_sb_sbread_mv_csr_time = soc_soc_sb_sbread_mv_csr_time ;
  assign RDY_soc_sb_sbread_mv_csr_time = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mideleg
  assign soc_sb_sbread_mv_csr_mideleg = soc_soc_sb_sbread_mv_csr_mideleg ;
  assign RDY_soc_sb_sbread_mv_csr_mideleg = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_medeleg
  assign soc_sb_sbread_mv_csr_medeleg = soc_soc_sb_sbread_mv_csr_medeleg ;
  assign RDY_soc_sb_sbread_mv_csr_medeleg = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_pmpcfg0
  assign soc_sb_sbread_mv_csr_pmpcfg0 = soc_soc_sb_sbread_mv_csr_pmpcfg0 ;
  assign RDY_soc_sb_sbread_mv_csr_pmpcfg0 = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_pmpaddr0
  assign soc_sb_sbread_mv_csr_pmpaddr0 = soc_soc_sb_sbread_mv_csr_pmpaddr0 ;
  assign RDY_soc_sb_sbread_mv_csr_pmpaddr0 = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_pmpaddr1
  assign soc_sb_sbread_mv_csr_pmpaddr1 = soc_soc_sb_sbread_mv_csr_pmpaddr1 ;
  assign RDY_soc_sb_sbread_mv_csr_pmpaddr1 = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_pmpaddr2
  assign soc_sb_sbread_mv_csr_pmpaddr2 = soc_soc_sb_sbread_mv_csr_pmpaddr2 ;
  assign RDY_soc_sb_sbread_mv_csr_pmpaddr2 = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_pmpaddr3
  assign soc_sb_sbread_mv_csr_pmpaddr3 = soc_soc_sb_sbread_mv_csr_pmpaddr3 ;
  assign RDY_soc_sb_sbread_mv_csr_pmpaddr3 = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mcounteren
  assign soc_sb_sbread_mv_csr_mcounteren =
	     soc_soc_sb_sbread_mv_csr_mcounteren ;
  assign RDY_soc_sb_sbread_mv_csr_mcounteren = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_scounteren
  assign soc_sb_sbread_mv_csr_scounteren =
	     soc_soc_sb_sbread_mv_csr_scounteren ;
  assign RDY_soc_sb_sbread_mv_csr_scounteren = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_menvcfg
  assign soc_sb_sbread_mv_csr_menvcfg = soc_soc_sb_sbread_mv_csr_menvcfg ;
  assign RDY_soc_sb_sbread_mv_csr_menvcfg = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_senvcfg
  assign soc_sb_sbread_mv_csr_senvcfg = soc_soc_sb_sbread_mv_csr_senvcfg ;
  assign RDY_soc_sb_sbread_mv_csr_senvcfg = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_satp
  assign soc_sb_sbread_mv_csr_satp = soc_soc_sb_sbread_mv_csr_satp ;
  assign RDY_soc_sb_sbread_mv_csr_satp = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mcountinhibit
  assign soc_sb_sbread_mv_csr_mcountinhibit =
	     soc_soc_sb_sbread_mv_csr_mcountinhibit ;
  assign RDY_soc_sb_sbread_mv_csr_mcountinhibit = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_fflags
  assign soc_sb_sbread_mv_csr_fflags = soc_soc_sb_sbread_mv_csr_fflags ;
  assign RDY_soc_sb_sbread_mv_csr_fflags = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_frm
  assign soc_sb_sbread_mv_csr_frm = soc_soc_sb_sbread_mv_csr_frm ;
  assign RDY_soc_sb_sbread_mv_csr_frm = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_customcontrol
  assign soc_sb_sbread_mv_csr_customcontrol =
	     soc_soc_sb_sbread_mv_csr_customcontrol ;
  assign RDY_soc_sb_sbread_mv_csr_customcontrol = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mhpmcounter3
  assign soc_sb_sbread_mv_csr_mhpmcounter3 =
	     soc_soc_sb_sbread_mv_csr_mhpmcounter3 ;
  assign RDY_soc_sb_sbread_mv_csr_mhpmcounter3 = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mhpmcounter4
  assign soc_sb_sbread_mv_csr_mhpmcounter4 =
	     soc_soc_sb_sbread_mv_csr_mhpmcounter4 ;
  assign RDY_soc_sb_sbread_mv_csr_mhpmcounter4 = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mhpmcounter5
  assign soc_sb_sbread_mv_csr_mhpmcounter5 =
	     soc_soc_sb_sbread_mv_csr_mhpmcounter5 ;
  assign RDY_soc_sb_sbread_mv_csr_mhpmcounter5 = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mhpmcounter6
  assign soc_sb_sbread_mv_csr_mhpmcounter6 =
	     soc_soc_sb_sbread_mv_csr_mhpmcounter6 ;
  assign RDY_soc_sb_sbread_mv_csr_mhpmcounter6 = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mhpmevent3
  assign soc_sb_sbread_mv_csr_mhpmevent3 =
	     soc_soc_sb_sbread_mv_csr_mhpmevent3 ;
  assign RDY_soc_sb_sbread_mv_csr_mhpmevent3 = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mhpmevent4
  assign soc_sb_sbread_mv_csr_mhpmevent4 =
	     soc_soc_sb_sbread_mv_csr_mhpmevent4 ;
  assign RDY_soc_sb_sbread_mv_csr_mhpmevent4 = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mhpmevent5
  assign soc_sb_sbread_mv_csr_mhpmevent5 =
	     soc_soc_sb_sbread_mv_csr_mhpmevent5 ;
  assign RDY_soc_sb_sbread_mv_csr_mhpmevent5 = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_mhpmevent6
  assign soc_sb_sbread_mv_csr_mhpmevent6 =
	     soc_soc_sb_sbread_mv_csr_mhpmevent6 ;
  assign RDY_soc_sb_sbread_mv_csr_mhpmevent6 = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_dcsr
  assign soc_sb_sbread_mv_csr_dcsr = soc_soc_sb_sbread_mv_csr_dcsr ;
  assign RDY_soc_sb_sbread_mv_csr_dcsr = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_dpc
  assign soc_sb_sbread_mv_csr_dpc = soc_soc_sb_sbread_mv_csr_dpc ;
  assign RDY_soc_sb_sbread_mv_csr_dpc = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_dscratch0
  assign soc_sb_sbread_mv_csr_dscratch0 = soc_soc_sb_sbread_mv_csr_dscratch0 ;
  assign RDY_soc_sb_sbread_mv_csr_dscratch0 = 1'd1 ;

  // value method soc_sb_sbread_mv_csr_dscratch1
  assign soc_sb_sbread_mv_csr_dscratch1 = soc_soc_sb_sbread_mv_csr_dscratch1 ;
  assign RDY_soc_sb_sbread_mv_csr_dscratch1 = 1'd1 ;

  // value method soc_sb_commitlog
  assign soc_sb_commitlog = soc_soc_sb_commitlog ;
  assign RDY_soc_sb_commitlog = 1'd1 ;

  // action method uart_io_sin
  assign CAN_FIRE_uart_io_sin = 1'd1 ;
  assign WILL_FIRE_uart_io_sin = 1'd1 ;

  // value method uart_io_sout
  assign uart_io_SOUT = soc_uart_io_SOUT ;

  // value method uart_io_sout_en
  assign uart_io_SOUT_EN = soc_uart_io_SOUT_EN ;

  // action method wire_tms
  assign CAN_FIRE_wire_tms = 1'd1 ;
  assign WILL_FIRE_wire_tms = 1'd1 ;

  // action method wire_tdi
  assign CAN_FIRE_wire_tdi = 1'd1 ;
  assign WILL_FIRE_wire_tdi = 1'd1 ;

  // value method wire_tdo
  assign wire_tdo = tdo ;

  // submodule debug_module
  mk_debug debug_module(.CLK(CLK),
			.RST_N(RST_N),
			.debug_master_ARREADY(debug_module_debug_master_ARREADY),
			.debug_master_AWREADY(debug_module_debug_master_AWREADY),
			.debug_master_BID(debug_module_debug_master_BID),
			.debug_master_BRESP(debug_module_debug_master_BRESP),
			.debug_master_BVALID(debug_module_debug_master_BVALID),
			.debug_master_RDATA(debug_module_debug_master_RDATA),
			.debug_master_RID(debug_module_debug_master_RID),
			.debug_master_RLAST(debug_module_debug_master_RLAST),
			.debug_master_RRESP(debug_module_debug_master_RRESP),
			.debug_master_RVALID(debug_module_debug_master_RVALID),
			.debug_master_WREADY(debug_module_debug_master_WREADY),
			.debug_slave_ARADDR(debug_module_debug_slave_ARADDR),
			.debug_slave_ARBURST(debug_module_debug_slave_ARBURST),
			.debug_slave_ARID(debug_module_debug_slave_ARID),
			.debug_slave_ARLEN(debug_module_debug_slave_ARLEN),
			.debug_slave_ARPROT(debug_module_debug_slave_ARPROT),
			.debug_slave_ARSIZE(debug_module_debug_slave_ARSIZE),
			.debug_slave_ARVALID(debug_module_debug_slave_ARVALID),
			.debug_slave_AWADDR(debug_module_debug_slave_AWADDR),
			.debug_slave_AWBURST(debug_module_debug_slave_AWBURST),
			.debug_slave_AWID(debug_module_debug_slave_AWID),
			.debug_slave_AWLEN(debug_module_debug_slave_AWLEN),
			.debug_slave_AWPROT(debug_module_debug_slave_AWPROT),
			.debug_slave_AWSIZE(debug_module_debug_slave_AWSIZE),
			.debug_slave_AWVALID(debug_module_debug_slave_AWVALID),
			.debug_slave_BREADY(debug_module_debug_slave_BREADY),
			.debug_slave_RREADY(debug_module_debug_slave_RREADY),
			.debug_slave_WDATA(debug_module_debug_slave_WDATA),
			.debug_slave_WID(debug_module_debug_slave_WID),
			.debug_slave_WLAST(debug_module_debug_slave_WLAST),
			.debug_slave_WSTRB(debug_module_debug_slave_WSTRB),
			.debug_slave_WVALID(debug_module_debug_slave_WVALID),
			.dtm_access_putCommand_put(debug_module_dtm_access_putCommand_put),
			.hartside_ma_debugenable__debugenable(debug_module_hartside_ma_debugenable__debugenable),
			.hartside_ma_havereset_resetack(debug_module_hartside_ma_havereset_resetack),
			.EN_dtm_access_putCommand_put(debug_module_EN_dtm_access_putCommand_put),
			.EN_dtm_access_getResponse_get(debug_module_EN_dtm_access_getResponse_get),
			.EN_hartside_ma_havereset(debug_module_EN_hartside_ma_havereset),
			.EN_hartside_ma_debugenable(debug_module_EN_hartside_ma_debugenable),
			.debug_slave_AWREADY(debug_module_debug_slave_AWREADY),
			.debug_slave_WREADY(debug_module_debug_slave_WREADY),
			.debug_slave_BVALID(debug_module_debug_slave_BVALID),
			.debug_slave_BRESP(debug_module_debug_slave_BRESP),
			.debug_slave_BID(debug_module_debug_slave_BID),
			.debug_slave_ARREADY(debug_module_debug_slave_ARREADY),
			.debug_slave_RVALID(debug_module_debug_slave_RVALID),
			.debug_slave_RRESP(debug_module_debug_slave_RRESP),
			.debug_slave_RDATA(debug_module_debug_slave_RDATA),
			.debug_slave_RLAST(debug_module_debug_slave_RLAST),
			.debug_slave_RID(debug_module_debug_slave_RID),
			.debug_master_AWVALID(debug_module_debug_master_AWVALID),
			.debug_master_AWADDR(debug_module_debug_master_AWADDR),
			.debug_master_AWPROT(debug_module_debug_master_AWPROT),
			.debug_master_AWLEN(debug_module_debug_master_AWLEN),
			.debug_master_AWSIZE(debug_module_debug_master_AWSIZE),
			.debug_master_AWBURST(debug_module_debug_master_AWBURST),
			.debug_master_AWID(debug_module_debug_master_AWID),
			.debug_master_WVALID(debug_module_debug_master_WVALID),
			.debug_master_WDATA(debug_module_debug_master_WDATA),
			.debug_master_WSTRB(debug_module_debug_master_WSTRB),
			.debug_master_WLAST(debug_module_debug_master_WLAST),
			.debug_master_WID(debug_module_debug_master_WID),
			.debug_master_BREADY(debug_module_debug_master_BREADY),
			.debug_master_ARVALID(debug_module_debug_master_ARVALID),
			.debug_master_ARADDR(debug_module_debug_master_ARADDR),
			.debug_master_ARPROT(debug_module_debug_master_ARPROT),
			.debug_master_ARLEN(debug_module_debug_master_ARLEN),
			.debug_master_ARSIZE(debug_module_debug_master_ARSIZE),
			.debug_master_ARBURST(debug_module_debug_master_ARBURST),
			.debug_master_ARID(debug_module_debug_master_ARID),
			.debug_master_RREADY(debug_module_debug_master_RREADY),
			.RDY_dtm_access_putCommand_put(debug_module_RDY_dtm_access_putCommand_put),
			.dtm_access_getResponse_get(debug_module_dtm_access_getResponse_get),
			.RDY_dtm_access_getResponse_get(debug_module_RDY_dtm_access_getResponse_get),
			.mv_ndm_reset(debug_module_mv_ndm_reset),
			.RDY_mv_ndm_reset(),
			.hartside_mv_hartmask(),
			.RDY_hartside_mv_hartmask(),
			.hartside_mv_hartreset(debug_module_hartside_mv_hartreset),
			.RDY_hartside_mv_hartreset(),
			.hartside_mv_harthaltreq(debug_module_hartside_mv_harthaltreq),
			.RDY_hartside_mv_harthaltreq(),
			.hartside_mv_resetack(),
			.RDY_hartside_mv_resetack(),
			.RDY_hartside_ma_havereset(),
			.RDY_hartside_ma_debugenable(),
			.hartside_mv_hasel(),
			.RDY_hartside_mv_hasel(),
			.hartside_mv_hartsel(),
			.RDY_hartside_mv_hartsel(),
			.RST_N_ifc_dm_reset());

  // submodule hart_reset_0
  MakeReset0 #(.init(1'd1)) hart_reset_0(.CLK(CLK),
					 .RST(RST_N),
					 .ASSERT_IN(hart_reset_0_ASSERT_IN),
					 .ASSERT_OUT(),
					 .OUT_RST(hart_reset_0_OUT_RST));

  // submodule jtag_tap
  mkjtagdtm jtag_tap(.CLK(CLK_tck_clk),
		     .RST_N(RST_N_trst),
		     .bs_chain_i_bs_chain(jtag_tap_bs_chain_i_bs_chain),
		     .debug_tdi_i_debug_tdi(jtag_tap_debug_tdi_i_debug_tdi),
		     .response_from_dm_responsedm(jtag_tap_response_from_dm_responsedm),
		     .tdi_i_tdi(jtag_tap_tdi_i_tdi),
		     .tms_i_tms(jtag_tap_tms_i_tms),
		     .EN_debug_tdi_i(jtag_tap_EN_debug_tdi_i),
		     .EN_bs_chain_i(jtag_tap_EN_bs_chain_i),
		     .EN_response_from_dm(jtag_tap_EN_response_from_dm),
		     .EN_request_to_dm(jtag_tap_EN_request_to_dm),
		     .RDY_debug_tdi_i(),
		     .RDY_bs_chain_i(),
		     .tdo(jtag_tap_tdo),
		     .tdo_oe(),
		     .RDY_tdo_oe(),
		     .shift_dr(),
		     .RDY_shift_dr(),
		     .pause_dr(),
		     .RDY_pause_dr(),
		     .update_dr(),
		     .RDY_update_dr(),
		     .capture_dr(),
		     .RDY_capture_dr(),
		     .extest_select(),
		     .RDY_extest_select(),
		     .sample_preload_select(),
		     .RDY_sample_preload_select(),
		     .debug_select(),
		     .RDY_debug_select(),
		     .debug_tdo(),
		     .RDY_debug_tdo(),
		     .RDY_response_from_dm(jtag_tap_RDY_response_from_dm),
		     .request_to_dm(jtag_tap_request_to_dm),
		     .RDY_request_to_dm(jtag_tap_RDY_request_to_dm));

  // submodule ndm_reset
  MakeReset0 #(.init(1'd1)) ndm_reset(.CLK(CLK),
				      .RST(RST_N),
				      .ASSERT_IN(ndm_reset_ASSERT_IN),
				      .ASSERT_OUT(),
				      .OUT_RST(ndm_reset_OUT_RST));

  // submodule soc
  mkSoc soc(.RST_N_hartresets_0(hart_reset_0_OUT_RST),
	    .CLK(CLK),
	    .RST_N(system_reset_RST_OUT),
	    .ma_hart_interrupts_i(soc_ma_hart_interrupts_i),
	    .to_debug_master_ARADDR(soc_to_debug_master_ARADDR),
	    .to_debug_master_ARBURST(soc_to_debug_master_ARBURST),
	    .to_debug_master_ARID(soc_to_debug_master_ARID),
	    .to_debug_master_ARLEN(soc_to_debug_master_ARLEN),
	    .to_debug_master_ARPROT(soc_to_debug_master_ARPROT),
	    .to_debug_master_ARSIZE(soc_to_debug_master_ARSIZE),
	    .to_debug_master_ARVALID(soc_to_debug_master_ARVALID),
	    .to_debug_master_AWADDR(soc_to_debug_master_AWADDR),
	    .to_debug_master_AWBURST(soc_to_debug_master_AWBURST),
	    .to_debug_master_AWID(soc_to_debug_master_AWID),
	    .to_debug_master_AWLEN(soc_to_debug_master_AWLEN),
	    .to_debug_master_AWPROT(soc_to_debug_master_AWPROT),
	    .to_debug_master_AWSIZE(soc_to_debug_master_AWSIZE),
	    .to_debug_master_AWVALID(soc_to_debug_master_AWVALID),
	    .to_debug_master_BREADY(soc_to_debug_master_BREADY),
	    .to_debug_master_RREADY(soc_to_debug_master_RREADY),
	    .to_debug_master_WDATA(soc_to_debug_master_WDATA),
	    .to_debug_master_WID(soc_to_debug_master_WID),
	    .to_debug_master_WLAST(soc_to_debug_master_WLAST),
	    .to_debug_master_WSTRB(soc_to_debug_master_WSTRB),
	    .to_debug_master_WVALID(soc_to_debug_master_WVALID),
	    .to_debug_slave_ARREADY(soc_to_debug_slave_ARREADY),
	    .to_debug_slave_AWREADY(soc_to_debug_slave_AWREADY),
	    .to_debug_slave_BID(soc_to_debug_slave_BID),
	    .to_debug_slave_BRESP(soc_to_debug_slave_BRESP),
	    .to_debug_slave_BVALID(soc_to_debug_slave_BVALID),
	    .to_debug_slave_RDATA(soc_to_debug_slave_RDATA),
	    .to_debug_slave_RID(soc_to_debug_slave_RID),
	    .to_debug_slave_RLAST(soc_to_debug_slave_RLAST),
	    .to_debug_slave_RRESP(soc_to_debug_slave_RRESP),
	    .to_debug_slave_RVALID(soc_to_debug_slave_RVALID),
	    .to_debug_slave_WREADY(soc_to_debug_slave_WREADY),
	    .uart_io_SIN(soc_uart_io_SIN),
	    .EN_ma_hart_interrupts(soc_EN_ma_hart_interrupts),
	    .soc_sb_sbread_mv_csr_misa(soc_soc_sb_sbread_mv_csr_misa),
	    .RDY_soc_sb_sbread_mv_csr_misa(),
	    .soc_sb_sbread_mv_csr_mvendorid(soc_soc_sb_sbread_mv_csr_mvendorid),
	    .RDY_soc_sb_sbread_mv_csr_mvendorid(),
	    .soc_sb_sbread_mv_csr_stvec(soc_soc_sb_sbread_mv_csr_stvec),
	    .RDY_soc_sb_sbread_mv_csr_stvec(),
	    .soc_sb_sbread_mv_csr_mtvec(soc_soc_sb_sbread_mv_csr_mtvec),
	    .RDY_soc_sb_sbread_mv_csr_mtvec(),
	    .soc_sb_sbread_mv_csr_mstatus(soc_soc_sb_sbread_mv_csr_mstatus),
	    .RDY_soc_sb_sbread_mv_csr_mstatus(),
	    .soc_sb_sbread_mv_csr_marchid(soc_soc_sb_sbread_mv_csr_marchid),
	    .RDY_soc_sb_sbread_mv_csr_marchid(),
	    .soc_sb_sbread_mv_csr_mimpid(soc_soc_sb_sbread_mv_csr_mimpid),
	    .RDY_soc_sb_sbread_mv_csr_mimpid(),
	    .soc_sb_sbread_mv_csr_mhartid(soc_soc_sb_sbread_mv_csr_mhartid),
	    .RDY_soc_sb_sbread_mv_csr_mhartid(),
	    .soc_sb_sbread_mv_csr_mip(soc_soc_sb_sbread_mv_csr_mip),
	    .RDY_soc_sb_sbread_mv_csr_mip(),
	    .soc_sb_sbread_mv_csr_sip(soc_soc_sb_sbread_mv_csr_sip),
	    .RDY_soc_sb_sbread_mv_csr_sip(),
	    .soc_sb_sbread_mv_csr_mie(soc_soc_sb_sbread_mv_csr_mie),
	    .RDY_soc_sb_sbread_mv_csr_mie(),
	    .soc_sb_sbread_mv_csr_sie(soc_soc_sb_sbread_mv_csr_sie),
	    .RDY_soc_sb_sbread_mv_csr_sie(),
	    .soc_sb_sbread_mv_csr_mscratch(soc_soc_sb_sbread_mv_csr_mscratch),
	    .RDY_soc_sb_sbread_mv_csr_mscratch(),
	    .soc_sb_sbread_mv_csr_sscratch(soc_soc_sb_sbread_mv_csr_sscratch),
	    .RDY_soc_sb_sbread_mv_csr_sscratch(),
	    .soc_sb_sbread_mv_csr_sepc(soc_soc_sb_sbread_mv_csr_sepc),
	    .RDY_soc_sb_sbread_mv_csr_sepc(),
	    .soc_sb_sbread_mv_csr_stval(soc_soc_sb_sbread_mv_csr_stval),
	    .RDY_soc_sb_sbread_mv_csr_stval(),
	    .soc_sb_sbread_mv_csr_scause(soc_soc_sb_sbread_mv_csr_scause),
	    .RDY_soc_sb_sbread_mv_csr_scause(),
	    .soc_sb_sbread_mv_csr_mepc(soc_soc_sb_sbread_mv_csr_mepc),
	    .RDY_soc_sb_sbread_mv_csr_mepc(),
	    .soc_sb_sbread_mv_csr_mtval(soc_soc_sb_sbread_mv_csr_mtval),
	    .RDY_soc_sb_sbread_mv_csr_mtval(),
	    .soc_sb_sbread_mv_csr_mcause(soc_soc_sb_sbread_mv_csr_mcause),
	    .RDY_soc_sb_sbread_mv_csr_mcause(),
	    .soc_sb_sbread_mv_csr_mcycle(soc_soc_sb_sbread_mv_csr_mcycle),
	    .RDY_soc_sb_sbread_mv_csr_mcycle(),
	    .soc_sb_sbread_mv_csr_minstret(soc_soc_sb_sbread_mv_csr_minstret),
	    .RDY_soc_sb_sbread_mv_csr_minstret(),
	    .soc_sb_sbread_mv_csr_fcsr(soc_soc_sb_sbread_mv_csr_fcsr),
	    .RDY_soc_sb_sbread_mv_csr_fcsr(),
	    .soc_sb_sbread_mv_csr_time(soc_soc_sb_sbread_mv_csr_time),
	    .RDY_soc_sb_sbread_mv_csr_time(),
	    .soc_sb_sbread_mv_csr_mideleg(soc_soc_sb_sbread_mv_csr_mideleg),
	    .RDY_soc_sb_sbread_mv_csr_mideleg(),
	    .soc_sb_sbread_mv_csr_medeleg(soc_soc_sb_sbread_mv_csr_medeleg),
	    .RDY_soc_sb_sbread_mv_csr_medeleg(),
	    .soc_sb_sbread_mv_csr_pmpcfg0(soc_soc_sb_sbread_mv_csr_pmpcfg0),
	    .RDY_soc_sb_sbread_mv_csr_pmpcfg0(),
	    .soc_sb_sbread_mv_csr_pmpaddr0(soc_soc_sb_sbread_mv_csr_pmpaddr0),
	    .RDY_soc_sb_sbread_mv_csr_pmpaddr0(),
	    .soc_sb_sbread_mv_csr_pmpaddr1(soc_soc_sb_sbread_mv_csr_pmpaddr1),
	    .RDY_soc_sb_sbread_mv_csr_pmpaddr1(),
	    .soc_sb_sbread_mv_csr_pmpaddr2(soc_soc_sb_sbread_mv_csr_pmpaddr2),
	    .RDY_soc_sb_sbread_mv_csr_pmpaddr2(),
	    .soc_sb_sbread_mv_csr_pmpaddr3(soc_soc_sb_sbread_mv_csr_pmpaddr3),
	    .RDY_soc_sb_sbread_mv_csr_pmpaddr3(),
	    .soc_sb_sbread_mv_csr_mcounteren(soc_soc_sb_sbread_mv_csr_mcounteren),
	    .RDY_soc_sb_sbread_mv_csr_mcounteren(),
	    .soc_sb_sbread_mv_csr_scounteren(soc_soc_sb_sbread_mv_csr_scounteren),
	    .RDY_soc_sb_sbread_mv_csr_scounteren(),
	    .soc_sb_sbread_mv_csr_menvcfg(soc_soc_sb_sbread_mv_csr_menvcfg),
	    .RDY_soc_sb_sbread_mv_csr_menvcfg(),
	    .soc_sb_sbread_mv_csr_senvcfg(soc_soc_sb_sbread_mv_csr_senvcfg),
	    .RDY_soc_sb_sbread_mv_csr_senvcfg(),
	    .soc_sb_sbread_mv_csr_satp(soc_soc_sb_sbread_mv_csr_satp),
	    .RDY_soc_sb_sbread_mv_csr_satp(),
	    .soc_sb_sbread_mv_csr_mcountinhibit(soc_soc_sb_sbread_mv_csr_mcountinhibit),
	    .RDY_soc_sb_sbread_mv_csr_mcountinhibit(),
	    .soc_sb_sbread_mv_csr_fflags(soc_soc_sb_sbread_mv_csr_fflags),
	    .RDY_soc_sb_sbread_mv_csr_fflags(),
	    .soc_sb_sbread_mv_csr_frm(soc_soc_sb_sbread_mv_csr_frm),
	    .RDY_soc_sb_sbread_mv_csr_frm(),
	    .soc_sb_sbread_mv_csr_customcontrol(soc_soc_sb_sbread_mv_csr_customcontrol),
	    .RDY_soc_sb_sbread_mv_csr_customcontrol(),
	    .soc_sb_sbread_mv_csr_mhpmcounter3(soc_soc_sb_sbread_mv_csr_mhpmcounter3),
	    .RDY_soc_sb_sbread_mv_csr_mhpmcounter3(),
	    .soc_sb_sbread_mv_csr_mhpmcounter4(soc_soc_sb_sbread_mv_csr_mhpmcounter4),
	    .RDY_soc_sb_sbread_mv_csr_mhpmcounter4(),
	    .soc_sb_sbread_mv_csr_mhpmcounter5(soc_soc_sb_sbread_mv_csr_mhpmcounter5),
	    .RDY_soc_sb_sbread_mv_csr_mhpmcounter5(),
	    .soc_sb_sbread_mv_csr_mhpmcounter6(soc_soc_sb_sbread_mv_csr_mhpmcounter6),
	    .RDY_soc_sb_sbread_mv_csr_mhpmcounter6(),
	    .soc_sb_sbread_mv_csr_mhpmevent3(soc_soc_sb_sbread_mv_csr_mhpmevent3),
	    .RDY_soc_sb_sbread_mv_csr_mhpmevent3(),
	    .soc_sb_sbread_mv_csr_mhpmevent4(soc_soc_sb_sbread_mv_csr_mhpmevent4),
	    .RDY_soc_sb_sbread_mv_csr_mhpmevent4(),
	    .soc_sb_sbread_mv_csr_mhpmevent5(soc_soc_sb_sbread_mv_csr_mhpmevent5),
	    .RDY_soc_sb_sbread_mv_csr_mhpmevent5(),
	    .soc_sb_sbread_mv_csr_mhpmevent6(soc_soc_sb_sbread_mv_csr_mhpmevent6),
	    .RDY_soc_sb_sbread_mv_csr_mhpmevent6(),
	    .soc_sb_sbread_mv_csr_dcsr(soc_soc_sb_sbread_mv_csr_dcsr),
	    .RDY_soc_sb_sbread_mv_csr_dcsr(),
	    .soc_sb_sbread_mv_csr_dpc(soc_soc_sb_sbread_mv_csr_dpc),
	    .RDY_soc_sb_sbread_mv_csr_dpc(),
	    .soc_sb_sbread_mv_csr_dscratch0(soc_soc_sb_sbread_mv_csr_dscratch0),
	    .RDY_soc_sb_sbread_mv_csr_dscratch0(),
	    .soc_sb_sbread_mv_csr_dscratch1(soc_soc_sb_sbread_mv_csr_dscratch1),
	    .RDY_soc_sb_sbread_mv_csr_dscratch1(),
	    .soc_sb_commitlog(soc_soc_sb_commitlog),
	    .RDY_soc_sb_commitlog(),
	    .uart_io_SOUT(soc_uart_io_SOUT),
	    .uart_io_SOUT_EN(soc_uart_io_SOUT_EN),
	    .to_debug_master_AWREADY(soc_to_debug_master_AWREADY),
	    .to_debug_master_WREADY(soc_to_debug_master_WREADY),
	    .to_debug_master_BVALID(soc_to_debug_master_BVALID),
	    .to_debug_master_BRESP(soc_to_debug_master_BRESP),
	    .to_debug_master_BID(soc_to_debug_master_BID),
	    .to_debug_master_ARREADY(soc_to_debug_master_ARREADY),
	    .to_debug_master_RVALID(soc_to_debug_master_RVALID),
	    .to_debug_master_RRESP(soc_to_debug_master_RRESP),
	    .to_debug_master_RDATA(soc_to_debug_master_RDATA),
	    .to_debug_master_RLAST(soc_to_debug_master_RLAST),
	    .to_debug_master_RID(soc_to_debug_master_RID),
	    .to_debug_slave_AWVALID(soc_to_debug_slave_AWVALID),
	    .to_debug_slave_AWADDR(soc_to_debug_slave_AWADDR),
	    .to_debug_slave_AWPROT(soc_to_debug_slave_AWPROT),
	    .to_debug_slave_AWLEN(soc_to_debug_slave_AWLEN),
	    .to_debug_slave_AWSIZE(soc_to_debug_slave_AWSIZE),
	    .to_debug_slave_AWBURST(soc_to_debug_slave_AWBURST),
	    .to_debug_slave_AWID(soc_to_debug_slave_AWID),
	    .to_debug_slave_WVALID(soc_to_debug_slave_WVALID),
	    .to_debug_slave_WDATA(soc_to_debug_slave_WDATA),
	    .to_debug_slave_WSTRB(soc_to_debug_slave_WSTRB),
	    .to_debug_slave_WLAST(soc_to_debug_slave_WLAST),
	    .to_debug_slave_WID(soc_to_debug_slave_WID),
	    .to_debug_slave_BREADY(soc_to_debug_slave_BREADY),
	    .to_debug_slave_ARVALID(soc_to_debug_slave_ARVALID),
	    .to_debug_slave_ARADDR(soc_to_debug_slave_ARADDR),
	    .to_debug_slave_ARPROT(soc_to_debug_slave_ARPROT),
	    .to_debug_slave_ARLEN(soc_to_debug_slave_ARLEN),
	    .to_debug_slave_ARSIZE(soc_to_debug_slave_ARSIZE),
	    .to_debug_slave_ARBURST(soc_to_debug_slave_ARBURST),
	    .to_debug_slave_ARID(soc_to_debug_slave_ARID),
	    .to_debug_slave_RREADY(soc_to_debug_slave_RREADY),
	    .RDY_ma_hart_interrupts(),
	    .mv_harts_have_reset(soc_mv_harts_have_reset),
	    .RDY_mv_harts_have_reset(),
	    .mv_core_debugenable(soc_mv_core_debugenable),
	    .RDY_mv_core_debugenable());

  // submodule sync_request_to_dm
  SyncFIFO1 #(.dataWidth(32'd41)) sync_request_to_dm(.sCLK(CLK_tck_clk),
						     .dCLK(CLK),
						     .sRST(RST_N_trst),
						     .sD_IN(sync_request_to_dm_sD_IN),
						     .sENQ(sync_request_to_dm_sENQ),
						     .dDEQ(sync_request_to_dm_dDEQ),
						     .sFULL_N(sync_request_to_dm_sFULL_N),
						     .dEMPTY_N(sync_request_to_dm_dEMPTY_N),
						     .dD_OUT(sync_request_to_dm_dD_OUT));

  // submodule sync_response_from_dm
  SyncFIFO1 #(.dataWidth(32'd34)) sync_response_from_dm(.sCLK(CLK),
							.dCLK(CLK_tck_clk),
							.sRST(RST_N),
							.sD_IN(sync_response_from_dm_sD_IN),
							.sENQ(sync_response_from_dm_sENQ),
							.dDEQ(sync_response_from_dm_dDEQ),
							.sFULL_N(sync_response_from_dm_sFULL_N),
							.dEMPTY_N(sync_response_from_dm_dEMPTY_N),
							.dD_OUT(sync_response_from_dm_dD_OUT));

  // submodule system_reset
  ResetEither system_reset(.A_RST(ndm_reset_OUT_RST),
			   .B_RST(RST_N),
			   .RST_OUT(system_reset_RST_OUT));

  // rule RL_rl_wr_addr_channel
  assign CAN_FIRE_RL_rl_wr_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel = 1'd1 ;

  // rule RL_rl_wr_data_channel
  assign CAN_FIRE_RL_rl_wr_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel = 1'd1 ;

  // rule RL_rl_wr_response_channel
  assign CAN_FIRE_RL_rl_wr_response_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel = 1'd1 ;

  // rule RL_rl_rd_addr_channel
  assign CAN_FIRE_RL_rl_rd_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel = 1'd1 ;

  // rule RL_rl_rd_data_channel
  assign CAN_FIRE_RL_rl_rd_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel = 1'd1 ;

  // rule RL_rl_wr_addr_channel_1
  assign CAN_FIRE_RL_rl_wr_addr_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_1 = 1'd1 ;

  // rule RL_rl_wr_data_channel_1
  assign CAN_FIRE_RL_rl_wr_data_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_1 = 1'd1 ;

  // rule RL_rl_wr_response_channel_1
  assign CAN_FIRE_RL_rl_wr_response_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_1 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_1
  assign CAN_FIRE_RL_rl_rd_addr_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_1 = 1'd1 ;

  // rule RL_rl_rd_data_channel_1
  assign CAN_FIRE_RL_rl_rd_data_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_1 = 1'd1 ;

  // rule RL_rl_generate_hartreset
  assign CAN_FIRE_RL_rl_generate_hartreset =
	     debug_module_hartside_mv_hartreset ;
  assign WILL_FIRE_RL_rl_generate_hartreset =
	     debug_module_hartside_mv_hartreset ;

  // rule RL_rl_connect_debug_interrupts
  assign CAN_FIRE_RL_rl_connect_debug_interrupts = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_debug_interrupts = 1'd1 ;

  // rule RL_rl_connect_debug_haveresets
  assign CAN_FIRE_RL_rl_connect_debug_haveresets = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_debug_haveresets = 1'd1 ;

  // rule RL_rl_connect_debug_enables
  assign CAN_FIRE_RL_rl_connect_debug_enables = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_debug_enables = 1'd1 ;

  // rule RL_rl_generate_ndmreset
  assign CAN_FIRE_RL_rl_generate_ndmreset = debug_module_mv_ndm_reset ;
  assign WILL_FIRE_RL_rl_generate_ndmreset = debug_module_mv_ndm_reset ;

  // rule RL_assign_jtag_inputs
  assign CAN_FIRE_RL_assign_jtag_inputs = 1'd1 ;
  assign WILL_FIRE_RL_assign_jtag_inputs = 1'd1 ;

  // rule RL_assign_jtag_output
  assign CAN_FIRE_RL_assign_jtag_output = 1'd1 ;
  assign WILL_FIRE_RL_assign_jtag_output = 1'd1 ;

  // rule RL_connect_tap_request_to_syncfifo
  assign CAN_FIRE_RL_connect_tap_request_to_syncfifo =
	     sync_request_to_dm_sFULL_N && jtag_tap_RDY_request_to_dm ;
  assign WILL_FIRE_RL_connect_tap_request_to_syncfifo =
	     CAN_FIRE_RL_connect_tap_request_to_syncfifo ;

  // rule RL_read_synced_request_to_dm
  assign CAN_FIRE_RL_read_synced_request_to_dm =
	     sync_request_to_dm_dEMPTY_N &&
	     debug_module_RDY_dtm_access_putCommand_put ;
  assign WILL_FIRE_RL_read_synced_request_to_dm =
	     CAN_FIRE_RL_read_synced_request_to_dm ;

  // rule RL_connect_debug_response_to_syncfifo
  assign CAN_FIRE_RL_connect_debug_response_to_syncfifo =
	     sync_response_from_dm_sFULL_N &&
	     debug_module_RDY_dtm_access_getResponse_get ;
  assign WILL_FIRE_RL_connect_debug_response_to_syncfifo =
	     CAN_FIRE_RL_connect_debug_response_to_syncfifo ;

  // rule RL_read_synced_response_from_dm
  assign CAN_FIRE_RL_read_synced_response_from_dm =
	     sync_response_from_dm_dEMPTY_N && jtag_tap_RDY_response_from_dm ;
  assign WILL_FIRE_RL_read_synced_response_from_dm =
	     CAN_FIRE_RL_read_synced_response_from_dm ;

  // register tdi
  assign tdi_D_IN = wire_tdi_tdi_in ;
  assign tdi_EN = 1'd1 ;

  // register tdo
  assign tdo_D_IN = jtag_tap_tdo ;
  assign tdo_EN = 1'd1 ;

  // register tms
  assign tms_D_IN = wire_tms_tms_in ;
  assign tms_EN = 1'd1 ;

  // submodule debug_module
  assign debug_module_debug_master_ARREADY = soc_to_debug_master_ARREADY ;
  assign debug_module_debug_master_AWREADY = soc_to_debug_master_AWREADY ;
  assign debug_module_debug_master_BID = soc_to_debug_master_BID ;
  assign debug_module_debug_master_BRESP = soc_to_debug_master_BRESP ;
  assign debug_module_debug_master_BVALID = soc_to_debug_master_BVALID ;
  assign debug_module_debug_master_RDATA = soc_to_debug_master_RDATA ;
  assign debug_module_debug_master_RID = soc_to_debug_master_RID ;
  assign debug_module_debug_master_RLAST = soc_to_debug_master_RLAST ;
  assign debug_module_debug_master_RRESP = soc_to_debug_master_RRESP ;
  assign debug_module_debug_master_RVALID = soc_to_debug_master_RVALID ;
  assign debug_module_debug_master_WREADY = soc_to_debug_master_WREADY ;
  assign debug_module_debug_slave_ARADDR = soc_to_debug_slave_ARADDR ;
  assign debug_module_debug_slave_ARBURST = soc_to_debug_slave_ARBURST ;
  assign debug_module_debug_slave_ARID = soc_to_debug_slave_ARID ;
  assign debug_module_debug_slave_ARLEN = soc_to_debug_slave_ARLEN ;
  assign debug_module_debug_slave_ARPROT = soc_to_debug_slave_ARPROT ;
  assign debug_module_debug_slave_ARSIZE = soc_to_debug_slave_ARSIZE ;
  assign debug_module_debug_slave_ARVALID = soc_to_debug_slave_ARVALID ;
  assign debug_module_debug_slave_AWADDR = soc_to_debug_slave_AWADDR ;
  assign debug_module_debug_slave_AWBURST = soc_to_debug_slave_AWBURST ;
  assign debug_module_debug_slave_AWID = soc_to_debug_slave_AWID ;
  assign debug_module_debug_slave_AWLEN = soc_to_debug_slave_AWLEN ;
  assign debug_module_debug_slave_AWPROT = soc_to_debug_slave_AWPROT ;
  assign debug_module_debug_slave_AWSIZE = soc_to_debug_slave_AWSIZE ;
  assign debug_module_debug_slave_AWVALID = soc_to_debug_slave_AWVALID ;
  assign debug_module_debug_slave_BREADY = soc_to_debug_slave_BREADY ;
  assign debug_module_debug_slave_RREADY = soc_to_debug_slave_RREADY ;
  assign debug_module_debug_slave_WDATA = soc_to_debug_slave_WDATA ;
  assign debug_module_debug_slave_WID = soc_to_debug_slave_WID ;
  assign debug_module_debug_slave_WLAST = soc_to_debug_slave_WLAST ;
  assign debug_module_debug_slave_WSTRB = soc_to_debug_slave_WSTRB ;
  assign debug_module_debug_slave_WVALID = soc_to_debug_slave_WVALID ;
  assign debug_module_dtm_access_putCommand_put = sync_request_to_dm_dD_OUT ;
  assign debug_module_hartside_ma_debugenable__debugenable =
	     soc_mv_core_debugenable ;
  assign debug_module_hartside_ma_havereset_resetack =
	     soc_mv_harts_have_reset ;
  assign debug_module_EN_dtm_access_putCommand_put =
	     CAN_FIRE_RL_read_synced_request_to_dm ;
  assign debug_module_EN_dtm_access_getResponse_get =
	     CAN_FIRE_RL_connect_debug_response_to_syncfifo ;
  assign debug_module_EN_hartside_ma_havereset = 1'd1 ;
  assign debug_module_EN_hartside_ma_debugenable = 1'd1 ;

  // submodule hart_reset_0
  assign hart_reset_0_ASSERT_IN = debug_module_hartside_mv_hartreset ;

  // submodule jtag_tap
  assign jtag_tap_bs_chain_i_bs_chain = 1'd0 ;
  assign jtag_tap_debug_tdi_i_debug_tdi = 1'd0 ;
  assign jtag_tap_response_from_dm_responsedm = sync_response_from_dm_dD_OUT ;
  assign jtag_tap_tdi_i_tdi = tdi ;
  assign jtag_tap_tms_i_tms = tms ;
  assign jtag_tap_EN_debug_tdi_i = 1'd1 ;
  assign jtag_tap_EN_bs_chain_i = 1'd1 ;
  assign jtag_tap_EN_response_from_dm =
	     CAN_FIRE_RL_read_synced_response_from_dm ;
  assign jtag_tap_EN_request_to_dm =
	     CAN_FIRE_RL_connect_tap_request_to_syncfifo ;

  // submodule ndm_reset
  assign ndm_reset_ASSERT_IN = debug_module_mv_ndm_reset ;

  // submodule soc
  assign soc_ma_hart_interrupts_i = debug_module_hartside_mv_harthaltreq ;
  assign soc_to_debug_master_ARADDR = debug_module_debug_master_ARADDR ;
  assign soc_to_debug_master_ARBURST = debug_module_debug_master_ARBURST ;
  assign soc_to_debug_master_ARID = debug_module_debug_master_ARID ;
  assign soc_to_debug_master_ARLEN = debug_module_debug_master_ARLEN ;
  assign soc_to_debug_master_ARPROT = debug_module_debug_master_ARPROT ;
  assign soc_to_debug_master_ARSIZE = debug_module_debug_master_ARSIZE ;
  assign soc_to_debug_master_ARVALID = debug_module_debug_master_ARVALID ;
  assign soc_to_debug_master_AWADDR = debug_module_debug_master_AWADDR ;
  assign soc_to_debug_master_AWBURST = debug_module_debug_master_AWBURST ;
  assign soc_to_debug_master_AWID = debug_module_debug_master_AWID ;
  assign soc_to_debug_master_AWLEN = debug_module_debug_master_AWLEN ;
  assign soc_to_debug_master_AWPROT = debug_module_debug_master_AWPROT ;
  assign soc_to_debug_master_AWSIZE = debug_module_debug_master_AWSIZE ;
  assign soc_to_debug_master_AWVALID = debug_module_debug_master_AWVALID ;
  assign soc_to_debug_master_BREADY = debug_module_debug_master_BREADY ;
  assign soc_to_debug_master_RREADY = debug_module_debug_master_RREADY ;
  assign soc_to_debug_master_WDATA = debug_module_debug_master_WDATA ;
  assign soc_to_debug_master_WID = debug_module_debug_master_WID ;
  assign soc_to_debug_master_WLAST = debug_module_debug_master_WLAST ;
  assign soc_to_debug_master_WSTRB = debug_module_debug_master_WSTRB ;
  assign soc_to_debug_master_WVALID = debug_module_debug_master_WVALID ;
  assign soc_to_debug_slave_ARREADY = debug_module_debug_slave_ARREADY ;
  assign soc_to_debug_slave_AWREADY = debug_module_debug_slave_AWREADY ;
  assign soc_to_debug_slave_BID = debug_module_debug_slave_BID ;
  assign soc_to_debug_slave_BRESP = debug_module_debug_slave_BRESP ;
  assign soc_to_debug_slave_BVALID = debug_module_debug_slave_BVALID ;
  assign soc_to_debug_slave_RDATA = debug_module_debug_slave_RDATA ;
  assign soc_to_debug_slave_RID = debug_module_debug_slave_RID ;
  assign soc_to_debug_slave_RLAST = debug_module_debug_slave_RLAST ;
  assign soc_to_debug_slave_RRESP = debug_module_debug_slave_RRESP ;
  assign soc_to_debug_slave_RVALID = debug_module_debug_slave_RVALID ;
  assign soc_to_debug_slave_WREADY = debug_module_debug_slave_WREADY ;
  assign soc_uart_io_SIN = uart_io_SIN ;
  assign soc_EN_ma_hart_interrupts = 1'd1 ;

  // submodule sync_request_to_dm
  assign sync_request_to_dm_sD_IN = { 1'd0, jtag_tap_request_to_dm } ;
  assign sync_request_to_dm_sENQ =
	     CAN_FIRE_RL_connect_tap_request_to_syncfifo ;
  assign sync_request_to_dm_dDEQ = CAN_FIRE_RL_read_synced_request_to_dm ;

  // submodule sync_response_from_dm
  assign sync_response_from_dm_sD_IN =
	     debug_module_dtm_access_getResponse_get ;
  assign sync_response_from_dm_sENQ =
	     CAN_FIRE_RL_connect_debug_response_to_syncfifo ;
  assign sync_response_from_dm_dDEQ =
	     CAN_FIRE_RL_read_synced_response_from_dm ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        tdi <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tms <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (tdi_EN) tdi <= `BSV_ASSIGNMENT_DELAY tdi_D_IN;
	if (tms_EN) tms <= `BSV_ASSIGNMENT_DELAY tms_D_IN;
      end
  end

  always@(posedge CLK_tck_clk)
  begin
    if (RST_N_trst == `BSV_RESET_VALUE)
      begin
        tdo <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (tdo_EN) tdo <= `BSV_ASSIGNMENT_DELAY tdo_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    tdi = 1'h0;
    tdo = 1'h0;
    tms = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkDebugSoc

