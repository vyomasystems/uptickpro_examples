//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
//
// On Tue Jul 29 14:28:13 +04 2025
//
//
// Ports:
// Name                         I/O  size props
// debug_mv_csr_dcsr              O    64
// RDY_debug_mv_csr_dcsr          O     1 const
// RDY_debug_ma_debug_interrupt   O     1 const
// debug_mv_debug_mode            O     1 reg
// RDY_debug_mv_debug_mode        O     1 const
// debug_mv_core_debugenable      O     1 const
// RDY_debug_mv_core_debugenable  O     1 const
// debug_mv_stop_timer            O     1
// RDY_debug_mv_stop_timer        O     1 const
// debug_mv_stop_count            O     1
// RDY_debug_mv_stop_count        O     1 const
// RDY_perf_ma_events             O     1 const
// perf_mv_count_exceptions       O     1
// RDY_perf_mv_count_exceptions   O     1 const
// perf_mv_count_interrupts       O     1
// RDY_perf_mv_count_interrupts   O     1 const
// perf_mv_count_csrops           O     1
// RDY_perf_mv_count_csrops       O     1 const
// perf_mv_count_microtraps       O     1
// RDY_perf_mv_count_microtraps   O     1 const
// rx_rx_systemout_from_stage4_deq_ena  O     1
// rx_rx_trapout_from_stage4_deq_ena  O     1
// rx_rx_baseout_from_stage4_deq_ena  O     1
// rx_rx_memio_from_stage4_deq_ena  O     1
// rx_rx_fuid_from_stage4_deq_ena  O     1
// rx_rx_commitlog_deq_ena        O     1
// RDY_interrupts_ma_clint_msip   O     1 const
// RDY_interrupts_ma_clint_mtip   O     1 const
// RDY_interrupts_ma_clint_mtime  O     1 const
// RDY_interrupts_ma_plic_meip    O     1 const
// RDY_interrupts_ma_plic_seip    O     1 const
// common_mv_commit_rd            O    75
// RDY_common_mv_commit_rd        O     1
// common_mv_flush                O    67
// RDY_common_mv_flush            O     1 const
// common_mv_commit_log           O   310 reg
// RDY_common_mv_commit_log       O     1 const
// cache_mv_initiate_store_fst    O     1
// RDY_cache_mv_initiate_store_fst  O     1
// cache_mv_initiate_store_snd    O     1
// RDY_cache_mv_initiate_store_snd  O     1
// cache_mv_initiate_ioop         O     1 reg
// RDY_cache_mv_initiate_ioop     O     1
// RDY_cache_ma_io_response       O     1 const
// csrs_mv_csr_misa_c             O     1
// RDY_csrs_mv_csr_misa_c         O     1 const
// csrs_mv_cacheenable            O     6 const
// RDY_csrs_mv_cacheenable        O     1 const
// csrs_mv_curr_priv              O     2 reg
// RDY_csrs_mv_curr_priv          O     1 const
// csrs_mv_csr_mstatus            O    64
// RDY_csrs_mv_csr_mstatus        O     1 const
// csrs_mv_csrs_to_decode         O   242
// RDY_csrs_mv_csrs_to_decode     O     1 const
// csrs_mv_resume_wfi             O     1
// RDY_csrs_mv_resume_wfi         O     1 const
// csrs_mv_csr_satp               O    64 reg
// RDY_csrs_mv_csr_satp           O     1 const
// csrs_mv_pmp_cfg                O    32 reg
// RDY_csrs_mv_pmp_cfg            O     1 const
// csrs_mv_pmp_addr               O   128
// RDY_csrs_mv_pmp_addr           O     1 const
// csrs_sbread_mv_csr_misa        O    64
// RDY_csrs_sbread_mv_csr_misa    O     1 const
// csrs_sbread_mv_csr_mvendorid   O    32 const
// RDY_csrs_sbread_mv_csr_mvendorid  O     1 const
// csrs_sbread_mv_csr_stvec       O    64 reg
// RDY_csrs_sbread_mv_csr_stvec   O     1 const
// csrs_sbread_mv_csr_mtvec       O    64 reg
// RDY_csrs_sbread_mv_csr_mtvec   O     1 const
// csrs_sbread_mv_csr_mstatus     O    64
// RDY_csrs_sbread_mv_csr_mstatus  O     1 const
// csrs_sbread_mv_csr_marchid     O    64 const
// RDY_csrs_sbread_mv_csr_marchid  O     1 const
// csrs_sbread_mv_csr_mimpid      O    64 const
// RDY_csrs_sbread_mv_csr_mimpid  O     1 const
// csrs_sbread_mv_csr_mhartid     O    64 const
// RDY_csrs_sbread_mv_csr_mhartid  O     1 const
// csrs_sbread_mv_csr_mip         O    64
// RDY_csrs_sbread_mv_csr_mip     O     1 const
// csrs_sbread_mv_csr_sip         O    64
// RDY_csrs_sbread_mv_csr_sip     O     1 const
// csrs_sbread_mv_csr_mie         O    64
// RDY_csrs_sbread_mv_csr_mie     O     1 const
// csrs_sbread_mv_csr_sie         O    64
// RDY_csrs_sbread_mv_csr_sie     O     1 const
// csrs_sbread_mv_csr_mscratch    O    64 reg
// RDY_csrs_sbread_mv_csr_mscratch  O     1 const
// csrs_sbread_mv_csr_sscratch    O    64 reg
// RDY_csrs_sbread_mv_csr_sscratch  O     1 const
// csrs_sbread_mv_csr_sepc        O    64 reg
// RDY_csrs_sbread_mv_csr_sepc    O     1 const
// csrs_sbread_mv_csr_stval       O    64 reg
// RDY_csrs_sbread_mv_csr_stval   O     1 const
// csrs_sbread_mv_csr_scause      O    64
// RDY_csrs_sbread_mv_csr_scause  O     1 const
// csrs_sbread_mv_csr_mepc        O    64 reg
// RDY_csrs_sbread_mv_csr_mepc    O     1 const
// csrs_sbread_mv_csr_mtval       O    64 reg
// RDY_csrs_sbread_mv_csr_mtval   O     1 const
// csrs_sbread_mv_csr_mcause      O    64
// RDY_csrs_sbread_mv_csr_mcause  O     1 const
// csrs_sbread_mv_csr_mcycle      O    64
// RDY_csrs_sbread_mv_csr_mcycle  O     1 const
// csrs_sbread_mv_csr_minstret    O    64
// RDY_csrs_sbread_mv_csr_minstret  O     1 const
// csrs_sbread_mv_csr_fcsr        O    64
// RDY_csrs_sbread_mv_csr_fcsr    O     1 const
// csrs_sbread_mv_csr_time        O    64 reg
// RDY_csrs_sbread_mv_csr_time    O     1 const
// csrs_sbread_mv_csr_mideleg     O    64 reg
// RDY_csrs_sbread_mv_csr_mideleg  O     1 const
// csrs_sbread_mv_csr_medeleg     O    64 reg
// RDY_csrs_sbread_mv_csr_medeleg  O     1 const
// csrs_sbread_mv_csr_pmpcfg0     O    64
// RDY_csrs_sbread_mv_csr_pmpcfg0  O     1 const
// csrs_sbread_mv_csr_pmpaddr0    O    30
// RDY_csrs_sbread_mv_csr_pmpaddr0  O     1 const
// csrs_sbread_mv_csr_pmpaddr1    O    30
// RDY_csrs_sbread_mv_csr_pmpaddr1  O     1 const
// csrs_sbread_mv_csr_pmpaddr2    O    30
// RDY_csrs_sbread_mv_csr_pmpaddr2  O     1 const
// csrs_sbread_mv_csr_pmpaddr3    O    30
// RDY_csrs_sbread_mv_csr_pmpaddr3  O     1 const
// csrs_sbread_mv_csr_mcounteren  O    32 reg
// RDY_csrs_sbread_mv_csr_mcounteren  O     1 const
// csrs_sbread_mv_csr_scounteren  O    32 reg
// RDY_csrs_sbread_mv_csr_scounteren  O     1 const
// csrs_sbread_mv_csr_menvcfg     O    64
// RDY_csrs_sbread_mv_csr_menvcfg  O     1 const
// csrs_sbread_mv_csr_senvcfg     O    64
// RDY_csrs_sbread_mv_csr_senvcfg  O     1 const
// csrs_sbread_mv_csr_satp        O    64 reg
// RDY_csrs_sbread_mv_csr_satp    O     1 const
// csrs_sbread_mv_csr_mcountinhibit  O    32 const
// RDY_csrs_sbread_mv_csr_mcountinhibit  O     1 const
// csrs_sbread_mv_csr_fflags      O     5 reg
// RDY_csrs_sbread_mv_csr_fflags  O     1 const
// csrs_sbread_mv_csr_frm         O     3 reg
// RDY_csrs_sbread_mv_csr_frm     O     1 const
// csrs_sbread_mv_csr_customcontrol  O    64 const
// RDY_csrs_sbread_mv_csr_customcontrol  O     1 const
// csrs_sbread_mv_csr_mhpmcounter3  O    64 reg
// RDY_csrs_sbread_mv_csr_mhpmcounter3  O     1 const
// csrs_sbread_mv_csr_mhpmcounter4  O    64 reg
// RDY_csrs_sbread_mv_csr_mhpmcounter4  O     1 const
// csrs_sbread_mv_csr_mhpmcounter5  O    64 reg
// RDY_csrs_sbread_mv_csr_mhpmcounter5  O     1 const
// csrs_sbread_mv_csr_mhpmcounter6  O    64 reg
// RDY_csrs_sbread_mv_csr_mhpmcounter6  O     1 const
// csrs_sbread_mv_csr_mhpmevent3  O    64 reg
// RDY_csrs_sbread_mv_csr_mhpmevent3  O     1 const
// csrs_sbread_mv_csr_mhpmevent4  O    64 reg
// RDY_csrs_sbread_mv_csr_mhpmevent4  O     1 const
// csrs_sbread_mv_csr_mhpmevent5  O    64 reg
// RDY_csrs_sbread_mv_csr_mhpmevent5  O     1 const
// csrs_sbread_mv_csr_mhpmevent6  O    64 reg
// RDY_csrs_sbread_mv_csr_mhpmevent6  O     1 const
// csrs_sbread_mv_csr_dcsr        O    64
// RDY_csrs_sbread_mv_csr_dcsr    O     1 const
// csrs_sbread_mv_csr_dpc         O    64 reg
// RDY_csrs_sbread_mv_csr_dpc     O     1 const
// csrs_sbread_mv_csr_dscratch0   O    64 reg
// RDY_csrs_sbread_mv_csr_dscratch0  O     1 const
// csrs_sbread_mv_csr_dscratch1   O    64 reg
// RDY_csrs_sbread_mv_csr_dscratch1  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// debug_ma_debug_interrupt__int  I     1
// perf_ma_events_e               I    32
// rx_rx_systemout_from_stage4_notEmpty_b  I     1 unused
// rx_rx_systemout_from_stage4_first_deq_rdy_b  I     1
// rx_rx_systemout_from_stage4_first_x  I    81
// rx_rx_trapout_from_stage4_notEmpty_b  I     1 unused
// rx_rx_trapout_from_stage4_first_deq_rdy_b  I     1
// rx_rx_trapout_from_stage4_first_x  I    72
// rx_rx_baseout_from_stage4_notEmpty_b  I     1 unused
// rx_rx_baseout_from_stage4_first_deq_rdy_b  I     1
// rx_rx_baseout_from_stage4_first_x  I    80
// rx_rx_memio_from_stage4_notEmpty_b  I     1 unused
// rx_rx_memio_from_stage4_first_deq_rdy_b  I     1
// rx_rx_memio_from_stage4_first_x  I    70
// rx_rx_fuid_from_stage4_notEmpty_b  I     1 unused
// rx_rx_fuid_from_stage4_first_deq_rdy_b  I     1
// rx_rx_fuid_from_stage4_first_x  I    77
// rx_rx_commitlog_notEmpty_b     I     1 unused
// rx_rx_commitlog_first_deq_rdy_b  I     1
// rx_rx_commitlog_first_x        I   309
// interrupts_ma_clint_msip_intrpt  I     1
// interrupts_ma_clint_mtip_intrpt  I     1
// interrupts_ma_clint_mtime_mtime  I    64 reg
// interrupts_ma_plic_meip_intrpt  I     1
// interrupts_ma_plic_seip_intrpt  I     1
// cache_ma_io_response_r         I   133
// EN_debug_ma_debug_interrupt    I     1
// EN_perf_ma_events              I     1
// EN_interrupts_ma_clint_msip    I     1
// EN_interrupts_ma_clint_mtip    I     1
// EN_interrupts_ma_clint_mtime   I     1
// EN_interrupts_ma_plic_meip     I     1
// EN_interrupts_ma_plic_seip     I     1
// EN_cache_ma_io_response        I     1
//
// Combinational paths from inputs to outputs:
//   (debug_ma_debug_interrupt__int,
//    rx_rx_systemout_from_stage4_first_deq_rdy_b,
//    rx_rx_systemout_from_stage4_first_x,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    interrupts_ma_clint_msip_intrpt,
//    interrupts_ma_clint_mtip_intrpt,
//    interrupts_ma_plic_meip_intrpt,
//    interrupts_ma_plic_seip_intrpt,
//    EN_debug_ma_debug_interrupt,
//    EN_interrupts_ma_clint_msip,
//    EN_interrupts_ma_clint_mtip,
//    EN_interrupts_ma_plic_meip,
//    EN_interrupts_ma_plic_seip) -> perf_mv_count_csrops
//   (debug_ma_debug_interrupt__int,
//    rx_rx_systemout_from_stage4_first_deq_rdy_b,
//    rx_rx_systemout_from_stage4_first_x,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    interrupts_ma_clint_msip_intrpt,
//    interrupts_ma_clint_mtip_intrpt,
//    interrupts_ma_plic_meip_intrpt,
//    interrupts_ma_plic_seip_intrpt,
//    EN_debug_ma_debug_interrupt,
//    EN_interrupts_ma_clint_msip,
//    EN_interrupts_ma_clint_mtip,
//    EN_interrupts_ma_plic_meip,
//    EN_interrupts_ma_plic_seip) -> rx_rx_systemout_from_stage4_deq_ena
//   (debug_ma_debug_interrupt__int,
//    rx_rx_systemout_from_stage4_first_deq_rdy_b,
//    rx_rx_systemout_from_stage4_first_x,
//    rx_rx_trapout_from_stage4_first_deq_rdy_b,
//    rx_rx_baseout_from_stage4_first_deq_rdy_b,
//    rx_rx_memio_from_stage4_first_deq_rdy_b,
//    rx_rx_memio_from_stage4_first_x,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    interrupts_ma_clint_msip_intrpt,
//    interrupts_ma_clint_mtip_intrpt,
//    interrupts_ma_plic_meip_intrpt,
//    interrupts_ma_plic_seip_intrpt,
//    cache_ma_io_response_r,
//    EN_debug_ma_debug_interrupt,
//    EN_interrupts_ma_clint_msip,
//    EN_interrupts_ma_clint_mtip,
//    EN_interrupts_ma_plic_meip,
//    EN_interrupts_ma_plic_seip,
//    EN_cache_ma_io_response) -> rx_rx_fuid_from_stage4_deq_ena
//   (debug_ma_debug_interrupt__int,
//    rx_rx_systemout_from_stage4_first_deq_rdy_b,
//    rx_rx_systemout_from_stage4_first_x,
//    rx_rx_trapout_from_stage4_first_deq_rdy_b,
//    rx_rx_baseout_from_stage4_first_deq_rdy_b,
//    rx_rx_memio_from_stage4_first_deq_rdy_b,
//    rx_rx_memio_from_stage4_first_x,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    interrupts_ma_clint_msip_intrpt,
//    interrupts_ma_clint_mtip_intrpt,
//    interrupts_ma_plic_meip_intrpt,
//    interrupts_ma_plic_seip_intrpt,
//    cache_ma_io_response_r,
//    EN_debug_ma_debug_interrupt,
//    EN_interrupts_ma_clint_msip,
//    EN_interrupts_ma_clint_mtip,
//    EN_interrupts_ma_plic_meip,
//    EN_interrupts_ma_plic_seip,
//    EN_cache_ma_io_response) -> rx_rx_commitlog_deq_ena
//   (debug_ma_debug_interrupt__int,
//    rx_rx_systemout_from_stage4_first_deq_rdy_b,
//    rx_rx_systemout_from_stage4_first_x,
//    rx_rx_trapout_from_stage4_first_deq_rdy_b,
//    rx_rx_baseout_from_stage4_first_deq_rdy_b,
//    rx_rx_baseout_from_stage4_first_x,
//    rx_rx_memio_from_stage4_first_deq_rdy_b,
//    rx_rx_memio_from_stage4_first_x,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    interrupts_ma_clint_msip_intrpt,
//    interrupts_ma_clint_mtip_intrpt,
//    interrupts_ma_plic_meip_intrpt,
//    interrupts_ma_plic_seip_intrpt,
//    cache_ma_io_response_r,
//    EN_debug_ma_debug_interrupt,
//    EN_interrupts_ma_clint_msip,
//    EN_interrupts_ma_clint_mtip,
//    EN_interrupts_ma_plic_meip,
//    EN_interrupts_ma_plic_seip,
//    EN_cache_ma_io_response) -> common_mv_commit_rd
//   (debug_ma_debug_interrupt__int,
//    rx_rx_systemout_from_stage4_first_deq_rdy_b,
//    rx_rx_systemout_from_stage4_first_x,
//    rx_rx_trapout_from_stage4_first_deq_rdy_b,
//    rx_rx_baseout_from_stage4_first_deq_rdy_b,
//    rx_rx_memio_from_stage4_first_deq_rdy_b,
//    rx_rx_memio_from_stage4_first_x,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    interrupts_ma_clint_msip_intrpt,
//    interrupts_ma_clint_mtip_intrpt,
//    interrupts_ma_plic_meip_intrpt,
//    interrupts_ma_plic_seip_intrpt,
//    cache_ma_io_response_r,
//    EN_debug_ma_debug_interrupt,
//    EN_interrupts_ma_clint_msip,
//    EN_interrupts_ma_clint_mtip,
//    EN_interrupts_ma_plic_meip,
//    EN_interrupts_ma_plic_seip,
//    EN_cache_ma_io_response) -> RDY_common_mv_commit_rd
//   (debug_ma_debug_interrupt__int,
//    interrupts_ma_clint_msip_intrpt,
//    interrupts_ma_clint_mtip_intrpt,
//    interrupts_ma_plic_meip_intrpt,
//    interrupts_ma_plic_seip_intrpt,
//    EN_debug_ma_debug_interrupt,
//    EN_interrupts_ma_clint_msip,
//    EN_interrupts_ma_clint_mtip,
//    EN_interrupts_ma_plic_meip,
//    EN_interrupts_ma_plic_seip) -> csrs_mv_csrs_to_decode
//   (debug_ma_debug_interrupt__int,
//    interrupts_ma_clint_msip_intrpt,
//    interrupts_ma_clint_mtip_intrpt,
//    interrupts_ma_plic_meip_intrpt,
//    interrupts_ma_plic_seip_intrpt,
//    EN_debug_ma_debug_interrupt,
//    EN_interrupts_ma_clint_msip,
//    EN_interrupts_ma_clint_mtip,
//    EN_interrupts_ma_plic_meip,
//    EN_interrupts_ma_plic_seip) -> csrs_mv_resume_wfi
//   (debug_ma_debug_interrupt__int,
//    interrupts_ma_clint_msip_intrpt,
//    interrupts_ma_clint_mtip_intrpt,
//    interrupts_ma_plic_meip_intrpt,
//    interrupts_ma_plic_seip_intrpt,
//    EN_debug_ma_debug_interrupt,
//    EN_interrupts_ma_clint_msip,
//    EN_interrupts_ma_clint_mtip,
//    EN_interrupts_ma_plic_meip,
//    EN_interrupts_ma_plic_seip) -> csrs_sbread_mv_csr_mip
//   (rx_rx_systemout_from_stage4_first_deq_rdy_b,
//    rx_rx_systemout_from_stage4_first_x,
//    rx_rx_trapout_from_stage4_first_deq_rdy_b,
//    rx_rx_trapout_from_stage4_first_x,
//    rx_rx_memio_from_stage4_first_deq_rdy_b,
//    rx_rx_memio_from_stage4_first_x,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    cache_ma_io_response_r,
//    EN_cache_ma_io_response) -> common_mv_flush
//   (rx_rx_systemout_from_stage4_first_deq_rdy_b,
//    rx_rx_systemout_from_stage4_first_x,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b) -> csrs_sbread_mv_csr_minstret
//   (rx_rx_trapout_from_stage4_first_deq_rdy_b,
//    rx_rx_trapout_from_stage4_first_x,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b) -> perf_mv_count_exceptions
//   (rx_rx_trapout_from_stage4_first_deq_rdy_b,
//    rx_rx_trapout_from_stage4_first_x,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b) -> perf_mv_count_interrupts
//   (rx_rx_trapout_from_stage4_first_deq_rdy_b,
//    rx_rx_trapout_from_stage4_first_x,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b) -> perf_mv_count_microtraps
//   (rx_rx_trapout_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b) -> rx_rx_trapout_from_stage4_deq_ena
//   (rx_rx_baseout_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b) -> rx_rx_baseout_from_stage4_deq_ena
//   (rx_rx_memio_from_stage4_first_deq_rdy_b,
//    rx_rx_memio_from_stage4_first_x,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b,
//    cache_ma_io_response_r,
//    EN_cache_ma_io_response) -> rx_rx_memio_from_stage4_deq_ena
//   (rx_rx_memio_from_stage4_first_deq_rdy_b,
//    rx_rx_memio_from_stage4_first_x,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b) -> cache_mv_initiate_store_fst
//   (rx_rx_memio_from_stage4_first_deq_rdy_b,
//    rx_rx_memio_from_stage4_first_x,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b) -> RDY_cache_mv_initiate_store_fst
//   (rx_rx_memio_from_stage4_first_deq_rdy_b,
//    rx_rx_memio_from_stage4_first_x,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b) -> cache_mv_initiate_store_snd
//   (rx_rx_memio_from_stage4_first_deq_rdy_b,
//    rx_rx_memio_from_stage4_first_x,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b) -> RDY_cache_mv_initiate_store_snd
//   (rx_rx_memio_from_stage4_first_deq_rdy_b,
//    rx_rx_memio_from_stage4_first_x,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b) -> cache_mv_initiate_ioop
//   (rx_rx_memio_from_stage4_first_deq_rdy_b,
//    rx_rx_memio_from_stage4_first_x,
//    rx_rx_fuid_from_stage4_first_deq_rdy_b,
//    rx_rx_fuid_from_stage4_first_x,
//    rx_rx_commitlog_first_deq_rdy_b) -> RDY_cache_mv_initiate_ioop
//   (interrupts_ma_plic_seip_intrpt,
//    EN_interrupts_ma_plic_seip) -> csrs_sbread_mv_csr_sip
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkstage5(CLK,
		RST_N,

		debug_mv_csr_dcsr,
		RDY_debug_mv_csr_dcsr,

		debug_ma_debug_interrupt__int,
		EN_debug_ma_debug_interrupt,
		RDY_debug_ma_debug_interrupt,

		debug_mv_debug_mode,
		RDY_debug_mv_debug_mode,

		debug_mv_core_debugenable,
		RDY_debug_mv_core_debugenable,

		debug_mv_stop_timer,
		RDY_debug_mv_stop_timer,

		debug_mv_stop_count,
		RDY_debug_mv_stop_count,

		perf_ma_events_e,
		EN_perf_ma_events,
		RDY_perf_ma_events,

		perf_mv_count_exceptions,
		RDY_perf_mv_count_exceptions,

		perf_mv_count_interrupts,
		RDY_perf_mv_count_interrupts,

		perf_mv_count_csrops,
		RDY_perf_mv_count_csrops,

		perf_mv_count_microtraps,
		RDY_perf_mv_count_microtraps,

		rx_rx_systemout_from_stage4_notEmpty_b,

		rx_rx_systemout_from_stage4_first_deq_rdy_b,

		rx_rx_systemout_from_stage4_first_x,

		rx_rx_systemout_from_stage4_deq_ena,

		rx_rx_trapout_from_stage4_notEmpty_b,

		rx_rx_trapout_from_stage4_first_deq_rdy_b,

		rx_rx_trapout_from_stage4_first_x,

		rx_rx_trapout_from_stage4_deq_ena,

		rx_rx_baseout_from_stage4_notEmpty_b,

		rx_rx_baseout_from_stage4_first_deq_rdy_b,

		rx_rx_baseout_from_stage4_first_x,

		rx_rx_baseout_from_stage4_deq_ena,

		rx_rx_memio_from_stage4_notEmpty_b,

		rx_rx_memio_from_stage4_first_deq_rdy_b,

		rx_rx_memio_from_stage4_first_x,

		rx_rx_memio_from_stage4_deq_ena,

		rx_rx_fuid_from_stage4_notEmpty_b,

		rx_rx_fuid_from_stage4_first_deq_rdy_b,

		rx_rx_fuid_from_stage4_first_x,

		rx_rx_fuid_from_stage4_deq_ena,

		rx_rx_commitlog_notEmpty_b,

		rx_rx_commitlog_first_deq_rdy_b,

		rx_rx_commitlog_first_x,

		rx_rx_commitlog_deq_ena,

		interrupts_ma_clint_msip_intrpt,
		EN_interrupts_ma_clint_msip,
		RDY_interrupts_ma_clint_msip,

		interrupts_ma_clint_mtip_intrpt,
		EN_interrupts_ma_clint_mtip,
		RDY_interrupts_ma_clint_mtip,

		interrupts_ma_clint_mtime_mtime,
		EN_interrupts_ma_clint_mtime,
		RDY_interrupts_ma_clint_mtime,

		interrupts_ma_plic_meip_intrpt,
		EN_interrupts_ma_plic_meip,
		RDY_interrupts_ma_plic_meip,

		interrupts_ma_plic_seip_intrpt,
		EN_interrupts_ma_plic_seip,
		RDY_interrupts_ma_plic_seip,

		common_mv_commit_rd,
		RDY_common_mv_commit_rd,

		common_mv_flush,
		RDY_common_mv_flush,

		common_mv_commit_log,
		RDY_common_mv_commit_log,

		cache_mv_initiate_store_fst,
		RDY_cache_mv_initiate_store_fst,

		cache_mv_initiate_store_snd,
		RDY_cache_mv_initiate_store_snd,

		cache_mv_initiate_ioop,
		RDY_cache_mv_initiate_ioop,

		cache_ma_io_response_r,
		EN_cache_ma_io_response,
		RDY_cache_ma_io_response,

		csrs_mv_csr_misa_c,
		RDY_csrs_mv_csr_misa_c,

		csrs_mv_cacheenable,
		RDY_csrs_mv_cacheenable,

		csrs_mv_curr_priv,
		RDY_csrs_mv_curr_priv,

		csrs_mv_csr_mstatus,
		RDY_csrs_mv_csr_mstatus,

		csrs_mv_csrs_to_decode,
		RDY_csrs_mv_csrs_to_decode,

		csrs_mv_resume_wfi,
		RDY_csrs_mv_resume_wfi,

		csrs_mv_csr_satp,
		RDY_csrs_mv_csr_satp,

		csrs_mv_pmp_cfg,
		RDY_csrs_mv_pmp_cfg,

		csrs_mv_pmp_addr,
		RDY_csrs_mv_pmp_addr,

		csrs_sbread_mv_csr_misa,
		RDY_csrs_sbread_mv_csr_misa,

		csrs_sbread_mv_csr_mvendorid,
		RDY_csrs_sbread_mv_csr_mvendorid,

		csrs_sbread_mv_csr_stvec,
		RDY_csrs_sbread_mv_csr_stvec,

		csrs_sbread_mv_csr_mtvec,
		RDY_csrs_sbread_mv_csr_mtvec,

		csrs_sbread_mv_csr_mstatus,
		RDY_csrs_sbread_mv_csr_mstatus,

		csrs_sbread_mv_csr_marchid,
		RDY_csrs_sbread_mv_csr_marchid,

		csrs_sbread_mv_csr_mimpid,
		RDY_csrs_sbread_mv_csr_mimpid,

		csrs_sbread_mv_csr_mhartid,
		RDY_csrs_sbread_mv_csr_mhartid,

		csrs_sbread_mv_csr_mip,
		RDY_csrs_sbread_mv_csr_mip,

		csrs_sbread_mv_csr_sip,
		RDY_csrs_sbread_mv_csr_sip,

		csrs_sbread_mv_csr_mie,
		RDY_csrs_sbread_mv_csr_mie,

		csrs_sbread_mv_csr_sie,
		RDY_csrs_sbread_mv_csr_sie,

		csrs_sbread_mv_csr_mscratch,
		RDY_csrs_sbread_mv_csr_mscratch,

		csrs_sbread_mv_csr_sscratch,
		RDY_csrs_sbread_mv_csr_sscratch,

		csrs_sbread_mv_csr_sepc,
		RDY_csrs_sbread_mv_csr_sepc,

		csrs_sbread_mv_csr_stval,
		RDY_csrs_sbread_mv_csr_stval,

		csrs_sbread_mv_csr_scause,
		RDY_csrs_sbread_mv_csr_scause,

		csrs_sbread_mv_csr_mepc,
		RDY_csrs_sbread_mv_csr_mepc,

		csrs_sbread_mv_csr_mtval,
		RDY_csrs_sbread_mv_csr_mtval,

		csrs_sbread_mv_csr_mcause,
		RDY_csrs_sbread_mv_csr_mcause,

		csrs_sbread_mv_csr_mcycle,
		RDY_csrs_sbread_mv_csr_mcycle,

		csrs_sbread_mv_csr_minstret,
		RDY_csrs_sbread_mv_csr_minstret,

		csrs_sbread_mv_csr_fcsr,
		RDY_csrs_sbread_mv_csr_fcsr,

		csrs_sbread_mv_csr_time,
		RDY_csrs_sbread_mv_csr_time,

		csrs_sbread_mv_csr_mideleg,
		RDY_csrs_sbread_mv_csr_mideleg,

		csrs_sbread_mv_csr_medeleg,
		RDY_csrs_sbread_mv_csr_medeleg,

		csrs_sbread_mv_csr_pmpcfg0,
		RDY_csrs_sbread_mv_csr_pmpcfg0,

		csrs_sbread_mv_csr_pmpaddr0,
		RDY_csrs_sbread_mv_csr_pmpaddr0,

		csrs_sbread_mv_csr_pmpaddr1,
		RDY_csrs_sbread_mv_csr_pmpaddr1,

		csrs_sbread_mv_csr_pmpaddr2,
		RDY_csrs_sbread_mv_csr_pmpaddr2,

		csrs_sbread_mv_csr_pmpaddr3,
		RDY_csrs_sbread_mv_csr_pmpaddr3,

		csrs_sbread_mv_csr_mcounteren,
		RDY_csrs_sbread_mv_csr_mcounteren,

		csrs_sbread_mv_csr_scounteren,
		RDY_csrs_sbread_mv_csr_scounteren,

		csrs_sbread_mv_csr_menvcfg,
		RDY_csrs_sbread_mv_csr_menvcfg,

		csrs_sbread_mv_csr_senvcfg,
		RDY_csrs_sbread_mv_csr_senvcfg,

		csrs_sbread_mv_csr_satp,
		RDY_csrs_sbread_mv_csr_satp,

		csrs_sbread_mv_csr_mcountinhibit,
		RDY_csrs_sbread_mv_csr_mcountinhibit,

		csrs_sbread_mv_csr_fflags,
		RDY_csrs_sbread_mv_csr_fflags,

		csrs_sbread_mv_csr_frm,
		RDY_csrs_sbread_mv_csr_frm,

		csrs_sbread_mv_csr_customcontrol,
		RDY_csrs_sbread_mv_csr_customcontrol,

		csrs_sbread_mv_csr_mhpmcounter3,
		RDY_csrs_sbread_mv_csr_mhpmcounter3,

		csrs_sbread_mv_csr_mhpmcounter4,
		RDY_csrs_sbread_mv_csr_mhpmcounter4,

		csrs_sbread_mv_csr_mhpmcounter5,
		RDY_csrs_sbread_mv_csr_mhpmcounter5,

		csrs_sbread_mv_csr_mhpmcounter6,
		RDY_csrs_sbread_mv_csr_mhpmcounter6,

		csrs_sbread_mv_csr_mhpmevent3,
		RDY_csrs_sbread_mv_csr_mhpmevent3,

		csrs_sbread_mv_csr_mhpmevent4,
		RDY_csrs_sbread_mv_csr_mhpmevent4,

		csrs_sbread_mv_csr_mhpmevent5,
		RDY_csrs_sbread_mv_csr_mhpmevent5,

		csrs_sbread_mv_csr_mhpmevent6,
		RDY_csrs_sbread_mv_csr_mhpmevent6,

		csrs_sbread_mv_csr_dcsr,
		RDY_csrs_sbread_mv_csr_dcsr,

		csrs_sbread_mv_csr_dpc,
		RDY_csrs_sbread_mv_csr_dpc,

		csrs_sbread_mv_csr_dscratch0,
		RDY_csrs_sbread_mv_csr_dscratch0,

		csrs_sbread_mv_csr_dscratch1,
		RDY_csrs_sbread_mv_csr_dscratch1);
  parameter [63 : 0] hartid = 64'b0;
  input  CLK;
  input  RST_N;

  // value method debug_mv_csr_dcsr
  output [63 : 0] debug_mv_csr_dcsr;
  output RDY_debug_mv_csr_dcsr;

  // action method debug_ma_debug_interrupt
  input  debug_ma_debug_interrupt__int;
  input  EN_debug_ma_debug_interrupt;
  output RDY_debug_ma_debug_interrupt;

  // value method debug_mv_debug_mode
  output debug_mv_debug_mode;
  output RDY_debug_mv_debug_mode;

  // value method debug_mv_core_debugenable
  output debug_mv_core_debugenable;
  output RDY_debug_mv_core_debugenable;

  // value method debug_mv_stop_timer
  output debug_mv_stop_timer;
  output RDY_debug_mv_stop_timer;

  // value method debug_mv_stop_count
  output debug_mv_stop_count;
  output RDY_debug_mv_stop_count;

  // action method perf_ma_events
  input  [31 : 0] perf_ma_events_e;
  input  EN_perf_ma_events;
  output RDY_perf_ma_events;

  // value method perf_mv_count_exceptions
  output perf_mv_count_exceptions;
  output RDY_perf_mv_count_exceptions;

  // value method perf_mv_count_interrupts
  output perf_mv_count_interrupts;
  output RDY_perf_mv_count_interrupts;

  // value method perf_mv_count_csrops
  output perf_mv_count_csrops;
  output RDY_perf_mv_count_csrops;

  // value method perf_mv_count_microtraps
  output perf_mv_count_microtraps;
  output RDY_perf_mv_count_microtraps;

  // action method rx_rx_systemout_from_stage4_notEmpty
  input  rx_rx_systemout_from_stage4_notEmpty_b;

  // action method rx_rx_systemout_from_stage4_first_deq_rdy
  input  rx_rx_systemout_from_stage4_first_deq_rdy_b;

  // action method rx_rx_systemout_from_stage4_first
  input  [80 : 0] rx_rx_systemout_from_stage4_first_x;

  // value method rx_rx_systemout_from_stage4_deq_ena
  output rx_rx_systemout_from_stage4_deq_ena;

  // action method rx_rx_trapout_from_stage4_notEmpty
  input  rx_rx_trapout_from_stage4_notEmpty_b;

  // action method rx_rx_trapout_from_stage4_first_deq_rdy
  input  rx_rx_trapout_from_stage4_first_deq_rdy_b;

  // action method rx_rx_trapout_from_stage4_first
  input  [71 : 0] rx_rx_trapout_from_stage4_first_x;

  // value method rx_rx_trapout_from_stage4_deq_ena
  output rx_rx_trapout_from_stage4_deq_ena;

  // action method rx_rx_baseout_from_stage4_notEmpty
  input  rx_rx_baseout_from_stage4_notEmpty_b;

  // action method rx_rx_baseout_from_stage4_first_deq_rdy
  input  rx_rx_baseout_from_stage4_first_deq_rdy_b;

  // action method rx_rx_baseout_from_stage4_first
  input  [79 : 0] rx_rx_baseout_from_stage4_first_x;

  // value method rx_rx_baseout_from_stage4_deq_ena
  output rx_rx_baseout_from_stage4_deq_ena;

  // action method rx_rx_memio_from_stage4_notEmpty
  input  rx_rx_memio_from_stage4_notEmpty_b;

  // action method rx_rx_memio_from_stage4_first_deq_rdy
  input  rx_rx_memio_from_stage4_first_deq_rdy_b;

  // action method rx_rx_memio_from_stage4_first
  input  [69 : 0] rx_rx_memio_from_stage4_first_x;

  // value method rx_rx_memio_from_stage4_deq_ena
  output rx_rx_memio_from_stage4_deq_ena;

  // action method rx_rx_fuid_from_stage4_notEmpty
  input  rx_rx_fuid_from_stage4_notEmpty_b;

  // action method rx_rx_fuid_from_stage4_first_deq_rdy
  input  rx_rx_fuid_from_stage4_first_deq_rdy_b;

  // action method rx_rx_fuid_from_stage4_first
  input  [76 : 0] rx_rx_fuid_from_stage4_first_x;

  // value method rx_rx_fuid_from_stage4_deq_ena
  output rx_rx_fuid_from_stage4_deq_ena;

  // action method rx_rx_commitlog_notEmpty
  input  rx_rx_commitlog_notEmpty_b;

  // action method rx_rx_commitlog_first_deq_rdy
  input  rx_rx_commitlog_first_deq_rdy_b;

  // action method rx_rx_commitlog_first
  input  [308 : 0] rx_rx_commitlog_first_x;

  // value method rx_rx_commitlog_deq_ena
  output rx_rx_commitlog_deq_ena;

  // action method interrupts_ma_clint_msip
  input  interrupts_ma_clint_msip_intrpt;
  input  EN_interrupts_ma_clint_msip;
  output RDY_interrupts_ma_clint_msip;

  // action method interrupts_ma_clint_mtip
  input  interrupts_ma_clint_mtip_intrpt;
  input  EN_interrupts_ma_clint_mtip;
  output RDY_interrupts_ma_clint_mtip;

  // action method interrupts_ma_clint_mtime
  input  [63 : 0] interrupts_ma_clint_mtime_mtime;
  input  EN_interrupts_ma_clint_mtime;
  output RDY_interrupts_ma_clint_mtime;

  // action method interrupts_ma_plic_meip
  input  interrupts_ma_plic_meip_intrpt;
  input  EN_interrupts_ma_plic_meip;
  output RDY_interrupts_ma_plic_meip;

  // action method interrupts_ma_plic_seip
  input  interrupts_ma_plic_seip_intrpt;
  input  EN_interrupts_ma_plic_seip;
  output RDY_interrupts_ma_plic_seip;

  // value method common_mv_commit_rd
  output [74 : 0] common_mv_commit_rd;
  output RDY_common_mv_commit_rd;

  // value method common_mv_flush
  output [66 : 0] common_mv_flush;
  output RDY_common_mv_flush;

  // value method common_mv_commit_log
  output [309 : 0] common_mv_commit_log;
  output RDY_common_mv_commit_log;

  // value method cache_mv_initiate_store_fst
  output cache_mv_initiate_store_fst;
  output RDY_cache_mv_initiate_store_fst;

  // value method cache_mv_initiate_store_snd
  output cache_mv_initiate_store_snd;
  output RDY_cache_mv_initiate_store_snd;

  // value method cache_mv_initiate_ioop
  output cache_mv_initiate_ioop;
  output RDY_cache_mv_initiate_ioop;

  // action method cache_ma_io_response
  input  [132 : 0] cache_ma_io_response_r;
  input  EN_cache_ma_io_response;
  output RDY_cache_ma_io_response;

  // value method csrs_mv_csr_misa_c
  output csrs_mv_csr_misa_c;
  output RDY_csrs_mv_csr_misa_c;

  // value method csrs_mv_cacheenable
  output [5 : 0] csrs_mv_cacheenable;
  output RDY_csrs_mv_cacheenable;

  // value method csrs_mv_curr_priv
  output [1 : 0] csrs_mv_curr_priv;
  output RDY_csrs_mv_curr_priv;

  // value method csrs_mv_csr_mstatus
  output [63 : 0] csrs_mv_csr_mstatus;
  output RDY_csrs_mv_csr_mstatus;

  // value method csrs_mv_csrs_to_decode
  output [241 : 0] csrs_mv_csrs_to_decode;
  output RDY_csrs_mv_csrs_to_decode;

  // value method csrs_mv_resume_wfi
  output csrs_mv_resume_wfi;
  output RDY_csrs_mv_resume_wfi;

  // value method csrs_mv_csr_satp
  output [63 : 0] csrs_mv_csr_satp;
  output RDY_csrs_mv_csr_satp;

  // value method csrs_mv_pmp_cfg
  output [31 : 0] csrs_mv_pmp_cfg;
  output RDY_csrs_mv_pmp_cfg;

  // value method csrs_mv_pmp_addr
  output [127 : 0] csrs_mv_pmp_addr;
  output RDY_csrs_mv_pmp_addr;

  // value method csrs_sbread_mv_csr_misa
  output [63 : 0] csrs_sbread_mv_csr_misa;
  output RDY_csrs_sbread_mv_csr_misa;

  // value method csrs_sbread_mv_csr_mvendorid
  output [31 : 0] csrs_sbread_mv_csr_mvendorid;
  output RDY_csrs_sbread_mv_csr_mvendorid;

  // value method csrs_sbread_mv_csr_stvec
  output [63 : 0] csrs_sbread_mv_csr_stvec;
  output RDY_csrs_sbread_mv_csr_stvec;

  // value method csrs_sbread_mv_csr_mtvec
  output [63 : 0] csrs_sbread_mv_csr_mtvec;
  output RDY_csrs_sbread_mv_csr_mtvec;

  // value method csrs_sbread_mv_csr_mstatus
  output [63 : 0] csrs_sbread_mv_csr_mstatus;
  output RDY_csrs_sbread_mv_csr_mstatus;

  // value method csrs_sbread_mv_csr_marchid
  output [63 : 0] csrs_sbread_mv_csr_marchid;
  output RDY_csrs_sbread_mv_csr_marchid;

  // value method csrs_sbread_mv_csr_mimpid
  output [63 : 0] csrs_sbread_mv_csr_mimpid;
  output RDY_csrs_sbread_mv_csr_mimpid;

  // value method csrs_sbread_mv_csr_mhartid
  output [63 : 0] csrs_sbread_mv_csr_mhartid;
  output RDY_csrs_sbread_mv_csr_mhartid;

  // value method csrs_sbread_mv_csr_mip
  output [63 : 0] csrs_sbread_mv_csr_mip;
  output RDY_csrs_sbread_mv_csr_mip;

  // value method csrs_sbread_mv_csr_sip
  output [63 : 0] csrs_sbread_mv_csr_sip;
  output RDY_csrs_sbread_mv_csr_sip;

  // value method csrs_sbread_mv_csr_mie
  output [63 : 0] csrs_sbread_mv_csr_mie;
  output RDY_csrs_sbread_mv_csr_mie;

  // value method csrs_sbread_mv_csr_sie
  output [63 : 0] csrs_sbread_mv_csr_sie;
  output RDY_csrs_sbread_mv_csr_sie;

  // value method csrs_sbread_mv_csr_mscratch
  output [63 : 0] csrs_sbread_mv_csr_mscratch;
  output RDY_csrs_sbread_mv_csr_mscratch;

  // value method csrs_sbread_mv_csr_sscratch
  output [63 : 0] csrs_sbread_mv_csr_sscratch;
  output RDY_csrs_sbread_mv_csr_sscratch;

  // value method csrs_sbread_mv_csr_sepc
  output [63 : 0] csrs_sbread_mv_csr_sepc;
  output RDY_csrs_sbread_mv_csr_sepc;

  // value method csrs_sbread_mv_csr_stval
  output [63 : 0] csrs_sbread_mv_csr_stval;
  output RDY_csrs_sbread_mv_csr_stval;

  // value method csrs_sbread_mv_csr_scause
  output [63 : 0] csrs_sbread_mv_csr_scause;
  output RDY_csrs_sbread_mv_csr_scause;

  // value method csrs_sbread_mv_csr_mepc
  output [63 : 0] csrs_sbread_mv_csr_mepc;
  output RDY_csrs_sbread_mv_csr_mepc;

  // value method csrs_sbread_mv_csr_mtval
  output [63 : 0] csrs_sbread_mv_csr_mtval;
  output RDY_csrs_sbread_mv_csr_mtval;

  // value method csrs_sbread_mv_csr_mcause
  output [63 : 0] csrs_sbread_mv_csr_mcause;
  output RDY_csrs_sbread_mv_csr_mcause;

  // value method csrs_sbread_mv_csr_mcycle
  output [63 : 0] csrs_sbread_mv_csr_mcycle;
  output RDY_csrs_sbread_mv_csr_mcycle;

  // value method csrs_sbread_mv_csr_minstret
  output [63 : 0] csrs_sbread_mv_csr_minstret;
  output RDY_csrs_sbread_mv_csr_minstret;

  // value method csrs_sbread_mv_csr_fcsr
  output [63 : 0] csrs_sbread_mv_csr_fcsr;
  output RDY_csrs_sbread_mv_csr_fcsr;

  // value method csrs_sbread_mv_csr_time
  output [63 : 0] csrs_sbread_mv_csr_time;
  output RDY_csrs_sbread_mv_csr_time;

  // value method csrs_sbread_mv_csr_mideleg
  output [63 : 0] csrs_sbread_mv_csr_mideleg;
  output RDY_csrs_sbread_mv_csr_mideleg;

  // value method csrs_sbread_mv_csr_medeleg
  output [63 : 0] csrs_sbread_mv_csr_medeleg;
  output RDY_csrs_sbread_mv_csr_medeleg;

  // value method csrs_sbread_mv_csr_pmpcfg0
  output [63 : 0] csrs_sbread_mv_csr_pmpcfg0;
  output RDY_csrs_sbread_mv_csr_pmpcfg0;

  // value method csrs_sbread_mv_csr_pmpaddr0
  output [29 : 0] csrs_sbread_mv_csr_pmpaddr0;
  output RDY_csrs_sbread_mv_csr_pmpaddr0;

  // value method csrs_sbread_mv_csr_pmpaddr1
  output [29 : 0] csrs_sbread_mv_csr_pmpaddr1;
  output RDY_csrs_sbread_mv_csr_pmpaddr1;

  // value method csrs_sbread_mv_csr_pmpaddr2
  output [29 : 0] csrs_sbread_mv_csr_pmpaddr2;
  output RDY_csrs_sbread_mv_csr_pmpaddr2;

  // value method csrs_sbread_mv_csr_pmpaddr3
  output [29 : 0] csrs_sbread_mv_csr_pmpaddr3;
  output RDY_csrs_sbread_mv_csr_pmpaddr3;

  // value method csrs_sbread_mv_csr_mcounteren
  output [31 : 0] csrs_sbread_mv_csr_mcounteren;
  output RDY_csrs_sbread_mv_csr_mcounteren;

  // value method csrs_sbread_mv_csr_scounteren
  output [31 : 0] csrs_sbread_mv_csr_scounteren;
  output RDY_csrs_sbread_mv_csr_scounteren;

  // value method csrs_sbread_mv_csr_menvcfg
  output [63 : 0] csrs_sbread_mv_csr_menvcfg;
  output RDY_csrs_sbread_mv_csr_menvcfg;

  // value method csrs_sbread_mv_csr_senvcfg
  output [63 : 0] csrs_sbread_mv_csr_senvcfg;
  output RDY_csrs_sbread_mv_csr_senvcfg;

  // value method csrs_sbread_mv_csr_satp
  output [63 : 0] csrs_sbread_mv_csr_satp;
  output RDY_csrs_sbread_mv_csr_satp;

  // value method csrs_sbread_mv_csr_mcountinhibit
  output [31 : 0] csrs_sbread_mv_csr_mcountinhibit;
  output RDY_csrs_sbread_mv_csr_mcountinhibit;

  // value method csrs_sbread_mv_csr_fflags
  output [4 : 0] csrs_sbread_mv_csr_fflags;
  output RDY_csrs_sbread_mv_csr_fflags;

  // value method csrs_sbread_mv_csr_frm
  output [2 : 0] csrs_sbread_mv_csr_frm;
  output RDY_csrs_sbread_mv_csr_frm;

  // value method csrs_sbread_mv_csr_customcontrol
  output [63 : 0] csrs_sbread_mv_csr_customcontrol;
  output RDY_csrs_sbread_mv_csr_customcontrol;

  // value method csrs_sbread_mv_csr_mhpmcounter3
  output [63 : 0] csrs_sbread_mv_csr_mhpmcounter3;
  output RDY_csrs_sbread_mv_csr_mhpmcounter3;

  // value method csrs_sbread_mv_csr_mhpmcounter4
  output [63 : 0] csrs_sbread_mv_csr_mhpmcounter4;
  output RDY_csrs_sbread_mv_csr_mhpmcounter4;

  // value method csrs_sbread_mv_csr_mhpmcounter5
  output [63 : 0] csrs_sbread_mv_csr_mhpmcounter5;
  output RDY_csrs_sbread_mv_csr_mhpmcounter5;

  // value method csrs_sbread_mv_csr_mhpmcounter6
  output [63 : 0] csrs_sbread_mv_csr_mhpmcounter6;
  output RDY_csrs_sbread_mv_csr_mhpmcounter6;

  // value method csrs_sbread_mv_csr_mhpmevent3
  output [63 : 0] csrs_sbread_mv_csr_mhpmevent3;
  output RDY_csrs_sbread_mv_csr_mhpmevent3;

  // value method csrs_sbread_mv_csr_mhpmevent4
  output [63 : 0] csrs_sbread_mv_csr_mhpmevent4;
  output RDY_csrs_sbread_mv_csr_mhpmevent4;

  // value method csrs_sbread_mv_csr_mhpmevent5
  output [63 : 0] csrs_sbread_mv_csr_mhpmevent5;
  output RDY_csrs_sbread_mv_csr_mhpmevent5;

  // value method csrs_sbread_mv_csr_mhpmevent6
  output [63 : 0] csrs_sbread_mv_csr_mhpmevent6;
  output RDY_csrs_sbread_mv_csr_mhpmevent6;

  // value method csrs_sbread_mv_csr_dcsr
  output [63 : 0] csrs_sbread_mv_csr_dcsr;
  output RDY_csrs_sbread_mv_csr_dcsr;

  // value method csrs_sbread_mv_csr_dpc
  output [63 : 0] csrs_sbread_mv_csr_dpc;
  output RDY_csrs_sbread_mv_csr_dpc;

  // value method csrs_sbread_mv_csr_dscratch0
  output [63 : 0] csrs_sbread_mv_csr_dscratch0;
  output RDY_csrs_sbread_mv_csr_dscratch0;

  // value method csrs_sbread_mv_csr_dscratch1
  output [63 : 0] csrs_sbread_mv_csr_dscratch1;
  output RDY_csrs_sbread_mv_csr_dscratch1;

  // signals for module outputs
  reg [74 : 0] common_mv_commit_rd;
  wire [309 : 0] common_mv_commit_log;
  wire [241 : 0] csrs_mv_csrs_to_decode;
  wire [127 : 0] csrs_mv_pmp_addr;
  wire [66 : 0] common_mv_flush;
  wire [63 : 0] csrs_mv_csr_mstatus,
		csrs_mv_csr_satp,
		csrs_sbread_mv_csr_customcontrol,
		csrs_sbread_mv_csr_dcsr,
		csrs_sbread_mv_csr_dpc,
		csrs_sbread_mv_csr_dscratch0,
		csrs_sbread_mv_csr_dscratch1,
		csrs_sbread_mv_csr_fcsr,
		csrs_sbread_mv_csr_marchid,
		csrs_sbread_mv_csr_mcause,
		csrs_sbread_mv_csr_mcycle,
		csrs_sbread_mv_csr_medeleg,
		csrs_sbread_mv_csr_menvcfg,
		csrs_sbread_mv_csr_mepc,
		csrs_sbread_mv_csr_mhartid,
		csrs_sbread_mv_csr_mhpmcounter3,
		csrs_sbread_mv_csr_mhpmcounter4,
		csrs_sbread_mv_csr_mhpmcounter5,
		csrs_sbread_mv_csr_mhpmcounter6,
		csrs_sbread_mv_csr_mhpmevent3,
		csrs_sbread_mv_csr_mhpmevent4,
		csrs_sbread_mv_csr_mhpmevent5,
		csrs_sbread_mv_csr_mhpmevent6,
		csrs_sbread_mv_csr_mideleg,
		csrs_sbread_mv_csr_mie,
		csrs_sbread_mv_csr_mimpid,
		csrs_sbread_mv_csr_minstret,
		csrs_sbread_mv_csr_mip,
		csrs_sbread_mv_csr_misa,
		csrs_sbread_mv_csr_mscratch,
		csrs_sbread_mv_csr_mstatus,
		csrs_sbread_mv_csr_mtval,
		csrs_sbread_mv_csr_mtvec,
		csrs_sbread_mv_csr_pmpcfg0,
		csrs_sbread_mv_csr_satp,
		csrs_sbread_mv_csr_scause,
		csrs_sbread_mv_csr_senvcfg,
		csrs_sbread_mv_csr_sepc,
		csrs_sbread_mv_csr_sie,
		csrs_sbread_mv_csr_sip,
		csrs_sbread_mv_csr_sscratch,
		csrs_sbread_mv_csr_stval,
		csrs_sbread_mv_csr_stvec,
		csrs_sbread_mv_csr_time,
		debug_mv_csr_dcsr;
  wire [31 : 0] csrs_mv_pmp_cfg,
		csrs_sbread_mv_csr_mcounteren,
		csrs_sbread_mv_csr_mcountinhibit,
		csrs_sbread_mv_csr_mvendorid,
		csrs_sbread_mv_csr_scounteren;
  wire [29 : 0] csrs_sbread_mv_csr_pmpaddr0,
		csrs_sbread_mv_csr_pmpaddr1,
		csrs_sbread_mv_csr_pmpaddr2,
		csrs_sbread_mv_csr_pmpaddr3;
  wire [5 : 0] csrs_mv_cacheenable;
  wire [4 : 0] csrs_sbread_mv_csr_fflags;
  wire [2 : 0] csrs_sbread_mv_csr_frm;
  wire [1 : 0] csrs_mv_curr_priv;
  wire RDY_cache_ma_io_response,
       RDY_cache_mv_initiate_ioop,
       RDY_cache_mv_initiate_store_fst,
       RDY_cache_mv_initiate_store_snd,
       RDY_common_mv_commit_log,
       RDY_common_mv_commit_rd,
       RDY_common_mv_flush,
       RDY_csrs_mv_cacheenable,
       RDY_csrs_mv_csr_misa_c,
       RDY_csrs_mv_csr_mstatus,
       RDY_csrs_mv_csr_satp,
       RDY_csrs_mv_csrs_to_decode,
       RDY_csrs_mv_curr_priv,
       RDY_csrs_mv_pmp_addr,
       RDY_csrs_mv_pmp_cfg,
       RDY_csrs_mv_resume_wfi,
       RDY_csrs_sbread_mv_csr_customcontrol,
       RDY_csrs_sbread_mv_csr_dcsr,
       RDY_csrs_sbread_mv_csr_dpc,
       RDY_csrs_sbread_mv_csr_dscratch0,
       RDY_csrs_sbread_mv_csr_dscratch1,
       RDY_csrs_sbread_mv_csr_fcsr,
       RDY_csrs_sbread_mv_csr_fflags,
       RDY_csrs_sbread_mv_csr_frm,
       RDY_csrs_sbread_mv_csr_marchid,
       RDY_csrs_sbread_mv_csr_mcause,
       RDY_csrs_sbread_mv_csr_mcounteren,
       RDY_csrs_sbread_mv_csr_mcountinhibit,
       RDY_csrs_sbread_mv_csr_mcycle,
       RDY_csrs_sbread_mv_csr_medeleg,
       RDY_csrs_sbread_mv_csr_menvcfg,
       RDY_csrs_sbread_mv_csr_mepc,
       RDY_csrs_sbread_mv_csr_mhartid,
       RDY_csrs_sbread_mv_csr_mhpmcounter3,
       RDY_csrs_sbread_mv_csr_mhpmcounter4,
       RDY_csrs_sbread_mv_csr_mhpmcounter5,
       RDY_csrs_sbread_mv_csr_mhpmcounter6,
       RDY_csrs_sbread_mv_csr_mhpmevent3,
       RDY_csrs_sbread_mv_csr_mhpmevent4,
       RDY_csrs_sbread_mv_csr_mhpmevent5,
       RDY_csrs_sbread_mv_csr_mhpmevent6,
       RDY_csrs_sbread_mv_csr_mideleg,
       RDY_csrs_sbread_mv_csr_mie,
       RDY_csrs_sbread_mv_csr_mimpid,
       RDY_csrs_sbread_mv_csr_minstret,
       RDY_csrs_sbread_mv_csr_mip,
       RDY_csrs_sbread_mv_csr_misa,
       RDY_csrs_sbread_mv_csr_mscratch,
       RDY_csrs_sbread_mv_csr_mstatus,
       RDY_csrs_sbread_mv_csr_mtval,
       RDY_csrs_sbread_mv_csr_mtvec,
       RDY_csrs_sbread_mv_csr_mvendorid,
       RDY_csrs_sbread_mv_csr_pmpaddr0,
       RDY_csrs_sbread_mv_csr_pmpaddr1,
       RDY_csrs_sbread_mv_csr_pmpaddr2,
       RDY_csrs_sbread_mv_csr_pmpaddr3,
       RDY_csrs_sbread_mv_csr_pmpcfg0,
       RDY_csrs_sbread_mv_csr_satp,
       RDY_csrs_sbread_mv_csr_scause,
       RDY_csrs_sbread_mv_csr_scounteren,
       RDY_csrs_sbread_mv_csr_senvcfg,
       RDY_csrs_sbread_mv_csr_sepc,
       RDY_csrs_sbread_mv_csr_sie,
       RDY_csrs_sbread_mv_csr_sip,
       RDY_csrs_sbread_mv_csr_sscratch,
       RDY_csrs_sbread_mv_csr_stval,
       RDY_csrs_sbread_mv_csr_stvec,
       RDY_csrs_sbread_mv_csr_time,
       RDY_debug_ma_debug_interrupt,
       RDY_debug_mv_core_debugenable,
       RDY_debug_mv_csr_dcsr,
       RDY_debug_mv_debug_mode,
       RDY_debug_mv_stop_count,
       RDY_debug_mv_stop_timer,
       RDY_interrupts_ma_clint_msip,
       RDY_interrupts_ma_clint_mtime,
       RDY_interrupts_ma_clint_mtip,
       RDY_interrupts_ma_plic_meip,
       RDY_interrupts_ma_plic_seip,
       RDY_perf_ma_events,
       RDY_perf_mv_count_csrops,
       RDY_perf_mv_count_exceptions,
       RDY_perf_mv_count_interrupts,
       RDY_perf_mv_count_microtraps,
       cache_mv_initiate_ioop,
       cache_mv_initiate_store_fst,
       cache_mv_initiate_store_snd,
       csrs_mv_csr_misa_c,
       csrs_mv_resume_wfi,
       debug_mv_core_debugenable,
       debug_mv_debug_mode,
       debug_mv_stop_count,
       debug_mv_stop_timer,
       perf_mv_count_csrops,
       perf_mv_count_exceptions,
       perf_mv_count_interrupts,
       perf_mv_count_microtraps,
       rx_rx_baseout_from_stage4_deq_ena,
       rx_rx_commitlog_deq_ena,
       rx_rx_fuid_from_stage4_deq_ena,
       rx_rx_memio_from_stage4_deq_ena,
       rx_rx_systemout_from_stage4_deq_ena,
       rx_rx_trapout_from_stage4_deq_ena;

  // inlined wires
  reg [309 : 0] rg_commitlog_1_wget;
  reg [66 : 0] wr_flush_wget;
  wire [1 : 0] wr_commit_cacheop_wget;
  wire rx_fuid_w_ena_whas,
       wr_count_csrops_whas,
       wr_count_exceptions_whas,
       wr_count_interrupts_whas,
       wr_count_microtrap_whas,
       wr_flush_whas,
       wr_increment_minstret_whas;

  // register rg_commitlog
  reg [309 : 0] rg_commitlog;
  wire [309 : 0] rg_commitlog_D_IN;
  wire rg_commitlog_EN;

  // register rg_csr_wait
  reg rg_csr_wait;
  wire rg_csr_wait_D_IN, rg_csr_wait_EN;

  // register rg_epoch
  reg rg_epoch;
  reg rg_epoch_D_IN;
  wire rg_epoch_EN;

  // register rg_ioop_init
  reg rg_ioop_init;
  wire rg_ioop_init_D_IN, rg_ioop_init_EN;

  // ports of submodule csr
  wire [127 : 0] csr_mv_pmpaddr;
  wire [78 : 0] csr_ma_core_req_req;
  wire [65 : 0] csr_mv_core_resp;
  wire [63 : 0] csr_ma_incr_minstret_incr,
		csr_ma_set_time__time,
		csr_mav_upd_on_ret,
		csr_mav_upd_on_trap,
		csr_mav_upd_on_trap_pc,
		csr_mav_upd_on_trap_tval,
		csr_sbread_mv_csr_customcontrol,
		csr_sbread_mv_csr_dcsr,
		csr_sbread_mv_csr_dpc,
		csr_sbread_mv_csr_dscratch0,
		csr_sbread_mv_csr_dscratch1,
		csr_sbread_mv_csr_fcsr,
		csr_sbread_mv_csr_marchid,
		csr_sbread_mv_csr_mcause,
		csr_sbread_mv_csr_mcycle,
		csr_sbread_mv_csr_medeleg,
		csr_sbread_mv_csr_menvcfg,
		csr_sbread_mv_csr_mepc,
		csr_sbread_mv_csr_mhartid,
		csr_sbread_mv_csr_mhpmcounter3,
		csr_sbread_mv_csr_mhpmcounter4,
		csr_sbread_mv_csr_mhpmcounter5,
		csr_sbread_mv_csr_mhpmcounter6,
		csr_sbread_mv_csr_mhpmevent3,
		csr_sbread_mv_csr_mhpmevent4,
		csr_sbread_mv_csr_mhpmevent5,
		csr_sbread_mv_csr_mhpmevent6,
		csr_sbread_mv_csr_mideleg,
		csr_sbread_mv_csr_mie,
		csr_sbread_mv_csr_mimpid,
		csr_sbread_mv_csr_minstret,
		csr_sbread_mv_csr_mip,
		csr_sbread_mv_csr_misa,
		csr_sbread_mv_csr_mscratch,
		csr_sbread_mv_csr_mstatus,
		csr_sbread_mv_csr_mtval,
		csr_sbread_mv_csr_mtvec,
		csr_sbread_mv_csr_pmpcfg0,
		csr_sbread_mv_csr_satp,
		csr_sbread_mv_csr_scause,
		csr_sbread_mv_csr_senvcfg,
		csr_sbread_mv_csr_sepc,
		csr_sbread_mv_csr_sie,
		csr_sbread_mv_csr_sip,
		csr_sbread_mv_csr_sscratch,
		csr_sbread_mv_csr_stval,
		csr_sbread_mv_csr_stvec,
		csr_sbread_mv_csr_time;
  wire [31 : 0] csr_ma_events_events,
		csr_mv_pmpcfg,
		csr_sbread_mv_csr_mcounteren,
		csr_sbread_mv_csr_mcountinhibit,
		csr_sbread_mv_csr_mvendorid,
		csr_sbread_mv_csr_scounteren;
  wire [29 : 0] csr_sbread_mv_csr_pmpaddr0,
		csr_sbread_mv_csr_pmpaddr1,
		csr_sbread_mv_csr_pmpaddr2,
		csr_sbread_mv_csr_pmpaddr3;
  wire [7 : 0] csr_mav_upd_on_ret_retype;
  wire [6 : 0] csr_mav_upd_on_trap_cause;
  wire [4 : 0] csr_ma_set_fflags__fflags, csr_sbread_mv_csr_fflags;
  wire [2 : 0] csr_sbread_mv_csr_frm;
  wire [1 : 0] csr_mv_prv;
  wire csr_EN_ma_core_req,
       csr_EN_ma_events,
       csr_EN_ma_incr_minstret,
       csr_EN_ma_set_fflags,
       csr_EN_ma_set_mip_debug_interrupt,
       csr_EN_ma_set_mip_meip,
       csr_EN_ma_set_mip_msip,
       csr_EN_ma_set_mip_mtip,
       csr_EN_ma_set_mip_seip,
       csr_EN_ma_set_time,
       csr_EN_ma_stop_count,
       csr_EN_mav_upd_on_ret,
       csr_EN_mav_upd_on_trap,
       csr_RDY_ma_core_req,
       csr_ma_set_fflags_rdtype,
       csr_ma_set_mip_debug_interrupt__debug_interrupt,
       csr_ma_set_mip_meip__meip,
       csr_ma_set_mip_msip__msip,
       csr_ma_set_mip_mtip__mtip,
       csr_ma_set_mip_seip__seip,
       csr_ma_stop_count__stop,
       csr_mv_debug_mode,
       csr_mv_stop_count,
       csr_mv_stop_timer;

  // rule scheduling signals
  wire CAN_FIRE_RL_mkConnectionVtoAf,
       CAN_FIRE_RL_rg_commitlog__dreg_update,
       CAN_FIRE_RL_rl_incr_minstret,
       CAN_FIRE_RL_rl_writeback_baseout,
       CAN_FIRE_RL_rl_writeback_memop,
       CAN_FIRE_RL_rl_writeback_system,
       CAN_FIRE_RL_rl_writeback_trap,
       CAN_FIRE_cache_ma_io_response,
       CAN_FIRE_debug_ma_debug_interrupt,
       CAN_FIRE_interrupts_ma_clint_msip,
       CAN_FIRE_interrupts_ma_clint_mtime,
       CAN_FIRE_interrupts_ma_clint_mtip,
       CAN_FIRE_interrupts_ma_plic_meip,
       CAN_FIRE_interrupts_ma_plic_seip,
       CAN_FIRE_perf_ma_events,
       CAN_FIRE_rx_rx_baseout_from_stage4_first,
       CAN_FIRE_rx_rx_baseout_from_stage4_first_deq_rdy,
       CAN_FIRE_rx_rx_baseout_from_stage4_notEmpty,
       CAN_FIRE_rx_rx_commitlog_first,
       CAN_FIRE_rx_rx_commitlog_first_deq_rdy,
       CAN_FIRE_rx_rx_commitlog_notEmpty,
       CAN_FIRE_rx_rx_fuid_from_stage4_first,
       CAN_FIRE_rx_rx_fuid_from_stage4_first_deq_rdy,
       CAN_FIRE_rx_rx_fuid_from_stage4_notEmpty,
       CAN_FIRE_rx_rx_memio_from_stage4_first,
       CAN_FIRE_rx_rx_memio_from_stage4_first_deq_rdy,
       CAN_FIRE_rx_rx_memio_from_stage4_notEmpty,
       CAN_FIRE_rx_rx_systemout_from_stage4_first,
       CAN_FIRE_rx_rx_systemout_from_stage4_first_deq_rdy,
       CAN_FIRE_rx_rx_systemout_from_stage4_notEmpty,
       CAN_FIRE_rx_rx_trapout_from_stage4_first,
       CAN_FIRE_rx_rx_trapout_from_stage4_first_deq_rdy,
       CAN_FIRE_rx_rx_trapout_from_stage4_notEmpty,
       WILL_FIRE_RL_mkConnectionVtoAf,
       WILL_FIRE_RL_rg_commitlog__dreg_update,
       WILL_FIRE_RL_rl_incr_minstret,
       WILL_FIRE_RL_rl_writeback_baseout,
       WILL_FIRE_RL_rl_writeback_memop,
       WILL_FIRE_RL_rl_writeback_system,
       WILL_FIRE_RL_rl_writeback_trap,
       WILL_FIRE_cache_ma_io_response,
       WILL_FIRE_debug_ma_debug_interrupt,
       WILL_FIRE_interrupts_ma_clint_msip,
       WILL_FIRE_interrupts_ma_clint_mtime,
       WILL_FIRE_interrupts_ma_clint_mtip,
       WILL_FIRE_interrupts_ma_plic_meip,
       WILL_FIRE_interrupts_ma_plic_seip,
       WILL_FIRE_perf_ma_events,
       WILL_FIRE_rx_rx_baseout_from_stage4_first,
       WILL_FIRE_rx_rx_baseout_from_stage4_first_deq_rdy,
       WILL_FIRE_rx_rx_baseout_from_stage4_notEmpty,
       WILL_FIRE_rx_rx_commitlog_first,
       WILL_FIRE_rx_rx_commitlog_first_deq_rdy,
       WILL_FIRE_rx_rx_commitlog_notEmpty,
       WILL_FIRE_rx_rx_fuid_from_stage4_first,
       WILL_FIRE_rx_rx_fuid_from_stage4_first_deq_rdy,
       WILL_FIRE_rx_rx_fuid_from_stage4_notEmpty,
       WILL_FIRE_rx_rx_memio_from_stage4_first,
       WILL_FIRE_rx_rx_memio_from_stage4_first_deq_rdy,
       WILL_FIRE_rx_rx_memio_from_stage4_notEmpty,
       WILL_FIRE_rx_rx_systemout_from_stage4_first,
       WILL_FIRE_rx_rx_systemout_from_stage4_first_deq_rdy,
       WILL_FIRE_rx_rx_systemout_from_stage4_notEmpty,
       WILL_FIRE_rx_rx_trapout_from_stage4_first,
       WILL_FIRE_rx_rx_trapout_from_stage4_first_deq_rdy,
       WILL_FIRE_rx_rx_trapout_from_stage4_notEmpty;

  // inputs to muxes for submodule ports
  wire [309 : 0] MUX_rg_commitlog_1_wset_1__VAL_1,
		 MUX_rg_commitlog_1_wset_1__VAL_2,
		 MUX_rg_commitlog_1_wset_1__VAL_3;
  wire [74 : 0] MUX_wr_commit_wset_1__VAL_1,
		MUX_wr_commit_wset_1__VAL_2,
		MUX_wr_commit_wset_1__VAL_3,
		MUX_wr_commit_wset_1__VAL_4;
  wire [66 : 0] MUX_wr_flush_wset_1__VAL_1,
		MUX_wr_flush_wset_1__VAL_2,
		MUX_wr_flush_wset_1__VAL_3;
  wire [63 : 0] MUX_csr_mav_upd_on_trap_2__VAL_2;
  wire [6 : 0] MUX_csr_mav_upd_on_trap_1__VAL_1;
  wire MUX_csr_mav_upd_on_trap_1__SEL_1,
       MUX_csr_mav_upd_on_trap_1__SEL_2,
       MUX_rg_commitlog_1_wset_1__SEL_1,
       MUX_rg_commitlog_1_wset_1__SEL_2,
       MUX_rg_commitlog_1_wset_1__SEL_3,
       MUX_rg_epoch_write_1__SEL_1,
       MUX_rg_epoch_write_1__SEL_2,
       MUX_rx_commitlog_w_ena_wset_1__SEL_1,
       MUX_rx_commitlog_w_ena_wset_1__SEL_2,
       MUX_wr_commit_wset_1__SEL_2,
       MUX_wr_flush_wset_1__SEL_1;

  // remaining internal signals
  wire [68 : 0] IF_IF_rx_memio_w_data_whas__55_THEN_NOT_rx_mem_ETC___d189;
  wire [63 : 0] _theResult_____1__h9023, x__h11687, x__h6279, x__h9216;
  wire [11 : 0] csr_address__h6039,
		rx_rx_systemout_from_stage4_first_x_BITS_14_TO_3__q2;
  wire [2 : 0] rx_rx_systemout_from_stage4_first_x_BITS_2_TO_0__q1;
  wire IF_rx_memio_w_data_whas__55_THEN_NOT_rx_memio__ETC___d166,
       IF_rx_memio_w_data_whas__55_THEN_NOT_rx_memio__ETC___d202,
       IF_rx_memio_w_data_whas__55_THEN_rx_memio_w_da_ETC___d217,
       IF_rx_memio_w_data_whas__55_THEN_rx_memio_w_da_ETC___d221,
       rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24,
       rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d38,
       rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d54;

  // value method debug_mv_csr_dcsr
  assign debug_mv_csr_dcsr = csr_sbread_mv_csr_dcsr ;
  assign RDY_debug_mv_csr_dcsr = 1'd1 ;

  // action method debug_ma_debug_interrupt
  assign RDY_debug_ma_debug_interrupt = 1'd1 ;
  assign CAN_FIRE_debug_ma_debug_interrupt = 1'd1 ;
  assign WILL_FIRE_debug_ma_debug_interrupt = EN_debug_ma_debug_interrupt ;

  // value method debug_mv_debug_mode
  assign debug_mv_debug_mode = csr_mv_debug_mode ;
  assign RDY_debug_mv_debug_mode = 1'd1 ;

  // value method debug_mv_core_debugenable
  assign debug_mv_core_debugenable = csr_sbread_mv_csr_customcontrol[4] ;
  assign RDY_debug_mv_core_debugenable = 1'd1 ;

  // value method debug_mv_stop_timer
  assign debug_mv_stop_timer = csr_mv_stop_timer ;
  assign RDY_debug_mv_stop_timer = 1'd1 ;

  // value method debug_mv_stop_count
  assign debug_mv_stop_count = csr_mv_stop_count ;
  assign RDY_debug_mv_stop_count = 1'd1 ;

  // action method perf_ma_events
  assign RDY_perf_ma_events = 1'd1 ;
  assign CAN_FIRE_perf_ma_events = 1'd1 ;
  assign WILL_FIRE_perf_ma_events = EN_perf_ma_events ;

  // value method perf_mv_count_exceptions
  assign perf_mv_count_exceptions = wr_count_exceptions_whas ;
  assign RDY_perf_mv_count_exceptions = 1'd1 ;

  // value method perf_mv_count_interrupts
  assign perf_mv_count_interrupts = wr_count_interrupts_whas ;
  assign RDY_perf_mv_count_interrupts = 1'd1 ;

  // value method perf_mv_count_csrops
  assign perf_mv_count_csrops = wr_count_csrops_whas ;
  assign RDY_perf_mv_count_csrops = 1'd1 ;

  // value method perf_mv_count_microtraps
  assign perf_mv_count_microtraps = wr_count_microtrap_whas ;
  assign RDY_perf_mv_count_microtraps = 1'd1 ;

  // action method rx_rx_systemout_from_stage4_notEmpty
  assign CAN_FIRE_rx_rx_systemout_from_stage4_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_rx_systemout_from_stage4_notEmpty = 1'd1 ;

  // action method rx_rx_systemout_from_stage4_first_deq_rdy
  assign CAN_FIRE_rx_rx_systemout_from_stage4_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_rx_systemout_from_stage4_first_deq_rdy = 1'd1 ;

  // action method rx_rx_systemout_from_stage4_first
  assign CAN_FIRE_rx_rx_systemout_from_stage4_first = 1'd1 ;
  assign WILL_FIRE_rx_rx_systemout_from_stage4_first = 1'd1 ;

  // value method rx_rx_systemout_from_stage4_deq_ena
  assign rx_rx_systemout_from_stage4_deq_ena =
	     MUX_rx_commitlog_w_ena_wset_1__SEL_1 ;

  // action method rx_rx_trapout_from_stage4_notEmpty
  assign CAN_FIRE_rx_rx_trapout_from_stage4_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_rx_trapout_from_stage4_notEmpty = 1'd1 ;

  // action method rx_rx_trapout_from_stage4_first_deq_rdy
  assign CAN_FIRE_rx_rx_trapout_from_stage4_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_rx_trapout_from_stage4_first_deq_rdy = 1'd1 ;

  // action method rx_rx_trapout_from_stage4_first
  assign CAN_FIRE_rx_rx_trapout_from_stage4_first = 1'd1 ;
  assign WILL_FIRE_rx_rx_trapout_from_stage4_first = 1'd1 ;

  // value method rx_rx_trapout_from_stage4_deq_ena
  assign rx_rx_trapout_from_stage4_deq_ena = CAN_FIRE_RL_rl_writeback_trap ;

  // action method rx_rx_baseout_from_stage4_notEmpty
  assign CAN_FIRE_rx_rx_baseout_from_stage4_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_rx_baseout_from_stage4_notEmpty = 1'd1 ;

  // action method rx_rx_baseout_from_stage4_first_deq_rdy
  assign CAN_FIRE_rx_rx_baseout_from_stage4_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_rx_baseout_from_stage4_first_deq_rdy = 1'd1 ;

  // action method rx_rx_baseout_from_stage4_first
  assign CAN_FIRE_rx_rx_baseout_from_stage4_first = 1'd1 ;
  assign WILL_FIRE_rx_rx_baseout_from_stage4_first = 1'd1 ;

  // value method rx_rx_baseout_from_stage4_deq_ena
  assign rx_rx_baseout_from_stage4_deq_ena =
	     CAN_FIRE_RL_rl_writeback_baseout ;

  // action method rx_rx_memio_from_stage4_notEmpty
  assign CAN_FIRE_rx_rx_memio_from_stage4_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_rx_memio_from_stage4_notEmpty = 1'd1 ;

  // action method rx_rx_memio_from_stage4_first_deq_rdy
  assign CAN_FIRE_rx_rx_memio_from_stage4_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_rx_memio_from_stage4_first_deq_rdy = 1'd1 ;

  // action method rx_rx_memio_from_stage4_first
  assign CAN_FIRE_rx_rx_memio_from_stage4_first = 1'd1 ;
  assign WILL_FIRE_rx_rx_memio_from_stage4_first = 1'd1 ;

  // value method rx_rx_memio_from_stage4_deq_ena
  assign rx_rx_memio_from_stage4_deq_ena =
	     MUX_rx_commitlog_w_ena_wset_1__SEL_2 ;

  // action method rx_rx_fuid_from_stage4_notEmpty
  assign CAN_FIRE_rx_rx_fuid_from_stage4_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_rx_fuid_from_stage4_notEmpty = 1'd1 ;

  // action method rx_rx_fuid_from_stage4_first_deq_rdy
  assign CAN_FIRE_rx_rx_fuid_from_stage4_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_rx_fuid_from_stage4_first_deq_rdy = 1'd1 ;

  // action method rx_rx_fuid_from_stage4_first
  assign CAN_FIRE_rx_rx_fuid_from_stage4_first = 1'd1 ;
  assign WILL_FIRE_rx_rx_fuid_from_stage4_first = 1'd1 ;

  // value method rx_rx_fuid_from_stage4_deq_ena
  assign rx_rx_fuid_from_stage4_deq_ena = rx_fuid_w_ena_whas ;

  // action method rx_rx_commitlog_notEmpty
  assign CAN_FIRE_rx_rx_commitlog_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_rx_commitlog_notEmpty = 1'd1 ;

  // action method rx_rx_commitlog_first_deq_rdy
  assign CAN_FIRE_rx_rx_commitlog_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_rx_commitlog_first_deq_rdy = 1'd1 ;

  // action method rx_rx_commitlog_first
  assign CAN_FIRE_rx_rx_commitlog_first = 1'd1 ;
  assign WILL_FIRE_rx_rx_commitlog_first = 1'd1 ;

  // value method rx_rx_commitlog_deq_ena
  assign rx_rx_commitlog_deq_ena = rx_fuid_w_ena_whas ;

  // action method interrupts_ma_clint_msip
  assign RDY_interrupts_ma_clint_msip = 1'd1 ;
  assign CAN_FIRE_interrupts_ma_clint_msip = 1'd1 ;
  assign WILL_FIRE_interrupts_ma_clint_msip = EN_interrupts_ma_clint_msip ;

  // action method interrupts_ma_clint_mtip
  assign RDY_interrupts_ma_clint_mtip = 1'd1 ;
  assign CAN_FIRE_interrupts_ma_clint_mtip = 1'd1 ;
  assign WILL_FIRE_interrupts_ma_clint_mtip = EN_interrupts_ma_clint_mtip ;

  // action method interrupts_ma_clint_mtime
  assign RDY_interrupts_ma_clint_mtime = 1'd1 ;
  assign CAN_FIRE_interrupts_ma_clint_mtime = 1'd1 ;
  assign WILL_FIRE_interrupts_ma_clint_mtime = EN_interrupts_ma_clint_mtime ;

  // action method interrupts_ma_plic_meip
  assign RDY_interrupts_ma_plic_meip = 1'd1 ;
  assign CAN_FIRE_interrupts_ma_plic_meip = 1'd1 ;
  assign WILL_FIRE_interrupts_ma_plic_meip = EN_interrupts_ma_plic_meip ;

  // action method interrupts_ma_plic_seip
  assign RDY_interrupts_ma_plic_seip = 1'd1 ;
  assign CAN_FIRE_interrupts_ma_plic_seip = 1'd1 ;
  assign WILL_FIRE_interrupts_ma_plic_seip = EN_interrupts_ma_plic_seip ;

  // value method common_mv_commit_rd
  always@(MUX_rx_commitlog_w_ena_wset_1__SEL_1 or
	  MUX_wr_commit_wset_1__VAL_1 or
	  MUX_wr_commit_wset_1__SEL_2 or
	  MUX_wr_commit_wset_1__VAL_2 or
	  WILL_FIRE_RL_rl_writeback_trap or
	  MUX_wr_commit_wset_1__VAL_3 or
	  WILL_FIRE_RL_rl_writeback_baseout or MUX_wr_commit_wset_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rx_commitlog_w_ena_wset_1__SEL_1:
	  common_mv_commit_rd = MUX_wr_commit_wset_1__VAL_1;
      MUX_wr_commit_wset_1__SEL_2:
	  common_mv_commit_rd = MUX_wr_commit_wset_1__VAL_2;
      WILL_FIRE_RL_rl_writeback_trap:
	  common_mv_commit_rd = MUX_wr_commit_wset_1__VAL_3;
      WILL_FIRE_RL_rl_writeback_baseout:
	  common_mv_commit_rd = MUX_wr_commit_wset_1__VAL_4;
      default: common_mv_commit_rd =
		   75'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign RDY_common_mv_commit_rd =
	     MUX_rx_commitlog_w_ena_wset_1__SEL_1 ||
	     MUX_wr_commit_wset_1__SEL_2 ||
	     WILL_FIRE_RL_rl_writeback_trap ||
	     WILL_FIRE_RL_rl_writeback_baseout ;

  // value method common_mv_flush
  assign common_mv_flush =
	     { wr_flush_whas && wr_flush_wget[66],
	       wr_flush_whas && wr_flush_wget[65],
	       wr_flush_wget[64:1],
	       wr_flush_whas && wr_flush_wget[0] } ;
  assign RDY_common_mv_flush = 1'd1 ;

  // value method common_mv_commit_log
  assign common_mv_commit_log = rg_commitlog ;
  assign RDY_common_mv_commit_log = 1'd1 ;

  // value method cache_mv_initiate_store_fst
  assign cache_mv_initiate_store_fst = wr_commit_cacheop_wget[1] ;
  assign RDY_cache_mv_initiate_store_fst = RDY_cache_mv_initiate_store_snd ;

  // value method cache_mv_initiate_store_snd
  assign cache_mv_initiate_store_snd = wr_commit_cacheop_wget[0] ;
  assign RDY_cache_mv_initiate_store_snd =
	     WILL_FIRE_RL_rl_writeback_memop &&
	     !rx_rx_memio_from_stage4_first_x[3] ;

  // value method cache_mv_initiate_ioop
  assign cache_mv_initiate_ioop = rg_epoch ;
  assign RDY_cache_mv_initiate_ioop =
	     WILL_FIRE_RL_rl_writeback_memop &&
	     (rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	      rx_rx_memio_from_stage4_first_x[3] &&
	      !rg_ioop_init ||
	      !rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	      rx_rx_memio_from_stage4_first_x[3]) ;

  // action method cache_ma_io_response
  assign RDY_cache_ma_io_response = 1'd1 ;
  assign CAN_FIRE_cache_ma_io_response = 1'd1 ;
  assign WILL_FIRE_cache_ma_io_response = EN_cache_ma_io_response ;

  // value method csrs_mv_csr_misa_c
  assign csrs_mv_csr_misa_c = csr_sbread_mv_csr_misa[2] ;
  assign RDY_csrs_mv_csr_misa_c = 1'd1 ;

  // value method csrs_mv_cacheenable
  assign csrs_mv_cacheenable = csr_sbread_mv_csr_customcontrol[5:0] ;
  assign RDY_csrs_mv_cacheenable = 1'd1 ;

  // value method csrs_mv_curr_priv
  assign csrs_mv_curr_priv = csr_mv_prv ;
  assign RDY_csrs_mv_curr_priv = 1'd1 ;

  // value method csrs_mv_csr_mstatus
  assign csrs_mv_csr_mstatus = csr_sbread_mv_csr_mstatus ;
  assign RDY_csrs_mv_csr_mstatus = 1'd1 ;

  // value method csrs_mv_csrs_to_decode
  assign csrs_mv_csrs_to_decode =
	     { csr_sbread_mv_csr_mideleg[16:0],
	       csr_sbread_mv_csr_dcsr[31:0],
	       csr_sbread_mv_csr_frm,
	       csr_mv_prv,
	       csr_sbread_mv_csr_mip[16:0],
	       csr_sbread_mv_csr_mie[16:0],
	       csr_sbread_mv_csr_misa[25:0],
	       csr_sbread_mv_csr_mstatus,
	       csr_sbread_mv_csr_mstatus } ;
  assign RDY_csrs_mv_csrs_to_decode = 1'd1 ;

  // value method csrs_mv_resume_wfi
  assign csrs_mv_resume_wfi = x__h11687 != 64'd0 ;
  assign RDY_csrs_mv_resume_wfi = 1'd1 ;

  // value method csrs_mv_csr_satp
  assign csrs_mv_csr_satp = csr_sbread_mv_csr_satp ;
  assign RDY_csrs_mv_csr_satp = 1'd1 ;

  // value method csrs_mv_pmp_cfg
  assign csrs_mv_pmp_cfg = csr_mv_pmpcfg ;
  assign RDY_csrs_mv_pmp_cfg = 1'd1 ;

  // value method csrs_mv_pmp_addr
  assign csrs_mv_pmp_addr = csr_mv_pmpaddr ;
  assign RDY_csrs_mv_pmp_addr = 1'd1 ;

  // value method csrs_sbread_mv_csr_misa
  assign csrs_sbread_mv_csr_misa = csr_sbread_mv_csr_misa ;
  assign RDY_csrs_sbread_mv_csr_misa = 1'd1 ;

  // value method csrs_sbread_mv_csr_mvendorid
  assign csrs_sbread_mv_csr_mvendorid = csr_sbread_mv_csr_mvendorid ;
  assign RDY_csrs_sbread_mv_csr_mvendorid = 1'd1 ;

  // value method csrs_sbread_mv_csr_stvec
  assign csrs_sbread_mv_csr_stvec = csr_sbread_mv_csr_stvec ;
  assign RDY_csrs_sbread_mv_csr_stvec = 1'd1 ;

  // value method csrs_sbread_mv_csr_mtvec
  assign csrs_sbread_mv_csr_mtvec = csr_sbread_mv_csr_mtvec ;
  assign RDY_csrs_sbread_mv_csr_mtvec = 1'd1 ;

  // value method csrs_sbread_mv_csr_mstatus
  assign csrs_sbread_mv_csr_mstatus = csr_sbread_mv_csr_mstatus ;
  assign RDY_csrs_sbread_mv_csr_mstatus = 1'd1 ;

  // value method csrs_sbread_mv_csr_marchid
  assign csrs_sbread_mv_csr_marchid = csr_sbread_mv_csr_marchid ;
  assign RDY_csrs_sbread_mv_csr_marchid = 1'd1 ;

  // value method csrs_sbread_mv_csr_mimpid
  assign csrs_sbread_mv_csr_mimpid = csr_sbread_mv_csr_mimpid ;
  assign RDY_csrs_sbread_mv_csr_mimpid = 1'd1 ;

  // value method csrs_sbread_mv_csr_mhartid
  assign csrs_sbread_mv_csr_mhartid = csr_sbread_mv_csr_mhartid ;
  assign RDY_csrs_sbread_mv_csr_mhartid = 1'd1 ;

  // value method csrs_sbread_mv_csr_mip
  assign csrs_sbread_mv_csr_mip = csr_sbread_mv_csr_mip ;
  assign RDY_csrs_sbread_mv_csr_mip = 1'd1 ;

  // value method csrs_sbread_mv_csr_sip
  assign csrs_sbread_mv_csr_sip = csr_sbread_mv_csr_sip ;
  assign RDY_csrs_sbread_mv_csr_sip = 1'd1 ;

  // value method csrs_sbread_mv_csr_mie
  assign csrs_sbread_mv_csr_mie = csr_sbread_mv_csr_mie ;
  assign RDY_csrs_sbread_mv_csr_mie = 1'd1 ;

  // value method csrs_sbread_mv_csr_sie
  assign csrs_sbread_mv_csr_sie = csr_sbread_mv_csr_sie ;
  assign RDY_csrs_sbread_mv_csr_sie = 1'd1 ;

  // value method csrs_sbread_mv_csr_mscratch
  assign csrs_sbread_mv_csr_mscratch = csr_sbread_mv_csr_mscratch ;
  assign RDY_csrs_sbread_mv_csr_mscratch = 1'd1 ;

  // value method csrs_sbread_mv_csr_sscratch
  assign csrs_sbread_mv_csr_sscratch = csr_sbread_mv_csr_sscratch ;
  assign RDY_csrs_sbread_mv_csr_sscratch = 1'd1 ;

  // value method csrs_sbread_mv_csr_sepc
  assign csrs_sbread_mv_csr_sepc = csr_sbread_mv_csr_sepc ;
  assign RDY_csrs_sbread_mv_csr_sepc = 1'd1 ;

  // value method csrs_sbread_mv_csr_stval
  assign csrs_sbread_mv_csr_stval = csr_sbread_mv_csr_stval ;
  assign RDY_csrs_sbread_mv_csr_stval = 1'd1 ;

  // value method csrs_sbread_mv_csr_scause
  assign csrs_sbread_mv_csr_scause = csr_sbread_mv_csr_scause ;
  assign RDY_csrs_sbread_mv_csr_scause = 1'd1 ;

  // value method csrs_sbread_mv_csr_mepc
  assign csrs_sbread_mv_csr_mepc = csr_sbread_mv_csr_mepc ;
  assign RDY_csrs_sbread_mv_csr_mepc = 1'd1 ;

  // value method csrs_sbread_mv_csr_mtval
  assign csrs_sbread_mv_csr_mtval = csr_sbread_mv_csr_mtval ;
  assign RDY_csrs_sbread_mv_csr_mtval = 1'd1 ;

  // value method csrs_sbread_mv_csr_mcause
  assign csrs_sbread_mv_csr_mcause = csr_sbread_mv_csr_mcause ;
  assign RDY_csrs_sbread_mv_csr_mcause = 1'd1 ;

  // value method csrs_sbread_mv_csr_mcycle
  assign csrs_sbread_mv_csr_mcycle = csr_sbread_mv_csr_mcycle ;
  assign RDY_csrs_sbread_mv_csr_mcycle = 1'd1 ;

  // value method csrs_sbread_mv_csr_minstret
  assign csrs_sbread_mv_csr_minstret = csr_sbread_mv_csr_minstret ;
  assign RDY_csrs_sbread_mv_csr_minstret = 1'd1 ;

  // value method csrs_sbread_mv_csr_fcsr
  assign csrs_sbread_mv_csr_fcsr = csr_sbread_mv_csr_fcsr ;
  assign RDY_csrs_sbread_mv_csr_fcsr = 1'd1 ;

  // value method csrs_sbread_mv_csr_time
  assign csrs_sbread_mv_csr_time = csr_sbread_mv_csr_time ;
  assign RDY_csrs_sbread_mv_csr_time = 1'd1 ;

  // value method csrs_sbread_mv_csr_mideleg
  assign csrs_sbread_mv_csr_mideleg = csr_sbread_mv_csr_mideleg ;
  assign RDY_csrs_sbread_mv_csr_mideleg = 1'd1 ;

  // value method csrs_sbread_mv_csr_medeleg
  assign csrs_sbread_mv_csr_medeleg = csr_sbread_mv_csr_medeleg ;
  assign RDY_csrs_sbread_mv_csr_medeleg = 1'd1 ;

  // value method csrs_sbread_mv_csr_pmpcfg0
  assign csrs_sbread_mv_csr_pmpcfg0 = csr_sbread_mv_csr_pmpcfg0 ;
  assign RDY_csrs_sbread_mv_csr_pmpcfg0 = 1'd1 ;

  // value method csrs_sbread_mv_csr_pmpaddr0
  assign csrs_sbread_mv_csr_pmpaddr0 = csr_sbread_mv_csr_pmpaddr0 ;
  assign RDY_csrs_sbread_mv_csr_pmpaddr0 = 1'd1 ;

  // value method csrs_sbread_mv_csr_pmpaddr1
  assign csrs_sbread_mv_csr_pmpaddr1 = csr_sbread_mv_csr_pmpaddr1 ;
  assign RDY_csrs_sbread_mv_csr_pmpaddr1 = 1'd1 ;

  // value method csrs_sbread_mv_csr_pmpaddr2
  assign csrs_sbread_mv_csr_pmpaddr2 = csr_sbread_mv_csr_pmpaddr2 ;
  assign RDY_csrs_sbread_mv_csr_pmpaddr2 = 1'd1 ;

  // value method csrs_sbread_mv_csr_pmpaddr3
  assign csrs_sbread_mv_csr_pmpaddr3 = csr_sbread_mv_csr_pmpaddr3 ;
  assign RDY_csrs_sbread_mv_csr_pmpaddr3 = 1'd1 ;

  // value method csrs_sbread_mv_csr_mcounteren
  assign csrs_sbread_mv_csr_mcounteren = csr_sbread_mv_csr_mcounteren ;
  assign RDY_csrs_sbread_mv_csr_mcounteren = 1'd1 ;

  // value method csrs_sbread_mv_csr_scounteren
  assign csrs_sbread_mv_csr_scounteren = csr_sbread_mv_csr_scounteren ;
  assign RDY_csrs_sbread_mv_csr_scounteren = 1'd1 ;

  // value method csrs_sbread_mv_csr_menvcfg
  assign csrs_sbread_mv_csr_menvcfg = csr_sbread_mv_csr_menvcfg ;
  assign RDY_csrs_sbread_mv_csr_menvcfg = 1'd1 ;

  // value method csrs_sbread_mv_csr_senvcfg
  assign csrs_sbread_mv_csr_senvcfg = csr_sbread_mv_csr_senvcfg ;
  assign RDY_csrs_sbread_mv_csr_senvcfg = 1'd1 ;

  // value method csrs_sbread_mv_csr_satp
  assign csrs_sbread_mv_csr_satp = csr_sbread_mv_csr_satp ;
  assign RDY_csrs_sbread_mv_csr_satp = 1'd1 ;

  // value method csrs_sbread_mv_csr_mcountinhibit
  assign csrs_sbread_mv_csr_mcountinhibit = csr_sbread_mv_csr_mcountinhibit ;
  assign RDY_csrs_sbread_mv_csr_mcountinhibit = 1'd1 ;

  // value method csrs_sbread_mv_csr_fflags
  assign csrs_sbread_mv_csr_fflags = csr_sbread_mv_csr_fflags ;
  assign RDY_csrs_sbread_mv_csr_fflags = 1'd1 ;

  // value method csrs_sbread_mv_csr_frm
  assign csrs_sbread_mv_csr_frm = csr_sbread_mv_csr_frm ;
  assign RDY_csrs_sbread_mv_csr_frm = 1'd1 ;

  // value method csrs_sbread_mv_csr_customcontrol
  assign csrs_sbread_mv_csr_customcontrol = csr_sbread_mv_csr_customcontrol ;
  assign RDY_csrs_sbread_mv_csr_customcontrol = 1'd1 ;

  // value method csrs_sbread_mv_csr_mhpmcounter3
  assign csrs_sbread_mv_csr_mhpmcounter3 = csr_sbread_mv_csr_mhpmcounter3 ;
  assign RDY_csrs_sbread_mv_csr_mhpmcounter3 = 1'd1 ;

  // value method csrs_sbread_mv_csr_mhpmcounter4
  assign csrs_sbread_mv_csr_mhpmcounter4 = csr_sbread_mv_csr_mhpmcounter4 ;
  assign RDY_csrs_sbread_mv_csr_mhpmcounter4 = 1'd1 ;

  // value method csrs_sbread_mv_csr_mhpmcounter5
  assign csrs_sbread_mv_csr_mhpmcounter5 = csr_sbread_mv_csr_mhpmcounter5 ;
  assign RDY_csrs_sbread_mv_csr_mhpmcounter5 = 1'd1 ;

  // value method csrs_sbread_mv_csr_mhpmcounter6
  assign csrs_sbread_mv_csr_mhpmcounter6 = csr_sbread_mv_csr_mhpmcounter6 ;
  assign RDY_csrs_sbread_mv_csr_mhpmcounter6 = 1'd1 ;

  // value method csrs_sbread_mv_csr_mhpmevent3
  assign csrs_sbread_mv_csr_mhpmevent3 = csr_sbread_mv_csr_mhpmevent3 ;
  assign RDY_csrs_sbread_mv_csr_mhpmevent3 = 1'd1 ;

  // value method csrs_sbread_mv_csr_mhpmevent4
  assign csrs_sbread_mv_csr_mhpmevent4 = csr_sbread_mv_csr_mhpmevent4 ;
  assign RDY_csrs_sbread_mv_csr_mhpmevent4 = 1'd1 ;

  // value method csrs_sbread_mv_csr_mhpmevent5
  assign csrs_sbread_mv_csr_mhpmevent5 = csr_sbread_mv_csr_mhpmevent5 ;
  assign RDY_csrs_sbread_mv_csr_mhpmevent5 = 1'd1 ;

  // value method csrs_sbread_mv_csr_mhpmevent6
  assign csrs_sbread_mv_csr_mhpmevent6 = csr_sbread_mv_csr_mhpmevent6 ;
  assign RDY_csrs_sbread_mv_csr_mhpmevent6 = 1'd1 ;

  // value method csrs_sbread_mv_csr_dcsr
  assign csrs_sbread_mv_csr_dcsr = csr_sbread_mv_csr_dcsr ;
  assign RDY_csrs_sbread_mv_csr_dcsr = 1'd1 ;

  // value method csrs_sbread_mv_csr_dpc
  assign csrs_sbread_mv_csr_dpc = csr_sbread_mv_csr_dpc ;
  assign RDY_csrs_sbread_mv_csr_dpc = 1'd1 ;

  // value method csrs_sbread_mv_csr_dscratch0
  assign csrs_sbread_mv_csr_dscratch0 = csr_sbread_mv_csr_dscratch0 ;
  assign RDY_csrs_sbread_mv_csr_dscratch0 = 1'd1 ;

  // value method csrs_sbread_mv_csr_dscratch1
  assign csrs_sbread_mv_csr_dscratch1 = csr_sbread_mv_csr_dscratch1 ;
  assign RDY_csrs_sbread_mv_csr_dscratch1 = 1'd1 ;

  // submodule csr
  mk_csrbox csr(.CLK(CLK),
		.RST_N(RST_N),
		.ma_core_req_req(csr_ma_core_req_req),
		.ma_events_events(csr_ma_events_events),
		.ma_incr_minstret_incr(csr_ma_incr_minstret_incr),
		.ma_set_fflags__fflags(csr_ma_set_fflags__fflags),
		.ma_set_fflags_rdtype(csr_ma_set_fflags_rdtype),
		.ma_set_mip_debug_interrupt__debug_interrupt(csr_ma_set_mip_debug_interrupt__debug_interrupt),
		.ma_set_mip_meip__meip(csr_ma_set_mip_meip__meip),
		.ma_set_mip_msip__msip(csr_ma_set_mip_msip__msip),
		.ma_set_mip_mtip__mtip(csr_ma_set_mip_mtip__mtip),
		.ma_set_mip_seip__seip(csr_ma_set_mip_seip__seip),
		.ma_set_time__time(csr_ma_set_time__time),
		.ma_stop_count__stop(csr_ma_stop_count__stop),
		.mav_upd_on_ret_retype(csr_mav_upd_on_ret_retype),
		.mav_upd_on_trap_cause(csr_mav_upd_on_trap_cause),
		.mav_upd_on_trap_pc(csr_mav_upd_on_trap_pc),
		.mav_upd_on_trap_tval(csr_mav_upd_on_trap_tval),
		.EN_ma_stop_count(csr_EN_ma_stop_count),
		.EN_ma_events(csr_EN_ma_events),
		.EN_ma_set_mip_meip(csr_EN_ma_set_mip_meip),
		.EN_ma_set_mip_mtip(csr_EN_ma_set_mip_mtip),
		.EN_ma_set_mip_msip(csr_EN_ma_set_mip_msip),
		.EN_ma_set_mip_seip(csr_EN_ma_set_mip_seip),
		.EN_ma_incr_minstret(csr_EN_ma_incr_minstret),
		.EN_ma_set_time(csr_EN_ma_set_time),
		.EN_ma_set_fflags(csr_EN_ma_set_fflags),
		.EN_ma_set_mip_debug_interrupt(csr_EN_ma_set_mip_debug_interrupt),
		.EN_ma_core_req(csr_EN_ma_core_req),
		.EN_mav_upd_on_ret(csr_EN_mav_upd_on_ret),
		.EN_mav_upd_on_trap(csr_EN_mav_upd_on_trap),
		.sbread_mv_csr_misa(csr_sbread_mv_csr_misa),
		.RDY_sbread_mv_csr_misa(),
		.sbread_mv_csr_mvendorid(csr_sbread_mv_csr_mvendorid),
		.RDY_sbread_mv_csr_mvendorid(),
		.sbread_mv_csr_stvec(csr_sbread_mv_csr_stvec),
		.RDY_sbread_mv_csr_stvec(),
		.sbread_mv_csr_mtvec(csr_sbread_mv_csr_mtvec),
		.RDY_sbread_mv_csr_mtvec(),
		.sbread_mv_csr_mstatus(csr_sbread_mv_csr_mstatus),
		.RDY_sbread_mv_csr_mstatus(),
		.sbread_mv_csr_marchid(csr_sbread_mv_csr_marchid),
		.RDY_sbread_mv_csr_marchid(),
		.sbread_mv_csr_mimpid(csr_sbread_mv_csr_mimpid),
		.RDY_sbread_mv_csr_mimpid(),
		.sbread_mv_csr_mhartid(csr_sbread_mv_csr_mhartid),
		.RDY_sbread_mv_csr_mhartid(),
		.sbread_mv_csr_mip(csr_sbread_mv_csr_mip),
		.RDY_sbread_mv_csr_mip(),
		.sbread_mv_csr_sip(csr_sbread_mv_csr_sip),
		.RDY_sbread_mv_csr_sip(),
		.sbread_mv_csr_mie(csr_sbread_mv_csr_mie),
		.RDY_sbread_mv_csr_mie(),
		.sbread_mv_csr_sie(csr_sbread_mv_csr_sie),
		.RDY_sbread_mv_csr_sie(),
		.sbread_mv_csr_mscratch(csr_sbread_mv_csr_mscratch),
		.RDY_sbread_mv_csr_mscratch(),
		.sbread_mv_csr_sscratch(csr_sbread_mv_csr_sscratch),
		.RDY_sbread_mv_csr_sscratch(),
		.sbread_mv_csr_sepc(csr_sbread_mv_csr_sepc),
		.RDY_sbread_mv_csr_sepc(),
		.sbread_mv_csr_stval(csr_sbread_mv_csr_stval),
		.RDY_sbread_mv_csr_stval(),
		.sbread_mv_csr_scause(csr_sbread_mv_csr_scause),
		.RDY_sbread_mv_csr_scause(),
		.sbread_mv_csr_mepc(csr_sbread_mv_csr_mepc),
		.RDY_sbread_mv_csr_mepc(),
		.sbread_mv_csr_mtval(csr_sbread_mv_csr_mtval),
		.RDY_sbread_mv_csr_mtval(),
		.sbread_mv_csr_mcause(csr_sbread_mv_csr_mcause),
		.RDY_sbread_mv_csr_mcause(),
		.sbread_mv_csr_mcycle(csr_sbread_mv_csr_mcycle),
		.RDY_sbread_mv_csr_mcycle(),
		.sbread_mv_csr_minstret(csr_sbread_mv_csr_minstret),
		.RDY_sbread_mv_csr_minstret(),
		.sbread_mv_csr_fcsr(csr_sbread_mv_csr_fcsr),
		.RDY_sbread_mv_csr_fcsr(),
		.sbread_mv_csr_time(csr_sbread_mv_csr_time),
		.RDY_sbread_mv_csr_time(),
		.sbread_mv_csr_mideleg(csr_sbread_mv_csr_mideleg),
		.RDY_sbread_mv_csr_mideleg(),
		.sbread_mv_csr_medeleg(csr_sbread_mv_csr_medeleg),
		.RDY_sbread_mv_csr_medeleg(),
		.sbread_mv_csr_pmpcfg0(csr_sbread_mv_csr_pmpcfg0),
		.RDY_sbread_mv_csr_pmpcfg0(),
		.sbread_mv_csr_pmpaddr0(csr_sbread_mv_csr_pmpaddr0),
		.RDY_sbread_mv_csr_pmpaddr0(),
		.sbread_mv_csr_pmpaddr1(csr_sbread_mv_csr_pmpaddr1),
		.RDY_sbread_mv_csr_pmpaddr1(),
		.sbread_mv_csr_pmpaddr2(csr_sbread_mv_csr_pmpaddr2),
		.RDY_sbread_mv_csr_pmpaddr2(),
		.sbread_mv_csr_pmpaddr3(csr_sbread_mv_csr_pmpaddr3),
		.RDY_sbread_mv_csr_pmpaddr3(),
		.sbread_mv_csr_mcounteren(csr_sbread_mv_csr_mcounteren),
		.RDY_sbread_mv_csr_mcounteren(),
		.sbread_mv_csr_scounteren(csr_sbread_mv_csr_scounteren),
		.RDY_sbread_mv_csr_scounteren(),
		.sbread_mv_csr_menvcfg(csr_sbread_mv_csr_menvcfg),
		.RDY_sbread_mv_csr_menvcfg(),
		.sbread_mv_csr_senvcfg(csr_sbread_mv_csr_senvcfg),
		.RDY_sbread_mv_csr_senvcfg(),
		.sbread_mv_csr_satp(csr_sbread_mv_csr_satp),
		.RDY_sbread_mv_csr_satp(),
		.sbread_mv_csr_mcountinhibit(csr_sbread_mv_csr_mcountinhibit),
		.RDY_sbread_mv_csr_mcountinhibit(),
		.sbread_mv_csr_fflags(csr_sbread_mv_csr_fflags),
		.RDY_sbread_mv_csr_fflags(),
		.sbread_mv_csr_frm(csr_sbread_mv_csr_frm),
		.RDY_sbread_mv_csr_frm(),
		.sbread_mv_csr_customcontrol(csr_sbread_mv_csr_customcontrol),
		.RDY_sbread_mv_csr_customcontrol(),
		.sbread_mv_csr_mhpmcounter3(csr_sbread_mv_csr_mhpmcounter3),
		.RDY_sbread_mv_csr_mhpmcounter3(),
		.sbread_mv_csr_mhpmcounter4(csr_sbread_mv_csr_mhpmcounter4),
		.RDY_sbread_mv_csr_mhpmcounter4(),
		.sbread_mv_csr_mhpmcounter5(csr_sbread_mv_csr_mhpmcounter5),
		.RDY_sbread_mv_csr_mhpmcounter5(),
		.sbread_mv_csr_mhpmcounter6(csr_sbread_mv_csr_mhpmcounter6),
		.RDY_sbread_mv_csr_mhpmcounter6(),
		.sbread_mv_csr_mhpmevent3(csr_sbread_mv_csr_mhpmevent3),
		.RDY_sbread_mv_csr_mhpmevent3(),
		.sbread_mv_csr_mhpmevent4(csr_sbread_mv_csr_mhpmevent4),
		.RDY_sbread_mv_csr_mhpmevent4(),
		.sbread_mv_csr_mhpmevent5(csr_sbread_mv_csr_mhpmevent5),
		.RDY_sbread_mv_csr_mhpmevent5(),
		.sbread_mv_csr_mhpmevent6(csr_sbread_mv_csr_mhpmevent6),
		.RDY_sbread_mv_csr_mhpmevent6(),
		.sbread_mv_csr_dcsr(csr_sbread_mv_csr_dcsr),
		.RDY_sbread_mv_csr_dcsr(),
		.sbread_mv_csr_dpc(csr_sbread_mv_csr_dpc),
		.RDY_sbread_mv_csr_dpc(),
		.sbread_mv_csr_dscratch0(csr_sbread_mv_csr_dscratch0),
		.RDY_sbread_mv_csr_dscratch0(),
		.sbread_mv_csr_dscratch1(csr_sbread_mv_csr_dscratch1),
		.RDY_sbread_mv_csr_dscratch1(),
		.RDY_ma_stop_count(),
		.RDY_ma_events(),
		.mv_pmpcfg(csr_mv_pmpcfg),
		.RDY_mv_pmpcfg(),
		.mv_pmpaddr(csr_mv_pmpaddr),
		.RDY_mv_pmpaddr(),
		.RDY_ma_set_mip_meip(),
		.RDY_ma_set_mip_mtip(),
		.RDY_ma_set_mip_msip(),
		.RDY_ma_set_mip_seip(),
		.RDY_ma_incr_minstret(),
		.RDY_ma_set_time(),
		.RDY_ma_set_fflags(),
		.RDY_ma_set_mip_debug_interrupt(),
		.mv_debug_mode(csr_mv_debug_mode),
		.RDY_mv_debug_mode(),
		.mv_stop_count(csr_mv_stop_count),
		.RDY_mv_stop_count(),
		.mv_stop_timer(csr_mv_stop_timer),
		.RDY_mv_stop_timer(),
		.RDY_ma_core_req(csr_RDY_ma_core_req),
		.mv_core_resp(csr_mv_core_resp),
		.RDY_mv_core_resp(),
		.mav_upd_on_ret(csr_mav_upd_on_ret),
		.RDY_mav_upd_on_ret(),
		.mav_upd_on_trap(csr_mav_upd_on_trap),
		.RDY_mav_upd_on_trap(),
		.mv_prv(csr_mv_prv),
		.RDY_mv_prv(),
		.mv_virtual(),
		.RDY_mv_virtual());

  // rule RL_mkConnectionVtoAf
  assign CAN_FIRE_RL_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf = 1'd1 ;

  // rule RL_rl_writeback_trap
  assign CAN_FIRE_RL_rl_writeback_trap =
	     rx_rx_fuid_from_stage4_first_deq_rdy_b &&
	     rx_rx_trapout_from_stage4_first_deq_rdy_b &&
	     rx_rx_commitlog_first_deq_rdy_b &&
	     rx_rx_fuid_from_stage4_first_x[1:0] == 2'd2 ;
  assign WILL_FIRE_RL_rl_writeback_trap = CAN_FIRE_RL_rl_writeback_trap ;

  // rule RL_rl_writeback_system
  assign CAN_FIRE_RL_rl_writeback_system =
	     rx_rx_fuid_from_stage4_first_deq_rdy_b &&
	     rx_rx_systemout_from_stage4_first_deq_rdy_b &&
	     csr_RDY_ma_core_req &&
	     rx_rx_commitlog_first_deq_rdy_b &&
	     rx_rx_fuid_from_stage4_first_x[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_rl_writeback_system = CAN_FIRE_RL_rl_writeback_system ;

  // rule RL_rl_writeback_baseout
  assign CAN_FIRE_RL_rl_writeback_baseout =
	     rx_rx_fuid_from_stage4_first_deq_rdy_b &&
	     rx_rx_commitlog_first_deq_rdy_b &&
	     rx_rx_baseout_from_stage4_first_deq_rdy_b &&
	     rx_rx_fuid_from_stage4_first_x[1:0] == 2'd0 ;
  assign WILL_FIRE_RL_rl_writeback_baseout =
	     CAN_FIRE_RL_rl_writeback_baseout ;

  // rule RL_rl_writeback_memop
  assign CAN_FIRE_RL_rl_writeback_memop =
	     rx_rx_fuid_from_stage4_first_deq_rdy_b &&
	     rx_rx_memio_from_stage4_first_deq_rdy_b &&
	     rx_rx_commitlog_first_deq_rdy_b &&
	     rx_rx_fuid_from_stage4_first_x[1:0] == 2'd3 ;
  assign WILL_FIRE_RL_rl_writeback_memop = CAN_FIRE_RL_rl_writeback_memop ;

  // rule RL_rl_incr_minstret
  assign CAN_FIRE_RL_rl_incr_minstret = wr_increment_minstret_whas ;
  assign WILL_FIRE_RL_rl_incr_minstret = wr_increment_minstret_whas ;

  // rule RL_rg_commitlog__dreg_update
  assign CAN_FIRE_RL_rg_commitlog__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_commitlog__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_csr_mav_upd_on_trap_1__SEL_1 =
	     WILL_FIRE_RL_rl_writeback_trap &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     !rx_rx_trapout_from_stage4_first_x[71] ;
  assign MUX_csr_mav_upd_on_trap_1__SEL_2 =
	     WILL_FIRE_RL_rl_writeback_memop &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     IF_rx_memio_w_data_whas__55_THEN_rx_memio_w_da_ETC___d221 ;
  assign MUX_rg_commitlog_1_wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_writeback_baseout &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 ;
  assign MUX_rg_commitlog_1_wset_1__SEL_2 =
	     WILL_FIRE_RL_rl_writeback_system &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     (csr_mv_core_resp[65] ||
	      rx_rx_systemout_from_stage4_first_x[2:0] == 3'd0) ;
  assign MUX_rg_commitlog_1_wset_1__SEL_3 =
	     WILL_FIRE_RL_rl_writeback_memop &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     IF_rx_memio_w_data_whas__55_THEN_NOT_rx_memio__ETC___d202 ;
  assign MUX_rg_epoch_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_writeback_trap &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 ;
  assign MUX_rg_epoch_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_writeback_system &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     rx_rx_systemout_from_stage4_first_x[2:0] == 3'd0 ;
  assign MUX_rx_commitlog_w_ena_wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_writeback_system &&
	     (csr_mv_core_resp[65] ||
	      rx_rx_systemout_from_stage4_first_x[2:0] == 3'd0 ||
	      !rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24) ;
  assign MUX_rx_commitlog_w_ena_wset_1__SEL_2 =
	     WILL_FIRE_RL_rl_writeback_memop &&
	     (IF_rx_memio_w_data_whas__55_THEN_NOT_rx_memio__ETC___d166 ||
	      !rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24) ;
  assign MUX_wr_commit_wset_1__SEL_2 =
	     WILL_FIRE_RL_rl_writeback_memop &&
	     (!rx_rx_memio_from_stage4_first_x[3] &&
	      rx_rx_memio_from_stage4_first_x[2:0] == 3'd2 ||
	      rx_rx_memio_from_stage4_first_x[3] && rg_ioop_init &&
	      EN_cache_ma_io_response &&
	      cache_ma_io_response_r[132] ||
	      !rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24) ;
  assign MUX_wr_flush_wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_writeback_trap &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d38 ;
  assign MUX_csr_mav_upd_on_trap_1__VAL_1 =
	     rx_rx_trapout_from_stage4_first_x[70:64] ;
  assign MUX_csr_mav_upd_on_trap_2__VAL_2 =
	     rx_rx_fuid_from_stage4_first_x[71:8] ;
  assign MUX_rg_commitlog_1_wset_1__VAL_1 =
	     { 1'd1, csr_mv_prv, rx_rx_commitlog_first_x[306:0] } ;
  assign MUX_rg_commitlog_1_wset_1__VAL_2 =
	     { 1'd1,
	       csr_mv_prv,
	       rx_rx_commitlog_first_x[306:211],
	       2'd2,
	       62'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       csr_address__h6039,
	       x__h6279,
	       rx_rx_commitlog_first_x[70:66],
	       csr_mv_core_resp[64:1],
	       rx_rx_commitlog_first_x[1:0] } ;
  assign MUX_rg_commitlog_1_wset_1__VAL_3 =
	     { 1'd1,
	       csr_mv_prv,
	       rx_rx_commitlog_first_x[306:211],
	       2'd1,
	       rx_rx_commitlog_first_x[208:81],
	       rx_rx_memio_from_stage4_first_x[3] ?
		 x__h9216 :
		 rx_rx_memio_from_stage4_first_x[69:6],
	       rx_rx_commitlog_first_x[16:0] } ;
  assign MUX_wr_commit_wset_1__VAL_1 =
	     { rx_rx_fuid_from_stage4_first_x[76:72],
	       !rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24,
	       rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 ?
		 { rx_rx_fuid_from_stage4_first_x[7:3],
		   csr_mv_core_resp[64:1] } :
		 { rx_rx_fuid_from_stage4_first_x[7:0],
		   61'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } } ;
  assign MUX_wr_commit_wset_1__VAL_2 =
	     { rx_rx_fuid_from_stage4_first_x[76:72],
	       !rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 ||
	       rx_rx_memio_from_stage4_first_x[3] &&
	       cache_ma_io_response_r[67],
	       rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 ?
		 IF_IF_rx_memio_w_data_whas__55_THEN_NOT_rx_mem_ETC___d189 :
		 { rx_rx_fuid_from_stage4_first_x[7:0],
		   61'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } } ;
  assign MUX_wr_commit_wset_1__VAL_3 =
	     { rx_rx_fuid_from_stage4_first_x[76:72],
	       1'd1,
	       rx_rx_fuid_from_stage4_first_x[7:0],
	       61'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_wr_commit_wset_1__VAL_4 =
	     { rx_rx_fuid_from_stage4_first_x[76:72],
	       !rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24,
	       rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 ?
		 { rx_rx_fuid_from_stage4_first_x[7:3],
		   rx_rx_baseout_from_stage4_first_x[69:6] } :
		 { rx_rx_fuid_from_stage4_first_x[7:0],
		   61'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } } ;
  assign MUX_wr_flush_wset_1__VAL_1 =
	     rx_rx_trapout_from_stage4_first_x[71] ?
	       { rx_rx_trapout_from_stage4_first_x[70:64] == 7'd2,
		 1'd1,
		 rx_rx_fuid_from_stage4_first_x[71:8],
		 rx_rx_trapout_from_stage4_first_x[70:64] == 7'd1 } :
	       { 2'd1, csr_mav_upd_on_trap, 1'd0 } ;
  assign MUX_wr_flush_wset_1__VAL_2 = { 2'd1, csr_mav_upd_on_ret, 1'd0 } ;
  assign MUX_wr_flush_wset_1__VAL_3 = { 2'd1, csr_mav_upd_on_trap, 1'd0 } ;

  // inlined wires
  assign rx_fuid_w_ena_whas =
	     WILL_FIRE_RL_rl_writeback_system &&
	     (csr_mv_core_resp[65] ||
	      rx_rx_systemout_from_stage4_first_x[2:0] == 3'd0 ||
	      !rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24) ||
	     WILL_FIRE_RL_rl_writeback_memop &&
	     (IF_rx_memio_w_data_whas__55_THEN_NOT_rx_memio__ETC___d166 ||
	      !rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24) ||
	     WILL_FIRE_RL_rl_writeback_baseout ||
	     WILL_FIRE_RL_rl_writeback_trap ;
  always@(MUX_wr_flush_wset_1__SEL_1 or
	  MUX_wr_flush_wset_1__VAL_1 or
	  MUX_rg_epoch_write_1__SEL_2 or
	  MUX_wr_flush_wset_1__VAL_2 or
	  MUX_csr_mav_upd_on_trap_1__SEL_2 or MUX_wr_flush_wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wr_flush_wset_1__SEL_1: wr_flush_wget = MUX_wr_flush_wset_1__VAL_1;
      MUX_rg_epoch_write_1__SEL_2: wr_flush_wget = MUX_wr_flush_wset_1__VAL_2;
      MUX_csr_mav_upd_on_trap_1__SEL_2:
	  wr_flush_wget = MUX_wr_flush_wset_1__VAL_3;
      default: wr_flush_wget =
		   67'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign wr_flush_whas =
	     WILL_FIRE_RL_rl_writeback_trap &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d38 ||
	     WILL_FIRE_RL_rl_writeback_system &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     rx_rx_systemout_from_stage4_first_x[2:0] == 3'd0 ||
	     WILL_FIRE_RL_rl_writeback_memop &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     IF_rx_memio_w_data_whas__55_THEN_rx_memio_w_da_ETC___d221 ;
  assign wr_increment_minstret_whas =
	     WILL_FIRE_RL_rl_writeback_baseout &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 ||
	     WILL_FIRE_RL_rl_writeback_system &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     (csr_mv_core_resp[65] ||
	      rx_rx_systemout_from_stage4_first_x[2:0] == 3'd0) ||
	     WILL_FIRE_RL_rl_writeback_memop &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     IF_rx_memio_w_data_whas__55_THEN_NOT_rx_memio__ETC___d202 ;
  assign wr_commit_cacheop_wget =
	     { rg_epoch, rx_rx_memio_from_stage4_first_x[4] } ;
  always@(MUX_rg_commitlog_1_wset_1__SEL_1 or
	  MUX_rg_commitlog_1_wset_1__VAL_1 or
	  MUX_rg_commitlog_1_wset_1__SEL_2 or
	  MUX_rg_commitlog_1_wset_1__VAL_2 or
	  MUX_rg_commitlog_1_wset_1__SEL_3 or
	  MUX_rg_commitlog_1_wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_commitlog_1_wset_1__SEL_1:
	  rg_commitlog_1_wget = MUX_rg_commitlog_1_wset_1__VAL_1;
      MUX_rg_commitlog_1_wset_1__SEL_2:
	  rg_commitlog_1_wget = MUX_rg_commitlog_1_wset_1__VAL_2;
      MUX_rg_commitlog_1_wset_1__SEL_3:
	  rg_commitlog_1_wget = MUX_rg_commitlog_1_wset_1__VAL_3;
      default: rg_commitlog_1_wget =
		   310'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign wr_count_exceptions_whas =
	     WILL_FIRE_RL_rl_writeback_trap &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     !rx_rx_trapout_from_stage4_first_x[71] &&
	     !MUX_csr_mav_upd_on_trap_1__VAL_1[6] ;
  assign wr_count_interrupts_whas =
	     WILL_FIRE_RL_rl_writeback_trap &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     !rx_rx_trapout_from_stage4_first_x[71] &&
	     MUX_csr_mav_upd_on_trap_1__VAL_1[6] ;
  assign wr_count_csrops_whas =
	     WILL_FIRE_RL_rl_writeback_system &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     csr_mv_core_resp[65] &&
	     rx_rx_systemout_from_stage4_first_x[2:0] != 3'd0 ;
  assign wr_count_microtrap_whas =
	     WILL_FIRE_RL_rl_writeback_trap &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     rx_rx_trapout_from_stage4_first_x[71] &&
	     (rx_rx_trapout_from_stage4_first_x[70:64] == 7'd2 ||
	      rx_rx_trapout_from_stage4_first_x[70:64] == 7'd1 ||
	      rx_rx_trapout_from_stage4_first_x[70:64] == 7'd3) ;

  // register rg_commitlog
  assign rg_commitlog_D_IN =
	     wr_increment_minstret_whas ?
	       rg_commitlog_1_wget :
	       { 1'd0,
		 309'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign rg_commitlog_EN = 1'd1 ;

  // register rg_csr_wait
  assign rg_csr_wait_D_IN =
	     !csr_mv_core_resp[65] &&
	     rx_rx_systemout_from_stage4_first_x[2:0] != 3'd0 ;
  assign rg_csr_wait_EN =
	     WILL_FIRE_RL_rl_writeback_system &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 ;

  // register rg_epoch
  always@(MUX_rg_epoch_write_1__SEL_1 or
	  rg_epoch or
	  MUX_rg_epoch_write_1__SEL_2 or MUX_csr_mav_upd_on_trap_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_epoch_write_1__SEL_1: rg_epoch_D_IN = ~rg_epoch;
      MUX_rg_epoch_write_1__SEL_2: rg_epoch_D_IN = ~rg_epoch;
      MUX_csr_mav_upd_on_trap_1__SEL_2: rg_epoch_D_IN = ~rg_epoch;
      default: rg_epoch_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign rg_epoch_EN =
	     WILL_FIRE_RL_rl_writeback_trap &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 ||
	     WILL_FIRE_RL_rl_writeback_system &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     rx_rx_systemout_from_stage4_first_x[2:0] == 3'd0 ||
	     WILL_FIRE_RL_rl_writeback_memop &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     IF_rx_memio_w_data_whas__55_THEN_rx_memio_w_da_ETC___d221 ;

  // register rg_ioop_init
  assign rg_ioop_init_D_IN = !rg_ioop_init ;
  assign rg_ioop_init_EN =
	     WILL_FIRE_RL_rl_writeback_memop &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     IF_rx_memio_w_data_whas__55_THEN_rx_memio_w_da_ETC___d217 ;

  // submodule csr
  assign csr_ma_core_req_req =
	     { rx_rx_systemout_from_stage4_first_x[14:3],
	       rx_rx_systemout_from_stage4_first_x[80:17],
	       rx_rx_systemout_from_stage4_first_x_BITS_2_TO_0__q1[1:0],
	       MUX_csr_mav_upd_on_trap_2__VAL_2[1] } ;
  assign csr_ma_events_events = perf_ma_events_e ;
  assign csr_ma_incr_minstret_incr = 64'd1 ;
  assign csr_ma_set_fflags__fflags =
	     rx_rx_baseout_from_stage4_first_x[75:71] ;
  assign csr_ma_set_fflags_rdtype = rx_rx_fuid_from_stage4_first_x[72] ;
  assign csr_ma_set_mip_debug_interrupt__debug_interrupt =
	     debug_ma_debug_interrupt__int ;
  assign csr_ma_set_mip_meip__meip = interrupts_ma_plic_meip_intrpt ;
  assign csr_ma_set_mip_msip__msip = interrupts_ma_clint_msip_intrpt ;
  assign csr_ma_set_mip_mtip__mtip = interrupts_ma_clint_mtip_intrpt ;
  assign csr_ma_set_mip_seip__seip = interrupts_ma_plic_seip_intrpt ;
  assign csr_ma_set_time__time = interrupts_ma_clint_mtime_mtime ;
  assign csr_ma_stop_count__stop = csr_mv_stop_count ;
  assign csr_mav_upd_on_ret_retype =
	     rx_rx_systemout_from_stage4_first_x_BITS_14_TO_3__q2[11:4] ;
  assign csr_mav_upd_on_trap_cause =
	     MUX_csr_mav_upd_on_trap_1__SEL_1 ?
	       rx_rx_trapout_from_stage4_first_x[70:64] :
	       cache_ma_io_response_r[66:60] ;
  assign csr_mav_upd_on_trap_pc = rx_rx_fuid_from_stage4_first_x[71:8] ;
  assign csr_mav_upd_on_trap_tval =
	     MUX_csr_mav_upd_on_trap_1__SEL_1 ?
	       rx_rx_trapout_from_stage4_first_x[63:0] :
	       cache_ma_io_response_r[131:68] ;
  assign csr_EN_ma_stop_count = 1'd1 ;
  assign csr_EN_ma_events = EN_perf_ma_events ;
  assign csr_EN_ma_set_mip_meip = EN_interrupts_ma_plic_meip ;
  assign csr_EN_ma_set_mip_mtip = EN_interrupts_ma_clint_mtip ;
  assign csr_EN_ma_set_mip_msip = EN_interrupts_ma_clint_msip ;
  assign csr_EN_ma_set_mip_seip = EN_interrupts_ma_plic_seip ;
  assign csr_EN_ma_incr_minstret = wr_increment_minstret_whas ;
  assign csr_EN_ma_set_time = EN_interrupts_ma_clint_mtime ;
  assign csr_EN_ma_set_fflags = MUX_rg_commitlog_1_wset_1__SEL_1 ;
  assign csr_EN_ma_set_mip_debug_interrupt = EN_debug_ma_debug_interrupt ;
  assign csr_EN_ma_core_req =
	     WILL_FIRE_RL_rl_writeback_system &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     rx_rx_systemout_from_stage4_first_x[2:0] != 3'd0 &&
	     !rg_csr_wait ;
  assign csr_EN_mav_upd_on_ret = MUX_rg_epoch_write_1__SEL_2 ;
  assign csr_EN_mav_upd_on_trap =
	     WILL_FIRE_RL_rl_writeback_trap &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     !rx_rx_trapout_from_stage4_first_x[71] ||
	     WILL_FIRE_RL_rl_writeback_memop &&
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     IF_rx_memio_w_data_whas__55_THEN_rx_memio_w_da_ETC___d221 ;

  // remaining internal signals
  assign IF_IF_rx_memio_w_data_whas__55_THEN_NOT_rx_mem_ETC___d189 =
	     rx_rx_memio_from_stage4_first_x[3] ?
	       (cache_ma_io_response_r[67] ?
		  { rx_rx_fuid_from_stage4_first_x[7:0],
		    61'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } :
		  { rx_rx_fuid_from_stage4_first_x[7:3],
		    _theResult_____1__h9023 }) :
	       { rx_rx_fuid_from_stage4_first_x[7:3],
		 rx_rx_memio_from_stage4_first_x[69:6] } ;
  assign IF_rx_memio_w_data_whas__55_THEN_NOT_rx_memio__ETC___d166 =
	     !rx_rx_memio_from_stage4_first_x[3] ||
	     rg_ioop_init && EN_cache_ma_io_response &&
	     cache_ma_io_response_r[132] ;
  assign IF_rx_memio_w_data_whas__55_THEN_NOT_rx_memio__ETC___d202 =
	     !rx_rx_memio_from_stage4_first_x[3] ||
	     rg_ioop_init && EN_cache_ma_io_response &&
	     cache_ma_io_response_r[132] &&
	     !cache_ma_io_response_r[67] ;
  assign IF_rx_memio_w_data_whas__55_THEN_rx_memio_w_da_ETC___d217 =
	     rx_rx_memio_from_stage4_first_x[3] &&
	     (EN_cache_ma_io_response && cache_ma_io_response_r[132] ||
	      !rg_ioop_init) ;
  assign IF_rx_memio_w_data_whas__55_THEN_rx_memio_w_da_ETC___d221 =
	     rx_rx_memio_from_stage4_first_x[3] && rg_ioop_init &&
	     EN_cache_ma_io_response &&
	     cache_ma_io_response_r[132] &&
	     cache_ma_io_response_r[67] ;
  assign _theResult_____1__h9023 =
	     rx_rx_memio_from_stage4_first_x[5] ?
	       { 32'hFFFFFFFF, cache_ma_io_response_r[99:68] } :
	       cache_ma_io_response_r[131:68] ;
  assign csr_address__h6039 =
	     (rx_rx_systemout_from_stage4_first_x[2:0] == 3'd0) ?
	       12'h300 :
	       rx_rx_commitlog_first_x[146:135] ;
  assign rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 =
	     rg_epoch == rx_rx_fuid_from_stage4_first_x[2] ;
  assign rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d38 =
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     (rx_rx_trapout_from_stage4_first_x[70:64] == 7'd2 ||
	      rx_rx_trapout_from_stage4_first_x[70:64] == 7'd1 ||
	      rx_rx_trapout_from_stage4_first_x[70:64] == 7'd3 ||
	      !rx_rx_trapout_from_stage4_first_x[71]) ;
  assign rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d54 =
	     rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d24 &&
	     rx_rx_trapout_from_stage4_first_x[71] &&
	     rx_rx_trapout_from_stage4_first_x[70:64] != 7'd2 &&
	     rx_rx_trapout_from_stage4_first_x[70:64] != 7'd1 &&
	     rx_rx_trapout_from_stage4_first_x[70:64] != 7'd3 ;
  assign rx_rx_systemout_from_stage4_first_x_BITS_14_TO_3__q2 =
	     rx_rx_systemout_from_stage4_first_x[14:3] ;
  assign rx_rx_systemout_from_stage4_first_x_BITS_2_TO_0__q1 =
	     rx_rx_systemout_from_stage4_first_x[2:0] ;
  assign x__h11687 = csr_sbread_mv_csr_mip & csr_sbread_mv_csr_mie ;
  assign x__h6279 =
	     (rx_rx_systemout_from_stage4_first_x[2:0] == 3'd0) ?
	       csr_sbread_mv_csr_mstatus :
	       rx_rx_commitlog_first_x[134:71] ;
  assign x__h9216 =
	     (rx_rx_fuid_from_stage4_first_x[7:3] == 5'd0 &&
	      !rx_rx_fuid_from_stage4_first_x[72]) ?
	       64'd0 :
	       _theResult_____1__h9023 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_commitlog <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      309'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	rg_csr_wait <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_epoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_ioop_init <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_commitlog_EN)
	  rg_commitlog <= `BSV_ASSIGNMENT_DELAY rg_commitlog_D_IN;
	if (rg_csr_wait_EN)
	  rg_csr_wait <= `BSV_ASSIGNMENT_DELAY rg_csr_wait_D_IN;
	if (rg_epoch_EN) rg_epoch <= `BSV_ASSIGNMENT_DELAY rg_epoch_D_IN;
	if (rg_ioop_init_EN)
	  rg_ioop_init <= `BSV_ASSIGNMENT_DELAY rg_ioop_init_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_commitlog =
	310'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_csr_wait = 1'h0;
    rg_epoch = 1'h0;
    rg_ioop_init = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_trap &&
	  rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d54)
	$display("Dynamic assertion failed: \"src//stage5.bsv\", line 262, column 32\nReceived unexpected Micro-Trap cause");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_trap &&
	  rg_epoch_1_EQ_IF_rx_fuid_w_data_whas__1_THEN_r_ETC___d54)
	$finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkstage5

