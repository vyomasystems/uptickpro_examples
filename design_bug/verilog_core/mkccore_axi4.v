//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
//
// On Tue Jul 29 14:28:24 +04 2025
//
//
// Ports:
// Name                         I/O  size props
// master_d_AWVALID               O     1 reg
// master_d_AWADDR                O    32 reg
// master_d_AWPROT                O     3 reg
// master_d_AWLEN                 O     8 reg
// master_d_AWSIZE                O     3 reg
// master_d_AWBURST               O     2 reg
// master_d_AWID                  O     4 reg
// master_d_WVALID                O     1 reg
// master_d_WDATA                 O    64 reg
// master_d_WSTRB                 O     8 reg
// master_d_WLAST                 O     1 reg
// master_d_WID                   O     4 reg
// master_d_BREADY                O     1 reg
// master_d_ARVALID               O     1 reg
// master_d_ARADDR                O    32 reg
// master_d_ARPROT                O     3 reg
// master_d_ARLEN                 O     8 reg
// master_d_ARSIZE                O     3 reg
// master_d_ARBURST               O     2 reg
// master_d_ARID                  O     4 reg
// master_d_RREADY                O     1 reg
// master_i_AWVALID               O     1 reg
// master_i_AWADDR                O    32 reg
// master_i_AWPROT                O     3 reg
// master_i_AWLEN                 O     8 reg
// master_i_AWSIZE                O     3 reg
// master_i_AWBURST               O     2 reg
// master_i_AWID                  O     4 reg
// master_i_WVALID                O     1 reg
// master_i_WDATA                 O    64 reg
// master_i_WSTRB                 O     8 reg
// master_i_WLAST                 O     1 reg
// master_i_WID                   O     4 reg
// master_i_BREADY                O     1 reg
// master_i_ARVALID               O     1 reg
// master_i_ARADDR                O    32 reg
// master_i_ARPROT                O     3 reg
// master_i_ARLEN                 O     8 reg
// master_i_ARSIZE                O     3 reg
// master_i_ARBURST               O     2 reg
// master_i_ARID                  O     4 reg
// master_i_RREADY                O     1 reg
// RDY_sb_clint_msip_put          O     1 const
// RDY_sb_clint_mtip_put          O     1 const
// RDY_sb_clint_mtime_put         O     1 const
// RDY_sb_plic_meip               O     1 const
// RDY_sb_plic_seip               O     1 const
// sbread_mv_csr_misa             O    64
// RDY_sbread_mv_csr_misa         O     1 const
// sbread_mv_csr_mvendorid        O    32 const
// RDY_sbread_mv_csr_mvendorid    O     1 const
// sbread_mv_csr_stvec            O    64 reg
// RDY_sbread_mv_csr_stvec        O     1 const
// sbread_mv_csr_mtvec            O    64 reg
// RDY_sbread_mv_csr_mtvec        O     1 const
// sbread_mv_csr_mstatus          O    64
// RDY_sbread_mv_csr_mstatus      O     1 const
// sbread_mv_csr_marchid          O    64 const
// RDY_sbread_mv_csr_marchid      O     1 const
// sbread_mv_csr_mimpid           O    64 const
// RDY_sbread_mv_csr_mimpid       O     1 const
// sbread_mv_csr_mhartid          O    64 const
// RDY_sbread_mv_csr_mhartid      O     1 const
// sbread_mv_csr_mip              O    64
// RDY_sbread_mv_csr_mip          O     1 const
// sbread_mv_csr_sip              O    64
// RDY_sbread_mv_csr_sip          O     1 const
// sbread_mv_csr_mie              O    64
// RDY_sbread_mv_csr_mie          O     1 const
// sbread_mv_csr_sie              O    64
// RDY_sbread_mv_csr_sie          O     1 const
// sbread_mv_csr_mscratch         O    64 reg
// RDY_sbread_mv_csr_mscratch     O     1 const
// sbread_mv_csr_sscratch         O    64 reg
// RDY_sbread_mv_csr_sscratch     O     1 const
// sbread_mv_csr_sepc             O    64 reg
// RDY_sbread_mv_csr_sepc         O     1 const
// sbread_mv_csr_stval            O    64 reg
// RDY_sbread_mv_csr_stval        O     1 const
// sbread_mv_csr_scause           O    64
// RDY_sbread_mv_csr_scause       O     1 const
// sbread_mv_csr_mepc             O    64 reg
// RDY_sbread_mv_csr_mepc         O     1 const
// sbread_mv_csr_mtval            O    64 reg
// RDY_sbread_mv_csr_mtval        O     1 const
// sbread_mv_csr_mcause           O    64
// RDY_sbread_mv_csr_mcause       O     1 const
// sbread_mv_csr_mcycle           O    64
// RDY_sbread_mv_csr_mcycle       O     1 const
// sbread_mv_csr_minstret         O    64
// RDY_sbread_mv_csr_minstret     O     1 const
// sbread_mv_csr_fcsr             O    64
// RDY_sbread_mv_csr_fcsr         O     1 const
// sbread_mv_csr_time             O    64 reg
// RDY_sbread_mv_csr_time         O     1 const
// sbread_mv_csr_mideleg          O    64 reg
// RDY_sbread_mv_csr_mideleg      O     1 const
// sbread_mv_csr_medeleg          O    64 reg
// RDY_sbread_mv_csr_medeleg      O     1 const
// sbread_mv_csr_pmpcfg0          O    64
// RDY_sbread_mv_csr_pmpcfg0      O     1 const
// sbread_mv_csr_pmpaddr0         O    30
// RDY_sbread_mv_csr_pmpaddr0     O     1 const
// sbread_mv_csr_pmpaddr1         O    30
// RDY_sbread_mv_csr_pmpaddr1     O     1 const
// sbread_mv_csr_pmpaddr2         O    30
// RDY_sbread_mv_csr_pmpaddr2     O     1 const
// sbread_mv_csr_pmpaddr3         O    30
// RDY_sbread_mv_csr_pmpaddr3     O     1 const
// sbread_mv_csr_mcounteren       O    32 reg
// RDY_sbread_mv_csr_mcounteren   O     1 const
// sbread_mv_csr_scounteren       O    32 reg
// RDY_sbread_mv_csr_scounteren   O     1 const
// sbread_mv_csr_menvcfg          O    64
// RDY_sbread_mv_csr_menvcfg      O     1 const
// sbread_mv_csr_senvcfg          O    64
// RDY_sbread_mv_csr_senvcfg      O     1 const
// sbread_mv_csr_satp             O    64 reg
// RDY_sbread_mv_csr_satp         O     1 const
// sbread_mv_csr_mcountinhibit    O    32 const
// RDY_sbread_mv_csr_mcountinhibit  O     1 const
// sbread_mv_csr_fflags           O     5 reg
// RDY_sbread_mv_csr_fflags       O     1 const
// sbread_mv_csr_frm              O     3 reg
// RDY_sbread_mv_csr_frm          O     1 const
// sbread_mv_csr_customcontrol    O    64 const
// RDY_sbread_mv_csr_customcontrol  O     1 const
// sbread_mv_csr_mhpmcounter3     O    64 reg
// RDY_sbread_mv_csr_mhpmcounter3  O     1 const
// sbread_mv_csr_mhpmcounter4     O    64 reg
// RDY_sbread_mv_csr_mhpmcounter4  O     1 const
// sbread_mv_csr_mhpmcounter5     O    64 reg
// RDY_sbread_mv_csr_mhpmcounter5  O     1 const
// sbread_mv_csr_mhpmcounter6     O    64 reg
// RDY_sbread_mv_csr_mhpmcounter6  O     1 const
// sbread_mv_csr_mhpmevent3       O    64 reg
// RDY_sbread_mv_csr_mhpmevent3   O     1 const
// sbread_mv_csr_mhpmevent4       O    64 reg
// RDY_sbread_mv_csr_mhpmevent4   O     1 const
// sbread_mv_csr_mhpmevent5       O    64 reg
// RDY_sbread_mv_csr_mhpmevent5   O     1 const
// sbread_mv_csr_mhpmevent6       O    64 reg
// RDY_sbread_mv_csr_mhpmevent6   O     1 const
// sbread_mv_csr_dcsr             O    64
// RDY_sbread_mv_csr_dcsr         O     1 const
// sbread_mv_csr_dpc              O    64 reg
// RDY_sbread_mv_csr_dpc          O     1 const
// sbread_mv_csr_dscratch0        O    64 reg
// RDY_sbread_mv_csr_dscratch0    O     1 const
// sbread_mv_csr_dscratch1        O    64 reg
// RDY_sbread_mv_csr_dscratch1    O     1 const
// commitlog                      O   310 reg
// RDY_commitlog                  O     1 const
// RDY_ma_debug_interrupt         O     1 const
// mv_core_is_reset               O     1 reg
// RDY_mv_core_is_reset           O     1 const
// mv_core_debugenable            O     1 const
// RDY_mv_core_debugenable        O     1 const
// mv_stop_timer                  O     1
// RDY_mv_stop_timer              O     1 const
// mv_stop_count                  O     1
// RDY_mv_stop_count              O     1 const
// resetpc                        I    64
// CLK                            I     1 clock
// RST_N                          I     1 reset
// master_d_AWREADY               I     1
// master_d_WREADY                I     1
// master_d_BVALID                I     1
// master_d_BRESP                 I     2 reg
// master_d_BID                   I     4 reg
// master_d_ARREADY               I     1
// master_d_RVALID                I     1
// master_d_RRESP                 I     2 reg
// master_d_RDATA                 I    64 reg
// master_d_RLAST                 I     1 reg
// master_d_RID                   I     4 reg
// master_i_AWREADY               I     1
// master_i_WREADY                I     1
// master_i_BVALID                I     1
// master_i_BRESP                 I     2 reg
// master_i_BID                   I     4 reg
// master_i_ARREADY               I     1
// master_i_RVALID                I     1
// master_i_RRESP                 I     2 reg
// master_i_RDATA                 I    64 reg
// master_i_RLAST                 I     1 reg
// master_i_RID                   I     4 reg
// sb_clint_msip_put              I     1
// sb_clint_mtip_put              I     1
// sb_clint_mtime_put             I    64 reg
// sb_plic_meip_ex_i              I     1
// sb_plic_seip_ex_i              I     1
// ma_debug_interrupt__int        I     1
// ma_debugger_available_avail    I     1
// EN_sb_clint_msip_put           I     1
// EN_sb_clint_mtip_put           I     1
// EN_sb_clint_mtime_put          I     1
// EN_sb_plic_meip                I     1
// EN_sb_plic_seip                I     1
// EN_ma_debug_interrupt          I     1
//
// Combinational paths from inputs to outputs:
//   (sb_clint_msip_put,
//    sb_clint_mtip_put,
//    sb_plic_meip_ex_i,
//    sb_plic_seip_ex_i,
//    ma_debug_interrupt__int,
//    EN_sb_clint_msip_put,
//    EN_sb_clint_mtip_put,
//    EN_sb_plic_meip,
//    EN_sb_plic_seip,
//    EN_ma_debug_interrupt,
//    resetpc) -> sbread_mv_csr_mip
//   (sb_plic_seip_ex_i, EN_sb_plic_seip, resetpc) -> sbread_mv_csr_sip
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkccore_axi4(resetpc,
		    CLK,
		    RST_N,

		    master_d_AWVALID,

		    master_d_AWADDR,

		    master_d_AWPROT,

		    master_d_AWLEN,

		    master_d_AWSIZE,

		    master_d_AWBURST,

		    master_d_AWID,

		    master_d_AWREADY,

		    master_d_WVALID,

		    master_d_WDATA,

		    master_d_WSTRB,

		    master_d_WLAST,

		    master_d_WID,

		    master_d_WREADY,

		    master_d_BVALID,
		    master_d_BRESP,
		    master_d_BID,

		    master_d_BREADY,

		    master_d_ARVALID,

		    master_d_ARADDR,

		    master_d_ARPROT,

		    master_d_ARLEN,

		    master_d_ARSIZE,

		    master_d_ARBURST,

		    master_d_ARID,

		    master_d_ARREADY,

		    master_d_RVALID,
		    master_d_RRESP,
		    master_d_RDATA,
		    master_d_RLAST,
		    master_d_RID,

		    master_d_RREADY,

		    master_i_AWVALID,

		    master_i_AWADDR,

		    master_i_AWPROT,

		    master_i_AWLEN,

		    master_i_AWSIZE,

		    master_i_AWBURST,

		    master_i_AWID,

		    master_i_AWREADY,

		    master_i_WVALID,

		    master_i_WDATA,

		    master_i_WSTRB,

		    master_i_WLAST,

		    master_i_WID,

		    master_i_WREADY,

		    master_i_BVALID,
		    master_i_BRESP,
		    master_i_BID,

		    master_i_BREADY,

		    master_i_ARVALID,

		    master_i_ARADDR,

		    master_i_ARPROT,

		    master_i_ARLEN,

		    master_i_ARSIZE,

		    master_i_ARBURST,

		    master_i_ARID,

		    master_i_ARREADY,

		    master_i_RVALID,
		    master_i_RRESP,
		    master_i_RDATA,
		    master_i_RLAST,
		    master_i_RID,

		    master_i_RREADY,

		    sb_clint_msip_put,
		    EN_sb_clint_msip_put,
		    RDY_sb_clint_msip_put,

		    sb_clint_mtip_put,
		    EN_sb_clint_mtip_put,
		    RDY_sb_clint_mtip_put,

		    sb_clint_mtime_put,
		    EN_sb_clint_mtime_put,
		    RDY_sb_clint_mtime_put,

		    sb_plic_meip_ex_i,
		    EN_sb_plic_meip,
		    RDY_sb_plic_meip,

		    sb_plic_seip_ex_i,
		    EN_sb_plic_seip,
		    RDY_sb_plic_seip,

		    sbread_mv_csr_misa,
		    RDY_sbread_mv_csr_misa,

		    sbread_mv_csr_mvendorid,
		    RDY_sbread_mv_csr_mvendorid,

		    sbread_mv_csr_stvec,
		    RDY_sbread_mv_csr_stvec,

		    sbread_mv_csr_mtvec,
		    RDY_sbread_mv_csr_mtvec,

		    sbread_mv_csr_mstatus,
		    RDY_sbread_mv_csr_mstatus,

		    sbread_mv_csr_marchid,
		    RDY_sbread_mv_csr_marchid,

		    sbread_mv_csr_mimpid,
		    RDY_sbread_mv_csr_mimpid,

		    sbread_mv_csr_mhartid,
		    RDY_sbread_mv_csr_mhartid,

		    sbread_mv_csr_mip,
		    RDY_sbread_mv_csr_mip,

		    sbread_mv_csr_sip,
		    RDY_sbread_mv_csr_sip,

		    sbread_mv_csr_mie,
		    RDY_sbread_mv_csr_mie,

		    sbread_mv_csr_sie,
		    RDY_sbread_mv_csr_sie,

		    sbread_mv_csr_mscratch,
		    RDY_sbread_mv_csr_mscratch,

		    sbread_mv_csr_sscratch,
		    RDY_sbread_mv_csr_sscratch,

		    sbread_mv_csr_sepc,
		    RDY_sbread_mv_csr_sepc,

		    sbread_mv_csr_stval,
		    RDY_sbread_mv_csr_stval,

		    sbread_mv_csr_scause,
		    RDY_sbread_mv_csr_scause,

		    sbread_mv_csr_mepc,
		    RDY_sbread_mv_csr_mepc,

		    sbread_mv_csr_mtval,
		    RDY_sbread_mv_csr_mtval,

		    sbread_mv_csr_mcause,
		    RDY_sbread_mv_csr_mcause,

		    sbread_mv_csr_mcycle,
		    RDY_sbread_mv_csr_mcycle,

		    sbread_mv_csr_minstret,
		    RDY_sbread_mv_csr_minstret,

		    sbread_mv_csr_fcsr,
		    RDY_sbread_mv_csr_fcsr,

		    sbread_mv_csr_time,
		    RDY_sbread_mv_csr_time,

		    sbread_mv_csr_mideleg,
		    RDY_sbread_mv_csr_mideleg,

		    sbread_mv_csr_medeleg,
		    RDY_sbread_mv_csr_medeleg,

		    sbread_mv_csr_pmpcfg0,
		    RDY_sbread_mv_csr_pmpcfg0,

		    sbread_mv_csr_pmpaddr0,
		    RDY_sbread_mv_csr_pmpaddr0,

		    sbread_mv_csr_pmpaddr1,
		    RDY_sbread_mv_csr_pmpaddr1,

		    sbread_mv_csr_pmpaddr2,
		    RDY_sbread_mv_csr_pmpaddr2,

		    sbread_mv_csr_pmpaddr3,
		    RDY_sbread_mv_csr_pmpaddr3,

		    sbread_mv_csr_mcounteren,
		    RDY_sbread_mv_csr_mcounteren,

		    sbread_mv_csr_scounteren,
		    RDY_sbread_mv_csr_scounteren,

		    sbread_mv_csr_menvcfg,
		    RDY_sbread_mv_csr_menvcfg,

		    sbread_mv_csr_senvcfg,
		    RDY_sbread_mv_csr_senvcfg,

		    sbread_mv_csr_satp,
		    RDY_sbread_mv_csr_satp,

		    sbread_mv_csr_mcountinhibit,
		    RDY_sbread_mv_csr_mcountinhibit,

		    sbread_mv_csr_fflags,
		    RDY_sbread_mv_csr_fflags,

		    sbread_mv_csr_frm,
		    RDY_sbread_mv_csr_frm,

		    sbread_mv_csr_customcontrol,
		    RDY_sbread_mv_csr_customcontrol,

		    sbread_mv_csr_mhpmcounter3,
		    RDY_sbread_mv_csr_mhpmcounter3,

		    sbread_mv_csr_mhpmcounter4,
		    RDY_sbread_mv_csr_mhpmcounter4,

		    sbread_mv_csr_mhpmcounter5,
		    RDY_sbread_mv_csr_mhpmcounter5,

		    sbread_mv_csr_mhpmcounter6,
		    RDY_sbread_mv_csr_mhpmcounter6,

		    sbread_mv_csr_mhpmevent3,
		    RDY_sbread_mv_csr_mhpmevent3,

		    sbread_mv_csr_mhpmevent4,
		    RDY_sbread_mv_csr_mhpmevent4,

		    sbread_mv_csr_mhpmevent5,
		    RDY_sbread_mv_csr_mhpmevent5,

		    sbread_mv_csr_mhpmevent6,
		    RDY_sbread_mv_csr_mhpmevent6,

		    sbread_mv_csr_dcsr,
		    RDY_sbread_mv_csr_dcsr,

		    sbread_mv_csr_dpc,
		    RDY_sbread_mv_csr_dpc,

		    sbread_mv_csr_dscratch0,
		    RDY_sbread_mv_csr_dscratch0,

		    sbread_mv_csr_dscratch1,
		    RDY_sbread_mv_csr_dscratch1,

		    commitlog,
		    RDY_commitlog,

		    ma_debug_interrupt__int,
		    EN_ma_debug_interrupt,
		    RDY_ma_debug_interrupt,

		    mv_core_is_reset,
		    RDY_mv_core_is_reset,

		    mv_core_debugenable,
		    RDY_mv_core_debugenable,

		    ma_debugger_available_avail,

		    mv_stop_timer,
		    RDY_mv_stop_timer,

		    mv_stop_count,
		    RDY_mv_stop_count);
  parameter [63 : 0] hartid = 64'b0;
  input  [63 : 0] resetpc;
  input  CLK;
  input  RST_N;

  // value method master_d_m_awvalid
  output master_d_AWVALID;

  // value method master_d_m_awaddr
  output [31 : 0] master_d_AWADDR;

  // value method master_d_m_awuser

  // value method master_d_m_awprot
  output [2 : 0] master_d_AWPROT;

  // value method master_d_m_awlen
  output [7 : 0] master_d_AWLEN;

  // value method master_d_m_awsize
  output [2 : 0] master_d_AWSIZE;

  // value method master_d_m_awburst
  output [1 : 0] master_d_AWBURST;

  // value method master_d_m_awid
  output [3 : 0] master_d_AWID;

  // action method master_d_m_awready
  input  master_d_AWREADY;

  // value method master_d_m_wvalid
  output master_d_WVALID;

  // value method master_d_m_wdata
  output [63 : 0] master_d_WDATA;

  // value method master_d_m_wstrb
  output [7 : 0] master_d_WSTRB;

  // value method master_d_m_wlast
  output master_d_WLAST;

  // value method master_d_m_wid
  output [3 : 0] master_d_WID;

  // action method master_d_m_wready
  input  master_d_WREADY;

  // action method master_d_m_bvalid
  input  master_d_BVALID;
  input  [1 : 0] master_d_BRESP;
  input  [3 : 0] master_d_BID;

  // value method master_d_m_bready
  output master_d_BREADY;

  // value method master_d_m_arvalid
  output master_d_ARVALID;

  // value method master_d_m_araddr
  output [31 : 0] master_d_ARADDR;

  // value method master_d_m_aruser

  // value method master_d_m_arprot
  output [2 : 0] master_d_ARPROT;

  // value method master_d_m_arlen
  output [7 : 0] master_d_ARLEN;

  // value method master_d_m_arsize
  output [2 : 0] master_d_ARSIZE;

  // value method master_d_m_arburst
  output [1 : 0] master_d_ARBURST;

  // value method master_d_m_arid
  output [3 : 0] master_d_ARID;

  // action method master_d_m_arready
  input  master_d_ARREADY;

  // action method master_d_m_rvalid
  input  master_d_RVALID;
  input  [1 : 0] master_d_RRESP;
  input  [63 : 0] master_d_RDATA;
  input  master_d_RLAST;
  input  [3 : 0] master_d_RID;

  // value method master_d_m_rready
  output master_d_RREADY;

  // value method master_i_m_awvalid
  output master_i_AWVALID;

  // value method master_i_m_awaddr
  output [31 : 0] master_i_AWADDR;

  // value method master_i_m_awuser

  // value method master_i_m_awprot
  output [2 : 0] master_i_AWPROT;

  // value method master_i_m_awlen
  output [7 : 0] master_i_AWLEN;

  // value method master_i_m_awsize
  output [2 : 0] master_i_AWSIZE;

  // value method master_i_m_awburst
  output [1 : 0] master_i_AWBURST;

  // value method master_i_m_awid
  output [3 : 0] master_i_AWID;

  // action method master_i_m_awready
  input  master_i_AWREADY;

  // value method master_i_m_wvalid
  output master_i_WVALID;

  // value method master_i_m_wdata
  output [63 : 0] master_i_WDATA;

  // value method master_i_m_wstrb
  output [7 : 0] master_i_WSTRB;

  // value method master_i_m_wlast
  output master_i_WLAST;

  // value method master_i_m_wid
  output [3 : 0] master_i_WID;

  // action method master_i_m_wready
  input  master_i_WREADY;

  // action method master_i_m_bvalid
  input  master_i_BVALID;
  input  [1 : 0] master_i_BRESP;
  input  [3 : 0] master_i_BID;

  // value method master_i_m_bready
  output master_i_BREADY;

  // value method master_i_m_arvalid
  output master_i_ARVALID;

  // value method master_i_m_araddr
  output [31 : 0] master_i_ARADDR;

  // value method master_i_m_aruser

  // value method master_i_m_arprot
  output [2 : 0] master_i_ARPROT;

  // value method master_i_m_arlen
  output [7 : 0] master_i_ARLEN;

  // value method master_i_m_arsize
  output [2 : 0] master_i_ARSIZE;

  // value method master_i_m_arburst
  output [1 : 0] master_i_ARBURST;

  // value method master_i_m_arid
  output [3 : 0] master_i_ARID;

  // action method master_i_m_arready
  input  master_i_ARREADY;

  // action method master_i_m_rvalid
  input  master_i_RVALID;
  input  [1 : 0] master_i_RRESP;
  input  [63 : 0] master_i_RDATA;
  input  master_i_RLAST;
  input  [3 : 0] master_i_RID;

  // value method master_i_m_rready
  output master_i_RREADY;

  // action method sb_clint_msip_put
  input  sb_clint_msip_put;
  input  EN_sb_clint_msip_put;
  output RDY_sb_clint_msip_put;

  // action method sb_clint_mtip_put
  input  sb_clint_mtip_put;
  input  EN_sb_clint_mtip_put;
  output RDY_sb_clint_mtip_put;

  // action method sb_clint_mtime_put
  input  [63 : 0] sb_clint_mtime_put;
  input  EN_sb_clint_mtime_put;
  output RDY_sb_clint_mtime_put;

  // action method sb_plic_meip
  input  sb_plic_meip_ex_i;
  input  EN_sb_plic_meip;
  output RDY_sb_plic_meip;

  // action method sb_plic_seip
  input  sb_plic_seip_ex_i;
  input  EN_sb_plic_seip;
  output RDY_sb_plic_seip;

  // value method sbread_mv_csr_misa
  output [63 : 0] sbread_mv_csr_misa;
  output RDY_sbread_mv_csr_misa;

  // value method sbread_mv_csr_mvendorid
  output [31 : 0] sbread_mv_csr_mvendorid;
  output RDY_sbread_mv_csr_mvendorid;

  // value method sbread_mv_csr_stvec
  output [63 : 0] sbread_mv_csr_stvec;
  output RDY_sbread_mv_csr_stvec;

  // value method sbread_mv_csr_mtvec
  output [63 : 0] sbread_mv_csr_mtvec;
  output RDY_sbread_mv_csr_mtvec;

  // value method sbread_mv_csr_mstatus
  output [63 : 0] sbread_mv_csr_mstatus;
  output RDY_sbread_mv_csr_mstatus;

  // value method sbread_mv_csr_marchid
  output [63 : 0] sbread_mv_csr_marchid;
  output RDY_sbread_mv_csr_marchid;

  // value method sbread_mv_csr_mimpid
  output [63 : 0] sbread_mv_csr_mimpid;
  output RDY_sbread_mv_csr_mimpid;

  // value method sbread_mv_csr_mhartid
  output [63 : 0] sbread_mv_csr_mhartid;
  output RDY_sbread_mv_csr_mhartid;

  // value method sbread_mv_csr_mip
  output [63 : 0] sbread_mv_csr_mip;
  output RDY_sbread_mv_csr_mip;

  // value method sbread_mv_csr_sip
  output [63 : 0] sbread_mv_csr_sip;
  output RDY_sbread_mv_csr_sip;

  // value method sbread_mv_csr_mie
  output [63 : 0] sbread_mv_csr_mie;
  output RDY_sbread_mv_csr_mie;

  // value method sbread_mv_csr_sie
  output [63 : 0] sbread_mv_csr_sie;
  output RDY_sbread_mv_csr_sie;

  // value method sbread_mv_csr_mscratch
  output [63 : 0] sbread_mv_csr_mscratch;
  output RDY_sbread_mv_csr_mscratch;

  // value method sbread_mv_csr_sscratch
  output [63 : 0] sbread_mv_csr_sscratch;
  output RDY_sbread_mv_csr_sscratch;

  // value method sbread_mv_csr_sepc
  output [63 : 0] sbread_mv_csr_sepc;
  output RDY_sbread_mv_csr_sepc;

  // value method sbread_mv_csr_stval
  output [63 : 0] sbread_mv_csr_stval;
  output RDY_sbread_mv_csr_stval;

  // value method sbread_mv_csr_scause
  output [63 : 0] sbread_mv_csr_scause;
  output RDY_sbread_mv_csr_scause;

  // value method sbread_mv_csr_mepc
  output [63 : 0] sbread_mv_csr_mepc;
  output RDY_sbread_mv_csr_mepc;

  // value method sbread_mv_csr_mtval
  output [63 : 0] sbread_mv_csr_mtval;
  output RDY_sbread_mv_csr_mtval;

  // value method sbread_mv_csr_mcause
  output [63 : 0] sbread_mv_csr_mcause;
  output RDY_sbread_mv_csr_mcause;

  // value method sbread_mv_csr_mcycle
  output [63 : 0] sbread_mv_csr_mcycle;
  output RDY_sbread_mv_csr_mcycle;

  // value method sbread_mv_csr_minstret
  output [63 : 0] sbread_mv_csr_minstret;
  output RDY_sbread_mv_csr_minstret;

  // value method sbread_mv_csr_fcsr
  output [63 : 0] sbread_mv_csr_fcsr;
  output RDY_sbread_mv_csr_fcsr;

  // value method sbread_mv_csr_time
  output [63 : 0] sbread_mv_csr_time;
  output RDY_sbread_mv_csr_time;

  // value method sbread_mv_csr_mideleg
  output [63 : 0] sbread_mv_csr_mideleg;
  output RDY_sbread_mv_csr_mideleg;

  // value method sbread_mv_csr_medeleg
  output [63 : 0] sbread_mv_csr_medeleg;
  output RDY_sbread_mv_csr_medeleg;

  // value method sbread_mv_csr_pmpcfg0
  output [63 : 0] sbread_mv_csr_pmpcfg0;
  output RDY_sbread_mv_csr_pmpcfg0;

  // value method sbread_mv_csr_pmpaddr0
  output [29 : 0] sbread_mv_csr_pmpaddr0;
  output RDY_sbread_mv_csr_pmpaddr0;

  // value method sbread_mv_csr_pmpaddr1
  output [29 : 0] sbread_mv_csr_pmpaddr1;
  output RDY_sbread_mv_csr_pmpaddr1;

  // value method sbread_mv_csr_pmpaddr2
  output [29 : 0] sbread_mv_csr_pmpaddr2;
  output RDY_sbread_mv_csr_pmpaddr2;

  // value method sbread_mv_csr_pmpaddr3
  output [29 : 0] sbread_mv_csr_pmpaddr3;
  output RDY_sbread_mv_csr_pmpaddr3;

  // value method sbread_mv_csr_mcounteren
  output [31 : 0] sbread_mv_csr_mcounteren;
  output RDY_sbread_mv_csr_mcounteren;

  // value method sbread_mv_csr_scounteren
  output [31 : 0] sbread_mv_csr_scounteren;
  output RDY_sbread_mv_csr_scounteren;

  // value method sbread_mv_csr_menvcfg
  output [63 : 0] sbread_mv_csr_menvcfg;
  output RDY_sbread_mv_csr_menvcfg;

  // value method sbread_mv_csr_senvcfg
  output [63 : 0] sbread_mv_csr_senvcfg;
  output RDY_sbread_mv_csr_senvcfg;

  // value method sbread_mv_csr_satp
  output [63 : 0] sbread_mv_csr_satp;
  output RDY_sbread_mv_csr_satp;

  // value method sbread_mv_csr_mcountinhibit
  output [31 : 0] sbread_mv_csr_mcountinhibit;
  output RDY_sbread_mv_csr_mcountinhibit;

  // value method sbread_mv_csr_fflags
  output [4 : 0] sbread_mv_csr_fflags;
  output RDY_sbread_mv_csr_fflags;

  // value method sbread_mv_csr_frm
  output [2 : 0] sbread_mv_csr_frm;
  output RDY_sbread_mv_csr_frm;

  // value method sbread_mv_csr_customcontrol
  output [63 : 0] sbread_mv_csr_customcontrol;
  output RDY_sbread_mv_csr_customcontrol;

  // value method sbread_mv_csr_mhpmcounter3
  output [63 : 0] sbread_mv_csr_mhpmcounter3;
  output RDY_sbread_mv_csr_mhpmcounter3;

  // value method sbread_mv_csr_mhpmcounter4
  output [63 : 0] sbread_mv_csr_mhpmcounter4;
  output RDY_sbread_mv_csr_mhpmcounter4;

  // value method sbread_mv_csr_mhpmcounter5
  output [63 : 0] sbread_mv_csr_mhpmcounter5;
  output RDY_sbread_mv_csr_mhpmcounter5;

  // value method sbread_mv_csr_mhpmcounter6
  output [63 : 0] sbread_mv_csr_mhpmcounter6;
  output RDY_sbread_mv_csr_mhpmcounter6;

  // value method sbread_mv_csr_mhpmevent3
  output [63 : 0] sbread_mv_csr_mhpmevent3;
  output RDY_sbread_mv_csr_mhpmevent3;

  // value method sbread_mv_csr_mhpmevent4
  output [63 : 0] sbread_mv_csr_mhpmevent4;
  output RDY_sbread_mv_csr_mhpmevent4;

  // value method sbread_mv_csr_mhpmevent5
  output [63 : 0] sbread_mv_csr_mhpmevent5;
  output RDY_sbread_mv_csr_mhpmevent5;

  // value method sbread_mv_csr_mhpmevent6
  output [63 : 0] sbread_mv_csr_mhpmevent6;
  output RDY_sbread_mv_csr_mhpmevent6;

  // value method sbread_mv_csr_dcsr
  output [63 : 0] sbread_mv_csr_dcsr;
  output RDY_sbread_mv_csr_dcsr;

  // value method sbread_mv_csr_dpc
  output [63 : 0] sbread_mv_csr_dpc;
  output RDY_sbread_mv_csr_dpc;

  // value method sbread_mv_csr_dscratch0
  output [63 : 0] sbread_mv_csr_dscratch0;
  output RDY_sbread_mv_csr_dscratch0;

  // value method sbread_mv_csr_dscratch1
  output [63 : 0] sbread_mv_csr_dscratch1;
  output RDY_sbread_mv_csr_dscratch1;

  // value method commitlog
  output [309 : 0] commitlog;
  output RDY_commitlog;

  // action method ma_debug_interrupt
  input  ma_debug_interrupt__int;
  input  EN_ma_debug_interrupt;
  output RDY_ma_debug_interrupt;

  // value method mv_core_is_reset
  output mv_core_is_reset;
  output RDY_mv_core_is_reset;

  // value method mv_core_debugenable
  output mv_core_debugenable;
  output RDY_mv_core_debugenable;

  // action method ma_debugger_available
  input  ma_debugger_available_avail;

  // value method mv_stop_timer
  output mv_stop_timer;
  output RDY_mv_stop_timer;

  // value method mv_stop_count
  output mv_stop_count;
  output RDY_mv_stop_count;

  // signals for module outputs
  wire [309 : 0] commitlog;
  wire [63 : 0] master_d_WDATA,
		master_i_WDATA,
		sbread_mv_csr_customcontrol,
		sbread_mv_csr_dcsr,
		sbread_mv_csr_dpc,
		sbread_mv_csr_dscratch0,
		sbread_mv_csr_dscratch1,
		sbread_mv_csr_fcsr,
		sbread_mv_csr_marchid,
		sbread_mv_csr_mcause,
		sbread_mv_csr_mcycle,
		sbread_mv_csr_medeleg,
		sbread_mv_csr_menvcfg,
		sbread_mv_csr_mepc,
		sbread_mv_csr_mhartid,
		sbread_mv_csr_mhpmcounter3,
		sbread_mv_csr_mhpmcounter4,
		sbread_mv_csr_mhpmcounter5,
		sbread_mv_csr_mhpmcounter6,
		sbread_mv_csr_mhpmevent3,
		sbread_mv_csr_mhpmevent4,
		sbread_mv_csr_mhpmevent5,
		sbread_mv_csr_mhpmevent6,
		sbread_mv_csr_mideleg,
		sbread_mv_csr_mie,
		sbread_mv_csr_mimpid,
		sbread_mv_csr_minstret,
		sbread_mv_csr_mip,
		sbread_mv_csr_misa,
		sbread_mv_csr_mscratch,
		sbread_mv_csr_mstatus,
		sbread_mv_csr_mtval,
		sbread_mv_csr_mtvec,
		sbread_mv_csr_pmpcfg0,
		sbread_mv_csr_satp,
		sbread_mv_csr_scause,
		sbread_mv_csr_senvcfg,
		sbread_mv_csr_sepc,
		sbread_mv_csr_sie,
		sbread_mv_csr_sip,
		sbread_mv_csr_sscratch,
		sbread_mv_csr_stval,
		sbread_mv_csr_stvec,
		sbread_mv_csr_time;
  wire [31 : 0] master_d_ARADDR,
		master_d_AWADDR,
		master_i_ARADDR,
		master_i_AWADDR,
		sbread_mv_csr_mcounteren,
		sbread_mv_csr_mcountinhibit,
		sbread_mv_csr_mvendorid,
		sbread_mv_csr_scounteren;
  wire [29 : 0] sbread_mv_csr_pmpaddr0,
		sbread_mv_csr_pmpaddr1,
		sbread_mv_csr_pmpaddr2,
		sbread_mv_csr_pmpaddr3;
  wire [7 : 0] master_d_ARLEN,
	       master_d_AWLEN,
	       master_d_WSTRB,
	       master_i_ARLEN,
	       master_i_AWLEN,
	       master_i_WSTRB;
  wire [4 : 0] sbread_mv_csr_fflags;
  wire [3 : 0] master_d_ARID,
	       master_d_AWID,
	       master_d_WID,
	       master_i_ARID,
	       master_i_AWID,
	       master_i_WID;
  wire [2 : 0] master_d_ARPROT,
	       master_d_ARSIZE,
	       master_d_AWPROT,
	       master_d_AWSIZE,
	       master_i_ARPROT,
	       master_i_ARSIZE,
	       master_i_AWPROT,
	       master_i_AWSIZE,
	       sbread_mv_csr_frm;
  wire [1 : 0] master_d_ARBURST,
	       master_d_AWBURST,
	       master_i_ARBURST,
	       master_i_AWBURST;
  wire RDY_commitlog,
       RDY_ma_debug_interrupt,
       RDY_mv_core_debugenable,
       RDY_mv_core_is_reset,
       RDY_mv_stop_count,
       RDY_mv_stop_timer,
       RDY_sb_clint_msip_put,
       RDY_sb_clint_mtime_put,
       RDY_sb_clint_mtip_put,
       RDY_sb_plic_meip,
       RDY_sb_plic_seip,
       RDY_sbread_mv_csr_customcontrol,
       RDY_sbread_mv_csr_dcsr,
       RDY_sbread_mv_csr_dpc,
       RDY_sbread_mv_csr_dscratch0,
       RDY_sbread_mv_csr_dscratch1,
       RDY_sbread_mv_csr_fcsr,
       RDY_sbread_mv_csr_fflags,
       RDY_sbread_mv_csr_frm,
       RDY_sbread_mv_csr_marchid,
       RDY_sbread_mv_csr_mcause,
       RDY_sbread_mv_csr_mcounteren,
       RDY_sbread_mv_csr_mcountinhibit,
       RDY_sbread_mv_csr_mcycle,
       RDY_sbread_mv_csr_medeleg,
       RDY_sbread_mv_csr_menvcfg,
       RDY_sbread_mv_csr_mepc,
       RDY_sbread_mv_csr_mhartid,
       RDY_sbread_mv_csr_mhpmcounter3,
       RDY_sbread_mv_csr_mhpmcounter4,
       RDY_sbread_mv_csr_mhpmcounter5,
       RDY_sbread_mv_csr_mhpmcounter6,
       RDY_sbread_mv_csr_mhpmevent3,
       RDY_sbread_mv_csr_mhpmevent4,
       RDY_sbread_mv_csr_mhpmevent5,
       RDY_sbread_mv_csr_mhpmevent6,
       RDY_sbread_mv_csr_mideleg,
       RDY_sbread_mv_csr_mie,
       RDY_sbread_mv_csr_mimpid,
       RDY_sbread_mv_csr_minstret,
       RDY_sbread_mv_csr_mip,
       RDY_sbread_mv_csr_misa,
       RDY_sbread_mv_csr_mscratch,
       RDY_sbread_mv_csr_mstatus,
       RDY_sbread_mv_csr_mtval,
       RDY_sbread_mv_csr_mtvec,
       RDY_sbread_mv_csr_mvendorid,
       RDY_sbread_mv_csr_pmpaddr0,
       RDY_sbread_mv_csr_pmpaddr1,
       RDY_sbread_mv_csr_pmpaddr2,
       RDY_sbread_mv_csr_pmpaddr3,
       RDY_sbread_mv_csr_pmpcfg0,
       RDY_sbread_mv_csr_satp,
       RDY_sbread_mv_csr_scause,
       RDY_sbread_mv_csr_scounteren,
       RDY_sbread_mv_csr_senvcfg,
       RDY_sbread_mv_csr_sepc,
       RDY_sbread_mv_csr_sie,
       RDY_sbread_mv_csr_sip,
       RDY_sbread_mv_csr_sscratch,
       RDY_sbread_mv_csr_stval,
       RDY_sbread_mv_csr_stvec,
       RDY_sbread_mv_csr_time,
       master_d_ARVALID,
       master_d_AWVALID,
       master_d_BREADY,
       master_d_RREADY,
       master_d_WLAST,
       master_d_WVALID,
       master_i_ARVALID,
       master_i_AWVALID,
       master_i_BREADY,
       master_i_RREADY,
       master_i_WLAST,
       master_i_WVALID,
       mv_core_debugenable,
       mv_core_is_reset,
       mv_stop_count,
       mv_stop_timer;

  // inlined wires
  wire ptwalk_wr_deq_holding_ff_whas;

  // register ptwalk_rg_a
  reg [55 : 0] ptwalk_rg_a;
  wire [55 : 0] ptwalk_rg_a_D_IN;
  wire ptwalk_rg_a_EN;

  // register ptwalk_rg_hold_epoch
  reg ptwalk_rg_hold_epoch;
  wire ptwalk_rg_hold_epoch_D_IN, ptwalk_rg_hold_epoch_EN;

  // register ptwalk_rg_levels
  reg [1 : 0] ptwalk_rg_levels;
  wire [1 : 0] ptwalk_rg_levels_D_IN;
  wire ptwalk_rg_levels_EN;

  // register ptwalk_rg_state
  reg [1 : 0] ptwalk_rg_state;
  reg [1 : 0] ptwalk_rg_state_D_IN;
  wire ptwalk_rg_state_EN;

  // register rg_burst_count
  reg [7 : 0] rg_burst_count;
  wire [7 : 0] rg_burst_count_D_IN;
  wire rg_burst_count_EN;

  // register rg_ptw_state
  reg [1 : 0] rg_ptw_state;
  reg [1 : 0] rg_ptw_state_D_IN;
  wire rg_ptw_state_EN;

  // register rg_read_line_req
  reg [52 : 0] rg_read_line_req;
  wire [52 : 0] rg_read_line_req_D_IN;
  wire rg_read_line_req_EN;

  // register rg_shift_amount
  reg [8 : 0] rg_shift_amount;
  wire [8 : 0] rg_shift_amount_D_IN;
  wire rg_shift_amount_EN;

  // register wr_write_req
  reg [32 : 0] wr_write_req;
  wire [32 : 0] wr_write_req_D_IN;
  wire wr_write_req_EN;

  // ports of submodule dmem
  wire [554 : 0] dmem_send_mem_wr_req;
  wire [173 : 0] dmem_put_resp_from_ptw_put;
  wire [144 : 0] dmem_receive_core_req_put;
  wire [140 : 0] dmem_get_hold_req_get;
  wire [132 : 0] dmem_send_core_io_resp;
  wire [131 : 0] dmem_get_ptw_resp_get, dmem_send_core_cache_resp_get;
  wire [99 : 0] dmem_send_mem_io_req_get;
  wire [67 : 0] dmem_get_req_to_ptw_get;
  wire [65 : 0] dmem_receive_mem_rd_resp_put;
  wire [64 : 0] dmem_receive_mem_io_resp_put;
  wire [63 : 0] dmem_ma_mstatus_from_csr_m, dmem_ma_satp_from_csr_s;
  wire [42 : 0] dmem_send_mem_rd_req_get;
  wire [12 : 0] dmem_mv_dcache_perf_counters;
  wire [1 : 0] dmem_ma_commit_store_storecommit, dmem_ma_curr_priv_c;
  wire dmem_EN_deq_mem_wr_req,
       dmem_EN_get_hold_req_get,
       dmem_EN_get_ptw_resp_get,
       dmem_EN_get_req_to_ptw_get,
       dmem_EN_ma_cache_enable,
       dmem_EN_ma_commit_io,
       dmem_EN_ma_commit_store,
       dmem_EN_ma_mstatus_from_csr,
       dmem_EN_ma_satp_from_csr,
       dmem_EN_put_resp_from_ptw_put,
       dmem_EN_receive_core_req_put,
       dmem_EN_receive_mem_io_resp_put,
       dmem_EN_receive_mem_rd_resp_put,
       dmem_EN_receive_mem_wr_resp_put,
       dmem_EN_send_core_cache_resp_get,
       dmem_EN_send_mem_io_req_get,
       dmem_EN_send_mem_rd_req_get,
       dmem_RDY_deq_mem_wr_req,
       dmem_RDY_get_hold_req_get,
       dmem_RDY_get_ptw_resp_get,
       dmem_RDY_get_req_to_ptw_get,
       dmem_RDY_ma_commit_io,
       dmem_RDY_put_resp_from_ptw_put,
       dmem_RDY_receive_core_req_put,
       dmem_RDY_receive_mem_io_resp_put,
       dmem_RDY_receive_mem_rd_resp_put,
       dmem_RDY_receive_mem_wr_resp_put,
       dmem_RDY_send_core_cache_resp_get,
       dmem_RDY_send_mem_io_req_get,
       dmem_RDY_send_mem_rd_req_get,
       dmem_RDY_send_mem_wr_req,
       dmem_ma_cache_enable_c,
       dmem_ma_commit_io_currepoch,
       dmem_mv_dmem_available,
       dmem_mv_dtlb_perf_counters,
       dmem_receive_mem_wr_resp_put;

  // ports of submodule fetch_xactor_f_rd_addr
  wire [51 : 0] fetch_xactor_f_rd_addr_D_IN, fetch_xactor_f_rd_addr_D_OUT;
  wire fetch_xactor_f_rd_addr_CLR,
       fetch_xactor_f_rd_addr_DEQ,
       fetch_xactor_f_rd_addr_EMPTY_N,
       fetch_xactor_f_rd_addr_ENQ,
       fetch_xactor_f_rd_addr_FULL_N;

  // ports of submodule fetch_xactor_f_rd_data
  wire [70 : 0] fetch_xactor_f_rd_data_D_IN, fetch_xactor_f_rd_data_D_OUT;
  wire fetch_xactor_f_rd_data_CLR,
       fetch_xactor_f_rd_data_DEQ,
       fetch_xactor_f_rd_data_EMPTY_N,
       fetch_xactor_f_rd_data_ENQ,
       fetch_xactor_f_rd_data_FULL_N;

  // ports of submodule fetch_xactor_f_wr_addr
  wire [51 : 0] fetch_xactor_f_wr_addr_D_IN, fetch_xactor_f_wr_addr_D_OUT;
  wire fetch_xactor_f_wr_addr_CLR,
       fetch_xactor_f_wr_addr_DEQ,
       fetch_xactor_f_wr_addr_EMPTY_N,
       fetch_xactor_f_wr_addr_ENQ;

  // ports of submodule fetch_xactor_f_wr_data
  wire [76 : 0] fetch_xactor_f_wr_data_D_IN, fetch_xactor_f_wr_data_D_OUT;
  wire fetch_xactor_f_wr_data_CLR,
       fetch_xactor_f_wr_data_DEQ,
       fetch_xactor_f_wr_data_EMPTY_N,
       fetch_xactor_f_wr_data_ENQ;

  // ports of submodule fetch_xactor_f_wr_resp
  wire [5 : 0] fetch_xactor_f_wr_resp_D_IN;
  wire fetch_xactor_f_wr_resp_CLR,
       fetch_xactor_f_wr_resp_DEQ,
       fetch_xactor_f_wr_resp_ENQ,
       fetch_xactor_f_wr_resp_FULL_N;

  // ports of submodule imem
  wire [173 : 0] imem_put_response_frm_ptw_put;
  wire [67 : 0] imem_get_request_to_ptw_get, imem_put_core_req_put;
  wire [66 : 0] imem_put_read_mem_resp_put;
  wire [63 : 0] imem_ma_satp_from_csr_s;
  wire [43 : 0] imem_get_read_mem_req_get;
  wire [41 : 0] imem_get_core_resp_get;
  wire [4 : 0] imem_mv_icache_perf_counters;
  wire [1 : 0] imem_ma_curr_priv_c;
  wire imem_EN_get_core_resp_get,
       imem_EN_get_read_mem_req_get,
       imem_EN_get_request_to_ptw_get,
       imem_EN_ma_cache_enable,
       imem_EN_ma_curr_priv,
       imem_EN_ma_satp_from_csr,
       imem_EN_put_core_req_put,
       imem_EN_put_read_mem_resp_put,
       imem_EN_put_response_frm_ptw_put,
       imem_RDY_get_core_resp_get,
       imem_RDY_get_read_mem_req_get,
       imem_RDY_get_request_to_ptw_get,
       imem_RDY_put_core_req_put,
       imem_RDY_put_read_mem_resp_put,
       imem_RDY_put_response_frm_ptw_put,
       imem_ma_cache_enable_c,
       imem_mv_itlb_perf_counters;

  // ports of submodule memory_xactor_f_rd_addr
  reg [51 : 0] memory_xactor_f_rd_addr_D_IN;
  wire [51 : 0] memory_xactor_f_rd_addr_D_OUT;
  wire memory_xactor_f_rd_addr_CLR,
       memory_xactor_f_rd_addr_DEQ,
       memory_xactor_f_rd_addr_EMPTY_N,
       memory_xactor_f_rd_addr_ENQ,
       memory_xactor_f_rd_addr_FULL_N;

  // ports of submodule memory_xactor_f_rd_data
  wire [70 : 0] memory_xactor_f_rd_data_D_IN, memory_xactor_f_rd_data_D_OUT;
  wire memory_xactor_f_rd_data_CLR,
       memory_xactor_f_rd_data_DEQ,
       memory_xactor_f_rd_data_EMPTY_N,
       memory_xactor_f_rd_data_ENQ,
       memory_xactor_f_rd_data_FULL_N;

  // ports of submodule memory_xactor_f_wr_addr
  wire [51 : 0] memory_xactor_f_wr_addr_D_IN, memory_xactor_f_wr_addr_D_OUT;
  wire memory_xactor_f_wr_addr_CLR,
       memory_xactor_f_wr_addr_DEQ,
       memory_xactor_f_wr_addr_EMPTY_N,
       memory_xactor_f_wr_addr_ENQ,
       memory_xactor_f_wr_addr_FULL_N;

  // ports of submodule memory_xactor_f_wr_data
  reg [76 : 0] memory_xactor_f_wr_data_D_IN;
  wire [76 : 0] memory_xactor_f_wr_data_D_OUT;
  wire memory_xactor_f_wr_data_CLR,
       memory_xactor_f_wr_data_DEQ,
       memory_xactor_f_wr_data_EMPTY_N,
       memory_xactor_f_wr_data_ENQ,
       memory_xactor_f_wr_data_FULL_N;

  // ports of submodule memory_xactor_f_wr_resp
  wire [5 : 0] memory_xactor_f_wr_resp_D_IN, memory_xactor_f_wr_resp_D_OUT;
  wire memory_xactor_f_wr_resp_CLR,
       memory_xactor_f_wr_resp_DEQ,
       memory_xactor_f_wr_resp_EMPTY_N,
       memory_xactor_f_wr_resp_ENQ,
       memory_xactor_f_wr_resp_FULL_N;

  // ports of submodule ptwalk_ff_hold_req
  wire [140 : 0] ptwalk_ff_hold_req_D_IN, ptwalk_ff_hold_req_D_OUT;
  wire ptwalk_ff_hold_req_CLR,
       ptwalk_ff_hold_req_DEQ,
       ptwalk_ff_hold_req_EMPTY_N,
       ptwalk_ff_hold_req_ENQ,
       ptwalk_ff_hold_req_FULL_N;

  // ports of submodule ptwalk_ff_memory_req
  reg [144 : 0] ptwalk_ff_memory_req_D_IN;
  wire [144 : 0] ptwalk_ff_memory_req_D_OUT;
  wire ptwalk_ff_memory_req_CLR,
       ptwalk_ff_memory_req_DEQ,
       ptwalk_ff_memory_req_EMPTY_N,
       ptwalk_ff_memory_req_ENQ,
       ptwalk_ff_memory_req_FULL_N;

  // ports of submodule ptwalk_ff_memory_response
  wire [131 : 0] ptwalk_ff_memory_response_D_IN,
		 ptwalk_ff_memory_response_D_OUT;
  wire ptwalk_ff_memory_response_CLR,
       ptwalk_ff_memory_response_DEQ,
       ptwalk_ff_memory_response_EMPTY_N,
       ptwalk_ff_memory_response_ENQ,
       ptwalk_ff_memory_response_FULL_N;

  // ports of submodule ptwalk_ff_req_queue
  wire [67 : 0] ptwalk_ff_req_queue_D_IN, ptwalk_ff_req_queue_D_OUT;
  wire ptwalk_ff_req_queue_CLR,
       ptwalk_ff_req_queue_DEQ,
       ptwalk_ff_req_queue_EMPTY_N,
       ptwalk_ff_req_queue_ENQ,
       ptwalk_ff_req_queue_FULL_N;

  // ports of submodule ptwalk_ff_response
  wire [173 : 0] ptwalk_ff_response_D_IN, ptwalk_ff_response_D_OUT;
  wire ptwalk_ff_response_CLR,
       ptwalk_ff_response_DEQ,
       ptwalk_ff_response_EMPTY_N,
       ptwalk_ff_response_ENQ,
       ptwalk_ff_response_FULL_N;

  // ports of submodule riscv
  wire [309 : 0] riscv_commitlog;
  wire [144 : 0] riscv_s3_cache_mv_memory_request_get;
  wire [132 : 0] riscv_s5_cache_ma_io_response_r;
  wire [131 : 0] riscv_s4_cache_memory_response_put;
  wire [127 : 0] riscv_csrs_mv_pmp_addr;
  wire [67 : 0] riscv_s0_icache_to_icache_get;
  wire [63 : 0] riscv_csrs_mv_csr_mstatus,
		riscv_csrs_mv_csr_satp,
		riscv_interrupts_ma_clint_mtime_mtime,
		riscv_sbread_mv_csr_customcontrol,
		riscv_sbread_mv_csr_dcsr,
		riscv_sbread_mv_csr_dpc,
		riscv_sbread_mv_csr_dscratch0,
		riscv_sbread_mv_csr_dscratch1,
		riscv_sbread_mv_csr_fcsr,
		riscv_sbread_mv_csr_marchid,
		riscv_sbread_mv_csr_mcause,
		riscv_sbread_mv_csr_mcycle,
		riscv_sbread_mv_csr_medeleg,
		riscv_sbread_mv_csr_menvcfg,
		riscv_sbread_mv_csr_mepc,
		riscv_sbread_mv_csr_mhartid,
		riscv_sbread_mv_csr_mhpmcounter3,
		riscv_sbread_mv_csr_mhpmcounter4,
		riscv_sbread_mv_csr_mhpmcounter5,
		riscv_sbread_mv_csr_mhpmcounter6,
		riscv_sbread_mv_csr_mhpmevent3,
		riscv_sbread_mv_csr_mhpmevent4,
		riscv_sbread_mv_csr_mhpmevent5,
		riscv_sbread_mv_csr_mhpmevent6,
		riscv_sbread_mv_csr_mideleg,
		riscv_sbread_mv_csr_mie,
		riscv_sbread_mv_csr_mimpid,
		riscv_sbread_mv_csr_minstret,
		riscv_sbread_mv_csr_mip,
		riscv_sbread_mv_csr_misa,
		riscv_sbread_mv_csr_mscratch,
		riscv_sbread_mv_csr_mstatus,
		riscv_sbread_mv_csr_mtval,
		riscv_sbread_mv_csr_mtvec,
		riscv_sbread_mv_csr_pmpcfg0,
		riscv_sbread_mv_csr_satp,
		riscv_sbread_mv_csr_scause,
		riscv_sbread_mv_csr_senvcfg,
		riscv_sbread_mv_csr_sepc,
		riscv_sbread_mv_csr_sie,
		riscv_sbread_mv_csr_sip,
		riscv_sbread_mv_csr_sscratch,
		riscv_sbread_mv_csr_stval,
		riscv_sbread_mv_csr_stvec,
		riscv_sbread_mv_csr_time;
  wire [41 : 0] riscv_s1_icache_inst_response_put;
  wire [31 : 0] riscv_csrs_mv_pmp_cfg,
		riscv_sbread_mv_csr_mcounteren,
		riscv_sbread_mv_csr_mcountinhibit,
		riscv_sbread_mv_csr_mvendorid,
		riscv_sbread_mv_csr_scounteren;
  wire [29 : 0] riscv_sbread_mv_csr_pmpaddr0,
		riscv_sbread_mv_csr_pmpaddr1,
		riscv_sbread_mv_csr_pmpaddr2,
		riscv_sbread_mv_csr_pmpaddr3;
  wire [12 : 0] riscv_perfmonitors_ma_dcache_counters_i;
  wire [4 : 0] riscv_perfmonitors_ma_icache_counters_i,
	       riscv_sbread_mv_csr_fflags;
  wire [3 : 0] riscv_csrs_mv_cacheenable;
  wire [2 : 0] riscv_sbread_mv_csr_frm;
  wire [1 : 0] riscv_csrs_mv_curr_priv;
  wire riscv_EN_interrupts_ma_clint_msip,
       riscv_EN_interrupts_ma_clint_mtime,
       riscv_EN_interrupts_ma_clint_mtip,
       riscv_EN_interrupts_ma_plic_meip,
       riscv_EN_interrupts_ma_plic_seip,
       riscv_EN_ma_debug_interrupt,
       riscv_EN_perfmonitors_ma_dcache_counters,
       riscv_EN_perfmonitors_ma_dtlb_counters,
       riscv_EN_perfmonitors_ma_icache_counters,
       riscv_EN_perfmonitors_ma_itlb_counters,
       riscv_EN_s0_icache_to_icache_get,
       riscv_EN_s1_icache_inst_response_put,
       riscv_EN_s3_cache_mv_memory_request_get,
       riscv_EN_s4_cache_memory_response_put,
       riscv_EN_s5_cache_ma_io_response,
       riscv_RDY_s0_icache_to_icache_get,
       riscv_RDY_s1_icache_inst_response_put,
       riscv_RDY_s3_cache_mv_memory_request_get,
       riscv_RDY_s4_cache_memory_response_put,
       riscv_RDY_s5_cache_mv_initiate_ioop,
       riscv_RDY_s5_cache_mv_initiate_store_fst,
       riscv_RDY_s5_cache_mv_initiate_store_snd,
       riscv_interrupts_ma_clint_msip_intrpt,
       riscv_interrupts_ma_clint_mtip_intrpt,
       riscv_interrupts_ma_plic_meip_intrpt,
       riscv_interrupts_ma_plic_seip_intrpt,
       riscv_ma_debug_interrupt__int,
       riscv_ma_debugger_available_avail,
       riscv_mv_core_debugenable,
       riscv_mv_core_is_reset,
       riscv_mv_stop_count,
       riscv_mv_stop_timer,
       riscv_perfmonitors_ma_dtlb_counters_i,
       riscv_perfmonitors_ma_itlb_counters_i,
       riscv_s3_cache_ma_cache_is_available_avail,
       riscv_s5_cache_mv_initiate_ioop,
       riscv_s5_cache_mv_initiate_store_fst,
       riscv_s5_cache_mv_initiate_store_snd;

  // rule scheduling signals
  wire CAN_FIRE_RL_core_req_mkConnectionGetPut,
       CAN_FIRE_RL_core_resp_mkConnectionGetPut,
       CAN_FIRE_RL_handle_dmem_line_write_resp,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_mkConnectionGetPut_2,
       CAN_FIRE_RL_mkConnectionGetPut_3,
       CAN_FIRE_RL_mkConnectionVtoAf,
       CAN_FIRE_RL_mkConnectionVtoAf_1,
       CAN_FIRE_RL_mkConnectionVtoAf_10,
       CAN_FIRE_RL_mkConnectionVtoAf_11,
       CAN_FIRE_RL_mkConnectionVtoAf_12,
       CAN_FIRE_RL_mkConnectionVtoAf_13,
       CAN_FIRE_RL_mkConnectionVtoAf_14,
       CAN_FIRE_RL_mkConnectionVtoAf_15,
       CAN_FIRE_RL_mkConnectionVtoAf_2,
       CAN_FIRE_RL_mkConnectionVtoAf_3,
       CAN_FIRE_RL_mkConnectionVtoAf_4,
       CAN_FIRE_RL_mkConnectionVtoAf_5,
       CAN_FIRE_RL_mkConnectionVtoAf_6,
       CAN_FIRE_RL_mkConnectionVtoAf_7,
       CAN_FIRE_RL_mkConnectionVtoAf_8,
       CAN_FIRE_RL_mkConnectionVtoAf_9,
       CAN_FIRE_RL_ptwalk_check_pte,
       CAN_FIRE_RL_ptwalk_deq_holding_fifo,
       CAN_FIRE_RL_ptwalk_generate_pte,
       CAN_FIRE_RL_ptwalk_req_mkConnectionGetPut,
       CAN_FIRE_RL_ptwalk_resend_core_req_to_cache,
       CAN_FIRE_RL_rl_dmem_burst_write_data,
       CAN_FIRE_RL_rl_dtlb_req_to_ptwalk,
       CAN_FIRE_RL_rl_handle_delayed_read,
       CAN_FIRE_RL_rl_handle_dmem_line_read_request,
       CAN_FIRE_RL_rl_handle_dmem_line_resp,
       CAN_FIRE_RL_rl_handle_dmem_write_request,
       CAN_FIRE_RL_rl_handle_imem_line_request,
       CAN_FIRE_RL_rl_handle_imem_line_resp,
       CAN_FIRE_RL_rl_handle_io_read_response,
       CAN_FIRE_RL_rl_handle_io_write_resp,
       CAN_FIRE_RL_rl_imem_enable,
       CAN_FIRE_RL_rl_initiate_io,
       CAN_FIRE_RL_rl_itlb_req_to_ptwalk,
       CAN_FIRE_RL_rl_map_dmem_enable,
       CAN_FIRE_RL_rl_ptwalk_resp_to_dtlb,
       CAN_FIRE_RL_rl_ptwalk_resp_to_itlb,
       CAN_FIRE___me_check_13,
       CAN_FIRE_ma_debug_interrupt,
       CAN_FIRE_ma_debugger_available,
       CAN_FIRE_master_d_m_arready,
       CAN_FIRE_master_d_m_awready,
       CAN_FIRE_master_d_m_bvalid,
       CAN_FIRE_master_d_m_rvalid,
       CAN_FIRE_master_d_m_wready,
       CAN_FIRE_master_i_m_arready,
       CAN_FIRE_master_i_m_awready,
       CAN_FIRE_master_i_m_bvalid,
       CAN_FIRE_master_i_m_rvalid,
       CAN_FIRE_master_i_m_wready,
       CAN_FIRE_sb_clint_msip_put,
       CAN_FIRE_sb_clint_mtime_put,
       CAN_FIRE_sb_clint_mtip_put,
       CAN_FIRE_sb_plic_meip,
       CAN_FIRE_sb_plic_seip,
       WILL_FIRE_RL_core_req_mkConnectionGetPut,
       WILL_FIRE_RL_core_resp_mkConnectionGetPut,
       WILL_FIRE_RL_handle_dmem_line_write_resp,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_mkConnectionGetPut_2,
       WILL_FIRE_RL_mkConnectionGetPut_3,
       WILL_FIRE_RL_mkConnectionVtoAf,
       WILL_FIRE_RL_mkConnectionVtoAf_1,
       WILL_FIRE_RL_mkConnectionVtoAf_10,
       WILL_FIRE_RL_mkConnectionVtoAf_11,
       WILL_FIRE_RL_mkConnectionVtoAf_12,
       WILL_FIRE_RL_mkConnectionVtoAf_13,
       WILL_FIRE_RL_mkConnectionVtoAf_14,
       WILL_FIRE_RL_mkConnectionVtoAf_15,
       WILL_FIRE_RL_mkConnectionVtoAf_2,
       WILL_FIRE_RL_mkConnectionVtoAf_3,
       WILL_FIRE_RL_mkConnectionVtoAf_4,
       WILL_FIRE_RL_mkConnectionVtoAf_5,
       WILL_FIRE_RL_mkConnectionVtoAf_6,
       WILL_FIRE_RL_mkConnectionVtoAf_7,
       WILL_FIRE_RL_mkConnectionVtoAf_8,
       WILL_FIRE_RL_mkConnectionVtoAf_9,
       WILL_FIRE_RL_ptwalk_check_pte,
       WILL_FIRE_RL_ptwalk_deq_holding_fifo,
       WILL_FIRE_RL_ptwalk_generate_pte,
       WILL_FIRE_RL_ptwalk_req_mkConnectionGetPut,
       WILL_FIRE_RL_ptwalk_resend_core_req_to_cache,
       WILL_FIRE_RL_rl_dmem_burst_write_data,
       WILL_FIRE_RL_rl_dtlb_req_to_ptwalk,
       WILL_FIRE_RL_rl_handle_delayed_read,
       WILL_FIRE_RL_rl_handle_dmem_line_read_request,
       WILL_FIRE_RL_rl_handle_dmem_line_resp,
       WILL_FIRE_RL_rl_handle_dmem_write_request,
       WILL_FIRE_RL_rl_handle_imem_line_request,
       WILL_FIRE_RL_rl_handle_imem_line_resp,
       WILL_FIRE_RL_rl_handle_io_read_response,
       WILL_FIRE_RL_rl_handle_io_write_resp,
       WILL_FIRE_RL_rl_imem_enable,
       WILL_FIRE_RL_rl_initiate_io,
       WILL_FIRE_RL_rl_itlb_req_to_ptwalk,
       WILL_FIRE_RL_rl_map_dmem_enable,
       WILL_FIRE_RL_rl_ptwalk_resp_to_dtlb,
       WILL_FIRE_RL_rl_ptwalk_resp_to_itlb,
       WILL_FIRE___me_check_13,
       WILL_FIRE_ma_debug_interrupt,
       WILL_FIRE_ma_debugger_available,
       WILL_FIRE_master_d_m_arready,
       WILL_FIRE_master_d_m_awready,
       WILL_FIRE_master_d_m_bvalid,
       WILL_FIRE_master_d_m_rvalid,
       WILL_FIRE_master_d_m_wready,
       WILL_FIRE_master_i_m_arready,
       WILL_FIRE_master_i_m_awready,
       WILL_FIRE_master_i_m_bvalid,
       WILL_FIRE_master_i_m_rvalid,
       WILL_FIRE_master_i_m_wready,
       WILL_FIRE_sb_clint_msip_put,
       WILL_FIRE_sb_clint_mtime_put,
       WILL_FIRE_sb_clint_mtip_put,
       WILL_FIRE_sb_plic_meip,
       WILL_FIRE_sb_plic_seip;

  // inputs to muxes for submodule ports
  wire [144 : 0] MUX_ptwalk_ff_memory_req_enq_1__VAL_1,
		 MUX_ptwalk_ff_memory_req_enq_1__VAL_2,
		 MUX_ptwalk_ff_memory_req_enq_1__VAL_3;
  wire [76 : 0] MUX_memory_xactor_f_wr_data_enq_1__VAL_1,
		MUX_memory_xactor_f_wr_data_enq_1__VAL_2,
		MUX_memory_xactor_f_wr_data_enq_1__VAL_3;
  wire [64 : 0] MUX_dmem_receive_mem_io_resp_put_1__VAL_1,
		MUX_dmem_receive_mem_io_resp_put_1__VAL_2;
  wire [52 : 0] MUX_rg_read_line_req_write_1__VAL_1,
		MUX_rg_read_line_req_write_1__VAL_2;
  wire [51 : 0] MUX_memory_xactor_f_rd_addr_enq_1__VAL_1,
		MUX_memory_xactor_f_rd_addr_enq_1__VAL_2,
		MUX_memory_xactor_f_wr_addr_enq_1__VAL_1,
		MUX_memory_xactor_f_wr_addr_enq_1__VAL_2;
  wire [32 : 0] MUX_wr_write_req_write_1__VAL_1,
		MUX_wr_write_req_write_1__VAL_2;
  wire [7 : 0] MUX_rg_burst_count_write_1__VAL_2;
  wire [1 : 0] MUX_ptwalk_rg_state_write_1__VAL_1;
  wire MUX_memory_xactor_f_rd_addr_enq_1__SEL_1,
       MUX_memory_xactor_f_rd_addr_enq_1__SEL_2,
       MUX_memory_xactor_f_wr_addr_enq_1__SEL_1,
       MUX_ptwalk_ff_memory_req_enq_1__SEL_1,
       MUX_rg_ptw_state_write_1__SEL_1,
       MUX_rg_read_line_req_write_1__SEL_1,
       MUX_wr_write_req_write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] x_wdata__h7276;
  reg [8 : 0] CASE_ptwalk_rg_levels_0_ptwalk_ff_req_queueD__ETC__q1;
  reg [7 : 0] write_strobe__h6981;
  reg [6 : 0] cause___1__h3452, cause___1__h3473;
  wire [511 : 0] x__h11161;
  wire [63 : 0] x_address__h2078, x_writedata__h2083, x_writedata__h3443;
  wire [55 : 0] a__h2028, pte_address__h2029;
  wire [31 : 0] wr_write_req_BITS_31_TO_0__q2;
  wire [11 : 0] x__h2139;
  wire [8 : 0] x__h11073;
  wire [7 : 0] IF_NOT_ptwalk_ff_memory_response_first__8_BIT__ETC___d183,
	       write_strobe__h6983,
	       x__h11106;
  wire [6 : 0] IF_NOT_ptwalk_ff_memory_response_first__8_BIT__ETC___d180,
	       _theResult_____1__h3277;
  wire [2 : 0] x__h10757, x__h6694, x__h7146;
  wire [1 : 0] max_levels__h2027, priv__h2675, x__h3328;
  wire IF_IF_ptwalk_wr_mstatus_whas__7_THEN_ptwalk_wr_ETC___d123,
       IF_IF_ptwalk_wr_mstatus_whas__7_THEN_ptwalk_wr_ETC___d189,
       IF_wr_write_req_80_BIT_32_81_THEN_wr_write_req_ETC___d387,
       NOT_ptwalk_ff_memory_response_first__8_BIT_68__ETC___d131,
       NOT_ptwalk_ff_memory_response_first__8_BIT_68__ETC___d204,
       NOT_ptwalk_ff_req_queue_first__1_BITS_3_TO_2_1_ETC___d169,
       NOT_ptwalk_rg_levels_0_EQ_1_4_15_OR_ptwalk_ff__ETC___d244,
       _dand1ptwalk_ff_req_queue_EN_deq,
       ptwalk_ff_req_queue_first__1_BITS_3_TO_2_1_EQ__ETC___d125,
       ptwalk_ff_req_queue_first__1_BITS_3_TO_2_1_EQ__ETC___d165,
       ptwalk_ff_req_queue_first__1_BITS_3_TO_2_1_EQ__ETC___d167,
       ptwalk_ff_req_queue_first__1_BITS_3_TO_2_1_EQ__ETC___d191,
       ptwalk_ff_req_queue_first__1_BITS_3_TO_2_1_EQ__ETC___d241,
       ptwalk_rg_levels_0_EQ_0_3_AND_NOT_ptwalk_ff_me_ETC___d173,
       ptwalk_rg_levels_0_EQ_0_3_AND_NOT_ptwalk_ff_me_ETC___d194,
       ptwalk_rg_levels_0_EQ_1_4_AND_NOT_ptwalk_ff_me_ETC___d171;

  // value method master_d_m_awvalid
  assign master_d_AWVALID = memory_xactor_f_wr_addr_EMPTY_N ;

  // value method master_d_m_awaddr
  assign master_d_AWADDR = memory_xactor_f_wr_addr_D_OUT[51:20] ;

  // value method master_d_m_awprot
  assign master_d_AWPROT = memory_xactor_f_wr_addr_D_OUT[19:17] ;

  // value method master_d_m_awlen
  assign master_d_AWLEN = memory_xactor_f_wr_addr_D_OUT[16:9] ;

  // value method master_d_m_awsize
  assign master_d_AWSIZE = memory_xactor_f_wr_addr_D_OUT[8:6] ;

  // value method master_d_m_awburst
  assign master_d_AWBURST = memory_xactor_f_wr_addr_D_OUT[5:4] ;

  // value method master_d_m_awid
  assign master_d_AWID = memory_xactor_f_wr_addr_D_OUT[3:0] ;

  // action method master_d_m_awready
  assign CAN_FIRE_master_d_m_awready = 1'd1 ;
  assign WILL_FIRE_master_d_m_awready = 1'd1 ;

  // value method master_d_m_wvalid
  assign master_d_WVALID = memory_xactor_f_wr_data_EMPTY_N ;

  // value method master_d_m_wdata
  assign master_d_WDATA = memory_xactor_f_wr_data_D_OUT[76:13] ;

  // value method master_d_m_wstrb
  assign master_d_WSTRB = memory_xactor_f_wr_data_D_OUT[12:5] ;

  // value method master_d_m_wlast
  assign master_d_WLAST = memory_xactor_f_wr_data_D_OUT[0] ;

  // value method master_d_m_wid
  assign master_d_WID = memory_xactor_f_wr_data_D_OUT[4:1] ;

  // action method master_d_m_wready
  assign CAN_FIRE_master_d_m_wready = 1'd1 ;
  assign WILL_FIRE_master_d_m_wready = 1'd1 ;

  // action method master_d_m_bvalid
  assign CAN_FIRE_master_d_m_bvalid = 1'd1 ;
  assign WILL_FIRE_master_d_m_bvalid = 1'd1 ;

  // value method master_d_m_bready
  assign master_d_BREADY = memory_xactor_f_wr_resp_FULL_N ;

  // value method master_d_m_arvalid
  assign master_d_ARVALID = memory_xactor_f_rd_addr_EMPTY_N ;

  // value method master_d_m_araddr
  assign master_d_ARADDR = memory_xactor_f_rd_addr_D_OUT[51:20] ;

  // value method master_d_m_arprot
  assign master_d_ARPROT = memory_xactor_f_rd_addr_D_OUT[19:17] ;

  // value method master_d_m_arlen
  assign master_d_ARLEN = memory_xactor_f_rd_addr_D_OUT[13:6] ;

  // value method master_d_m_arsize
  assign master_d_ARSIZE = memory_xactor_f_rd_addr_D_OUT[16:14] ;

  // value method master_d_m_arburst
  assign master_d_ARBURST = memory_xactor_f_rd_addr_D_OUT[5:4] ;

  // value method master_d_m_arid
  assign master_d_ARID = memory_xactor_f_rd_addr_D_OUT[3:0] ;

  // action method master_d_m_arready
  assign CAN_FIRE_master_d_m_arready = 1'd1 ;
  assign WILL_FIRE_master_d_m_arready = 1'd1 ;

  // action method master_d_m_rvalid
  assign CAN_FIRE_master_d_m_rvalid = 1'd1 ;
  assign WILL_FIRE_master_d_m_rvalid = 1'd1 ;

  // value method master_d_m_rready
  assign master_d_RREADY = memory_xactor_f_rd_data_FULL_N ;

  // value method master_i_m_awvalid
  assign master_i_AWVALID = fetch_xactor_f_wr_addr_EMPTY_N ;

  // value method master_i_m_awaddr
  assign master_i_AWADDR = fetch_xactor_f_wr_addr_D_OUT[51:20] ;

  // value method master_i_m_awprot
  assign master_i_AWPROT = fetch_xactor_f_wr_addr_D_OUT[19:17] ;

  // value method master_i_m_awlen
  assign master_i_AWLEN = fetch_xactor_f_wr_addr_D_OUT[16:9] ;

  // value method master_i_m_awsize
  assign master_i_AWSIZE = fetch_xactor_f_wr_addr_D_OUT[8:6] ;

  // value method master_i_m_awburst
  assign master_i_AWBURST = fetch_xactor_f_wr_addr_D_OUT[5:4] ;

  // value method master_i_m_awid
  assign master_i_AWID = fetch_xactor_f_wr_addr_D_OUT[3:0] ;

  // action method master_i_m_awready
  assign CAN_FIRE_master_i_m_awready = 1'd1 ;
  assign WILL_FIRE_master_i_m_awready = 1'd1 ;

  // value method master_i_m_wvalid
  assign master_i_WVALID = fetch_xactor_f_wr_data_EMPTY_N ;

  // value method master_i_m_wdata
  assign master_i_WDATA = fetch_xactor_f_wr_data_D_OUT[76:13] ;

  // value method master_i_m_wstrb
  assign master_i_WSTRB = fetch_xactor_f_wr_data_D_OUT[12:5] ;

  // value method master_i_m_wlast
  assign master_i_WLAST = fetch_xactor_f_wr_data_D_OUT[0] ;

  // value method master_i_m_wid
  assign master_i_WID = fetch_xactor_f_wr_data_D_OUT[4:1] ;

  // action method master_i_m_wready
  assign CAN_FIRE_master_i_m_wready = 1'd1 ;
  assign WILL_FIRE_master_i_m_wready = 1'd1 ;

  // action method master_i_m_bvalid
  assign CAN_FIRE_master_i_m_bvalid = 1'd1 ;
  assign WILL_FIRE_master_i_m_bvalid = 1'd1 ;

  // value method master_i_m_bready
  assign master_i_BREADY = fetch_xactor_f_wr_resp_FULL_N ;

  // value method master_i_m_arvalid
  assign master_i_ARVALID = fetch_xactor_f_rd_addr_EMPTY_N ;

  // value method master_i_m_araddr
  assign master_i_ARADDR = fetch_xactor_f_rd_addr_D_OUT[51:20] ;

  // value method master_i_m_arprot
  assign master_i_ARPROT = fetch_xactor_f_rd_addr_D_OUT[19:17] ;

  // value method master_i_m_arlen
  assign master_i_ARLEN = fetch_xactor_f_rd_addr_D_OUT[13:6] ;

  // value method master_i_m_arsize
  assign master_i_ARSIZE = fetch_xactor_f_rd_addr_D_OUT[16:14] ;

  // value method master_i_m_arburst
  assign master_i_ARBURST = fetch_xactor_f_rd_addr_D_OUT[5:4] ;

  // value method master_i_m_arid
  assign master_i_ARID = fetch_xactor_f_rd_addr_D_OUT[3:0] ;

  // action method master_i_m_arready
  assign CAN_FIRE_master_i_m_arready = 1'd1 ;
  assign WILL_FIRE_master_i_m_arready = 1'd1 ;

  // action method master_i_m_rvalid
  assign CAN_FIRE_master_i_m_rvalid = 1'd1 ;
  assign WILL_FIRE_master_i_m_rvalid = 1'd1 ;

  // value method master_i_m_rready
  assign master_i_RREADY = fetch_xactor_f_rd_data_FULL_N ;

  // action method sb_clint_msip_put
  assign RDY_sb_clint_msip_put = 1'd1 ;
  assign CAN_FIRE_sb_clint_msip_put = 1'd1 ;
  assign WILL_FIRE_sb_clint_msip_put = EN_sb_clint_msip_put ;

  // action method sb_clint_mtip_put
  assign RDY_sb_clint_mtip_put = 1'd1 ;
  assign CAN_FIRE_sb_clint_mtip_put = 1'd1 ;
  assign WILL_FIRE_sb_clint_mtip_put = EN_sb_clint_mtip_put ;

  // action method sb_clint_mtime_put
  assign RDY_sb_clint_mtime_put = 1'd1 ;
  assign CAN_FIRE_sb_clint_mtime_put = 1'd1 ;
  assign WILL_FIRE_sb_clint_mtime_put = EN_sb_clint_mtime_put ;

  // action method sb_plic_meip
  assign RDY_sb_plic_meip = 1'd1 ;
  assign CAN_FIRE_sb_plic_meip = 1'd1 ;
  assign WILL_FIRE_sb_plic_meip = EN_sb_plic_meip ;

  // action method sb_plic_seip
  assign RDY_sb_plic_seip = 1'd1 ;
  assign CAN_FIRE_sb_plic_seip = 1'd1 ;
  assign WILL_FIRE_sb_plic_seip = EN_sb_plic_seip ;

  // value method sbread_mv_csr_misa
  assign sbread_mv_csr_misa = riscv_sbread_mv_csr_misa ;
  assign RDY_sbread_mv_csr_misa = 1'd1 ;

  // value method sbread_mv_csr_mvendorid
  assign sbread_mv_csr_mvendorid = riscv_sbread_mv_csr_mvendorid ;
  assign RDY_sbread_mv_csr_mvendorid = 1'd1 ;

  // value method sbread_mv_csr_stvec
  assign sbread_mv_csr_stvec = riscv_sbread_mv_csr_stvec ;
  assign RDY_sbread_mv_csr_stvec = 1'd1 ;

  // value method sbread_mv_csr_mtvec
  assign sbread_mv_csr_mtvec = riscv_sbread_mv_csr_mtvec ;
  assign RDY_sbread_mv_csr_mtvec = 1'd1 ;

  // value method sbread_mv_csr_mstatus
  assign sbread_mv_csr_mstatus = riscv_sbread_mv_csr_mstatus ;
  assign RDY_sbread_mv_csr_mstatus = 1'd1 ;

  // value method sbread_mv_csr_marchid
  assign sbread_mv_csr_marchid = riscv_sbread_mv_csr_marchid ;
  assign RDY_sbread_mv_csr_marchid = 1'd1 ;

  // value method sbread_mv_csr_mimpid
  assign sbread_mv_csr_mimpid = riscv_sbread_mv_csr_mimpid ;
  assign RDY_sbread_mv_csr_mimpid = 1'd1 ;

  // value method sbread_mv_csr_mhartid
  assign sbread_mv_csr_mhartid = riscv_sbread_mv_csr_mhartid ;
  assign RDY_sbread_mv_csr_mhartid = 1'd1 ;

  // value method sbread_mv_csr_mip
  assign sbread_mv_csr_mip = riscv_sbread_mv_csr_mip ;
  assign RDY_sbread_mv_csr_mip = 1'd1 ;

  // value method sbread_mv_csr_sip
  assign sbread_mv_csr_sip = riscv_sbread_mv_csr_sip ;
  assign RDY_sbread_mv_csr_sip = 1'd1 ;

  // value method sbread_mv_csr_mie
  assign sbread_mv_csr_mie = riscv_sbread_mv_csr_mie ;
  assign RDY_sbread_mv_csr_mie = 1'd1 ;

  // value method sbread_mv_csr_sie
  assign sbread_mv_csr_sie = riscv_sbread_mv_csr_sie ;
  assign RDY_sbread_mv_csr_sie = 1'd1 ;

  // value method sbread_mv_csr_mscratch
  assign sbread_mv_csr_mscratch = riscv_sbread_mv_csr_mscratch ;
  assign RDY_sbread_mv_csr_mscratch = 1'd1 ;

  // value method sbread_mv_csr_sscratch
  assign sbread_mv_csr_sscratch = riscv_sbread_mv_csr_sscratch ;
  assign RDY_sbread_mv_csr_sscratch = 1'd1 ;

  // value method sbread_mv_csr_sepc
  assign sbread_mv_csr_sepc = riscv_sbread_mv_csr_sepc ;
  assign RDY_sbread_mv_csr_sepc = 1'd1 ;

  // value method sbread_mv_csr_stval
  assign sbread_mv_csr_stval = riscv_sbread_mv_csr_stval ;
  assign RDY_sbread_mv_csr_stval = 1'd1 ;

  // value method sbread_mv_csr_scause
  assign sbread_mv_csr_scause = riscv_sbread_mv_csr_scause ;
  assign RDY_sbread_mv_csr_scause = 1'd1 ;

  // value method sbread_mv_csr_mepc
  assign sbread_mv_csr_mepc = riscv_sbread_mv_csr_mepc ;
  assign RDY_sbread_mv_csr_mepc = 1'd1 ;

  // value method sbread_mv_csr_mtval
  assign sbread_mv_csr_mtval = riscv_sbread_mv_csr_mtval ;
  assign RDY_sbread_mv_csr_mtval = 1'd1 ;

  // value method sbread_mv_csr_mcause
  assign sbread_mv_csr_mcause = riscv_sbread_mv_csr_mcause ;
  assign RDY_sbread_mv_csr_mcause = 1'd1 ;

  // value method sbread_mv_csr_mcycle
  assign sbread_mv_csr_mcycle = riscv_sbread_mv_csr_mcycle ;
  assign RDY_sbread_mv_csr_mcycle = 1'd1 ;

  // value method sbread_mv_csr_minstret
  assign sbread_mv_csr_minstret = riscv_sbread_mv_csr_minstret ;
  assign RDY_sbread_mv_csr_minstret = 1'd1 ;

  // value method sbread_mv_csr_fcsr
  assign sbread_mv_csr_fcsr = riscv_sbread_mv_csr_fcsr ;
  assign RDY_sbread_mv_csr_fcsr = 1'd1 ;

  // value method sbread_mv_csr_time
  assign sbread_mv_csr_time = riscv_sbread_mv_csr_time ;
  assign RDY_sbread_mv_csr_time = 1'd1 ;

  // value method sbread_mv_csr_mideleg
  assign sbread_mv_csr_mideleg = riscv_sbread_mv_csr_mideleg ;
  assign RDY_sbread_mv_csr_mideleg = 1'd1 ;

  // value method sbread_mv_csr_medeleg
  assign sbread_mv_csr_medeleg = riscv_sbread_mv_csr_medeleg ;
  assign RDY_sbread_mv_csr_medeleg = 1'd1 ;

  // value method sbread_mv_csr_pmpcfg0
  assign sbread_mv_csr_pmpcfg0 = riscv_sbread_mv_csr_pmpcfg0 ;
  assign RDY_sbread_mv_csr_pmpcfg0 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr0
  assign sbread_mv_csr_pmpaddr0 = riscv_sbread_mv_csr_pmpaddr0 ;
  assign RDY_sbread_mv_csr_pmpaddr0 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr1
  assign sbread_mv_csr_pmpaddr1 = riscv_sbread_mv_csr_pmpaddr1 ;
  assign RDY_sbread_mv_csr_pmpaddr1 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr2
  assign sbread_mv_csr_pmpaddr2 = riscv_sbread_mv_csr_pmpaddr2 ;
  assign RDY_sbread_mv_csr_pmpaddr2 = 1'd1 ;

  // value method sbread_mv_csr_pmpaddr3
  assign sbread_mv_csr_pmpaddr3 = riscv_sbread_mv_csr_pmpaddr3 ;
  assign RDY_sbread_mv_csr_pmpaddr3 = 1'd1 ;

  // value method sbread_mv_csr_mcounteren
  assign sbread_mv_csr_mcounteren = riscv_sbread_mv_csr_mcounteren ;
  assign RDY_sbread_mv_csr_mcounteren = 1'd1 ;

  // value method sbread_mv_csr_scounteren
  assign sbread_mv_csr_scounteren = riscv_sbread_mv_csr_scounteren ;
  assign RDY_sbread_mv_csr_scounteren = 1'd1 ;

  // value method sbread_mv_csr_menvcfg
  assign sbread_mv_csr_menvcfg = riscv_sbread_mv_csr_menvcfg ;
  assign RDY_sbread_mv_csr_menvcfg = 1'd1 ;

  // value method sbread_mv_csr_senvcfg
  assign sbread_mv_csr_senvcfg = riscv_sbread_mv_csr_senvcfg ;
  assign RDY_sbread_mv_csr_senvcfg = 1'd1 ;

  // value method sbread_mv_csr_satp
  assign sbread_mv_csr_satp = riscv_sbread_mv_csr_satp ;
  assign RDY_sbread_mv_csr_satp = 1'd1 ;

  // value method sbread_mv_csr_mcountinhibit
  assign sbread_mv_csr_mcountinhibit = riscv_sbread_mv_csr_mcountinhibit ;
  assign RDY_sbread_mv_csr_mcountinhibit = 1'd1 ;

  // value method sbread_mv_csr_fflags
  assign sbread_mv_csr_fflags = riscv_sbread_mv_csr_fflags ;
  assign RDY_sbread_mv_csr_fflags = 1'd1 ;

  // value method sbread_mv_csr_frm
  assign sbread_mv_csr_frm = riscv_sbread_mv_csr_frm ;
  assign RDY_sbread_mv_csr_frm = 1'd1 ;

  // value method sbread_mv_csr_customcontrol
  assign sbread_mv_csr_customcontrol = riscv_sbread_mv_csr_customcontrol ;
  assign RDY_sbread_mv_csr_customcontrol = 1'd1 ;

  // value method sbread_mv_csr_mhpmcounter3
  assign sbread_mv_csr_mhpmcounter3 = riscv_sbread_mv_csr_mhpmcounter3 ;
  assign RDY_sbread_mv_csr_mhpmcounter3 = 1'd1 ;

  // value method sbread_mv_csr_mhpmcounter4
  assign sbread_mv_csr_mhpmcounter4 = riscv_sbread_mv_csr_mhpmcounter4 ;
  assign RDY_sbread_mv_csr_mhpmcounter4 = 1'd1 ;

  // value method sbread_mv_csr_mhpmcounter5
  assign sbread_mv_csr_mhpmcounter5 = riscv_sbread_mv_csr_mhpmcounter5 ;
  assign RDY_sbread_mv_csr_mhpmcounter5 = 1'd1 ;

  // value method sbread_mv_csr_mhpmcounter6
  assign sbread_mv_csr_mhpmcounter6 = riscv_sbread_mv_csr_mhpmcounter6 ;
  assign RDY_sbread_mv_csr_mhpmcounter6 = 1'd1 ;

  // value method sbread_mv_csr_mhpmevent3
  assign sbread_mv_csr_mhpmevent3 = riscv_sbread_mv_csr_mhpmevent3 ;
  assign RDY_sbread_mv_csr_mhpmevent3 = 1'd1 ;

  // value method sbread_mv_csr_mhpmevent4
  assign sbread_mv_csr_mhpmevent4 = riscv_sbread_mv_csr_mhpmevent4 ;
  assign RDY_sbread_mv_csr_mhpmevent4 = 1'd1 ;

  // value method sbread_mv_csr_mhpmevent5
  assign sbread_mv_csr_mhpmevent5 = riscv_sbread_mv_csr_mhpmevent5 ;
  assign RDY_sbread_mv_csr_mhpmevent5 = 1'd1 ;

  // value method sbread_mv_csr_mhpmevent6
  assign sbread_mv_csr_mhpmevent6 = riscv_sbread_mv_csr_mhpmevent6 ;
  assign RDY_sbread_mv_csr_mhpmevent6 = 1'd1 ;

  // value method sbread_mv_csr_dcsr
  assign sbread_mv_csr_dcsr = riscv_sbread_mv_csr_dcsr ;
  assign RDY_sbread_mv_csr_dcsr = 1'd1 ;

  // value method sbread_mv_csr_dpc
  assign sbread_mv_csr_dpc = riscv_sbread_mv_csr_dpc ;
  assign RDY_sbread_mv_csr_dpc = 1'd1 ;

  // value method sbread_mv_csr_dscratch0
  assign sbread_mv_csr_dscratch0 = riscv_sbread_mv_csr_dscratch0 ;
  assign RDY_sbread_mv_csr_dscratch0 = 1'd1 ;

  // value method sbread_mv_csr_dscratch1
  assign sbread_mv_csr_dscratch1 = riscv_sbread_mv_csr_dscratch1 ;
  assign RDY_sbread_mv_csr_dscratch1 = 1'd1 ;

  // value method commitlog
  assign commitlog = riscv_commitlog ;
  assign RDY_commitlog = 1'd1 ;

  // action method ma_debug_interrupt
  assign RDY_ma_debug_interrupt = 1'd1 ;
  assign CAN_FIRE_ma_debug_interrupt = 1'd1 ;
  assign WILL_FIRE_ma_debug_interrupt = EN_ma_debug_interrupt ;

  // value method mv_core_is_reset
  assign mv_core_is_reset = riscv_mv_core_is_reset ;
  assign RDY_mv_core_is_reset = 1'd1 ;

  // value method mv_core_debugenable
  assign mv_core_debugenable = riscv_mv_core_debugenable ;
  assign RDY_mv_core_debugenable = 1'd1 ;

  // action method ma_debugger_available
  assign CAN_FIRE_ma_debugger_available = 1'd1 ;
  assign WILL_FIRE_ma_debugger_available = 1'd1 ;

  // value method mv_stop_timer
  assign mv_stop_timer = riscv_mv_stop_timer ;
  assign RDY_mv_stop_timer = 1'd1 ;

  // value method mv_stop_count
  assign mv_stop_count = riscv_mv_stop_count ;
  assign RDY_mv_stop_count = 1'd1 ;

  // submodule dmem
  mkdmem #(.id(hartid[31:0])) dmem(.pmp_cfg_0(riscv_csrs_mv_pmp_cfg[7:0]),
				   .pmp_cfg_1(riscv_csrs_mv_pmp_cfg[15:8]),
				   .pmp_cfg_2(riscv_csrs_mv_pmp_cfg[23:16]),
				   .pmp_cfg_3(riscv_csrs_mv_pmp_cfg[31:24]),
				   .pmp_addr_0(riscv_csrs_mv_pmp_addr[31:0]),
				   .pmp_addr_1(riscv_csrs_mv_pmp_addr[63:32]),
				   .pmp_addr_2(riscv_csrs_mv_pmp_addr[95:64]),
				   .pmp_addr_3(riscv_csrs_mv_pmp_addr[127:96]),
				   .CLK(CLK),
				   .RST_N(RST_N),
				   .ma_cache_enable_c(dmem_ma_cache_enable_c),
				   .ma_commit_io_currepoch(dmem_ma_commit_io_currepoch),
				   .ma_commit_store_storecommit(dmem_ma_commit_store_storecommit),
				   .ma_curr_priv_c(dmem_ma_curr_priv_c),
				   .ma_mstatus_from_csr_m(dmem_ma_mstatus_from_csr_m),
				   .ma_satp_from_csr_s(dmem_ma_satp_from_csr_s),
				   .put_resp_from_ptw_put(dmem_put_resp_from_ptw_put),
				   .receive_core_req_put(dmem_receive_core_req_put),
				   .receive_mem_io_resp_put(dmem_receive_mem_io_resp_put),
				   .receive_mem_rd_resp_put(dmem_receive_mem_rd_resp_put),
				   .receive_mem_wr_resp_put(dmem_receive_mem_wr_resp_put),
				   .EN_receive_core_req_put(dmem_EN_receive_core_req_put),
				   .EN_send_core_cache_resp_get(dmem_EN_send_core_cache_resp_get),
				   .EN_send_mem_io_req_get(dmem_EN_send_mem_io_req_get),
				   .EN_receive_mem_io_resp_put(dmem_EN_receive_mem_io_resp_put),
				   .EN_ma_commit_io(dmem_EN_ma_commit_io),
				   .EN_receive_mem_wr_resp_put(dmem_EN_receive_mem_wr_resp_put),
				   .EN_deq_mem_wr_req(dmem_EN_deq_mem_wr_req),
				   .EN_send_mem_rd_req_get(dmem_EN_send_mem_rd_req_get),
				   .EN_receive_mem_rd_resp_put(dmem_EN_receive_mem_rd_resp_put),
				   .EN_ma_commit_store(dmem_EN_ma_commit_store),
				   .EN_ma_cache_enable(dmem_EN_ma_cache_enable),
				   .EN_get_ptw_resp_get(dmem_EN_get_ptw_resp_get),
				   .EN_get_req_to_ptw_get(dmem_EN_get_req_to_ptw_get),
				   .EN_put_resp_from_ptw_put(dmem_EN_put_resp_from_ptw_put),
				   .EN_ma_satp_from_csr(dmem_EN_ma_satp_from_csr),
				   .EN_ma_mstatus_from_csr(dmem_EN_ma_mstatus_from_csr),
				   .EN_get_hold_req_get(dmem_EN_get_hold_req_get),
				   .RDY_receive_core_req_put(dmem_RDY_receive_core_req_put),
				   .send_core_cache_resp_get(dmem_send_core_cache_resp_get),
				   .RDY_send_core_cache_resp_get(dmem_RDY_send_core_cache_resp_get),
				   .send_core_io_resp(dmem_send_core_io_resp),
				   .RDY_send_core_io_resp(),
				   .send_mem_io_req_get(dmem_send_mem_io_req_get),
				   .RDY_send_mem_io_req_get(dmem_RDY_send_mem_io_req_get),
				   .RDY_receive_mem_io_resp_put(dmem_RDY_receive_mem_io_resp_put),
				   .RDY_ma_commit_io(dmem_RDY_ma_commit_io),
				   .mv_dmem_available(dmem_mv_dmem_available),
				   .send_mem_wr_req(dmem_send_mem_wr_req),
				   .RDY_send_mem_wr_req(dmem_RDY_send_mem_wr_req),
				   .RDY_receive_mem_wr_resp_put(dmem_RDY_receive_mem_wr_resp_put),
				   .RDY_deq_mem_wr_req(dmem_RDY_deq_mem_wr_req),
				   .send_mem_rd_req_get(dmem_send_mem_rd_req_get),
				   .RDY_send_mem_rd_req_get(dmem_RDY_send_mem_rd_req_get),
				   .RDY_receive_mem_rd_resp_put(dmem_RDY_receive_mem_rd_resp_put),
				   .RDY_ma_commit_store(),
				   .RDY_ma_cache_enable(),
				   .mv_storebuffer_empty(),
				   .get_ptw_resp_get(dmem_get_ptw_resp_get),
				   .RDY_get_ptw_resp_get(dmem_RDY_get_ptw_resp_get),
				   .get_req_to_ptw_get(dmem_get_req_to_ptw_get),
				   .RDY_get_req_to_ptw_get(dmem_RDY_get_req_to_ptw_get),
				   .RDY_put_resp_from_ptw_put(dmem_RDY_put_resp_from_ptw_put),
				   .RDY_ma_satp_from_csr(),
				   .RDY_ma_mstatus_from_csr(),
				   .get_hold_req_get(dmem_get_hold_req_get),
				   .RDY_get_hold_req_get(dmem_RDY_get_hold_req_get),
				   .mv_dcache_perf_counters(dmem_mv_dcache_perf_counters),
				   .RDY_mv_dcache_perf_counters(),
				   .mv_dtlb_perf_counters(dmem_mv_dtlb_perf_counters),
				   .RDY_mv_dtlb_perf_counters());

  // submodule fetch_xactor_f_rd_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) fetch_xactor_f_rd_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_rd_addr_D_IN),
								 .ENQ(fetch_xactor_f_rd_addr_ENQ),
								 .DEQ(fetch_xactor_f_rd_addr_DEQ),
								 .CLR(fetch_xactor_f_rd_addr_CLR),
								 .D_OUT(fetch_xactor_f_rd_addr_D_OUT),
								 .FULL_N(fetch_xactor_f_rd_addr_FULL_N),
								 .EMPTY_N(fetch_xactor_f_rd_addr_EMPTY_N));

  // submodule fetch_xactor_f_rd_data
  FIFO2 #(.width(32'd71), .guarded(1'd1)) fetch_xactor_f_rd_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_rd_data_D_IN),
								 .ENQ(fetch_xactor_f_rd_data_ENQ),
								 .DEQ(fetch_xactor_f_rd_data_DEQ),
								 .CLR(fetch_xactor_f_rd_data_CLR),
								 .D_OUT(fetch_xactor_f_rd_data_D_OUT),
								 .FULL_N(fetch_xactor_f_rd_data_FULL_N),
								 .EMPTY_N(fetch_xactor_f_rd_data_EMPTY_N));

  // submodule fetch_xactor_f_wr_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) fetch_xactor_f_wr_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_wr_addr_D_IN),
								 .ENQ(fetch_xactor_f_wr_addr_ENQ),
								 .DEQ(fetch_xactor_f_wr_addr_DEQ),
								 .CLR(fetch_xactor_f_wr_addr_CLR),
								 .D_OUT(fetch_xactor_f_wr_addr_D_OUT),
								 .FULL_N(),
								 .EMPTY_N(fetch_xactor_f_wr_addr_EMPTY_N));

  // submodule fetch_xactor_f_wr_data
  FIFO2 #(.width(32'd77), .guarded(1'd1)) fetch_xactor_f_wr_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_wr_data_D_IN),
								 .ENQ(fetch_xactor_f_wr_data_ENQ),
								 .DEQ(fetch_xactor_f_wr_data_DEQ),
								 .CLR(fetch_xactor_f_wr_data_CLR),
								 .D_OUT(fetch_xactor_f_wr_data_D_OUT),
								 .FULL_N(),
								 .EMPTY_N(fetch_xactor_f_wr_data_EMPTY_N));

  // submodule fetch_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(1'd1)) fetch_xactor_f_wr_resp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(fetch_xactor_f_wr_resp_D_IN),
								.ENQ(fetch_xactor_f_wr_resp_ENQ),
								.DEQ(fetch_xactor_f_wr_resp_DEQ),
								.CLR(fetch_xactor_f_wr_resp_CLR),
								.D_OUT(),
								.FULL_N(fetch_xactor_f_wr_resp_FULL_N),
								.EMPTY_N());

  // submodule imem
  mkimem #(.id(hartid[31:0])) imem(.pmp_cfg_0(riscv_csrs_mv_pmp_cfg[7:0]),
				   .pmp_cfg_1(riscv_csrs_mv_pmp_cfg[15:8]),
				   .pmp_cfg_2(riscv_csrs_mv_pmp_cfg[23:16]),
				   .pmp_cfg_3(riscv_csrs_mv_pmp_cfg[31:24]),
				   .pmp_addr_0(riscv_csrs_mv_pmp_addr[31:0]),
				   .pmp_addr_1(riscv_csrs_mv_pmp_addr[63:32]),
				   .pmp_addr_2(riscv_csrs_mv_pmp_addr[95:64]),
				   .pmp_addr_3(riscv_csrs_mv_pmp_addr[127:96]),
				   .CLK(CLK),
				   .RST_N(RST_N),
				   .ma_cache_enable_c(imem_ma_cache_enable_c),
				   .ma_curr_priv_c(imem_ma_curr_priv_c),
				   .ma_satp_from_csr_s(imem_ma_satp_from_csr_s),
				   .put_core_req_put(imem_put_core_req_put),
				   .put_read_mem_resp_put(imem_put_read_mem_resp_put),
				   .put_response_frm_ptw_put(imem_put_response_frm_ptw_put),
				   .EN_put_core_req_put(imem_EN_put_core_req_put),
				   .EN_get_core_resp_get(imem_EN_get_core_resp_get),
				   .EN_ma_cache_enable(imem_EN_ma_cache_enable),
				   .EN_get_read_mem_req_get(imem_EN_get_read_mem_req_get),
				   .EN_put_read_mem_resp_put(imem_EN_put_read_mem_resp_put),
				   .EN_ma_curr_priv(imem_EN_ma_curr_priv),
				   .EN_get_request_to_ptw_get(imem_EN_get_request_to_ptw_get),
				   .EN_put_response_frm_ptw_put(imem_EN_put_response_frm_ptw_put),
				   .EN_ma_satp_from_csr(imem_EN_ma_satp_from_csr),
				   .RDY_put_core_req_put(imem_RDY_put_core_req_put),
				   .get_core_resp_get(imem_get_core_resp_get),
				   .RDY_get_core_resp_get(imem_RDY_get_core_resp_get),
				   .RDY_ma_cache_enable(),
				   .get_read_mem_req_get(imem_get_read_mem_req_get),
				   .RDY_get_read_mem_req_get(imem_RDY_get_read_mem_req_get),
				   .RDY_put_read_mem_resp_put(imem_RDY_put_read_mem_resp_put),
				   .mv_cache_available(),
				   .RDY_mv_cache_available(),
				   .RDY_ma_curr_priv(),
				   .get_request_to_ptw_get(imem_get_request_to_ptw_get),
				   .RDY_get_request_to_ptw_get(imem_RDY_get_request_to_ptw_get),
				   .RDY_put_response_frm_ptw_put(imem_RDY_put_response_frm_ptw_put),
				   .RDY_ma_satp_from_csr(),
				   .mv_icache_perf_counters(imem_mv_icache_perf_counters),
				   .RDY_mv_icache_perf_counters(),
				   .mv_itlb_perf_counters(imem_mv_itlb_perf_counters),
				   .RDY_mv_itlb_perf_counters());

  // submodule memory_xactor_f_rd_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) memory_xactor_f_rd_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_rd_addr_D_IN),
								  .ENQ(memory_xactor_f_rd_addr_ENQ),
								  .DEQ(memory_xactor_f_rd_addr_DEQ),
								  .CLR(memory_xactor_f_rd_addr_CLR),
								  .D_OUT(memory_xactor_f_rd_addr_D_OUT),
								  .FULL_N(memory_xactor_f_rd_addr_FULL_N),
								  .EMPTY_N(memory_xactor_f_rd_addr_EMPTY_N));

  // submodule memory_xactor_f_rd_data
  FIFO2 #(.width(32'd71), .guarded(1'd1)) memory_xactor_f_rd_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_rd_data_D_IN),
								  .ENQ(memory_xactor_f_rd_data_ENQ),
								  .DEQ(memory_xactor_f_rd_data_DEQ),
								  .CLR(memory_xactor_f_rd_data_CLR),
								  .D_OUT(memory_xactor_f_rd_data_D_OUT),
								  .FULL_N(memory_xactor_f_rd_data_FULL_N),
								  .EMPTY_N(memory_xactor_f_rd_data_EMPTY_N));

  // submodule memory_xactor_f_wr_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) memory_xactor_f_wr_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_wr_addr_D_IN),
								  .ENQ(memory_xactor_f_wr_addr_ENQ),
								  .DEQ(memory_xactor_f_wr_addr_DEQ),
								  .CLR(memory_xactor_f_wr_addr_CLR),
								  .D_OUT(memory_xactor_f_wr_addr_D_OUT),
								  .FULL_N(memory_xactor_f_wr_addr_FULL_N),
								  .EMPTY_N(memory_xactor_f_wr_addr_EMPTY_N));

  // submodule memory_xactor_f_wr_data
  FIFO2 #(.width(32'd77), .guarded(1'd1)) memory_xactor_f_wr_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_wr_data_D_IN),
								  .ENQ(memory_xactor_f_wr_data_ENQ),
								  .DEQ(memory_xactor_f_wr_data_DEQ),
								  .CLR(memory_xactor_f_wr_data_CLR),
								  .D_OUT(memory_xactor_f_wr_data_D_OUT),
								  .FULL_N(memory_xactor_f_wr_data_FULL_N),
								  .EMPTY_N(memory_xactor_f_wr_data_EMPTY_N));

  // submodule memory_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(1'd1)) memory_xactor_f_wr_resp(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(memory_xactor_f_wr_resp_D_IN),
								 .ENQ(memory_xactor_f_wr_resp_ENQ),
								 .DEQ(memory_xactor_f_wr_resp_DEQ),
								 .CLR(memory_xactor_f_wr_resp_CLR),
								 .D_OUT(memory_xactor_f_wr_resp_D_OUT),
								 .FULL_N(memory_xactor_f_wr_resp_FULL_N),
								 .EMPTY_N(memory_xactor_f_wr_resp_EMPTY_N));

  // submodule ptwalk_ff_hold_req
  FIFO1 #(.width(32'd141), .guarded(1'd1)) ptwalk_ff_hold_req(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ptwalk_ff_hold_req_D_IN),
							      .ENQ(ptwalk_ff_hold_req_ENQ),
							      .DEQ(ptwalk_ff_hold_req_DEQ),
							      .CLR(ptwalk_ff_hold_req_CLR),
							      .D_OUT(ptwalk_ff_hold_req_D_OUT),
							      .FULL_N(ptwalk_ff_hold_req_FULL_N),
							      .EMPTY_N(ptwalk_ff_hold_req_EMPTY_N));

  // submodule ptwalk_ff_memory_req
  FIFO2 #(.width(32'd145), .guarded(1'd1)) ptwalk_ff_memory_req(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ptwalk_ff_memory_req_D_IN),
								.ENQ(ptwalk_ff_memory_req_ENQ),
								.DEQ(ptwalk_ff_memory_req_DEQ),
								.CLR(ptwalk_ff_memory_req_CLR),
								.D_OUT(ptwalk_ff_memory_req_D_OUT),
								.FULL_N(ptwalk_ff_memory_req_FULL_N),
								.EMPTY_N(ptwalk_ff_memory_req_EMPTY_N));

  // submodule ptwalk_ff_memory_response
  FIFO2 #(.width(32'd132),
	  .guarded(1'd1)) ptwalk_ff_memory_response(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ptwalk_ff_memory_response_D_IN),
						    .ENQ(ptwalk_ff_memory_response_ENQ),
						    .DEQ(ptwalk_ff_memory_response_DEQ),
						    .CLR(ptwalk_ff_memory_response_CLR),
						    .D_OUT(ptwalk_ff_memory_response_D_OUT),
						    .FULL_N(ptwalk_ff_memory_response_FULL_N),
						    .EMPTY_N(ptwalk_ff_memory_response_EMPTY_N));

  // submodule ptwalk_ff_req_queue
  FIFO2 #(.width(32'd68), .guarded(1'd1)) ptwalk_ff_req_queue(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ptwalk_ff_req_queue_D_IN),
							      .ENQ(ptwalk_ff_req_queue_ENQ),
							      .DEQ(ptwalk_ff_req_queue_DEQ),
							      .CLR(ptwalk_ff_req_queue_CLR),
							      .D_OUT(ptwalk_ff_req_queue_D_OUT),
							      .FULL_N(ptwalk_ff_req_queue_FULL_N),
							      .EMPTY_N(ptwalk_ff_req_queue_EMPTY_N));

  // submodule ptwalk_ff_response
  FIFO2 #(.width(32'd174), .guarded(1'd1)) ptwalk_ff_response(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ptwalk_ff_response_D_IN),
							      .ENQ(ptwalk_ff_response_ENQ),
							      .DEQ(ptwalk_ff_response_DEQ),
							      .CLR(ptwalk_ff_response_CLR),
							      .D_OUT(ptwalk_ff_response_D_OUT),
							      .FULL_N(ptwalk_ff_response_FULL_N),
							      .EMPTY_N(ptwalk_ff_response_EMPTY_N));

  // submodule riscv
  mkriscv #(.hartid(hartid)) riscv(.resetpc(resetpc),
				   .CLK(CLK),
				   .RST_N(RST_N),
				   .interrupts_ma_clint_msip_intrpt(riscv_interrupts_ma_clint_msip_intrpt),
				   .interrupts_ma_clint_mtime_mtime(riscv_interrupts_ma_clint_mtime_mtime),
				   .interrupts_ma_clint_mtip_intrpt(riscv_interrupts_ma_clint_mtip_intrpt),
				   .interrupts_ma_plic_meip_intrpt(riscv_interrupts_ma_plic_meip_intrpt),
				   .interrupts_ma_plic_seip_intrpt(riscv_interrupts_ma_plic_seip_intrpt),
				   .ma_debug_interrupt__int(riscv_ma_debug_interrupt__int),
				   .ma_debugger_available_avail(riscv_ma_debugger_available_avail),
				   .perfmonitors_ma_dcache_counters_i(riscv_perfmonitors_ma_dcache_counters_i),
				   .perfmonitors_ma_dtlb_counters_i(riscv_perfmonitors_ma_dtlb_counters_i),
				   .perfmonitors_ma_icache_counters_i(riscv_perfmonitors_ma_icache_counters_i),
				   .perfmonitors_ma_itlb_counters_i(riscv_perfmonitors_ma_itlb_counters_i),
				   .s1_icache_inst_response_put(riscv_s1_icache_inst_response_put),
				   .s3_cache_ma_cache_is_available_avail(riscv_s3_cache_ma_cache_is_available_avail),
				   .s4_cache_memory_response_put(riscv_s4_cache_memory_response_put),
				   .s5_cache_ma_io_response_r(riscv_s5_cache_ma_io_response_r),
				   .EN_s0_icache_to_icache_get(riscv_EN_s0_icache_to_icache_get),
				   .EN_s1_icache_inst_response_put(riscv_EN_s1_icache_inst_response_put),
				   .EN_s3_cache_mv_memory_request_get(riscv_EN_s3_cache_mv_memory_request_get),
				   .EN_s4_cache_memory_response_put(riscv_EN_s4_cache_memory_response_put),
				   .EN_interrupts_ma_clint_msip(riscv_EN_interrupts_ma_clint_msip),
				   .EN_interrupts_ma_clint_mtip(riscv_EN_interrupts_ma_clint_mtip),
				   .EN_interrupts_ma_clint_mtime(riscv_EN_interrupts_ma_clint_mtime),
				   .EN_interrupts_ma_plic_meip(riscv_EN_interrupts_ma_plic_meip),
				   .EN_interrupts_ma_plic_seip(riscv_EN_interrupts_ma_plic_seip),
				   .EN_s5_cache_ma_io_response(riscv_EN_s5_cache_ma_io_response),
				   .EN_perfmonitors_ma_icache_counters(riscv_EN_perfmonitors_ma_icache_counters),
				   .EN_perfmonitors_ma_dcache_counters(riscv_EN_perfmonitors_ma_dcache_counters),
				   .EN_perfmonitors_ma_dtlb_counters(riscv_EN_perfmonitors_ma_dtlb_counters),
				   .EN_perfmonitors_ma_itlb_counters(riscv_EN_perfmonitors_ma_itlb_counters),
				   .EN_ma_debug_interrupt(riscv_EN_ma_debug_interrupt),
				   .s0_icache_to_icache_get(riscv_s0_icache_to_icache_get),
				   .RDY_s0_icache_to_icache_get(riscv_RDY_s0_icache_to_icache_get),
				   .RDY_s1_icache_inst_response_put(riscv_RDY_s1_icache_inst_response_put),
				   .s3_cache_mv_memory_request_get(riscv_s3_cache_mv_memory_request_get),
				   .RDY_s3_cache_mv_memory_request_get(riscv_RDY_s3_cache_mv_memory_request_get),
				   .RDY_s4_cache_memory_response_put(riscv_RDY_s4_cache_memory_response_put),
				   .RDY_interrupts_ma_clint_msip(),
				   .RDY_interrupts_ma_clint_mtip(),
				   .RDY_interrupts_ma_clint_mtime(),
				   .RDY_interrupts_ma_plic_meip(),
				   .RDY_interrupts_ma_plic_seip(),
				   .s5_cache_mv_initiate_store_fst(riscv_s5_cache_mv_initiate_store_fst),
				   .RDY_s5_cache_mv_initiate_store_fst(riscv_RDY_s5_cache_mv_initiate_store_fst),
				   .s5_cache_mv_initiate_store_snd(riscv_s5_cache_mv_initiate_store_snd),
				   .RDY_s5_cache_mv_initiate_store_snd(riscv_RDY_s5_cache_mv_initiate_store_snd),
				   .s5_cache_mv_initiate_ioop(riscv_s5_cache_mv_initiate_ioop),
				   .RDY_s5_cache_mv_initiate_ioop(riscv_RDY_s5_cache_mv_initiate_ioop),
				   .RDY_s5_cache_ma_io_response(),
				   .csrs_mv_csr_mstatus(riscv_csrs_mv_csr_mstatus),
				   .RDY_csrs_mv_csr_mstatus(),
				   .csrs_mv_cacheenable(riscv_csrs_mv_cacheenable),
				   .RDY_csrs_mv_cacheenable(),
				   .csrs_mv_curr_priv(riscv_csrs_mv_curr_priv),
				   .RDY_csrs_mv_curr_priv(),
				   .csrs_mv_csr_satp(riscv_csrs_mv_csr_satp),
				   .RDY_csrs_mv_csr_satp(),
				   .csrs_mv_pmp_cfg(riscv_csrs_mv_pmp_cfg),
				   .RDY_csrs_mv_pmp_cfg(),
				   .csrs_mv_pmp_addr(riscv_csrs_mv_pmp_addr),
				   .RDY_csrs_mv_pmp_addr(),
				   .pipe_status_mv_pipe_isbs_empty(),
				   .RDY_pipe_status_mv_pipe_isbs_empty(),
				   .pipe_status_mv_wfi_detected(),
				   .RDY_pipe_status_mv_wfi_detected(),
				   .RDY_perfmonitors_ma_icache_counters(),
				   .RDY_perfmonitors_ma_dcache_counters(),
				   .RDY_perfmonitors_ma_dtlb_counters(),
				   .RDY_perfmonitors_ma_itlb_counters(),
				   .RDY_ma_debug_interrupt(),
				   .mv_core_is_reset(riscv_mv_core_is_reset),
				   .RDY_mv_core_is_reset(),
				   .mv_core_debugenable(riscv_mv_core_debugenable),
				   .RDY_mv_core_debugenable(),
				   .mv_stop_timer(riscv_mv_stop_timer),
				   .RDY_mv_stop_timer(),
				   .mv_stop_count(riscv_mv_stop_count),
				   .RDY_mv_stop_count(),
				   .commitlog(riscv_commitlog),
				   .RDY_commitlog(),
				   .sbread_mv_csr_misa(riscv_sbread_mv_csr_misa),
				   .RDY_sbread_mv_csr_misa(),
				   .sbread_mv_csr_mvendorid(riscv_sbread_mv_csr_mvendorid),
				   .RDY_sbread_mv_csr_mvendorid(),
				   .sbread_mv_csr_stvec(riscv_sbread_mv_csr_stvec),
				   .RDY_sbread_mv_csr_stvec(),
				   .sbread_mv_csr_mtvec(riscv_sbread_mv_csr_mtvec),
				   .RDY_sbread_mv_csr_mtvec(),
				   .sbread_mv_csr_mstatus(riscv_sbread_mv_csr_mstatus),
				   .RDY_sbread_mv_csr_mstatus(),
				   .sbread_mv_csr_marchid(riscv_sbread_mv_csr_marchid),
				   .RDY_sbread_mv_csr_marchid(),
				   .sbread_mv_csr_mimpid(riscv_sbread_mv_csr_mimpid),
				   .RDY_sbread_mv_csr_mimpid(),
				   .sbread_mv_csr_mhartid(riscv_sbread_mv_csr_mhartid),
				   .RDY_sbread_mv_csr_mhartid(),
				   .sbread_mv_csr_mip(riscv_sbread_mv_csr_mip),
				   .RDY_sbread_mv_csr_mip(),
				   .sbread_mv_csr_sip(riscv_sbread_mv_csr_sip),
				   .RDY_sbread_mv_csr_sip(),
				   .sbread_mv_csr_mie(riscv_sbread_mv_csr_mie),
				   .RDY_sbread_mv_csr_mie(),
				   .sbread_mv_csr_sie(riscv_sbread_mv_csr_sie),
				   .RDY_sbread_mv_csr_sie(),
				   .sbread_mv_csr_mscratch(riscv_sbread_mv_csr_mscratch),
				   .RDY_sbread_mv_csr_mscratch(),
				   .sbread_mv_csr_sscratch(riscv_sbread_mv_csr_sscratch),
				   .RDY_sbread_mv_csr_sscratch(),
				   .sbread_mv_csr_sepc(riscv_sbread_mv_csr_sepc),
				   .RDY_sbread_mv_csr_sepc(),
				   .sbread_mv_csr_stval(riscv_sbread_mv_csr_stval),
				   .RDY_sbread_mv_csr_stval(),
				   .sbread_mv_csr_scause(riscv_sbread_mv_csr_scause),
				   .RDY_sbread_mv_csr_scause(),
				   .sbread_mv_csr_mepc(riscv_sbread_mv_csr_mepc),
				   .RDY_sbread_mv_csr_mepc(),
				   .sbread_mv_csr_mtval(riscv_sbread_mv_csr_mtval),
				   .RDY_sbread_mv_csr_mtval(),
				   .sbread_mv_csr_mcause(riscv_sbread_mv_csr_mcause),
				   .RDY_sbread_mv_csr_mcause(),
				   .sbread_mv_csr_mcycle(riscv_sbread_mv_csr_mcycle),
				   .RDY_sbread_mv_csr_mcycle(),
				   .sbread_mv_csr_minstret(riscv_sbread_mv_csr_minstret),
				   .RDY_sbread_mv_csr_minstret(),
				   .sbread_mv_csr_fcsr(riscv_sbread_mv_csr_fcsr),
				   .RDY_sbread_mv_csr_fcsr(),
				   .sbread_mv_csr_time(riscv_sbread_mv_csr_time),
				   .RDY_sbread_mv_csr_time(),
				   .sbread_mv_csr_mideleg(riscv_sbread_mv_csr_mideleg),
				   .RDY_sbread_mv_csr_mideleg(),
				   .sbread_mv_csr_medeleg(riscv_sbread_mv_csr_medeleg),
				   .RDY_sbread_mv_csr_medeleg(),
				   .sbread_mv_csr_pmpcfg0(riscv_sbread_mv_csr_pmpcfg0),
				   .RDY_sbread_mv_csr_pmpcfg0(),
				   .sbread_mv_csr_pmpaddr0(riscv_sbread_mv_csr_pmpaddr0),
				   .RDY_sbread_mv_csr_pmpaddr0(),
				   .sbread_mv_csr_pmpaddr1(riscv_sbread_mv_csr_pmpaddr1),
				   .RDY_sbread_mv_csr_pmpaddr1(),
				   .sbread_mv_csr_pmpaddr2(riscv_sbread_mv_csr_pmpaddr2),
				   .RDY_sbread_mv_csr_pmpaddr2(),
				   .sbread_mv_csr_pmpaddr3(riscv_sbread_mv_csr_pmpaddr3),
				   .RDY_sbread_mv_csr_pmpaddr3(),
				   .sbread_mv_csr_mcounteren(riscv_sbread_mv_csr_mcounteren),
				   .RDY_sbread_mv_csr_mcounteren(),
				   .sbread_mv_csr_scounteren(riscv_sbread_mv_csr_scounteren),
				   .RDY_sbread_mv_csr_scounteren(),
				   .sbread_mv_csr_menvcfg(riscv_sbread_mv_csr_menvcfg),
				   .RDY_sbread_mv_csr_menvcfg(),
				   .sbread_mv_csr_senvcfg(riscv_sbread_mv_csr_senvcfg),
				   .RDY_sbread_mv_csr_senvcfg(),
				   .sbread_mv_csr_satp(riscv_sbread_mv_csr_satp),
				   .RDY_sbread_mv_csr_satp(),
				   .sbread_mv_csr_mcountinhibit(riscv_sbread_mv_csr_mcountinhibit),
				   .RDY_sbread_mv_csr_mcountinhibit(),
				   .sbread_mv_csr_fflags(riscv_sbread_mv_csr_fflags),
				   .RDY_sbread_mv_csr_fflags(),
				   .sbread_mv_csr_frm(riscv_sbread_mv_csr_frm),
				   .RDY_sbread_mv_csr_frm(),
				   .sbread_mv_csr_customcontrol(riscv_sbread_mv_csr_customcontrol),
				   .RDY_sbread_mv_csr_customcontrol(),
				   .sbread_mv_csr_mhpmcounter3(riscv_sbread_mv_csr_mhpmcounter3),
				   .RDY_sbread_mv_csr_mhpmcounter3(),
				   .sbread_mv_csr_mhpmcounter4(riscv_sbread_mv_csr_mhpmcounter4),
				   .RDY_sbread_mv_csr_mhpmcounter4(),
				   .sbread_mv_csr_mhpmcounter5(riscv_sbread_mv_csr_mhpmcounter5),
				   .RDY_sbread_mv_csr_mhpmcounter5(),
				   .sbread_mv_csr_mhpmcounter6(riscv_sbread_mv_csr_mhpmcounter6),
				   .RDY_sbread_mv_csr_mhpmcounter6(),
				   .sbread_mv_csr_mhpmevent3(riscv_sbread_mv_csr_mhpmevent3),
				   .RDY_sbread_mv_csr_mhpmevent3(),
				   .sbread_mv_csr_mhpmevent4(riscv_sbread_mv_csr_mhpmevent4),
				   .RDY_sbread_mv_csr_mhpmevent4(),
				   .sbread_mv_csr_mhpmevent5(riscv_sbread_mv_csr_mhpmevent5),
				   .RDY_sbread_mv_csr_mhpmevent5(),
				   .sbread_mv_csr_mhpmevent6(riscv_sbread_mv_csr_mhpmevent6),
				   .RDY_sbread_mv_csr_mhpmevent6(),
				   .sbread_mv_csr_dcsr(riscv_sbread_mv_csr_dcsr),
				   .RDY_sbread_mv_csr_dcsr(),
				   .sbread_mv_csr_dpc(riscv_sbread_mv_csr_dpc),
				   .RDY_sbread_mv_csr_dpc(),
				   .sbread_mv_csr_dscratch0(riscv_sbread_mv_csr_dscratch0),
				   .RDY_sbread_mv_csr_dscratch0(),
				   .sbread_mv_csr_dscratch1(riscv_sbread_mv_csr_dscratch1),
				   .RDY_sbread_mv_csr_dscratch1());

  // rule RL_mkConnectionVtoAf
  assign CAN_FIRE_RL_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf = 1'd1 ;

  // rule RL_rl_handle_imem_line_request
  assign CAN_FIRE_RL_rl_handle_imem_line_request =
	     imem_RDY_get_read_mem_req_get && fetch_xactor_f_rd_addr_FULL_N ;
  assign WILL_FIRE_RL_rl_handle_imem_line_request =
	     CAN_FIRE_RL_rl_handle_imem_line_request ;

  // rule RL_rl_handle_imem_line_resp
  assign CAN_FIRE_RL_rl_handle_imem_line_resp =
	     imem_RDY_put_read_mem_resp_put &&
	     fetch_xactor_f_rd_data_EMPTY_N ;
  assign WILL_FIRE_RL_rl_handle_imem_line_resp =
	     CAN_FIRE_RL_rl_handle_imem_line_resp ;

  // rule RL_rl_imem_enable
  assign CAN_FIRE_RL_rl_imem_enable = 1'd1 ;
  assign WILL_FIRE_RL_rl_imem_enable = 1'd1 ;

  // rule RL_rl_initiate_io
  assign CAN_FIRE_RL_rl_initiate_io =
	     dmem_RDY_send_mem_io_req_get && memory_xactor_f_wr_addr_FULL_N &&
	     memory_xactor_f_wr_data_FULL_N &&
	     memory_xactor_f_rd_addr_FULL_N &&
	     rg_burst_count == 8'd0 ;
  assign WILL_FIRE_RL_rl_initiate_io = CAN_FIRE_RL_rl_initiate_io ;

  // rule RL_rl_handle_io_read_response
  assign CAN_FIRE_RL_rl_handle_io_read_response =
	     dmem_RDY_receive_mem_io_resp_put &&
	     memory_xactor_f_rd_data_EMPTY_N &&
	     memory_xactor_f_rd_data_D_OUT[3:0] == 4'd1 ;
  assign WILL_FIRE_RL_rl_handle_io_read_response =
	     CAN_FIRE_RL_rl_handle_io_read_response ;

  // rule RL_rl_handle_io_write_resp
  assign CAN_FIRE_RL_rl_handle_io_write_resp =
	     dmem_RDY_receive_mem_io_resp_put &&
	     memory_xactor_f_wr_resp_EMPTY_N &&
	     memory_xactor_f_wr_resp_D_OUT[3:0] == 4'd1 ;
  assign WILL_FIRE_RL_rl_handle_io_write_resp =
	     CAN_FIRE_RL_rl_handle_io_write_resp ;

  // rule __me_check_13
  assign CAN_FIRE___me_check_13 = 1'b1 ;
  assign WILL_FIRE___me_check_13 = 1'b1 ;

  // rule RL_rl_map_dmem_enable
  assign CAN_FIRE_RL_rl_map_dmem_enable = 1'd1 ;
  assign WILL_FIRE_RL_rl_map_dmem_enable = 1'd1 ;

  // rule RL_mkConnectionVtoAf_3
  assign CAN_FIRE_RL_mkConnectionVtoAf_3 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_3 = 1'd1 ;

  // rule RL_rl_handle_dmem_line_read_request
  assign CAN_FIRE_RL_rl_handle_dmem_line_read_request =
	     dmem_RDY_send_mem_rd_req_get && memory_xactor_f_rd_addr_FULL_N &&
	     !rg_read_line_req[52] ;
  assign WILL_FIRE_RL_rl_handle_dmem_line_read_request =
	     CAN_FIRE_RL_rl_handle_dmem_line_read_request &&
	     !WILL_FIRE_RL_rl_initiate_io ;

  // rule RL_rl_handle_delayed_read
  assign CAN_FIRE_RL_rl_handle_delayed_read =
	     memory_xactor_f_rd_addr_FULL_N && rg_read_line_req[52] &&
	     !wr_write_req[32] ;
  assign WILL_FIRE_RL_rl_handle_delayed_read =
	     CAN_FIRE_RL_rl_handle_delayed_read &&
	     !WILL_FIRE_RL_rl_initiate_io ;

  // rule RL_rl_handle_dmem_line_resp
  assign CAN_FIRE_RL_rl_handle_dmem_line_resp =
	     dmem_RDY_receive_mem_rd_resp_put &&
	     memory_xactor_f_rd_data_EMPTY_N &&
	     memory_xactor_f_rd_data_D_OUT[3:0] == 4'd0 ;
  assign WILL_FIRE_RL_rl_handle_dmem_line_resp =
	     CAN_FIRE_RL_rl_handle_dmem_line_resp ;

  // rule RL_rl_handle_dmem_write_request
  assign CAN_FIRE_RL_rl_handle_dmem_write_request =
	     dmem_RDY_send_mem_wr_req && memory_xactor_f_wr_addr_FULL_N &&
	     memory_xactor_f_wr_data_FULL_N &&
	     rg_burst_count == 8'd0 ;
  assign WILL_FIRE_RL_rl_handle_dmem_write_request =
	     CAN_FIRE_RL_rl_handle_dmem_write_request &&
	     !WILL_FIRE_RL_rl_initiate_io ;

  // rule RL_rl_dmem_burst_write_data
  assign CAN_FIRE_RL_rl_dmem_burst_write_data =
	     dmem_RDY_send_mem_wr_req && memory_xactor_f_wr_data_FULL_N &&
	     dmem_RDY_deq_mem_wr_req &&
	     rg_burst_count != 8'd0 ;
  assign WILL_FIRE_RL_rl_dmem_burst_write_data =
	     CAN_FIRE_RL_rl_dmem_burst_write_data ;

  // rule RL_handle_dmem_line_write_resp
  assign CAN_FIRE_RL_handle_dmem_line_write_resp =
	     dmem_RDY_receive_mem_wr_resp_put &&
	     memory_xactor_f_wr_resp_EMPTY_N &&
	     memory_xactor_f_wr_resp_D_OUT[3:0] == 4'd0 ;
  assign WILL_FIRE_RL_handle_dmem_line_write_resp =
	     CAN_FIRE_RL_handle_dmem_line_write_resp ;

  // rule RL_mkConnectionVtoAf_4
  assign CAN_FIRE_RL_mkConnectionVtoAf_4 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_4 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_5
  assign CAN_FIRE_RL_mkConnectionVtoAf_5 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_5 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_6
  assign CAN_FIRE_RL_mkConnectionVtoAf_6 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_6 = 1'd1 ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     riscv_RDY_s0_icache_to_icache_get && imem_RDY_put_core_req_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     riscv_RDY_s1_icache_inst_response_put &&
	     imem_RDY_get_core_resp_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_mkConnectionVtoAf_7
  assign CAN_FIRE_RL_mkConnectionVtoAf_7 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_7 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_8
  assign CAN_FIRE_RL_mkConnectionVtoAf_8 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_8 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_9
  assign CAN_FIRE_RL_mkConnectionVtoAf_9 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_9 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_10
  assign CAN_FIRE_RL_mkConnectionVtoAf_10 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_10 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_11
  assign CAN_FIRE_RL_mkConnectionVtoAf_11 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_11 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_1
  assign CAN_FIRE_RL_mkConnectionVtoAf_1 =
	     riscv_RDY_s5_cache_mv_initiate_store_fst &&
	     riscv_RDY_s5_cache_mv_initiate_store_snd ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_1 = CAN_FIRE_RL_mkConnectionVtoAf_1 ;

  // rule RL_rl_ptwalk_resp_to_itlb
  assign CAN_FIRE_RL_rl_ptwalk_resp_to_itlb =
	     imem_RDY_put_response_frm_ptw_put &&
	     ptwalk_ff_response_EMPTY_N &&
	     rg_ptw_state == 2'd1 ;
  assign WILL_FIRE_RL_rl_ptwalk_resp_to_itlb =
	     CAN_FIRE_RL_rl_ptwalk_resp_to_itlb ;

  // rule RL_rl_itlb_req_to_ptwalk
  assign CAN_FIRE_RL_rl_itlb_req_to_ptwalk =
	     imem_RDY_get_request_to_ptw_get && ptwalk_ff_req_queue_FULL_N &&
	     rg_ptw_state == 2'd0 ;
  assign WILL_FIRE_RL_rl_itlb_req_to_ptwalk =
	     CAN_FIRE_RL_rl_itlb_req_to_ptwalk &&
	     !WILL_FIRE_RL_rl_dtlb_req_to_ptwalk ;

  // rule RL_rl_dtlb_req_to_ptwalk
  assign CAN_FIRE_RL_rl_dtlb_req_to_ptwalk =
	     dmem_RDY_get_req_to_ptw_get && ptwalk_ff_req_queue_FULL_N &&
	     rg_ptw_state == 2'd0 ;
  assign WILL_FIRE_RL_rl_dtlb_req_to_ptwalk =
	     CAN_FIRE_RL_rl_dtlb_req_to_ptwalk ;

  // rule RL_rl_ptwalk_resp_to_dtlb
  assign CAN_FIRE_RL_rl_ptwalk_resp_to_dtlb =
	     dmem_RDY_put_resp_from_ptw_put && ptwalk_ff_response_EMPTY_N &&
	     rg_ptw_state == 2'd2 ;
  assign WILL_FIRE_RL_rl_ptwalk_resp_to_dtlb =
	     CAN_FIRE_RL_rl_ptwalk_resp_to_dtlb ;

  // rule RL_mkConnectionVtoAf_12
  assign CAN_FIRE_RL_mkConnectionVtoAf_12 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_12 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_14
  assign CAN_FIRE_RL_mkConnectionVtoAf_14 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_14 = 1'd1 ;

  // rule RL_ptwalk_resend_core_req_to_cache
  assign CAN_FIRE_RL_ptwalk_resend_core_req_to_cache =
	     ptwalk_ff_memory_req_FULL_N && ptwalk_ff_hold_req_EMPTY_N &&
	     ptwalk_ff_req_queue_EMPTY_N &&
	     ptwalk_rg_state == 2'd0 ;
  assign WILL_FIRE_RL_ptwalk_resend_core_req_to_cache =
	     CAN_FIRE_RL_ptwalk_resend_core_req_to_cache ;

  // rule RL_ptwalk_generate_pte
  assign CAN_FIRE_RL_ptwalk_generate_pte =
	     ptwalk_ff_memory_req_FULL_N && ptwalk_ff_req_queue_EMPTY_N &&
	     ptwalk_rg_state == 2'd2 ;
  assign WILL_FIRE_RL_ptwalk_generate_pte = CAN_FIRE_RL_ptwalk_generate_pte ;

  // rule RL_ptwalk_check_pte
  assign CAN_FIRE_RL_ptwalk_check_pte =
	     ptwalk_ff_memory_response_EMPTY_N &&
	     ptwalk_ff_req_queue_EMPTY_N &&
	     ptwalk_ff_response_FULL_N &&
	     ptwalk_ff_memory_req_FULL_N &&
	     ptwalk_rg_state == 2'd1 ;
  assign WILL_FIRE_RL_ptwalk_check_pte = CAN_FIRE_RL_ptwalk_check_pte ;

  // rule RL_ptwalk_deq_holding_fifo
  assign CAN_FIRE_RL_ptwalk_deq_holding_fifo =
	     ptwalk_ff_hold_req_EMPTY_N && ptwalk_wr_deq_holding_ff_whas ;
  assign WILL_FIRE_RL_ptwalk_deq_holding_fifo =
	     CAN_FIRE_RL_ptwalk_deq_holding_fifo ;

  // rule RL_core_req_mkConnectionGetPut
  assign CAN_FIRE_RL_core_req_mkConnectionGetPut =
	     riscv_RDY_s3_cache_mv_memory_request_get &&
	     dmem_RDY_receive_core_req_put ;
  assign WILL_FIRE_RL_core_req_mkConnectionGetPut =
	     CAN_FIRE_RL_core_req_mkConnectionGetPut ;

  // rule RL_ptwalk_req_mkConnectionGetPut
  assign CAN_FIRE_RL_ptwalk_req_mkConnectionGetPut =
	     dmem_RDY_receive_core_req_put && ptwalk_ff_memory_req_EMPTY_N ;
  assign WILL_FIRE_RL_ptwalk_req_mkConnectionGetPut =
	     CAN_FIRE_RL_ptwalk_req_mkConnectionGetPut &&
	     !WILL_FIRE_RL_core_req_mkConnectionGetPut ;

  // rule RL_mkConnectionVtoAf_2
  assign CAN_FIRE_RL_mkConnectionVtoAf_2 =
	     riscv_RDY_s5_cache_mv_initiate_ioop && dmem_RDY_ma_commit_io ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_2 = CAN_FIRE_RL_mkConnectionVtoAf_2 ;

  // rule RL_mkConnectionGetPut_2
  assign CAN_FIRE_RL_mkConnectionGetPut_2 =
	     dmem_RDY_get_ptw_resp_get && ptwalk_ff_memory_response_FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // rule RL_mkConnectionGetPut_3
  assign CAN_FIRE_RL_mkConnectionGetPut_3 =
	     dmem_RDY_get_hold_req_get && ptwalk_ff_hold_req_FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_3 =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // rule RL_mkConnectionVtoAf_13
  assign CAN_FIRE_RL_mkConnectionVtoAf_13 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_13 = 1'd1 ;

  // rule RL_core_resp_mkConnectionGetPut
  assign CAN_FIRE_RL_core_resp_mkConnectionGetPut =
	     riscv_RDY_s4_cache_memory_response_put &&
	     dmem_RDY_send_core_cache_resp_get ;
  assign WILL_FIRE_RL_core_resp_mkConnectionGetPut =
	     CAN_FIRE_RL_core_resp_mkConnectionGetPut ;

  // rule RL_mkConnectionVtoAf_15
  assign CAN_FIRE_RL_mkConnectionVtoAf_15 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_15 = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_memory_xactor_f_rd_addr_enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_initiate_io && !dmem_send_mem_io_req_get[67] ;
  assign MUX_memory_xactor_f_rd_addr_enq_1__SEL_2 =
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	     (!wr_write_req[32] ||
	      !IF_wr_write_req_80_BIT_32_81_THEN_wr_write_req_ETC___d387) ;
  assign MUX_memory_xactor_f_wr_addr_enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_initiate_io && dmem_send_mem_io_req_get[67] ;
  assign MUX_ptwalk_ff_memory_req_enq_1__SEL_1 =
	     WILL_FIRE_RL_ptwalk_check_pte &&
	     NOT_ptwalk_ff_memory_response_first__8_BIT_68__ETC___d204 ;
  assign MUX_rg_ptw_state_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptwalk_resp_to_dtlb ||
	     WILL_FIRE_RL_rl_ptwalk_resp_to_itlb ;
  assign MUX_rg_read_line_req_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	     wr_write_req[32] &&
	     IF_wr_write_req_80_BIT_32_81_THEN_wr_write_req_ETC___d387 ;
  assign MUX_wr_write_req_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_dmem_burst_write_data && rg_burst_count == 8'd7 ;
  assign MUX_dmem_receive_mem_io_resp_put_1__VAL_1 =
	     { memory_xactor_f_rd_data_D_OUT[68:5],
	       memory_xactor_f_rd_data_D_OUT[70:69] != 2'd0 } ;
  assign MUX_dmem_receive_mem_io_resp_put_1__VAL_2 =
	     { 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       memory_xactor_f_wr_resp_D_OUT[5:4] != 2'd0 } ;
  assign MUX_memory_xactor_f_rd_addr_enq_1__VAL_1 =
	     { dmem_send_mem_io_req_get[99:68], x__h10757, x__h7146, 14'd1 } ;
  assign MUX_memory_xactor_f_rd_addr_enq_1__VAL_2 =
	     { dmem_send_mem_rd_req_get[42:11],
	       x__h10757,
	       dmem_send_mem_rd_req_get[2:0],
	       dmem_send_mem_rd_req_get[10:3],
	       6'd32 } ;
  assign MUX_memory_xactor_f_wr_addr_enq_1__VAL_1 =
	     { dmem_send_mem_io_req_get[99:68],
	       x__h10757,
	       8'd0,
	       x__h7146,
	       6'd1 } ;
  assign MUX_memory_xactor_f_wr_addr_enq_1__VAL_2 =
	     { dmem_send_mem_wr_req[554:523],
	       x__h10757,
	       dmem_send_mem_wr_req[10:0],
	       6'd16 } ;
  assign MUX_memory_xactor_f_wr_data_enq_1__VAL_1 =
	     { x_wdata__h7276, write_strobe__h6983, 5'd3 } ;
  assign MUX_memory_xactor_f_wr_data_enq_1__VAL_2 =
	     { dmem_send_mem_wr_req[74:11],
	       12'd4080,
	       dmem_send_mem_wr_req[10:3] == 8'd0 } ;
  assign MUX_memory_xactor_f_wr_data_enq_1__VAL_3 =
	     { x__h11161[63:0], 12'd4080, rg_burst_count == 8'd7 } ;
  assign MUX_ptwalk_ff_memory_req_enq_1__VAL_1 =
	     { ptwalk_ff_req_queue_D_OUT[67:4],
	       ptwalk_rg_hold_epoch,
	       6'd24,
	       x_writedata__h3443,
	       2'bxx /* unspecified value */ ,
	       5'bxxxxx /* unspecified value */ ,
	       3'd1 } ;
  assign MUX_ptwalk_ff_memory_req_enq_1__VAL_2 =
	     { ptwalk_ff_hold_req_D_OUT[140:77],
	       ptwalk_ff_hold_req_D_OUT[75],
	       ptwalk_ff_hold_req_D_OUT[72:70],
	       1'd0,
	       ptwalk_ff_hold_req_D_OUT[74:73],
	       ptwalk_ff_hold_req_D_OUT[69:6],
	       2'bxx /* unspecified value */ ,
	       ptwalk_ff_hold_req_D_OUT[5:1],
	       3'd0 } ;
  assign MUX_ptwalk_ff_memory_req_enq_1__VAL_3 =
	     { x_address__h2078,
	       ptwalk_rg_hold_epoch,
	       6'd24,
	       x_writedata__h2083,
	       2'bxx /* unspecified value */ ,
	       5'bxxxxx /* unspecified value */ ,
	       3'd2 } ;
  assign MUX_ptwalk_rg_state_write_1__VAL_1 =
	     (!ptwalk_ff_memory_response_D_OUT[68] ||
	      !ptwalk_ff_memory_response_D_OUT[69] &&
	      ptwalk_ff_memory_response_D_OUT[70] ||
	      ptwalk_rg_levels_0_EQ_0_3_AND_NOT_ptwalk_ff_me_ETC___d194 ||
	      ptwalk_ff_memory_response_D_OUT[67] ||
	      !ptwalk_ff_memory_response_D_OUT[69] &&
	      !ptwalk_ff_memory_response_D_OUT[71] ||
	      ptwalk_ff_req_queue_D_OUT[3:2] == 2'd3) ?
	       2'd2 :
	       2'd0 ;
  assign MUX_rg_burst_count_write_1__VAL_2 =
	     (rg_burst_count == 8'd7) ? 8'd0 : x__h11106 ;
  assign MUX_rg_read_line_req_write_1__VAL_1 =
	     { 1'd1,
	       dmem_send_mem_rd_req_get[42:11],
	       x__h10757,
	       dmem_send_mem_rd_req_get[2:0],
	       dmem_send_mem_rd_req_get[10:3],
	       6'd32 } ;
  assign MUX_rg_read_line_req_write_1__VAL_2 =
	     { 1'd0,
	       52'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_wr_write_req_write_1__VAL_1 =
	     { 1'd0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_wr_write_req_write_1__VAL_2 =
	     { 1'd1, dmem_send_mem_wr_req[554:523] } ;

  // inlined wires
  assign ptwalk_wr_deq_holding_ff_whas =
	     WILL_FIRE_RL_ptwalk_check_pte &&
	     NOT_ptwalk_ff_memory_response_first__8_BIT_68__ETC___d204 ||
	     WILL_FIRE_RL_ptwalk_resend_core_req_to_cache ;

  // register ptwalk_rg_a
  assign ptwalk_rg_a_D_IN =
	     { ptwalk_ff_memory_response_D_OUT[121:78], 12'b0 } ;
  assign ptwalk_rg_a_EN =
	     WILL_FIRE_RL_ptwalk_check_pte &&
	     ptwalk_ff_memory_response_D_OUT[68] &&
	     (ptwalk_ff_memory_response_D_OUT[69] ||
	      !ptwalk_ff_memory_response_D_OUT[70]) &&
	     (ptwalk_rg_levels != 2'd0 ||
	      ptwalk_ff_memory_response_D_OUT[69] ||
	      ptwalk_ff_memory_response_D_OUT[71]) &&
	     (!ptwalk_ff_memory_response_D_OUT[70] ||
	      NOT_ptwalk_rg_levels_0_EQ_1_4_15_OR_ptwalk_ff__ETC___d244) &&
	     !ptwalk_ff_memory_response_D_OUT[67] &&
	     !ptwalk_ff_memory_response_D_OUT[69] &&
	     !ptwalk_ff_memory_response_D_OUT[71] ;

  // register ptwalk_rg_hold_epoch
  assign ptwalk_rg_hold_epoch_D_IN = dmem_get_hold_req_get[75] ;
  assign ptwalk_rg_hold_epoch_EN = CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // register ptwalk_rg_levels
  assign ptwalk_rg_levels_D_IN =
	     (!ptwalk_ff_memory_response_D_OUT[68] ||
	      !ptwalk_ff_memory_response_D_OUT[69] &&
	      ptwalk_ff_memory_response_D_OUT[70] ||
	      ptwalk_rg_levels_0_EQ_0_3_AND_NOT_ptwalk_ff_me_ETC___d173 ||
	      ptwalk_ff_memory_response_D_OUT[67]) ?
	       max_levels__h2027 :
	       ((!ptwalk_ff_memory_response_D_OUT[69] &&
		 !ptwalk_ff_memory_response_D_OUT[71]) ?
		  x__h3328 :
		  max_levels__h2027) ;
  assign ptwalk_rg_levels_EN = CAN_FIRE_RL_ptwalk_check_pte ;

  // register ptwalk_rg_state
  always@(WILL_FIRE_RL_ptwalk_check_pte or
	  MUX_ptwalk_rg_state_write_1__VAL_1 or
	  WILL_FIRE_RL_ptwalk_generate_pte or
	  WILL_FIRE_RL_ptwalk_resend_core_req_to_cache)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ptwalk_check_pte:
	  ptwalk_rg_state_D_IN = MUX_ptwalk_rg_state_write_1__VAL_1;
      WILL_FIRE_RL_ptwalk_generate_pte: ptwalk_rg_state_D_IN = 2'd1;
      WILL_FIRE_RL_ptwalk_resend_core_req_to_cache:
	  ptwalk_rg_state_D_IN = 2'd2;
      default: ptwalk_rg_state_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign ptwalk_rg_state_EN =
	     WILL_FIRE_RL_ptwalk_check_pte ||
	     WILL_FIRE_RL_ptwalk_generate_pte ||
	     WILL_FIRE_RL_ptwalk_resend_core_req_to_cache ;

  // register rg_burst_count
  assign rg_burst_count_D_IN =
	     WILL_FIRE_RL_rl_handle_dmem_write_request ?
	       x__h11106 :
	       MUX_rg_burst_count_write_1__VAL_2 ;
  assign rg_burst_count_EN =
	     WILL_FIRE_RL_rl_handle_dmem_write_request ||
	     WILL_FIRE_RL_rl_dmem_burst_write_data ;

  // register rg_ptw_state
  always@(MUX_rg_ptw_state_write_1__SEL_1 or
	  WILL_FIRE_RL_rl_itlb_req_to_ptwalk or
	  WILL_FIRE_RL_rl_dtlb_req_to_ptwalk)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_ptw_state_write_1__SEL_1: rg_ptw_state_D_IN = 2'd0;
      WILL_FIRE_RL_rl_itlb_req_to_ptwalk: rg_ptw_state_D_IN = 2'd1;
      WILL_FIRE_RL_rl_dtlb_req_to_ptwalk: rg_ptw_state_D_IN = 2'd2;
      default: rg_ptw_state_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign rg_ptw_state_EN =
	     WILL_FIRE_RL_rl_ptwalk_resp_to_dtlb ||
	     WILL_FIRE_RL_rl_ptwalk_resp_to_itlb ||
	     WILL_FIRE_RL_rl_itlb_req_to_ptwalk ||
	     WILL_FIRE_RL_rl_dtlb_req_to_ptwalk ;

  // register rg_read_line_req
  assign rg_read_line_req_D_IN =
	     MUX_rg_read_line_req_write_1__SEL_1 ?
	       MUX_rg_read_line_req_write_1__VAL_1 :
	       MUX_rg_read_line_req_write_1__VAL_2 ;
  assign rg_read_line_req_EN =
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	     wr_write_req[32] &&
	     IF_wr_write_req_80_BIT_32_81_THEN_wr_write_req_ETC___d387 ||
	     WILL_FIRE_RL_rl_handle_delayed_read ;

  // register rg_shift_amount
  assign rg_shift_amount_D_IN = (rg_burst_count == 8'd7) ? 9'd64 : x__h11073 ;
  assign rg_shift_amount_EN = CAN_FIRE_RL_rl_dmem_burst_write_data ;

  // register wr_write_req
  assign wr_write_req_D_IN =
	     MUX_wr_write_req_write_1__SEL_1 ?
	       MUX_wr_write_req_write_1__VAL_1 :
	       MUX_wr_write_req_write_1__VAL_2 ;
  assign wr_write_req_EN =
	     WILL_FIRE_RL_rl_dmem_burst_write_data &&
	     rg_burst_count == 8'd7 ||
	     WILL_FIRE_RL_rl_handle_dmem_write_request &&
	     dmem_send_mem_wr_req[10:3] != 8'd0 ;

  // submodule dmem
  assign dmem_ma_cache_enable_c = riscv_csrs_mv_cacheenable[1] ;
  assign dmem_ma_commit_io_currepoch = riscv_s5_cache_mv_initiate_ioop ;
  assign dmem_ma_commit_store_storecommit =
	     { riscv_s5_cache_mv_initiate_store_fst,
	       riscv_s5_cache_mv_initiate_store_snd } ;
  assign dmem_ma_curr_priv_c = riscv_csrs_mv_curr_priv ;
  assign dmem_ma_mstatus_from_csr_m = riscv_csrs_mv_csr_mstatus ;
  assign dmem_ma_satp_from_csr_s = riscv_csrs_mv_csr_satp ;
  assign dmem_put_resp_from_ptw_put = ptwalk_ff_response_D_OUT ;
  assign dmem_receive_core_req_put =
	     WILL_FIRE_RL_core_req_mkConnectionGetPut ?
	       riscv_s3_cache_mv_memory_request_get :
	       ptwalk_ff_memory_req_D_OUT ;
  assign dmem_receive_mem_io_resp_put =
	     WILL_FIRE_RL_rl_handle_io_read_response ?
	       MUX_dmem_receive_mem_io_resp_put_1__VAL_1 :
	       MUX_dmem_receive_mem_io_resp_put_1__VAL_2 ;
  assign dmem_receive_mem_rd_resp_put =
	     { memory_xactor_f_rd_data_D_OUT[68:4],
	       memory_xactor_f_rd_data_D_OUT[70:69] != 2'd0 } ;
  assign dmem_receive_mem_wr_resp_put =
	     memory_xactor_f_wr_resp_D_OUT[5:4] != 2'd0 ;
  assign dmem_EN_receive_core_req_put =
	     WILL_FIRE_RL_core_req_mkConnectionGetPut ||
	     WILL_FIRE_RL_ptwalk_req_mkConnectionGetPut ;
  assign dmem_EN_send_core_cache_resp_get =
	     CAN_FIRE_RL_core_resp_mkConnectionGetPut ;
  assign dmem_EN_send_mem_io_req_get = CAN_FIRE_RL_rl_initiate_io ;
  assign dmem_EN_receive_mem_io_resp_put =
	     WILL_FIRE_RL_rl_handle_io_read_response ||
	     WILL_FIRE_RL_rl_handle_io_write_resp ;
  assign dmem_EN_ma_commit_io = CAN_FIRE_RL_mkConnectionVtoAf_2 ;
  assign dmem_EN_receive_mem_wr_resp_put =
	     CAN_FIRE_RL_handle_dmem_line_write_resp ;
  assign dmem_EN_deq_mem_wr_req = MUX_wr_write_req_write_1__SEL_1 ;
  assign dmem_EN_send_mem_rd_req_get =
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request ;
  assign dmem_EN_receive_mem_rd_resp_put =
	     CAN_FIRE_RL_rl_handle_dmem_line_resp ;
  assign dmem_EN_ma_commit_store = CAN_FIRE_RL_mkConnectionVtoAf_1 ;
  assign dmem_EN_ma_cache_enable = 1'd1 ;
  assign dmem_EN_get_ptw_resp_get = CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign dmem_EN_get_req_to_ptw_get = CAN_FIRE_RL_rl_dtlb_req_to_ptwalk ;
  assign dmem_EN_put_resp_from_ptw_put = CAN_FIRE_RL_rl_ptwalk_resp_to_dtlb ;
  assign dmem_EN_ma_satp_from_csr = 1'd1 ;
  assign dmem_EN_ma_mstatus_from_csr = 1'd1 ;
  assign dmem_EN_get_hold_req_get = CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // submodule fetch_xactor_f_rd_addr
  assign fetch_xactor_f_rd_addr_D_IN =
	     { imem_get_read_mem_req_get[43:12],
	       x__h6694,
	       imem_get_read_mem_req_get[3:1],
	       imem_get_read_mem_req_get[11:4],
	       5'd16,
	       imem_get_read_mem_req_get[0] } ;
  assign fetch_xactor_f_rd_addr_ENQ =
	     CAN_FIRE_RL_rl_handle_imem_line_request ;
  assign fetch_xactor_f_rd_addr_DEQ =
	     fetch_xactor_f_rd_addr_EMPTY_N && master_i_ARREADY ;
  assign fetch_xactor_f_rd_addr_CLR = 1'b0 ;

  // submodule fetch_xactor_f_rd_data
  assign fetch_xactor_f_rd_data_D_IN =
	     { master_i_RRESP,
	       master_i_RDATA,
	       master_i_RLAST,
	       master_i_RID } ;
  assign fetch_xactor_f_rd_data_ENQ =
	     master_i_RVALID && fetch_xactor_f_rd_data_FULL_N ;
  assign fetch_xactor_f_rd_data_DEQ = CAN_FIRE_RL_rl_handle_imem_line_resp ;
  assign fetch_xactor_f_rd_data_CLR = 1'b0 ;

  // submodule fetch_xactor_f_wr_addr
  assign fetch_xactor_f_wr_addr_D_IN = 52'h0 ;
  assign fetch_xactor_f_wr_addr_ENQ = 1'b0 ;
  assign fetch_xactor_f_wr_addr_DEQ =
	     fetch_xactor_f_wr_addr_EMPTY_N && master_i_AWREADY ;
  assign fetch_xactor_f_wr_addr_CLR = 1'b0 ;

  // submodule fetch_xactor_f_wr_data
  assign fetch_xactor_f_wr_data_D_IN = 77'h0 ;
  assign fetch_xactor_f_wr_data_ENQ = 1'b0 ;
  assign fetch_xactor_f_wr_data_DEQ =
	     fetch_xactor_f_wr_data_EMPTY_N && master_i_WREADY ;
  assign fetch_xactor_f_wr_data_CLR = 1'b0 ;

  // submodule fetch_xactor_f_wr_resp
  assign fetch_xactor_f_wr_resp_D_IN = { master_i_BRESP, master_i_BID } ;
  assign fetch_xactor_f_wr_resp_ENQ =
	     master_i_BVALID && fetch_xactor_f_wr_resp_FULL_N ;
  assign fetch_xactor_f_wr_resp_DEQ = 1'b0 ;
  assign fetch_xactor_f_wr_resp_CLR = 1'b0 ;

  // submodule imem
  assign imem_ma_cache_enable_c = riscv_csrs_mv_cacheenable[0] ;
  assign imem_ma_curr_priv_c = riscv_csrs_mv_curr_priv ;
  assign imem_ma_satp_from_csr_s = riscv_csrs_mv_csr_satp ;
  assign imem_put_core_req_put = riscv_s0_icache_to_icache_get ;
  assign imem_put_read_mem_resp_put =
	     { fetch_xactor_f_rd_data_D_OUT[68:4],
	       fetch_xactor_f_rd_data_D_OUT[70:69] != 2'd0,
	       fetch_xactor_f_rd_data_D_OUT[3:0] == 4'd1 } ;
  assign imem_put_response_frm_ptw_put = ptwalk_ff_response_D_OUT ;
  assign imem_EN_put_core_req_put = CAN_FIRE_RL_mkConnectionGetPut ;
  assign imem_EN_get_core_resp_get = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign imem_EN_ma_cache_enable = 1'd1 ;
  assign imem_EN_get_read_mem_req_get =
	     CAN_FIRE_RL_rl_handle_imem_line_request ;
  assign imem_EN_put_read_mem_resp_put =
	     CAN_FIRE_RL_rl_handle_imem_line_resp ;
  assign imem_EN_ma_curr_priv = 1'd1 ;
  assign imem_EN_get_request_to_ptw_get = WILL_FIRE_RL_rl_itlb_req_to_ptwalk ;
  assign imem_EN_put_response_frm_ptw_put =
	     CAN_FIRE_RL_rl_ptwalk_resp_to_itlb ;
  assign imem_EN_ma_satp_from_csr = 1'd1 ;

  // submodule memory_xactor_f_rd_addr
  always@(MUX_memory_xactor_f_rd_addr_enq_1__SEL_1 or
	  MUX_memory_xactor_f_rd_addr_enq_1__VAL_1 or
	  MUX_memory_xactor_f_rd_addr_enq_1__SEL_2 or
	  MUX_memory_xactor_f_rd_addr_enq_1__VAL_2 or
	  WILL_FIRE_RL_rl_handle_delayed_read or rg_read_line_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_memory_xactor_f_rd_addr_enq_1__SEL_1:
	  memory_xactor_f_rd_addr_D_IN =
	      MUX_memory_xactor_f_rd_addr_enq_1__VAL_1;
      MUX_memory_xactor_f_rd_addr_enq_1__SEL_2:
	  memory_xactor_f_rd_addr_D_IN =
	      MUX_memory_xactor_f_rd_addr_enq_1__VAL_2;
      WILL_FIRE_RL_rl_handle_delayed_read:
	  memory_xactor_f_rd_addr_D_IN = rg_read_line_req[51:0];
      default: memory_xactor_f_rd_addr_D_IN =
		   52'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign memory_xactor_f_rd_addr_ENQ =
	     WILL_FIRE_RL_rl_initiate_io && !dmem_send_mem_io_req_get[67] ||
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	     (!wr_write_req[32] ||
	      !IF_wr_write_req_80_BIT_32_81_THEN_wr_write_req_ETC___d387) ||
	     WILL_FIRE_RL_rl_handle_delayed_read ;
  assign memory_xactor_f_rd_addr_DEQ =
	     memory_xactor_f_rd_addr_EMPTY_N && master_d_ARREADY ;
  assign memory_xactor_f_rd_addr_CLR = 1'b0 ;

  // submodule memory_xactor_f_rd_data
  assign memory_xactor_f_rd_data_D_IN =
	     { master_d_RRESP,
	       master_d_RDATA,
	       master_d_RLAST,
	       master_d_RID } ;
  assign memory_xactor_f_rd_data_ENQ =
	     master_d_RVALID && memory_xactor_f_rd_data_FULL_N ;
  assign memory_xactor_f_rd_data_DEQ =
	     WILL_FIRE_RL_rl_handle_dmem_line_resp ||
	     WILL_FIRE_RL_rl_handle_io_read_response ;
  assign memory_xactor_f_rd_data_CLR = 1'b0 ;

  // submodule memory_xactor_f_wr_addr
  assign memory_xactor_f_wr_addr_D_IN =
	     MUX_memory_xactor_f_wr_addr_enq_1__SEL_1 ?
	       MUX_memory_xactor_f_wr_addr_enq_1__VAL_1 :
	       MUX_memory_xactor_f_wr_addr_enq_1__VAL_2 ;
  assign memory_xactor_f_wr_addr_ENQ =
	     WILL_FIRE_RL_rl_initiate_io && dmem_send_mem_io_req_get[67] ||
	     WILL_FIRE_RL_rl_handle_dmem_write_request ;
  assign memory_xactor_f_wr_addr_DEQ =
	     memory_xactor_f_wr_addr_EMPTY_N && master_d_AWREADY ;
  assign memory_xactor_f_wr_addr_CLR = 1'b0 ;

  // submodule memory_xactor_f_wr_data
  always@(MUX_memory_xactor_f_wr_addr_enq_1__SEL_1 or
	  MUX_memory_xactor_f_wr_data_enq_1__VAL_1 or
	  WILL_FIRE_RL_rl_handle_dmem_write_request or
	  MUX_memory_xactor_f_wr_data_enq_1__VAL_2 or
	  WILL_FIRE_RL_rl_dmem_burst_write_data or
	  MUX_memory_xactor_f_wr_data_enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_memory_xactor_f_wr_addr_enq_1__SEL_1:
	  memory_xactor_f_wr_data_D_IN =
	      MUX_memory_xactor_f_wr_data_enq_1__VAL_1;
      WILL_FIRE_RL_rl_handle_dmem_write_request:
	  memory_xactor_f_wr_data_D_IN =
	      MUX_memory_xactor_f_wr_data_enq_1__VAL_2;
      WILL_FIRE_RL_rl_dmem_burst_write_data:
	  memory_xactor_f_wr_data_D_IN =
	      MUX_memory_xactor_f_wr_data_enq_1__VAL_3;
      default: memory_xactor_f_wr_data_D_IN =
		   77'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign memory_xactor_f_wr_data_ENQ =
	     WILL_FIRE_RL_rl_initiate_io && dmem_send_mem_io_req_get[67] ||
	     WILL_FIRE_RL_rl_handle_dmem_write_request ||
	     WILL_FIRE_RL_rl_dmem_burst_write_data ;
  assign memory_xactor_f_wr_data_DEQ =
	     memory_xactor_f_wr_data_EMPTY_N && master_d_WREADY ;
  assign memory_xactor_f_wr_data_CLR = 1'b0 ;

  // submodule memory_xactor_f_wr_resp
  assign memory_xactor_f_wr_resp_D_IN = { master_d_BRESP, master_d_BID } ;
  assign memory_xactor_f_wr_resp_ENQ =
	     master_d_BVALID && memory_xactor_f_wr_resp_FULL_N ;
  assign memory_xactor_f_wr_resp_DEQ =
	     WILL_FIRE_RL_handle_dmem_line_write_resp ||
	     WILL_FIRE_RL_rl_handle_io_write_resp ;
  assign memory_xactor_f_wr_resp_CLR = 1'b0 ;

  // submodule ptwalk_ff_hold_req
  assign ptwalk_ff_hold_req_D_IN = dmem_get_hold_req_get ;
  assign ptwalk_ff_hold_req_ENQ = CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign ptwalk_ff_hold_req_DEQ = CAN_FIRE_RL_ptwalk_deq_holding_fifo ;
  assign ptwalk_ff_hold_req_CLR = 1'b0 ;

  // submodule ptwalk_ff_memory_req
  always@(MUX_ptwalk_ff_memory_req_enq_1__SEL_1 or
	  MUX_ptwalk_ff_memory_req_enq_1__VAL_1 or
	  WILL_FIRE_RL_ptwalk_resend_core_req_to_cache or
	  MUX_ptwalk_ff_memory_req_enq_1__VAL_2 or
	  WILL_FIRE_RL_ptwalk_generate_pte or
	  MUX_ptwalk_ff_memory_req_enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ptwalk_ff_memory_req_enq_1__SEL_1:
	  ptwalk_ff_memory_req_D_IN = MUX_ptwalk_ff_memory_req_enq_1__VAL_1;
      WILL_FIRE_RL_ptwalk_resend_core_req_to_cache:
	  ptwalk_ff_memory_req_D_IN = MUX_ptwalk_ff_memory_req_enq_1__VAL_2;
      WILL_FIRE_RL_ptwalk_generate_pte:
	  ptwalk_ff_memory_req_D_IN = MUX_ptwalk_ff_memory_req_enq_1__VAL_3;
      default: ptwalk_ff_memory_req_D_IN =
		   145'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign ptwalk_ff_memory_req_ENQ =
	     WILL_FIRE_RL_ptwalk_check_pte &&
	     NOT_ptwalk_ff_memory_response_first__8_BIT_68__ETC___d204 ||
	     WILL_FIRE_RL_ptwalk_resend_core_req_to_cache ||
	     WILL_FIRE_RL_ptwalk_generate_pte ;
  assign ptwalk_ff_memory_req_DEQ =
	     WILL_FIRE_RL_ptwalk_req_mkConnectionGetPut ;
  assign ptwalk_ff_memory_req_CLR = 1'b0 ;

  // submodule ptwalk_ff_memory_response
  assign ptwalk_ff_memory_response_D_IN = dmem_get_ptw_resp_get ;
  assign ptwalk_ff_memory_response_ENQ = CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign ptwalk_ff_memory_response_DEQ = CAN_FIRE_RL_ptwalk_check_pte ;
  assign ptwalk_ff_memory_response_CLR = 1'b0 ;

  // submodule ptwalk_ff_req_queue
  assign ptwalk_ff_req_queue_D_IN =
	     WILL_FIRE_RL_rl_itlb_req_to_ptwalk ?
	       imem_get_request_to_ptw_get :
	       dmem_get_req_to_ptw_get ;
  assign ptwalk_ff_req_queue_ENQ =
	     WILL_FIRE_RL_rl_itlb_req_to_ptwalk ||
	     WILL_FIRE_RL_rl_dtlb_req_to_ptwalk ;
  assign ptwalk_ff_req_queue_DEQ =
	     _dand1ptwalk_ff_req_queue_EN_deq ||
	     WILL_FIRE_RL_ptwalk_resend_core_req_to_cache ;
  assign ptwalk_ff_req_queue_CLR = 1'b0 ;

  // submodule ptwalk_ff_response
  assign ptwalk_ff_response_D_IN =
	     { ptwalk_ff_memory_response_D_OUT[121:68],
	       54'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       56'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       ptwalk_rg_levels,
	       IF_NOT_ptwalk_ff_memory_response_first__8_BIT__ETC___d183 } ;
  assign ptwalk_ff_response_ENQ =
	     WILL_FIRE_RL_ptwalk_check_pte &&
	     (NOT_ptwalk_ff_memory_response_first__8_BIT_68__ETC___d131 ||
	      ptwalk_ff_memory_response_D_OUT[69] ||
	      ptwalk_ff_memory_response_D_OUT[71]) ;
  assign ptwalk_ff_response_DEQ = MUX_rg_ptw_state_write_1__SEL_1 ;
  assign ptwalk_ff_response_CLR = 1'b0 ;

  // submodule riscv
  assign riscv_interrupts_ma_clint_msip_intrpt = sb_clint_msip_put ;
  assign riscv_interrupts_ma_clint_mtime_mtime = sb_clint_mtime_put ;
  assign riscv_interrupts_ma_clint_mtip_intrpt = sb_clint_mtip_put ;
  assign riscv_interrupts_ma_plic_meip_intrpt = sb_plic_meip_ex_i ;
  assign riscv_interrupts_ma_plic_seip_intrpt = sb_plic_seip_ex_i ;
  assign riscv_ma_debug_interrupt__int = ma_debug_interrupt__int ;
  assign riscv_ma_debugger_available_avail = ma_debugger_available_avail ;
  assign riscv_perfmonitors_ma_dcache_counters_i =
	     dmem_mv_dcache_perf_counters ;
  assign riscv_perfmonitors_ma_dtlb_counters_i = dmem_mv_dtlb_perf_counters ;
  assign riscv_perfmonitors_ma_icache_counters_i =
	     imem_mv_icache_perf_counters ;
  assign riscv_perfmonitors_ma_itlb_counters_i = imem_mv_itlb_perf_counters ;
  assign riscv_s1_icache_inst_response_put = imem_get_core_resp_get ;
  assign riscv_s3_cache_ma_cache_is_available_avail = dmem_mv_dmem_available ;
  assign riscv_s4_cache_memory_response_put = dmem_send_core_cache_resp_get ;
  assign riscv_s5_cache_ma_io_response_r = dmem_send_core_io_resp ;
  assign riscv_EN_s0_icache_to_icache_get = CAN_FIRE_RL_mkConnectionGetPut ;
  assign riscv_EN_s1_icache_inst_response_put =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign riscv_EN_s3_cache_mv_memory_request_get =
	     CAN_FIRE_RL_core_req_mkConnectionGetPut ;
  assign riscv_EN_s4_cache_memory_response_put =
	     CAN_FIRE_RL_core_resp_mkConnectionGetPut ;
  assign riscv_EN_interrupts_ma_clint_msip = EN_sb_clint_msip_put ;
  assign riscv_EN_interrupts_ma_clint_mtip = EN_sb_clint_mtip_put ;
  assign riscv_EN_interrupts_ma_clint_mtime = EN_sb_clint_mtime_put ;
  assign riscv_EN_interrupts_ma_plic_meip = EN_sb_plic_meip ;
  assign riscv_EN_interrupts_ma_plic_seip = EN_sb_plic_seip ;
  assign riscv_EN_s5_cache_ma_io_response = 1'd1 ;
  assign riscv_EN_perfmonitors_ma_icache_counters = 1'd1 ;
  assign riscv_EN_perfmonitors_ma_dcache_counters = 1'd1 ;
  assign riscv_EN_perfmonitors_ma_dtlb_counters = 1'd1 ;
  assign riscv_EN_perfmonitors_ma_itlb_counters = 1'd1 ;
  assign riscv_EN_ma_debug_interrupt = EN_ma_debug_interrupt ;

  // remaining internal signals
  assign IF_IF_ptwalk_wr_mstatus_whas__7_THEN_ptwalk_wr_ETC___d123 =
	     priv__h2675 == 2'd1 && ptwalk_ff_memory_response_D_OUT[72] &&
	     !riscv_csrs_mv_csr_mstatus[18] ||
	     ptwalk_ff_req_queue_D_OUT[3:2] == 2'd0 ||
	     ptwalk_ff_req_queue_D_OUT[3:2] == 2'd3 ||
	     !ptwalk_ff_memory_response_D_OUT[74] ||
	     !ptwalk_ff_memory_response_D_OUT[75] &&
	     (ptwalk_ff_req_queue_D_OUT[3:2] == 2'd2 ||
	      ptwalk_ff_req_queue_D_OUT[3:2] == 2'd1) ;
  assign IF_IF_ptwalk_wr_mstatus_whas__7_THEN_ptwalk_wr_ETC___d189 =
	     priv__h2675 == 2'd1 && ptwalk_ff_memory_response_D_OUT[72] &&
	     !riscv_csrs_mv_csr_mstatus[18] ||
	     ptwalk_ff_req_queue_D_OUT[3:2] == 2'd0 &&
	     !ptwalk_ff_memory_response_D_OUT[69] &&
	     (!ptwalk_ff_memory_response_D_OUT[71] ||
	      !riscv_csrs_mv_csr_mstatus[19]) ||
	     !ptwalk_ff_memory_response_D_OUT[74] ||
	     !ptwalk_ff_memory_response_D_OUT[75] &&
	     (ptwalk_ff_req_queue_D_OUT[3:2] == 2'd2 ||
	      ptwalk_ff_req_queue_D_OUT[3:2] == 2'd1) ;
  assign IF_NOT_ptwalk_ff_memory_response_first__8_BIT__ETC___d180 =
	     (!ptwalk_ff_memory_response_D_OUT[68] ||
	      !ptwalk_ff_memory_response_D_OUT[69] &&
	      ptwalk_ff_memory_response_D_OUT[70] ||
	      ptwalk_rg_levels_0_EQ_0_3_AND_NOT_ptwalk_ff_me_ETC___d173) ?
	       cause___1__h3473 :
	       7'd0 ;
  assign IF_NOT_ptwalk_ff_memory_response_first__8_BIT__ETC___d183 =
	     (!ptwalk_ff_memory_response_D_OUT[68] ||
	      !ptwalk_ff_memory_response_D_OUT[69] &&
	      ptwalk_ff_memory_response_D_OUT[70] ||
	      ptwalk_rg_levels_0_EQ_0_3_AND_NOT_ptwalk_ff_me_ETC___d173 ||
	      ptwalk_ff_memory_response_D_OUT[67]) ?
	       { 1'd1, _theResult_____1__h3277 } :
	       8'd0 ;
  assign IF_wr_write_req_80_BIT_32_81_THEN_wr_write_req_ETC___d387 =
	     wr_write_req_BITS_31_TO_0__q2[31:16] ==
	     dmem_send_mem_rd_req_get[42:27] ;
  assign NOT_ptwalk_ff_memory_response_first__8_BIT_68__ETC___d131 =
	     !ptwalk_ff_memory_response_D_OUT[68] ||
	     ptwalk_ff_memory_response_D_OUT[70] ||
	     ptwalk_rg_levels == 2'd0 ||
	     ptwalk_ff_memory_response_D_OUT[70] &&
	     (ptwalk_rg_levels == 2'd1 &&
	      ptwalk_ff_memory_response_D_OUT[86:78] != 9'd0 ||
	      ptwalk_rg_levels == 2'd2 &&
	      ptwalk_ff_memory_response_D_OUT[95:78] != 18'd0 ||
	      ptwalk_rg_levels == 2'd3 &&
	      ptwalk_ff_memory_response_D_OUT[104:78] != 27'd0 ||
	      ptwalk_ff_req_queue_first__1_BITS_3_TO_2_1_EQ__ETC___d125) ||
	     ptwalk_ff_memory_response_D_OUT[67] ;
  assign NOT_ptwalk_ff_memory_response_first__8_BIT_68__ETC___d204 =
	     (!ptwalk_ff_memory_response_D_OUT[68] ||
	      !ptwalk_ff_memory_response_D_OUT[69] &&
	      ptwalk_ff_memory_response_D_OUT[70] ||
	      ptwalk_rg_levels_0_EQ_0_3_AND_NOT_ptwalk_ff_me_ETC___d194 ||
	      ptwalk_ff_memory_response_D_OUT[67]) &&
	     ptwalk_ff_req_queue_D_OUT[3:2] != 2'd3 ;
  assign NOT_ptwalk_ff_req_queue_first__1_BITS_3_TO_2_1_ETC___d169 =
	     ptwalk_ff_req_queue_D_OUT[3:2] != 2'd3 &&
	     !ptwalk_ff_memory_response_D_OUT[72] &&
	     priv__h2675 == 2'd0 ||
	     ptwalk_ff_req_queue_D_OUT[3:2] != 2'd3 && priv__h2675 == 2'd1 &&
	     ptwalk_ff_memory_response_D_OUT[72] &&
	     !riscv_csrs_mv_csr_mstatus[18] ||
	     ptwalk_ff_req_queue_first__1_BITS_3_TO_2_1_EQ__ETC___d167 ;
  assign NOT_ptwalk_rg_levels_0_EQ_1_4_15_OR_ptwalk_ff__ETC___d244 =
	     (ptwalk_rg_levels != 2'd1 ||
	      ptwalk_ff_memory_response_D_OUT[86:78] == 9'd0) &&
	     (ptwalk_rg_levels != 2'd2 ||
	      ptwalk_ff_memory_response_D_OUT[95:78] == 18'd0) &&
	     (ptwalk_rg_levels != 2'd3 ||
	      ptwalk_ff_memory_response_D_OUT[104:78] == 27'd0) &&
	     (ptwalk_ff_req_queue_D_OUT[3:2] != 2'd2 &&
	      ptwalk_ff_req_queue_D_OUT[3:2] != 2'd1 ||
	      ptwalk_ff_memory_response_D_OUT[70]) &&
	     (ptwalk_ff_req_queue_D_OUT[3:2] == 2'd3 ||
	      ptwalk_ff_memory_response_D_OUT[72] ||
	      priv__h2675 != 2'd0) &&
	     ptwalk_ff_req_queue_first__1_BITS_3_TO_2_1_EQ__ETC___d241 ;
  assign _dand1ptwalk_ff_req_queue_EN_deq =
	     WILL_FIRE_RL_ptwalk_check_pte &&
	     (!ptwalk_ff_memory_response_D_OUT[68] ||
	      !ptwalk_ff_memory_response_D_OUT[69] &&
	      ptwalk_ff_memory_response_D_OUT[70] ||
	      ptwalk_rg_levels_0_EQ_0_3_AND_NOT_ptwalk_ff_me_ETC___d173 ||
	      ptwalk_ff_memory_response_D_OUT[67] ||
	      (ptwalk_ff_memory_response_D_OUT[69] ||
	       ptwalk_ff_memory_response_D_OUT[71]) &&
	      ptwalk_ff_req_queue_D_OUT[3:2] == 2'd3) ;
  assign _theResult_____1__h3277 =
	     ptwalk_ff_memory_response_D_OUT[67] ?
	       cause___1__h3452 :
	       IF_NOT_ptwalk_ff_memory_response_first__8_BIT__ETC___d180 ;
  assign a__h2028 =
	     (ptwalk_rg_levels == max_levels__h2027) ?
	       { riscv_csrs_mv_csr_satp[43:0], 12'b0 } :
	       ptwalk_rg_a ;
  assign max_levels__h2027 =
	     (riscv_csrs_mv_csr_satp[63:60] == 4'd8) ? 2'd2 : 2'd3 ;
  assign priv__h2675 =
	     riscv_csrs_mv_csr_mstatus[17] ?
	       riscv_csrs_mv_csr_mstatus[12:11] :
	       riscv_csrs_mv_curr_priv ;
  assign pte_address__h2029 = a__h2028 + { 44'd0, x__h2139 } ;
  assign ptwalk_ff_req_queue_first__1_BITS_3_TO_2_1_EQ__ETC___d125 =
	     (ptwalk_ff_req_queue_D_OUT[3:2] == 2'd2 ||
	      ptwalk_ff_req_queue_D_OUT[3:2] == 2'd1) &&
	     !ptwalk_ff_memory_response_D_OUT[70] ||
	     !ptwalk_ff_memory_response_D_OUT[72] && priv__h2675 == 2'd0 ||
	     IF_IF_ptwalk_wr_mstatus_whas__7_THEN_ptwalk_wr_ETC___d123 ;
  assign ptwalk_ff_req_queue_first__1_BITS_3_TO_2_1_EQ__ETC___d165 =
	     ptwalk_ff_req_queue_D_OUT[3:2] == 2'd3 &&
	     ptwalk_ff_memory_response_D_OUT[71] &&
	     ptwalk_ff_memory_response_D_OUT[72] &&
	     riscv_csrs_mv_curr_priv == 2'd1 ||
	     ptwalk_ff_req_queue_D_OUT[3:2] == 2'd3 &&
	     !ptwalk_ff_memory_response_D_OUT[71] ||
	     !ptwalk_ff_memory_response_D_OUT[74] ||
	     !ptwalk_ff_memory_response_D_OUT[75] &&
	     (ptwalk_ff_req_queue_D_OUT[3:2] == 2'd2 ||
	      ptwalk_ff_req_queue_D_OUT[3:2] == 2'd1) ;
  assign ptwalk_ff_req_queue_first__1_BITS_3_TO_2_1_EQ__ETC___d167 =
	     ptwalk_ff_req_queue_D_OUT[3:2] == 2'd0 &&
	     !ptwalk_ff_memory_response_D_OUT[69] &&
	     (!ptwalk_ff_memory_response_D_OUT[71] ||
	      !riscv_csrs_mv_csr_mstatus[19]) ||
	     ptwalk_ff_req_queue_D_OUT[3:2] == 2'd3 &&
	     ptwalk_ff_memory_response_D_OUT[71] &&
	     !ptwalk_ff_memory_response_D_OUT[72] &&
	     riscv_csrs_mv_curr_priv == 2'd0 ||
	     ptwalk_ff_req_queue_first__1_BITS_3_TO_2_1_EQ__ETC___d165 ;
  assign ptwalk_ff_req_queue_first__1_BITS_3_TO_2_1_EQ__ETC___d191 =
	     (ptwalk_ff_req_queue_D_OUT[3:2] == 2'd2 ||
	      ptwalk_ff_req_queue_D_OUT[3:2] == 2'd1) &&
	     !ptwalk_ff_memory_response_D_OUT[70] ||
	     !ptwalk_ff_memory_response_D_OUT[72] && priv__h2675 == 2'd0 ||
	     IF_IF_ptwalk_wr_mstatus_whas__7_THEN_ptwalk_wr_ETC___d189 ;
  assign ptwalk_ff_req_queue_first__1_BITS_3_TO_2_1_EQ__ETC___d241 =
	     (ptwalk_ff_req_queue_D_OUT[3:2] == 2'd3 || priv__h2675 != 2'd1 ||
	      !ptwalk_ff_memory_response_D_OUT[72] ||
	      riscv_csrs_mv_csr_mstatus[18]) &&
	     (ptwalk_ff_req_queue_D_OUT[3:2] != 2'd0 ||
	      ptwalk_ff_memory_response_D_OUT[69]) &&
	     (ptwalk_ff_req_queue_D_OUT[3:2] != 2'd3 ||
	      ptwalk_ff_memory_response_D_OUT[71]) &&
	     ptwalk_ff_memory_response_D_OUT[74] &&
	     (ptwalk_ff_memory_response_D_OUT[75] ||
	      ptwalk_ff_req_queue_D_OUT[3:2] != 2'd2 &&
	      ptwalk_ff_req_queue_D_OUT[3:2] != 2'd1) ;
  assign ptwalk_rg_levels_0_EQ_0_3_AND_NOT_ptwalk_ff_me_ETC___d173 =
	     ptwalk_rg_levels == 2'd0 &&
	     !ptwalk_ff_memory_response_D_OUT[69] &&
	     !ptwalk_ff_memory_response_D_OUT[71] ||
	     (ptwalk_ff_memory_response_D_OUT[71] ||
	      ptwalk_ff_memory_response_D_OUT[69] ||
	      ptwalk_ff_memory_response_D_OUT[70]) &&
	     ptwalk_rg_levels_0_EQ_1_4_AND_NOT_ptwalk_ff_me_ETC___d171 ;
  assign ptwalk_rg_levels_0_EQ_0_3_AND_NOT_ptwalk_ff_me_ETC___d194 =
	     ptwalk_rg_levels == 2'd0 &&
	     !ptwalk_ff_memory_response_D_OUT[69] &&
	     !ptwalk_ff_memory_response_D_OUT[71] ||
	     (ptwalk_ff_memory_response_D_OUT[71] ||
	      ptwalk_ff_memory_response_D_OUT[69] ||
	      ptwalk_ff_memory_response_D_OUT[70]) &&
	     (ptwalk_rg_levels == 2'd1 &&
	      ptwalk_ff_memory_response_D_OUT[86:78] != 9'd0 ||
	      ptwalk_rg_levels == 2'd2 &&
	      ptwalk_ff_memory_response_D_OUT[95:78] != 18'd0 ||
	      ptwalk_rg_levels == 2'd3 &&
	      ptwalk_ff_memory_response_D_OUT[104:78] != 27'd0 ||
	      ptwalk_ff_req_queue_first__1_BITS_3_TO_2_1_EQ__ETC___d191) ;
  assign ptwalk_rg_levels_0_EQ_1_4_AND_NOT_ptwalk_ff_me_ETC___d171 =
	     ptwalk_rg_levels == 2'd1 &&
	     ptwalk_ff_memory_response_D_OUT[86:78] != 9'd0 ||
	     ptwalk_rg_levels == 2'd2 &&
	     ptwalk_ff_memory_response_D_OUT[95:78] != 18'd0 ||
	     ptwalk_rg_levels == 2'd3 &&
	     ptwalk_ff_memory_response_D_OUT[104:78] != 27'd0 ||
	     (ptwalk_ff_req_queue_D_OUT[3:2] == 2'd2 ||
	      ptwalk_ff_req_queue_D_OUT[3:2] == 2'd1) &&
	     !ptwalk_ff_memory_response_D_OUT[70] ||
	     NOT_ptwalk_ff_req_queue_first__1_BITS_3_TO_2_1_ETC___d169 ;
  assign wr_write_req_BITS_31_TO_0__q2 = wr_write_req[31:0] ;
  assign write_strobe__h6983 =
	     write_strobe__h6981 << dmem_send_mem_io_req_get[70:68] ;
  assign x__h10757 = { 2'd0, riscv_csrs_mv_curr_priv[1] } ;
  assign x__h11073 = rg_shift_amount + 9'd64 ;
  assign x__h11106 = rg_burst_count + 8'd1 ;
  assign x__h11161 = dmem_send_mem_wr_req[522:11] >> rg_shift_amount ;
  assign x__h2139 =
	     { CASE_ptwalk_rg_levels_0_ptwalk_ff_req_queueD__ETC__q1, 3'b0 } ;
  assign x__h3328 = ptwalk_rg_levels - 2'd1 ;
  assign x__h6694 = { 2'd2, riscv_csrs_mv_curr_priv[1] } ;
  assign x__h7146 = { 1'd0, dmem_send_mem_io_req_get[1:0] } ;
  assign x_address__h2078 =
	     { {8{pte_address__h2029[55]}}, pte_address__h2029 } ;
  assign x_writedata__h2083 = { 57'd0, 7'bxxxxxxx /* unspecified value */  } ;
  assign x_writedata__h3443 = { 57'd0, _theResult_____1__h3277 } ;
  always@(ptwalk_rg_levels or ptwalk_ff_req_queue_D_OUT)
  begin
    case (ptwalk_rg_levels)
      2'd0:
	  CASE_ptwalk_rg_levels_0_ptwalk_ff_req_queueD__ETC__q1 =
	      ptwalk_ff_req_queue_D_OUT[24:16];
      2'd1:
	  CASE_ptwalk_rg_levels_0_ptwalk_ff_req_queueD__ETC__q1 =
	      ptwalk_ff_req_queue_D_OUT[33:25];
      2'd2:
	  CASE_ptwalk_rg_levels_0_ptwalk_ff_req_queueD__ETC__q1 =
	      ptwalk_ff_req_queue_D_OUT[42:34];
      2'd3:
	  CASE_ptwalk_rg_levels_0_ptwalk_ff_req_queueD__ETC__q1 =
	      9'bxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(dmem_send_mem_io_req_get)
  begin
    case (dmem_send_mem_io_req_get[1:0])
      2'd0: x_wdata__h7276 = {8{dmem_send_mem_io_req_get[10:3]}};
      2'd1: x_wdata__h7276 = {4{dmem_send_mem_io_req_get[18:3]}};
      2'd2: x_wdata__h7276 = {2{dmem_send_mem_io_req_get[34:3]}};
      2'd3: x_wdata__h7276 = dmem_send_mem_io_req_get[66:3];
    endcase
  end
  always@(dmem_send_mem_io_req_get)
  begin
    case (dmem_send_mem_io_req_get[1:0])
      2'd0: write_strobe__h6981 = 8'b00000001;
      2'd1: write_strobe__h6981 = 8'b00000011;
      2'd2: write_strobe__h6981 = 8'h0F;
      2'd3: write_strobe__h6981 = 8'hFF;
    endcase
  end
  always@(ptwalk_ff_req_queue_D_OUT)
  begin
    case (ptwalk_ff_req_queue_D_OUT[3:2])
      2'd0: cause___1__h3473 = 7'd13;
      2'd3: cause___1__h3473 = 7'd12;
      default: cause___1__h3473 = 7'd15;
    endcase
  end
  always@(ptwalk_ff_req_queue_D_OUT)
  begin
    case (ptwalk_ff_req_queue_D_OUT[3:2])
      2'd0: cause___1__h3452 = 7'd5;
      2'd3: cause___1__h3452 = 7'd1;
      default: cause___1__h3452 = 7'd7;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ptwalk_rg_a <= `BSV_ASSIGNMENT_DELAY 56'd0;
	ptwalk_rg_hold_epoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ptwalk_rg_levels <= `BSV_ASSIGNMENT_DELAY 2'd2;
	ptwalk_rg_state <= `BSV_ASSIGNMENT_DELAY 2'd2;
	rg_burst_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_ptw_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_read_line_req <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      52'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	rg_shift_amount <= `BSV_ASSIGNMENT_DELAY 9'd64;
	wr_write_req <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
      end
    else
      begin
        if (ptwalk_rg_a_EN)
	  ptwalk_rg_a <= `BSV_ASSIGNMENT_DELAY ptwalk_rg_a_D_IN;
	if (ptwalk_rg_hold_epoch_EN)
	  ptwalk_rg_hold_epoch <= `BSV_ASSIGNMENT_DELAY
	      ptwalk_rg_hold_epoch_D_IN;
	if (ptwalk_rg_levels_EN)
	  ptwalk_rg_levels <= `BSV_ASSIGNMENT_DELAY ptwalk_rg_levels_D_IN;
	if (ptwalk_rg_state_EN)
	  ptwalk_rg_state <= `BSV_ASSIGNMENT_DELAY ptwalk_rg_state_D_IN;
	if (rg_burst_count_EN)
	  rg_burst_count <= `BSV_ASSIGNMENT_DELAY rg_burst_count_D_IN;
	if (rg_ptw_state_EN)
	  rg_ptw_state <= `BSV_ASSIGNMENT_DELAY rg_ptw_state_D_IN;
	if (rg_read_line_req_EN)
	  rg_read_line_req <= `BSV_ASSIGNMENT_DELAY rg_read_line_req_D_IN;
	if (rg_shift_amount_EN)
	  rg_shift_amount <= `BSV_ASSIGNMENT_DELAY rg_shift_amount_D_IN;
	if (wr_write_req_EN)
	  wr_write_req <= `BSV_ASSIGNMENT_DELAY wr_write_req_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ptwalk_rg_a = 56'hAAAAAAAAAAAAAA;
    ptwalk_rg_hold_epoch = 1'h0;
    ptwalk_rg_levels = 2'h2;
    ptwalk_rg_state = 2'h2;
    rg_burst_count = 8'hAA;
    rg_ptw_state = 2'h2;
    rg_read_line_req = 53'h0AAAAAAAAAAAAA;
    rg_shift_amount = 9'h0AA;
    wr_write_req = 33'h0AAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_io_read_response &&
	  WILL_FIRE_RL_rl_handle_io_write_resp)
	$display("Error: \"src//ccore.bsv\", line 129, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_handle_io_read_response]\n  and [RL_rl_handle_io_write_resp] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkccore_axi4

