//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
//
// On Tue Jul 29 14:28:34 +04 2025
//
//
// Ports:
// Name                         I/O  size props
// debug_slave_AWREADY            O     1 reg
// debug_slave_WREADY             O     1 reg
// debug_slave_BVALID             O     1 reg
// debug_slave_BRESP              O     2 reg
// debug_slave_BID                O     4 reg
// debug_slave_ARREADY            O     1 reg
// debug_slave_RVALID             O     1 reg
// debug_slave_RRESP              O     2 reg
// debug_slave_RDATA              O    64 reg
// debug_slave_RLAST              O     1 reg
// debug_slave_RID                O     4 reg
// debug_master_AWVALID           O     1 reg
// debug_master_AWADDR            O    32 reg
// debug_master_AWPROT            O     3 reg
// debug_master_AWLEN             O     8 reg
// debug_master_AWSIZE            O     3 reg
// debug_master_AWBURST           O     2 reg
// debug_master_AWID              O     4 reg
// debug_master_WVALID            O     1 reg
// debug_master_WDATA             O    64 reg
// debug_master_WSTRB             O     8 reg
// debug_master_WLAST             O     1 reg
// debug_master_WID               O     4 reg
// debug_master_BREADY            O     1 reg
// debug_master_ARVALID           O     1 reg
// debug_master_ARADDR            O    32 reg
// debug_master_ARPROT            O     3 reg
// debug_master_ARLEN             O     8 reg
// debug_master_ARSIZE            O     3 reg
// debug_master_ARBURST           O     2 reg
// debug_master_ARID              O     4 reg
// debug_master_RREADY            O     1 reg
// RDY_dtm_access_putCommand_put  O     1
// dtm_access_getResponse_get     O    34 reg
// RDY_dtm_access_getResponse_get  O     1 reg
// mv_ndm_reset                   O     1 reg
// RDY_mv_ndm_reset               O     1 const
// hartside_mv_hartmask           O     1 const
// RDY_hartside_mv_hartmask       O     1 const
// hartside_mv_hartreset          O     1 reg
// RDY_hartside_mv_hartreset      O     1 const
// hartside_mv_harthaltreq        O     1 reg
// RDY_hartside_mv_harthaltreq    O     1 const
// hartside_mv_resetack           O     1
// RDY_hartside_mv_resetack       O     1 const
// RDY_hartside_ma_havereset      O     1 const
// RDY_hartside_ma_debugenable    O     1 const
// hartside_mv_hasel              O     1 reg
// RDY_hartside_mv_hasel          O     1 const
// hartside_mv_hartsel            O    10 const
// RDY_hartside_mv_hartsel        O     1 const
// RST_N_ifc_dm_reset             O     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// debug_slave_AWVALID            I     1
// debug_slave_AWADDR             I    32 reg
// debug_slave_AWSIZE             I     3 reg
// debug_slave_AWPROT             I     3 reg
// debug_slave_AWLEN              I     8 reg
// debug_slave_AWBURST            I     2 reg
// debug_slave_AWID               I     4 reg
// debug_slave_WVALID             I     1
// debug_slave_WDATA              I    64 reg
// debug_slave_WSTRB              I     8 reg
// debug_slave_WLAST              I     1 reg
// debug_slave_WID                I     4 reg
// debug_slave_BREADY             I     1
// debug_slave_ARVALID            I     1
// debug_slave_ARADDR             I    32 reg
// debug_slave_ARSIZE             I     3 reg
// debug_slave_ARPROT             I     3 reg
// debug_slave_ARLEN              I     8 reg
// debug_slave_ARBURST            I     2 reg
// debug_slave_ARID               I     4 reg
// debug_slave_RREADY             I     1
// debug_master_AWREADY           I     1
// debug_master_WREADY            I     1
// debug_master_BVALID            I     1
// debug_master_BRESP             I     2 reg
// debug_master_BID               I     4 reg
// debug_master_ARREADY           I     1
// debug_master_RVALID            I     1
// debug_master_RRESP             I     2 reg
// debug_master_RDATA             I    64 reg
// debug_master_RLAST             I     1 reg
// debug_master_RID               I     4 reg
// dtm_access_putCommand_put      I    41
// hartside_ma_havereset_resetack  I     1
// hartside_ma_debugenable__debugenable  I     1
// EN_dtm_access_putCommand_put   I     1
// EN_hartside_ma_havereset       I     1
// EN_hartside_ma_debugenable     I     1
// EN_dtm_access_getResponse_get  I     1
//
// Combinational paths from inputs to outputs:
//   (dtm_access_putCommand_put,
//    EN_dtm_access_putCommand_put) -> hartside_mv_resetack
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mk_debug(CLK,
		RST_N,

		debug_slave_AWVALID,
		debug_slave_AWADDR,
		debug_slave_AWSIZE,
		debug_slave_AWPROT,
		debug_slave_AWLEN,
		debug_slave_AWBURST,
		debug_slave_AWID,

		debug_slave_AWREADY,

		debug_slave_WVALID,
		debug_slave_WDATA,
		debug_slave_WSTRB,
		debug_slave_WLAST,
		debug_slave_WID,

		debug_slave_WREADY,

		debug_slave_BVALID,

		debug_slave_BRESP,

		debug_slave_BID,

		debug_slave_BREADY,

		debug_slave_ARVALID,
		debug_slave_ARADDR,
		debug_slave_ARSIZE,
		debug_slave_ARPROT,
		debug_slave_ARLEN,
		debug_slave_ARBURST,
		debug_slave_ARID,

		debug_slave_ARREADY,

		debug_slave_RVALID,

		debug_slave_RRESP,

		debug_slave_RDATA,

		debug_slave_RLAST,

		debug_slave_RID,

		debug_slave_RREADY,

		debug_master_AWVALID,

		debug_master_AWADDR,

		debug_master_AWPROT,

		debug_master_AWLEN,

		debug_master_AWSIZE,

		debug_master_AWBURST,

		debug_master_AWID,

		debug_master_AWREADY,

		debug_master_WVALID,

		debug_master_WDATA,

		debug_master_WSTRB,

		debug_master_WLAST,

		debug_master_WID,

		debug_master_WREADY,

		debug_master_BVALID,
		debug_master_BRESP,
		debug_master_BID,

		debug_master_BREADY,

		debug_master_ARVALID,

		debug_master_ARADDR,

		debug_master_ARPROT,

		debug_master_ARLEN,

		debug_master_ARSIZE,

		debug_master_ARBURST,

		debug_master_ARID,

		debug_master_ARREADY,

		debug_master_RVALID,
		debug_master_RRESP,
		debug_master_RDATA,
		debug_master_RLAST,
		debug_master_RID,

		debug_master_RREADY,

		dtm_access_putCommand_put,
		EN_dtm_access_putCommand_put,
		RDY_dtm_access_putCommand_put,

		EN_dtm_access_getResponse_get,
		dtm_access_getResponse_get,
		RDY_dtm_access_getResponse_get,

		mv_ndm_reset,
		RDY_mv_ndm_reset,

		hartside_mv_hartmask,
		RDY_hartside_mv_hartmask,

		hartside_mv_hartreset,
		RDY_hartside_mv_hartreset,

		hartside_mv_harthaltreq,
		RDY_hartside_mv_harthaltreq,

		hartside_mv_resetack,
		RDY_hartside_mv_resetack,

		hartside_ma_havereset_resetack,
		EN_hartside_ma_havereset,
		RDY_hartside_ma_havereset,

		hartside_ma_debugenable__debugenable,
		EN_hartside_ma_debugenable,
		RDY_hartside_ma_debugenable,

		hartside_mv_hasel,
		RDY_hartside_mv_hasel,

		hartside_mv_hartsel,
		RDY_hartside_mv_hartsel,

		RST_N_ifc_dm_reset);
  input  CLK;
  input  RST_N;

  // action method debug_slave_m_awvalid
  input  debug_slave_AWVALID;
  input  [31 : 0] debug_slave_AWADDR;
  input  [2 : 0] debug_slave_AWSIZE;
  input  [2 : 0] debug_slave_AWPROT;
  input  [7 : 0] debug_slave_AWLEN;
  input  [1 : 0] debug_slave_AWBURST;
  input  [3 : 0] debug_slave_AWID;

  // value method debug_slave_m_awready
  output debug_slave_AWREADY;

  // action method debug_slave_m_wvalid
  input  debug_slave_WVALID;
  input  [63 : 0] debug_slave_WDATA;
  input  [7 : 0] debug_slave_WSTRB;
  input  debug_slave_WLAST;
  input  [3 : 0] debug_slave_WID;

  // value method debug_slave_m_wready
  output debug_slave_WREADY;

  // value method debug_slave_m_bvalid
  output debug_slave_BVALID;

  // value method debug_slave_m_bresp
  output [1 : 0] debug_slave_BRESP;

  // value method debug_slave_m_buser

  // value method debug_slave_m_bid
  output [3 : 0] debug_slave_BID;

  // action method debug_slave_m_bready
  input  debug_slave_BREADY;

  // action method debug_slave_m_arvalid
  input  debug_slave_ARVALID;
  input  [31 : 0] debug_slave_ARADDR;
  input  [2 : 0] debug_slave_ARSIZE;
  input  [2 : 0] debug_slave_ARPROT;
  input  [7 : 0] debug_slave_ARLEN;
  input  [1 : 0] debug_slave_ARBURST;
  input  [3 : 0] debug_slave_ARID;

  // value method debug_slave_m_arready
  output debug_slave_ARREADY;

  // value method debug_slave_m_rvalid
  output debug_slave_RVALID;

  // value method debug_slave_m_rresp
  output [1 : 0] debug_slave_RRESP;

  // value method debug_slave_m_rdata
  output [63 : 0] debug_slave_RDATA;

  // value method debug_slave_m_rlast
  output debug_slave_RLAST;

  // value method debug_slave_m_ruser

  // value method debug_slave_m_rid
  output [3 : 0] debug_slave_RID;

  // action method debug_slave_m_rready
  input  debug_slave_RREADY;

  // value method debug_master_m_awvalid
  output debug_master_AWVALID;

  // value method debug_master_m_awaddr
  output [31 : 0] debug_master_AWADDR;

  // value method debug_master_m_awuser

  // value method debug_master_m_awprot
  output [2 : 0] debug_master_AWPROT;

  // value method debug_master_m_awlen
  output [7 : 0] debug_master_AWLEN;

  // value method debug_master_m_awsize
  output [2 : 0] debug_master_AWSIZE;

  // value method debug_master_m_awburst
  output [1 : 0] debug_master_AWBURST;

  // value method debug_master_m_awid
  output [3 : 0] debug_master_AWID;

  // action method debug_master_m_awready
  input  debug_master_AWREADY;

  // value method debug_master_m_wvalid
  output debug_master_WVALID;

  // value method debug_master_m_wdata
  output [63 : 0] debug_master_WDATA;

  // value method debug_master_m_wstrb
  output [7 : 0] debug_master_WSTRB;

  // value method debug_master_m_wlast
  output debug_master_WLAST;

  // value method debug_master_m_wid
  output [3 : 0] debug_master_WID;

  // action method debug_master_m_wready
  input  debug_master_WREADY;

  // action method debug_master_m_bvalid
  input  debug_master_BVALID;
  input  [1 : 0] debug_master_BRESP;
  input  [3 : 0] debug_master_BID;

  // value method debug_master_m_bready
  output debug_master_BREADY;

  // value method debug_master_m_arvalid
  output debug_master_ARVALID;

  // value method debug_master_m_araddr
  output [31 : 0] debug_master_ARADDR;

  // value method debug_master_m_aruser

  // value method debug_master_m_arprot
  output [2 : 0] debug_master_ARPROT;

  // value method debug_master_m_arlen
  output [7 : 0] debug_master_ARLEN;

  // value method debug_master_m_arsize
  output [2 : 0] debug_master_ARSIZE;

  // value method debug_master_m_arburst
  output [1 : 0] debug_master_ARBURST;

  // value method debug_master_m_arid
  output [3 : 0] debug_master_ARID;

  // action method debug_master_m_arready
  input  debug_master_ARREADY;

  // action method debug_master_m_rvalid
  input  debug_master_RVALID;
  input  [1 : 0] debug_master_RRESP;
  input  [63 : 0] debug_master_RDATA;
  input  debug_master_RLAST;
  input  [3 : 0] debug_master_RID;

  // value method debug_master_m_rready
  output debug_master_RREADY;

  // action method dtm_access_putCommand_put
  input  [40 : 0] dtm_access_putCommand_put;
  input  EN_dtm_access_putCommand_put;
  output RDY_dtm_access_putCommand_put;

  // actionvalue method dtm_access_getResponse_get
  input  EN_dtm_access_getResponse_get;
  output [33 : 0] dtm_access_getResponse_get;
  output RDY_dtm_access_getResponse_get;

  // value method mv_ndm_reset
  output mv_ndm_reset;
  output RDY_mv_ndm_reset;

  // value method hartside_mv_hartmask
  output hartside_mv_hartmask;
  output RDY_hartside_mv_hartmask;

  // value method hartside_mv_hartreset
  output hartside_mv_hartreset;
  output RDY_hartside_mv_hartreset;

  // value method hartside_mv_harthaltreq
  output hartside_mv_harthaltreq;
  output RDY_hartside_mv_harthaltreq;

  // value method hartside_mv_resetack
  output hartside_mv_resetack;
  output RDY_hartside_mv_resetack;

  // action method hartside_ma_havereset
  input  hartside_ma_havereset_resetack;
  input  EN_hartside_ma_havereset;
  output RDY_hartside_ma_havereset;

  // action method hartside_ma_debugenable
  input  hartside_ma_debugenable__debugenable;
  input  EN_hartside_ma_debugenable;
  output RDY_hartside_ma_debugenable;

  // value method hartside_mv_hasel
  output hartside_mv_hasel;
  output RDY_hartside_mv_hasel;

  // value method hartside_mv_hartsel
  output [9 : 0] hartside_mv_hartsel;
  output RDY_hartside_mv_hartsel;

  // output resets
  output RST_N_ifc_dm_reset;

  // signals for module outputs
  wire [63 : 0] debug_master_WDATA, debug_slave_RDATA;
  wire [33 : 0] dtm_access_getResponse_get;
  wire [31 : 0] debug_master_ARADDR, debug_master_AWADDR;
  wire [9 : 0] hartside_mv_hartsel;
  wire [7 : 0] debug_master_ARLEN, debug_master_AWLEN, debug_master_WSTRB;
  wire [3 : 0] debug_master_ARID,
	       debug_master_AWID,
	       debug_master_WID,
	       debug_slave_BID,
	       debug_slave_RID;
  wire [2 : 0] debug_master_ARPROT,
	       debug_master_ARSIZE,
	       debug_master_AWPROT,
	       debug_master_AWSIZE;
  wire [1 : 0] debug_master_ARBURST,
	       debug_master_AWBURST,
	       debug_slave_BRESP,
	       debug_slave_RRESP;
  wire RDY_dtm_access_getResponse_get,
       RDY_dtm_access_putCommand_put,
       RDY_hartside_ma_debugenable,
       RDY_hartside_ma_havereset,
       RDY_hartside_mv_harthaltreq,
       RDY_hartside_mv_hartmask,
       RDY_hartside_mv_hartreset,
       RDY_hartside_mv_hartsel,
       RDY_hartside_mv_hasel,
       RDY_hartside_mv_resetack,
       RDY_mv_ndm_reset,
       RST_N_ifc_dm_reset,
       debug_master_ARVALID,
       debug_master_AWVALID,
       debug_master_BREADY,
       debug_master_RREADY,
       debug_master_WLAST,
       debug_master_WVALID,
       debug_slave_ARREADY,
       debug_slave_AWREADY,
       debug_slave_BVALID,
       debug_slave_RLAST,
       debug_slave_RVALID,
       debug_slave_WREADY,
       hartside_mv_harthaltreq,
       hartside_mv_hartmask,
       hartside_mv_hartreset,
       hartside_mv_hasel,
       hartside_mv_resetack,
       mv_ndm_reset;

  // inlined wires
  wire _write_RL_rl_sba_read_response_EN_sbaddress0_wget,
       _write_RL_rl_set_busy_EN_busy_wget,
       hahavereset_port0__write_1,
       hahavereset_port1__read,
       hahavereset_port2__read,
       wr_ackhavereset_wren_whas,
       wr_cmderr_wren_whas,
       wr_cmdtype_wren_whas,
       wr_errbusy_wget,
       wr_errbusy_whas,
       wr_errexception_whas,
       wr_errhaltresume_whas,
       wr_errnotsupported_whas,
       wr_exception_wren_whas,
       wr_haltreq_wren_whas,
       wr_hartgoing_wren_whas,
       wr_harthalting_wren_whas,
       wr_hartresuming_wren_whas,
       wr_resumereq_wren_whas;

  // register _unnamed_
  reg _unnamed_;
  wire _unnamed__D_IN, _unnamed__EN;

  // register ackhavereset
  reg ackhavereset;
  wire ackhavereset_D_IN, ackhavereset_EN;

  // register ackunavail
  reg ackunavail;
  wire ackunavail_D_IN, ackunavail_EN;

  // register allhalted
  reg allhalted;
  wire allhalted_D_IN, allhalted_EN;

  // register allhavereset
  reg allhavereset;
  wire allhavereset_D_IN, allhavereset_EN;

  // register allnonexistent
  reg allnonexistent;
  wire allnonexistent_D_IN, allnonexistent_EN;

  // register allresumeack
  reg allresumeack;
  wire allresumeack_D_IN, allresumeack_EN;

  // register allrunning
  reg allrunning;
  wire allrunning_D_IN, allrunning_EN;

  // register allunavail
  reg allunavail;
  wire allunavail_D_IN, allunavail_EN;

  // register anyhalted
  reg anyhalted;
  wire anyhalted_D_IN, anyhalted_EN;

  // register anyhavereset
  reg anyhavereset;
  wire anyhavereset_D_IN, anyhavereset_EN;

  // register anynonexistent
  reg anynonexistent;
  wire anynonexistent_D_IN, anynonexistent_EN;

  // register anyresumeack
  reg anyresumeack;
  wire anyresumeack_D_IN, anyresumeack_EN;

  // register anyrunning
  reg anyrunning;
  wire anyrunning_D_IN, anyrunning_EN;

  // register anyunavail
  reg anyunavail;
  wire anyunavail_D_IN, anyunavail_EN;

  // register authbusy
  reg authbusy;
  wire authbusy_D_IN, authbusy_EN;

  // register authenticated
  reg authenticated;
  wire authenticated_D_IN, authenticated_EN;

  // register autoexecdata
  reg [11 : 0] autoexecdata;
  wire [11 : 0] autoexecdata_D_IN;
  wire autoexecdata_EN;

  // register autoexecprogbuf
  reg [15 : 0] autoexecprogbuf;
  wire [15 : 0] autoexecprogbuf_D_IN;
  wire autoexecprogbuf_EN;

  // register busy
  reg busy;
  wire busy_D_IN, busy_EN;

  // register clrresethaltreq
  reg clrresethaltreq;
  wire clrresethaltreq_D_IN, clrresethaltreq_EN;

  // register cmderr
  reg [2 : 0] cmderr;
  wire [2 : 0] cmderr_D_IN;
  wire cmderr_EN;

  // register cmdtype
  reg [7 : 0] cmdtype;
  wire [7 : 0] cmdtype_D_IN;
  wire cmdtype_EN;

  // register confstrptrvalid
  reg confstrptrvalid;
  wire confstrptrvalid_D_IN, confstrptrvalid_EN;

  // register control
  reg [23 : 0] control;
  wire [23 : 0] control_D_IN;
  wire control_EN;

  // register dmactive
  reg dmactive;
  wire dmactive_D_IN, dmactive_EN;

  // register dmi_response
  reg [34 : 0] dmi_response;
  wire [34 : 0] dmi_response_D_IN;
  wire dmi_response_EN;

  // register hahalted
  reg hahalted;
  wire hahalted_D_IN, hahalted_EN;

  // register hahaltreq
  reg hahaltreq;
  wire hahaltreq_D_IN, hahaltreq_EN;

  // register hahavereset
  reg hahavereset;
  wire hahavereset_D_IN, hahavereset_EN;

  // register haltreq
  reg haltreq;
  wire haltreq_D_IN, haltreq_EN;

  // register hamask
  reg hamask;
  wire hamask_D_IN, hamask_EN;

  // register haresetreq
  reg haresetreq;
  wire haresetreq_D_IN, haresetreq_EN;

  // register haresumeack
  reg haresumeack;
  wire haresumeack_D_IN, haresumeack_EN;

  // register haresumereq
  reg haresumereq;
  wire haresumereq_D_IN, haresumereq_EN;

  // register hartreset
  reg hartreset;
  wire hartreset_D_IN, hartreset_EN;

  // register hasel
  reg hasel;
  wire hasel_D_IN, hasel_EN;

  // register hasresethaltreq
  reg hasresethaltreq;
  wire hasresethaltreq_D_IN, hasresethaltreq_EN;

  // register ndmreset
  reg ndmreset;
  wire ndmreset_D_IN, ndmreset_EN;

  // register ndmresetpending
  reg ndmresetpending;
  wire ndmresetpending_D_IN, ndmresetpending_EN;

  // register relaxedpriv
  reg relaxedpriv;
  wire relaxedpriv_D_IN, relaxedpriv_EN;

  // register resumereq
  reg resumereq;
  wire resumereq_D_IN, resumereq_EN;

  // register rg_init
  reg rg_init;
  wire rg_init_D_IN, rg_init_EN;

  // register rg_sbread_en
  reg rg_sbread_en;
  wire rg_sbread_en_D_IN, rg_sbread_en_EN;

  // register rg_sbwrite_en
  reg rg_sbwrite_en;
  wire rg_sbwrite_en_D_IN, rg_sbwrite_en_EN;

  // register sbaccess
  reg [2 : 0] sbaccess;
  wire [2 : 0] sbaccess_D_IN;
  wire sbaccess_EN;

  // register sbaddress0
  reg [31 : 0] sbaddress0;
  reg [31 : 0] sbaddress0_D_IN;
  wire sbaddress0_EN;

  // register sbaddress1
  reg [31 : 0] sbaddress1;
  wire [31 : 0] sbaddress1_D_IN;
  wire sbaddress1_EN;

  // register sbaddress2
  reg [31 : 0] sbaddress2;
  wire [31 : 0] sbaddress2_D_IN;
  wire sbaddress2_EN;

  // register sbaddress3
  reg [31 : 0] sbaddress3;
  wire [31 : 0] sbaddress3_D_IN;
  wire sbaddress3_EN;

  // register sbautoincrement
  reg sbautoincrement;
  wire sbautoincrement_D_IN, sbautoincrement_EN;

  // register sbbusy
  reg sbbusy;
  wire sbbusy_D_IN, sbbusy_EN;

  // register sbbusyerror
  reg sbbusyerror;
  wire sbbusyerror_D_IN, sbbusyerror_EN;

  // register sbdata0
  reg [31 : 0] sbdata0;
  wire [31 : 0] sbdata0_D_IN;
  wire sbdata0_EN;

  // register sbdata1
  reg [31 : 0] sbdata1;
  wire [31 : 0] sbdata1_D_IN;
  wire sbdata1_EN;

  // register sbdata2
  reg [31 : 0] sbdata2;
  wire [31 : 0] sbdata2_D_IN;
  wire sbdata2_EN;

  // register sbdata3
  reg [31 : 0] sbdata3;
  wire [31 : 0] sbdata3_D_IN;
  wire sbdata3_EN;

  // register sberr
  reg [2 : 0] sberr;
  reg [2 : 0] sberr_D_IN;
  wire sberr_EN;

  // register sbreadonaddr
  reg sbreadonaddr;
  wire sbreadonaddr_D_IN, sbreadonaddr_EN;

  // register sbreadondata
  reg sbreadondata;
  wire sbreadondata_D_IN, sbreadondata_EN;

  // register setresethaltreq
  reg setresethaltreq;
  wire setresethaltreq_D_IN, setresethaltreq_EN;

  // register v_abstract_reg_0
  reg [31 : 0] v_abstract_reg_0;
  wire [31 : 0] v_abstract_reg_0_D_IN;
  wire v_abstract_reg_0_EN;

  // register v_abstract_reg_1
  reg [31 : 0] v_abstract_reg_1;
  wire [31 : 0] v_abstract_reg_1_D_IN;
  wire v_abstract_reg_1_EN;

  // register v_data_reg_0
  reg [31 : 0] v_data_reg_0;
  wire [31 : 0] v_data_reg_0_D_IN;
  wire v_data_reg_0_EN;

  // register v_data_reg_1
  reg [31 : 0] v_data_reg_1;
  wire [31 : 0] v_data_reg_1_D_IN;
  wire v_data_reg_1_EN;

  // register v_data_reg_10
  reg [31 : 0] v_data_reg_10;
  wire [31 : 0] v_data_reg_10_D_IN;
  wire v_data_reg_10_EN;

  // register v_data_reg_11
  reg [31 : 0] v_data_reg_11;
  wire [31 : 0] v_data_reg_11_D_IN;
  wire v_data_reg_11_EN;

  // register v_data_reg_2
  reg [31 : 0] v_data_reg_2;
  wire [31 : 0] v_data_reg_2_D_IN;
  wire v_data_reg_2_EN;

  // register v_data_reg_3
  reg [31 : 0] v_data_reg_3;
  wire [31 : 0] v_data_reg_3_D_IN;
  wire v_data_reg_3_EN;

  // register v_data_reg_4
  reg [31 : 0] v_data_reg_4;
  wire [31 : 0] v_data_reg_4_D_IN;
  wire v_data_reg_4_EN;

  // register v_data_reg_5
  reg [31 : 0] v_data_reg_5;
  wire [31 : 0] v_data_reg_5_D_IN;
  wire v_data_reg_5_EN;

  // register v_data_reg_6
  reg [31 : 0] v_data_reg_6;
  wire [31 : 0] v_data_reg_6_D_IN;
  wire v_data_reg_6_EN;

  // register v_data_reg_7
  reg [31 : 0] v_data_reg_7;
  wire [31 : 0] v_data_reg_7_D_IN;
  wire v_data_reg_7_EN;

  // register v_data_reg_8
  reg [31 : 0] v_data_reg_8;
  wire [31 : 0] v_data_reg_8_D_IN;
  wire v_data_reg_8_EN;

  // register v_data_reg_9
  reg [31 : 0] v_data_reg_9;
  wire [31 : 0] v_data_reg_9_D_IN;
  wire v_data_reg_9_EN;

  // register v_flags_0
  reg [7 : 0] v_flags_0;
  wire [7 : 0] v_flags_0_D_IN;
  wire v_flags_0_EN;

  // register v_hartinfo_reg_0
  reg [31 : 0] v_hartinfo_reg_0;
  wire [31 : 0] v_hartinfo_reg_0_D_IN;
  wire v_hartinfo_reg_0_EN;

  // register v_progbuf_reg_0
  reg [31 : 0] v_progbuf_reg_0;
  wire [31 : 0] v_progbuf_reg_0_D_IN;
  wire v_progbuf_reg_0_EN;

  // register v_progbuf_reg_1
  reg [31 : 0] v_progbuf_reg_1;
  wire [31 : 0] v_progbuf_reg_1_D_IN;
  wire v_progbuf_reg_1_EN;

  // register v_progbuf_reg_10
  reg [31 : 0] v_progbuf_reg_10;
  wire [31 : 0] v_progbuf_reg_10_D_IN;
  wire v_progbuf_reg_10_EN;

  // register v_progbuf_reg_11
  reg [31 : 0] v_progbuf_reg_11;
  wire [31 : 0] v_progbuf_reg_11_D_IN;
  wire v_progbuf_reg_11_EN;

  // register v_progbuf_reg_12
  reg [31 : 0] v_progbuf_reg_12;
  wire [31 : 0] v_progbuf_reg_12_D_IN;
  wire v_progbuf_reg_12_EN;

  // register v_progbuf_reg_13
  reg [31 : 0] v_progbuf_reg_13;
  wire [31 : 0] v_progbuf_reg_13_D_IN;
  wire v_progbuf_reg_13_EN;

  // register v_progbuf_reg_14
  reg [31 : 0] v_progbuf_reg_14;
  wire [31 : 0] v_progbuf_reg_14_D_IN;
  wire v_progbuf_reg_14_EN;

  // register v_progbuf_reg_15
  reg [31 : 0] v_progbuf_reg_15;
  wire [31 : 0] v_progbuf_reg_15_D_IN;
  wire v_progbuf_reg_15_EN;

  // register v_progbuf_reg_2
  reg [31 : 0] v_progbuf_reg_2;
  wire [31 : 0] v_progbuf_reg_2_D_IN;
  wire v_progbuf_reg_2_EN;

  // register v_progbuf_reg_3
  reg [31 : 0] v_progbuf_reg_3;
  wire [31 : 0] v_progbuf_reg_3_D_IN;
  wire v_progbuf_reg_3_EN;

  // register v_progbuf_reg_4
  reg [31 : 0] v_progbuf_reg_4;
  wire [31 : 0] v_progbuf_reg_4_D_IN;
  wire v_progbuf_reg_4_EN;

  // register v_progbuf_reg_5
  reg [31 : 0] v_progbuf_reg_5;
  wire [31 : 0] v_progbuf_reg_5_D_IN;
  wire v_progbuf_reg_5_EN;

  // register v_progbuf_reg_6
  reg [31 : 0] v_progbuf_reg_6;
  wire [31 : 0] v_progbuf_reg_6_D_IN;
  wire v_progbuf_reg_6_EN;

  // register v_progbuf_reg_7
  reg [31 : 0] v_progbuf_reg_7;
  wire [31 : 0] v_progbuf_reg_7_D_IN;
  wire v_progbuf_reg_7_EN;

  // register v_progbuf_reg_8
  reg [31 : 0] v_progbuf_reg_8;
  wire [31 : 0] v_progbuf_reg_8_D_IN;
  wire v_progbuf_reg_8_EN;

  // register v_progbuf_reg_9
  reg [31 : 0] v_progbuf_reg_9;
  wire [31 : 0] v_progbuf_reg_9_D_IN;
  wire v_progbuf_reg_9_EN;

  // register version
  reg [3 : 0] version;
  wire [3 : 0] version_D_IN;
  wire version_EN;

  // ports of submodule dm_reset
  wire dm_reset_RST_OUT;

  // ports of submodule dmactive_reset
  wire dmactive_reset_ASSERT_IN, dmactive_reset_OUT_RST;

  // ports of submodule master_xactor_f_rd_addr
  wire [51 : 0] master_xactor_f_rd_addr_D_IN, master_xactor_f_rd_addr_D_OUT;
  wire master_xactor_f_rd_addr_CLR,
       master_xactor_f_rd_addr_DEQ,
       master_xactor_f_rd_addr_EMPTY_N,
       master_xactor_f_rd_addr_ENQ,
       master_xactor_f_rd_addr_FULL_N;

  // ports of submodule master_xactor_f_rd_data
  wire [70 : 0] master_xactor_f_rd_data_D_IN, master_xactor_f_rd_data_D_OUT;
  wire master_xactor_f_rd_data_CLR,
       master_xactor_f_rd_data_DEQ,
       master_xactor_f_rd_data_EMPTY_N,
       master_xactor_f_rd_data_ENQ,
       master_xactor_f_rd_data_FULL_N;

  // ports of submodule master_xactor_f_wr_addr
  wire [51 : 0] master_xactor_f_wr_addr_D_IN, master_xactor_f_wr_addr_D_OUT;
  wire master_xactor_f_wr_addr_CLR,
       master_xactor_f_wr_addr_DEQ,
       master_xactor_f_wr_addr_EMPTY_N,
       master_xactor_f_wr_addr_ENQ,
       master_xactor_f_wr_addr_FULL_N;

  // ports of submodule master_xactor_f_wr_data
  wire [76 : 0] master_xactor_f_wr_data_D_IN, master_xactor_f_wr_data_D_OUT;
  wire master_xactor_f_wr_data_CLR,
       master_xactor_f_wr_data_DEQ,
       master_xactor_f_wr_data_EMPTY_N,
       master_xactor_f_wr_data_ENQ,
       master_xactor_f_wr_data_FULL_N;

  // ports of submodule master_xactor_f_wr_resp
  wire [5 : 0] master_xactor_f_wr_resp_D_IN, master_xactor_f_wr_resp_D_OUT;
  wire master_xactor_f_wr_resp_CLR,
       master_xactor_f_wr_resp_DEQ,
       master_xactor_f_wr_resp_EMPTY_N,
       master_xactor_f_wr_resp_ENQ,
       master_xactor_f_wr_resp_FULL_N;

  // ports of submodule slave_xactor_f_rd_addr
  wire [51 : 0] slave_xactor_f_rd_addr_D_IN, slave_xactor_f_rd_addr_D_OUT;
  wire slave_xactor_f_rd_addr_CLR,
       slave_xactor_f_rd_addr_DEQ,
       slave_xactor_f_rd_addr_EMPTY_N,
       slave_xactor_f_rd_addr_ENQ,
       slave_xactor_f_rd_addr_FULL_N;

  // ports of submodule slave_xactor_f_rd_data
  wire [70 : 0] slave_xactor_f_rd_data_D_IN, slave_xactor_f_rd_data_D_OUT;
  wire slave_xactor_f_rd_data_CLR,
       slave_xactor_f_rd_data_DEQ,
       slave_xactor_f_rd_data_EMPTY_N,
       slave_xactor_f_rd_data_ENQ,
       slave_xactor_f_rd_data_FULL_N;

  // ports of submodule slave_xactor_f_wr_addr
  wire [51 : 0] slave_xactor_f_wr_addr_D_IN, slave_xactor_f_wr_addr_D_OUT;
  wire slave_xactor_f_wr_addr_CLR,
       slave_xactor_f_wr_addr_DEQ,
       slave_xactor_f_wr_addr_EMPTY_N,
       slave_xactor_f_wr_addr_ENQ,
       slave_xactor_f_wr_addr_FULL_N;

  // ports of submodule slave_xactor_f_wr_data
  wire [76 : 0] slave_xactor_f_wr_data_D_IN, slave_xactor_f_wr_data_D_OUT;
  wire slave_xactor_f_wr_data_CLR,
       slave_xactor_f_wr_data_DEQ,
       slave_xactor_f_wr_data_EMPTY_N,
       slave_xactor_f_wr_data_ENQ,
       slave_xactor_f_wr_data_FULL_N;

  // ports of submodule slave_xactor_f_wr_resp
  wire [5 : 0] slave_xactor_f_wr_resp_D_IN, slave_xactor_f_wr_resp_D_OUT;
  wire slave_xactor_f_wr_resp_CLR,
       slave_xactor_f_wr_resp_DEQ,
       slave_xactor_f_wr_resp_EMPTY_N,
       slave_xactor_f_wr_resp_ENQ,
       slave_xactor_f_wr_resp_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_bus_read,
       CAN_FIRE_RL_rl_bus_write,
       CAN_FIRE_RL_rl_clr_havereset,
       CAN_FIRE_RL_rl_dmactive_reset,
       CAN_FIRE_RL_rl_drive_dmstatus,
       CAN_FIRE_RL_rl_loggers,
       CAN_FIRE_RL_rl_sba_read_response,
       CAN_FIRE_RL_rl_sba_request,
       CAN_FIRE_RL_rl_sba_write_response,
       CAN_FIRE_RL_rl_set_abstract_instructions,
       CAN_FIRE_RL_rl_set_busy,
       CAN_FIRE_RL_rl_set_clr_haltreq,
       CAN_FIRE_RL_rl_set_cmderr,
       CAN_FIRE_RL_rl_set_halted,
       CAN_FIRE_RL_rl_set_haltedstatus,
       CAN_FIRE_RL_rl_set_hartreset,
       CAN_FIRE_RL_rl_set_resumereq_resumeack,
       CAN_FIRE_RL_rl_upd_flags,
       CAN_FIRE_debug_master_m_arready,
       CAN_FIRE_debug_master_m_awready,
       CAN_FIRE_debug_master_m_bvalid,
       CAN_FIRE_debug_master_m_rvalid,
       CAN_FIRE_debug_master_m_wready,
       CAN_FIRE_debug_slave_m_arvalid,
       CAN_FIRE_debug_slave_m_awvalid,
       CAN_FIRE_debug_slave_m_bready,
       CAN_FIRE_debug_slave_m_rready,
       CAN_FIRE_debug_slave_m_wvalid,
       CAN_FIRE_dtm_access_getResponse_get,
       CAN_FIRE_dtm_access_putCommand_put,
       CAN_FIRE_hartside_ma_debugenable,
       CAN_FIRE_hartside_ma_havereset,
       WILL_FIRE_RL_rl_bus_read,
       WILL_FIRE_RL_rl_bus_write,
       WILL_FIRE_RL_rl_clr_havereset,
       WILL_FIRE_RL_rl_dmactive_reset,
       WILL_FIRE_RL_rl_drive_dmstatus,
       WILL_FIRE_RL_rl_loggers,
       WILL_FIRE_RL_rl_sba_read_response,
       WILL_FIRE_RL_rl_sba_request,
       WILL_FIRE_RL_rl_sba_write_response,
       WILL_FIRE_RL_rl_set_abstract_instructions,
       WILL_FIRE_RL_rl_set_busy,
       WILL_FIRE_RL_rl_set_clr_haltreq,
       WILL_FIRE_RL_rl_set_cmderr,
       WILL_FIRE_RL_rl_set_halted,
       WILL_FIRE_RL_rl_set_haltedstatus,
       WILL_FIRE_RL_rl_set_hartreset,
       WILL_FIRE_RL_rl_set_resumereq_resumeack,
       WILL_FIRE_RL_rl_upd_flags,
       WILL_FIRE_debug_master_m_arready,
       WILL_FIRE_debug_master_m_awready,
       WILL_FIRE_debug_master_m_bvalid,
       WILL_FIRE_debug_master_m_rvalid,
       WILL_FIRE_debug_master_m_wready,
       WILL_FIRE_debug_slave_m_arvalid,
       WILL_FIRE_debug_slave_m_awvalid,
       WILL_FIRE_debug_slave_m_bready,
       WILL_FIRE_debug_slave_m_rready,
       WILL_FIRE_debug_slave_m_wvalid,
       WILL_FIRE_dtm_access_getResponse_get,
       WILL_FIRE_dtm_access_putCommand_put,
       WILL_FIRE_hartside_ma_debugenable,
       WILL_FIRE_hartside_ma_havereset;

  // inputs to muxes for submodule ports
  reg [2 : 0] MUX_sberr_write_1__VAL_2, MUX_sberr_write_1__VAL_3;
  wire [34 : 0] MUX_dmi_response_write_1__VAL_1,
		MUX_dmi_response_write_1__VAL_2;
  wire [31 : 0] MUX_sbaddress0_write_1__VAL_2,
		MUX_v_data_reg_0_write_1__VAL_1,
		MUX_v_data_reg_1_write_1__VAL_1,
		MUX_v_data_reg_10_write_1__VAL_1,
		MUX_v_data_reg_11_write_1__VAL_1,
		MUX_v_data_reg_2_write_1__VAL_1,
		MUX_v_data_reg_3_write_1__VAL_1,
		MUX_v_data_reg_4_write_1__VAL_1,
		MUX_v_data_reg_5_write_1__VAL_1,
		MUX_v_data_reg_6_write_1__VAL_1,
		MUX_v_data_reg_7_write_1__VAL_1,
		MUX_v_data_reg_8_write_1__VAL_1,
		MUX_v_data_reg_9_write_1__VAL_1,
		MUX_v_progbuf_reg_0_write_1__VAL_1,
		MUX_v_progbuf_reg_1_write_1__VAL_1,
		MUX_v_progbuf_reg_10_write_1__VAL_1,
		MUX_v_progbuf_reg_11_write_1__VAL_1,
		MUX_v_progbuf_reg_12_write_1__VAL_1,
		MUX_v_progbuf_reg_13_write_1__VAL_1,
		MUX_v_progbuf_reg_14_write_1__VAL_1,
		MUX_v_progbuf_reg_15_write_1__VAL_1,
		MUX_v_progbuf_reg_2_write_1__VAL_1,
		MUX_v_progbuf_reg_3_write_1__VAL_1,
		MUX_v_progbuf_reg_4_write_1__VAL_1,
		MUX_v_progbuf_reg_5_write_1__VAL_1,
		MUX_v_progbuf_reg_6_write_1__VAL_1,
		MUX_v_progbuf_reg_7_write_1__VAL_1,
		MUX_v_progbuf_reg_8_write_1__VAL_1,
		MUX_v_progbuf_reg_9_write_1__VAL_1;
  wire [23 : 0] MUX_control_write_1__VAL_1;
  wire [2 : 0] MUX_sberr_write_1__VAL_1, MUX_sberr_write_1__VAL_4;
  wire MUX_control_write_1__SEL_2,
       MUX_rg_sbread_en_write_1__SEL_1,
       MUX_rg_sbread_en_write_1__SEL_2,
       MUX_rg_sbwrite_en_write_1__SEL_1,
       MUX_rg_sbwrite_en_write_1__SEL_2,
       MUX_sbaddress0_write_1__SEL_1,
       MUX_sbaddress0_write_1__SEL_2,
       MUX_sbaddress0_write_1__SEL_3,
       MUX_sbbusy_write_1__SEL_1,
       MUX_sbbusy_write_1__SEL_4,
       MUX_sbdata0_write_1__SEL_2,
       MUX_sbdata1_write_1__SEL_1,
       MUX_sberr_write_1__SEL_1,
       MUX_v_data_reg_0_write_1__SEL_1,
       MUX_v_data_reg_1_write_1__SEL_1,
       MUX_v_data_reg_10_write_1__SEL_1,
       MUX_v_data_reg_11_write_1__SEL_1,
       MUX_v_data_reg_2_write_1__SEL_1,
       MUX_v_data_reg_3_write_1__SEL_1,
       MUX_v_data_reg_4_write_1__SEL_1,
       MUX_v_data_reg_5_write_1__SEL_1,
       MUX_v_data_reg_6_write_1__SEL_1,
       MUX_v_data_reg_7_write_1__SEL_1,
       MUX_v_data_reg_8_write_1__SEL_1,
       MUX_v_data_reg_9_write_1__SEL_1,
       MUX_v_progbuf_reg_0_write_1__SEL_1,
       MUX_v_progbuf_reg_1_write_1__SEL_1,
       MUX_v_progbuf_reg_10_write_1__SEL_1,
       MUX_v_progbuf_reg_11_write_1__SEL_1,
       MUX_v_progbuf_reg_12_write_1__SEL_1,
       MUX_v_progbuf_reg_13_write_1__SEL_1,
       MUX_v_progbuf_reg_14_write_1__SEL_1,
       MUX_v_progbuf_reg_15_write_1__SEL_1,
       MUX_v_progbuf_reg_2_write_1__SEL_1,
       MUX_v_progbuf_reg_3_write_1__SEL_1,
       MUX_v_progbuf_reg_4_write_1__SEL_1,
       MUX_v_progbuf_reg_5_write_1__SEL_1,
       MUX_v_progbuf_reg_6_write_1__SEL_1,
       MUX_v_progbuf_reg_7_write_1__SEL_1,
       MUX_v_progbuf_reg_8_write_1__SEL_1,
       MUX_v_progbuf_reg_9_write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] r_rdata__h18132, wr_data_request_wdata__h11770;
  reg [33 : 0] CASE_dtm_access_putCommand_put_BITS_1_TO_0_1_y_ETC__q6;
  reg [31 : 0] SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377,
	       SEL_ARR_v_abstract_reg_0_14_v_abstract_reg_1_1_ETC___d322,
	       SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d347,
	       SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d425,
	       SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d492,
	       SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d371,
	       SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560,
	       SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614,
	       spliced_bits__h16060,
	       spliced_bits__h19483,
	       v__h94615,
	       v__h94869,
	       y_avValue_fst__h95294;
  reg [7 : 0] wr_data_request_wstrb__h11771;
  wire [63 : 0] data___1__h18439,
		data__h14242,
		v__h15528,
		v__h16021,
		v__h16503,
		writedata__h11814,
		writedata__h12844,
		writedata__h13397,
		writedata__h13690,
		y_avValue_fst__h18034,
		y_avValue_fst__h18046,
		y_avValue_fst__h18058,
		y_avValue_fst__h18072,
		y_avValue_fst__h18086;
  wire [31 : 0] dmi_response_data___2__h93973,
		dmi_response_data___2__h93979,
		dmi_response_data___2__h93985,
		dmi_response_data___2__h94052,
		dmi_response_data___2__h94064,
		dmi_response_data___2__h95409,
		dmi_response_data___2__h95437,
		dmi_response_data___2__h95444,
		v__h94149,
		v__h94368,
		x__h20569,
		x__h34806,
		x__h49091,
		x__h68073,
		y_avValue_fst__h95122,
		y_avValue_fst__h95188;
  wire [30 : 0] r1__read__h88259, r1__read__h91137;
  wire [29 : 0] r1__read__h88271, r1__read__h91149;
  wire [28 : 0] r1__read__h88283, r1__read__h91161;
  wire [27 : 0] r1__read__h88295,
		r1__read__h88963,
		r1__read__h89977,
		r1__read__h91173;
  wire [26 : 0] r1__read__h88307, r1__read__h88975, r1__read__h91185;
  wire [25 : 0] r1__read__h88319, r1__read__h88987;
  wire [24 : 0] r1__read__h88999;
  wire [23 : 0] r1__read__h89011, r1__read__h89989, x_wget__h5576;
  wire [22 : 0] r1__read__h89023;
  wire [21 : 0] r1__read__h89035;
  wire [20 : 0] r1__read__h89047, r1__read__h90001;
  wire [19 : 0] r1__read__h89059,
		r1__read__h90013,
		r1__read__h90873,
		r1__read__h91197;
  wire [18 : 0] r1__read__h89071;
  wire [17 : 0] r1__read__h89083;
  wire [16 : 0] r1__read__h89095, r1__read__h91209;
  wire [15 : 0] access_cntrl___1_regno__h9716,
		r1__read__h88331,
		r1__read__h89107,
		r1__read__h91221;
  wire [14 : 0] r1__read__h88343, r1__read__h89119, r1__read__h91233;
  wire [13 : 0] r1__read__h89131;
  wire [12 : 0] r1__read__h89143;
  wire [11 : 0] r1__read__h89155,
		r1__read__h91245,
		slave_xactor_f_rd_addrD_OUT_BITS_31_TO_20_MIN_ETC__q1,
		slave_xactor_f_rd_addrD_OUT_BITS_31_TO_20_MIN_ETC__q5,
		slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2,
		slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3,
		x5867_MINUS_8__q4,
		x__h15867,
		x__h15869,
		x__h15871;
  wire [10 : 0] r1__read__h91257;
  wire [9 : 0] r1__read__h89167, r1__read__h91269;
  wire [8 : 0] r1__read__h89179;
  wire [7 : 0] r1__read__h89191,
	       writestrb__h11815,
	       writestrb__h12845,
	       writestrb__h13398,
	       writestrb__h13691,
	       x__h21228,
	       x__h21602,
	       x__h21739,
	       x__h21876,
	       x__h35465,
	       x__h35844,
	       x__h35981,
	       x__h36118,
	       x__read__h5431,
	       y__h21229,
	       y__h21230,
	       y__h21512,
	       y__h21603,
	       y__h21604,
	       y__h21663,
	       y__h21740,
	       y__h21741,
	       y__h21800,
	       y__h21877,
	       y__h21878,
	       y__h21937,
	       y__h35466,
	       y__h35467,
	       y__h35752,
	       y__h35845,
	       y__h35846,
	       y__h35905,
	       y__h35982,
	       y__h35983,
	       y__h36042,
	       y__h36119,
	       y__h36120,
	       y__h36179,
	       y__h49826,
	       y__h50192,
	       y__h50329,
	       y__h50466,
	       y__h68808,
	       y__h69191,
	       y__h69328,
	       y__h69465;
  wire [6 : 0] x__h92862, x__h93351;
  wire [5 : 0] r1__read__h88355, x__h14278;
  wire [4 : 0] r1__read__h88367;
  wire [3 : 0] increment__h14782,
	       r1__read__h88379,
	       x__h16445,
	       x__h19859,
	       x__h34773,
	       x__h68053;
  wire [2 : 0] IF_wr_errnotsupported_whas__9_AND_wr_errnotsup_ETC___d78,
	       r1__read__h88391,
	       x__h91558,
	       x__h9316,
	       y__h9368;
  wire [1 : 0] v__h87899, y_avValue_snd__h95295;
  wire NOT_dtm_access_putCommand_put_BITS_40_TO_34_05_ETC___d769,
       NOT_dtm_access_putCommand_put_BITS_40_TO_34_05_ETC___d807,
       NOT_dtm_access_putCommand_put_BITS_40_TO_34_05_ETC___d832,
       NOT_dtm_access_putCommand_put_BITS_40_TO_34_05_ETC___d842,
       NOT_sbaccess_70_EQ_1_73_74_OR_NOT_sbaddress0_7_ETC___d190,
       NOT_sbbusy_67_70_AND_sberr_16_EQ_0_17_AND_NOT__ETC___d921,
       NOT_sbbusy_67_70_AND_sberr_16_EQ_0_17_AND_NOT__ETC___d938,
       NOT_slave_xactor_f_rd_addr_first__77_BITS_31_T_ETC___d295,
       NOT_slave_xactor_f_rd_addr_first__77_BITS_31_T_ETC___d309,
       NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418,
       NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d483,
       NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d555,
       NOT_wr_cmdtype_wren_whas__0_6_OR_NOT_wr_cmdtyp_ETC___d105,
       _dfoo1,
       _dfoo11,
       _dfoo13,
       _dfoo15,
       _dfoo17,
       _dfoo19,
       _dfoo21,
       _dfoo23,
       _dfoo25,
       _dfoo27,
       _dfoo29,
       _dfoo3,
       _dfoo31,
       _dfoo33,
       _dfoo35,
       _dfoo37,
       _dfoo39,
       _dfoo41,
       _dfoo43,
       _dfoo45,
       _dfoo47,
       _dfoo49,
       _dfoo5,
       _dfoo51,
       _dfoo53,
       _dfoo55,
       _dfoo7,
       _dfoo9,
       _theResult_____1__h8833,
       busy_3_AND_NOT_v_flags_0_4_BIT_0_5_6_7_AND_wr__ETC___d89,
       cmderr_9_EQ_0_12_AND_NOT_busy_3_14_15_AND_NOT__ETC___d992,
       data__h89784,
       din__h95410,
       dtm_access_putCommand_put_BITS_17_TO_2_18_ULE__ETC___d821,
       dtm_access_putCommand_put_BITS_17_TO_2_18_ULT__ETC___d819,
       dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1002,
       dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1005,
       dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1016,
       dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1036,
       dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1078,
       dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d935,
       dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d941,
       dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d943,
       dtm_access_putCommand_put_BITS_40_TO_34_05_EQ__ETC___d1265,
       dtm_access_putCommand_put_BITS_40_TO_34_05_EQ__ETC___d826,
       dtm_access_putCommand_put_BITS_40_TO_34_05_EQ__ETC___d852,
       dtm_access_putCommand_put_BITS_40_TO_34_05_EQ__ETC___d892,
       dtm_access_putCommand_put_BITS_40_TO_34_05_EQ__ETC___d999,
       dtm_access_putCommand_put_BITS_40_TO_34_05_ULE_16___d762,
       dtm_access_putCommand_put_BITS_40_TO_34_05_ULT_ETC___d760,
       lv_resumereq___1__h8889,
       sbaccess_70_EQ_1_73_AND_sbaddress0_75_BIT_0_76_ETC___d233,
       slave_xactor_f_rd_addr_first__77_BITS_31_TO_20_ETC___d283,
       slave_xactor_f_rd_addr_first__77_BITS_31_TO_20_ETC___d294,
       slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d412,
       slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d414,
       slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d559,
       slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d576,
       slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d578,
       slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d580,
       slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d582,
       slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d584,
       slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d586,
       slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d588,
       slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d590,
       slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d592,
       slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d594,
       slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d596,
       slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d598,
       slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d600,
       slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d602,
       slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d604,
       slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d608,
       v_flags_0_4_BIT_0_5_OR_NOT_wr_harthalting_id_w_ETC___d117,
       x__h10014,
       x__h8766,
       x__h8776,
       x__h8815,
       x__h8954,
       x__h89823,
       x__h91341,
       x__h91370,
       x_wget__h3890,
       x_wget__h4202,
       y__h11225,
       y__h8805,
       y__h8814,
       y__h89824,
       y__h89826;

  // output resets
  assign RST_N_ifc_dm_reset = dm_reset_RST_OUT ;

  // action method debug_slave_m_awvalid
  assign CAN_FIRE_debug_slave_m_awvalid = 1'd1 ;
  assign WILL_FIRE_debug_slave_m_awvalid = 1'd1 ;

  // value method debug_slave_m_awready
  assign debug_slave_AWREADY = slave_xactor_f_wr_addr_FULL_N ;

  // action method debug_slave_m_wvalid
  assign CAN_FIRE_debug_slave_m_wvalid = 1'd1 ;
  assign WILL_FIRE_debug_slave_m_wvalid = 1'd1 ;

  // value method debug_slave_m_wready
  assign debug_slave_WREADY = slave_xactor_f_wr_data_FULL_N ;

  // value method debug_slave_m_bvalid
  assign debug_slave_BVALID = slave_xactor_f_wr_resp_EMPTY_N ;

  // value method debug_slave_m_bresp
  assign debug_slave_BRESP = slave_xactor_f_wr_resp_D_OUT[5:4] ;

  // value method debug_slave_m_bid
  assign debug_slave_BID = slave_xactor_f_wr_resp_D_OUT[3:0] ;

  // action method debug_slave_m_bready
  assign CAN_FIRE_debug_slave_m_bready = 1'd1 ;
  assign WILL_FIRE_debug_slave_m_bready = 1'd1 ;

  // action method debug_slave_m_arvalid
  assign CAN_FIRE_debug_slave_m_arvalid = 1'd1 ;
  assign WILL_FIRE_debug_slave_m_arvalid = 1'd1 ;

  // value method debug_slave_m_arready
  assign debug_slave_ARREADY = slave_xactor_f_rd_addr_FULL_N ;

  // value method debug_slave_m_rvalid
  assign debug_slave_RVALID = slave_xactor_f_rd_data_EMPTY_N ;

  // value method debug_slave_m_rresp
  assign debug_slave_RRESP = slave_xactor_f_rd_data_D_OUT[70:69] ;

  // value method debug_slave_m_rdata
  assign debug_slave_RDATA = slave_xactor_f_rd_data_D_OUT[68:5] ;

  // value method debug_slave_m_rlast
  assign debug_slave_RLAST = slave_xactor_f_rd_data_D_OUT[4] ;

  // value method debug_slave_m_rid
  assign debug_slave_RID = slave_xactor_f_rd_data_D_OUT[3:0] ;

  // action method debug_slave_m_rready
  assign CAN_FIRE_debug_slave_m_rready = 1'd1 ;
  assign WILL_FIRE_debug_slave_m_rready = 1'd1 ;

  // value method debug_master_m_awvalid
  assign debug_master_AWVALID = master_xactor_f_wr_addr_EMPTY_N ;

  // value method debug_master_m_awaddr
  assign debug_master_AWADDR = master_xactor_f_wr_addr_D_OUT[51:20] ;

  // value method debug_master_m_awprot
  assign debug_master_AWPROT = master_xactor_f_wr_addr_D_OUT[19:17] ;

  // value method debug_master_m_awlen
  assign debug_master_AWLEN = master_xactor_f_wr_addr_D_OUT[16:9] ;

  // value method debug_master_m_awsize
  assign debug_master_AWSIZE = master_xactor_f_wr_addr_D_OUT[8:6] ;

  // value method debug_master_m_awburst
  assign debug_master_AWBURST = master_xactor_f_wr_addr_D_OUT[5:4] ;

  // value method debug_master_m_awid
  assign debug_master_AWID = master_xactor_f_wr_addr_D_OUT[3:0] ;

  // action method debug_master_m_awready
  assign CAN_FIRE_debug_master_m_awready = 1'd1 ;
  assign WILL_FIRE_debug_master_m_awready = 1'd1 ;

  // value method debug_master_m_wvalid
  assign debug_master_WVALID = master_xactor_f_wr_data_EMPTY_N ;

  // value method debug_master_m_wdata
  assign debug_master_WDATA = master_xactor_f_wr_data_D_OUT[76:13] ;

  // value method debug_master_m_wstrb
  assign debug_master_WSTRB = master_xactor_f_wr_data_D_OUT[12:5] ;

  // value method debug_master_m_wlast
  assign debug_master_WLAST = master_xactor_f_wr_data_D_OUT[0] ;

  // value method debug_master_m_wid
  assign debug_master_WID = master_xactor_f_wr_data_D_OUT[4:1] ;

  // action method debug_master_m_wready
  assign CAN_FIRE_debug_master_m_wready = 1'd1 ;
  assign WILL_FIRE_debug_master_m_wready = 1'd1 ;

  // action method debug_master_m_bvalid
  assign CAN_FIRE_debug_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_debug_master_m_bvalid = 1'd1 ;

  // value method debug_master_m_bready
  assign debug_master_BREADY = master_xactor_f_wr_resp_FULL_N ;

  // value method debug_master_m_arvalid
  assign debug_master_ARVALID = master_xactor_f_rd_addr_EMPTY_N ;

  // value method debug_master_m_araddr
  assign debug_master_ARADDR = master_xactor_f_rd_addr_D_OUT[51:20] ;

  // value method debug_master_m_arprot
  assign debug_master_ARPROT = master_xactor_f_rd_addr_D_OUT[19:17] ;

  // value method debug_master_m_arlen
  assign debug_master_ARLEN = master_xactor_f_rd_addr_D_OUT[13:6] ;

  // value method debug_master_m_arsize
  assign debug_master_ARSIZE = master_xactor_f_rd_addr_D_OUT[16:14] ;

  // value method debug_master_m_arburst
  assign debug_master_ARBURST = master_xactor_f_rd_addr_D_OUT[5:4] ;

  // value method debug_master_m_arid
  assign debug_master_ARID = master_xactor_f_rd_addr_D_OUT[3:0] ;

  // action method debug_master_m_arready
  assign CAN_FIRE_debug_master_m_arready = 1'd1 ;
  assign WILL_FIRE_debug_master_m_arready = 1'd1 ;

  // action method debug_master_m_rvalid
  assign CAN_FIRE_debug_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_debug_master_m_rvalid = 1'd1 ;

  // value method debug_master_m_rready
  assign debug_master_RREADY = master_xactor_f_rd_data_FULL_N ;

  // action method dtm_access_putCommand_put
  assign RDY_dtm_access_putCommand_put = !dmi_response[34] ;
  assign CAN_FIRE_dtm_access_putCommand_put = !dmi_response[34] ;
  assign WILL_FIRE_dtm_access_putCommand_put = EN_dtm_access_putCommand_put ;

  // actionvalue method dtm_access_getResponse_get
  assign dtm_access_getResponse_get = dmi_response[33:0] ;
  assign RDY_dtm_access_getResponse_get = dmi_response[34] ;
  assign CAN_FIRE_dtm_access_getResponse_get = dmi_response[34] ;
  assign WILL_FIRE_dtm_access_getResponse_get =
	     EN_dtm_access_getResponse_get ;

  // value method mv_ndm_reset
  assign mv_ndm_reset = ndmreset ;
  assign RDY_mv_ndm_reset = 1'd1 ;

  // value method hartside_mv_hartmask
  assign hartside_mv_hartmask = 1'd1 ;
  assign RDY_hartside_mv_hartmask = 1'd1 ;

  // value method hartside_mv_hartreset
  assign hartside_mv_hartreset = haresetreq ;
  assign RDY_hartside_mv_hartreset = 1'd1 ;

  // value method hartside_mv_harthaltreq
  assign hartside_mv_harthaltreq = hahaltreq ;
  assign RDY_hartside_mv_harthaltreq = 1'd1 ;

  // value method hartside_mv_resetack
  assign hartside_mv_resetack = wr_ackhavereset_wren_whas ;
  assign RDY_hartside_mv_resetack = 1'd1 ;

  // action method hartside_ma_havereset
  assign RDY_hartside_ma_havereset = 1'd1 ;
  assign CAN_FIRE_hartside_ma_havereset = 1'd1 ;
  assign WILL_FIRE_hartside_ma_havereset = EN_hartside_ma_havereset ;

  // action method hartside_ma_debugenable
  assign RDY_hartside_ma_debugenable = 1'd1 ;
  assign CAN_FIRE_hartside_ma_debugenable = 1'd1 ;
  assign WILL_FIRE_hartside_ma_debugenable = EN_hartside_ma_debugenable ;

  // value method hartside_mv_hasel
  assign hartside_mv_hasel = hasel ;
  assign RDY_hartside_mv_hasel = 1'd1 ;

  // value method hartside_mv_hartsel
  assign hartside_mv_hartsel = 10'd0 ;
  assign RDY_hartside_mv_hartsel = 1'd1 ;

  // submodule dm_reset
  ResetEither dm_reset(.A_RST(dmactive_reset_OUT_RST),
		       .B_RST(RST_N),
		       .RST_OUT(dm_reset_RST_OUT));

  // submodule dmactive_reset
  MakeReset0 #(.init(1'd1)) dmactive_reset(.CLK(CLK),
					   .RST(RST_N),
					   .ASSERT_IN(dmactive_reset_ASSERT_IN),
					   .ASSERT_OUT(),
					   .OUT_RST(dmactive_reset_OUT_RST));

  // submodule master_xactor_f_rd_addr
  FIFO2 #(.width(32'd52),
	  .guarded(1'd1)) master_xactor_f_rd_addr(.RST(dm_reset_RST_OUT),
						  .CLK(CLK),
						  .D_IN(master_xactor_f_rd_addr_D_IN),
						  .ENQ(master_xactor_f_rd_addr_ENQ),
						  .DEQ(master_xactor_f_rd_addr_DEQ),
						  .CLR(master_xactor_f_rd_addr_CLR),
						  .D_OUT(master_xactor_f_rd_addr_D_OUT),
						  .FULL_N(master_xactor_f_rd_addr_FULL_N),
						  .EMPTY_N(master_xactor_f_rd_addr_EMPTY_N));

  // submodule master_xactor_f_rd_data
  FIFO2 #(.width(32'd71),
	  .guarded(1'd1)) master_xactor_f_rd_data(.RST(dm_reset_RST_OUT),
						  .CLK(CLK),
						  .D_IN(master_xactor_f_rd_data_D_IN),
						  .ENQ(master_xactor_f_rd_data_ENQ),
						  .DEQ(master_xactor_f_rd_data_DEQ),
						  .CLR(master_xactor_f_rd_data_CLR),
						  .D_OUT(master_xactor_f_rd_data_D_OUT),
						  .FULL_N(master_xactor_f_rd_data_FULL_N),
						  .EMPTY_N(master_xactor_f_rd_data_EMPTY_N));

  // submodule master_xactor_f_wr_addr
  FIFO2 #(.width(32'd52),
	  .guarded(1'd1)) master_xactor_f_wr_addr(.RST(dm_reset_RST_OUT),
						  .CLK(CLK),
						  .D_IN(master_xactor_f_wr_addr_D_IN),
						  .ENQ(master_xactor_f_wr_addr_ENQ),
						  .DEQ(master_xactor_f_wr_addr_DEQ),
						  .CLR(master_xactor_f_wr_addr_CLR),
						  .D_OUT(master_xactor_f_wr_addr_D_OUT),
						  .FULL_N(master_xactor_f_wr_addr_FULL_N),
						  .EMPTY_N(master_xactor_f_wr_addr_EMPTY_N));

  // submodule master_xactor_f_wr_data
  FIFO2 #(.width(32'd77),
	  .guarded(1'd1)) master_xactor_f_wr_data(.RST(dm_reset_RST_OUT),
						  .CLK(CLK),
						  .D_IN(master_xactor_f_wr_data_D_IN),
						  .ENQ(master_xactor_f_wr_data_ENQ),
						  .DEQ(master_xactor_f_wr_data_DEQ),
						  .CLR(master_xactor_f_wr_data_CLR),
						  .D_OUT(master_xactor_f_wr_data_D_OUT),
						  .FULL_N(master_xactor_f_wr_data_FULL_N),
						  .EMPTY_N(master_xactor_f_wr_data_EMPTY_N));

  // submodule master_xactor_f_wr_resp
  FIFO2 #(.width(32'd6),
	  .guarded(1'd1)) master_xactor_f_wr_resp(.RST(dm_reset_RST_OUT),
						  .CLK(CLK),
						  .D_IN(master_xactor_f_wr_resp_D_IN),
						  .ENQ(master_xactor_f_wr_resp_ENQ),
						  .DEQ(master_xactor_f_wr_resp_DEQ),
						  .CLR(master_xactor_f_wr_resp_CLR),
						  .D_OUT(master_xactor_f_wr_resp_D_OUT),
						  .FULL_N(master_xactor_f_wr_resp_FULL_N),
						  .EMPTY_N(master_xactor_f_wr_resp_EMPTY_N));

  // submodule slave_xactor_f_rd_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) slave_xactor_f_rd_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(slave_xactor_f_rd_addr_D_IN),
								 .ENQ(slave_xactor_f_rd_addr_ENQ),
								 .DEQ(slave_xactor_f_rd_addr_DEQ),
								 .CLR(slave_xactor_f_rd_addr_CLR),
								 .D_OUT(slave_xactor_f_rd_addr_D_OUT),
								 .FULL_N(slave_xactor_f_rd_addr_FULL_N),
								 .EMPTY_N(slave_xactor_f_rd_addr_EMPTY_N));

  // submodule slave_xactor_f_rd_data
  FIFO2 #(.width(32'd71), .guarded(1'd1)) slave_xactor_f_rd_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(slave_xactor_f_rd_data_D_IN),
								 .ENQ(slave_xactor_f_rd_data_ENQ),
								 .DEQ(slave_xactor_f_rd_data_DEQ),
								 .CLR(slave_xactor_f_rd_data_CLR),
								 .D_OUT(slave_xactor_f_rd_data_D_OUT),
								 .FULL_N(slave_xactor_f_rd_data_FULL_N),
								 .EMPTY_N(slave_xactor_f_rd_data_EMPTY_N));

  // submodule slave_xactor_f_wr_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) slave_xactor_f_wr_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(slave_xactor_f_wr_addr_D_IN),
								 .ENQ(slave_xactor_f_wr_addr_ENQ),
								 .DEQ(slave_xactor_f_wr_addr_DEQ),
								 .CLR(slave_xactor_f_wr_addr_CLR),
								 .D_OUT(slave_xactor_f_wr_addr_D_OUT),
								 .FULL_N(slave_xactor_f_wr_addr_FULL_N),
								 .EMPTY_N(slave_xactor_f_wr_addr_EMPTY_N));

  // submodule slave_xactor_f_wr_data
  FIFO2 #(.width(32'd77), .guarded(1'd1)) slave_xactor_f_wr_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(slave_xactor_f_wr_data_D_IN),
								 .ENQ(slave_xactor_f_wr_data_ENQ),
								 .DEQ(slave_xactor_f_wr_data_DEQ),
								 .CLR(slave_xactor_f_wr_data_CLR),
								 .D_OUT(slave_xactor_f_wr_data_D_OUT),
								 .FULL_N(slave_xactor_f_wr_data_FULL_N),
								 .EMPTY_N(slave_xactor_f_wr_data_EMPTY_N));

  // submodule slave_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(1'd1)) slave_xactor_f_wr_resp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(slave_xactor_f_wr_resp_D_IN),
								.ENQ(slave_xactor_f_wr_resp_ENQ),
								.DEQ(slave_xactor_f_wr_resp_DEQ),
								.CLR(slave_xactor_f_wr_resp_CLR),
								.D_OUT(slave_xactor_f_wr_resp_D_OUT),
								.FULL_N(slave_xactor_f_wr_resp_FULL_N),
								.EMPTY_N(slave_xactor_f_wr_resp_EMPTY_N));

  // rule RL_rl_loggers
  assign CAN_FIRE_RL_rl_loggers = !rg_init ;
  assign WILL_FIRE_RL_rl_loggers = CAN_FIRE_RL_rl_loggers ;

  // rule RL_rl_set_haltedstatus
  assign CAN_FIRE_RL_rl_set_haltedstatus = 1'd1 ;
  assign WILL_FIRE_RL_rl_set_haltedstatus = 1'd1 ;

  // rule RL_rl_dmactive_reset
  assign CAN_FIRE_RL_rl_dmactive_reset = !dmactive ;
  assign WILL_FIRE_RL_rl_dmactive_reset = CAN_FIRE_RL_rl_dmactive_reset ;

  // rule RL_rl_set_hartreset
  assign CAN_FIRE_RL_rl_set_hartreset = 1'd1 ;
  assign WILL_FIRE_RL_rl_set_hartreset = 1'd1 ;

  // rule RL_rl_sba_request
  assign CAN_FIRE_RL_rl_sba_request =
	     master_xactor_f_rd_addr_FULL_N &&
	     master_xactor_f_wr_addr_FULL_N &&
	     master_xactor_f_wr_data_FULL_N &&
	     (rg_sbread_en || rg_sbwrite_en) &&
	     sbbusy ;
  assign WILL_FIRE_RL_rl_sba_request = CAN_FIRE_RL_rl_sba_request ;

  // rule RL_rl_sba_read_response
  assign CAN_FIRE_RL_rl_sba_read_response =
	     master_xactor_f_rd_data_EMPTY_N && sbbusy && !rg_sbwrite_en &&
	     !rg_sbread_en ;
  assign WILL_FIRE_RL_rl_sba_read_response =
	     CAN_FIRE_RL_rl_sba_read_response ;

  // rule RL_rl_sba_write_response
  assign CAN_FIRE_RL_rl_sba_write_response =
	     master_xactor_f_wr_resp_EMPTY_N && sbbusy && !rg_sbwrite_en &&
	     !rg_sbread_en ;
  assign WILL_FIRE_RL_rl_sba_write_response =
	     CAN_FIRE_RL_rl_sba_write_response ;

  // rule RL_rl_bus_read
  assign CAN_FIRE_RL_rl_bus_read =
	     slave_xactor_f_rd_addr_EMPTY_N && slave_xactor_f_rd_data_FULL_N ;
  assign WILL_FIRE_RL_rl_bus_read = CAN_FIRE_RL_rl_bus_read ;

  // rule RL_rl_set_clr_haltreq
  assign CAN_FIRE_RL_rl_set_clr_haltreq = wr_haltreq_wren_whas ;
  assign WILL_FIRE_RL_rl_set_clr_haltreq = wr_haltreq_wren_whas ;

  // rule RL_rl_set_abstract_instructions
  assign CAN_FIRE_RL_rl_set_abstract_instructions =
	     wr_cmdtype_wren_whas && x__read__h5431 == 8'd0 ;
  assign WILL_FIRE_RL_rl_set_abstract_instructions =
	     CAN_FIRE_RL_rl_set_abstract_instructions ;

  // rule RL_rl_drive_dmstatus
  assign CAN_FIRE_RL_rl_drive_dmstatus = EN_hartside_ma_debugenable ;
  assign WILL_FIRE_RL_rl_drive_dmstatus = EN_hartside_ma_debugenable ;

  // rule RL_rl_clr_havereset
  assign CAN_FIRE_RL_rl_clr_havereset = wr_ackhavereset_wren_whas ;
  assign WILL_FIRE_RL_rl_clr_havereset = wr_ackhavereset_wren_whas ;

  // rule RL_rl_bus_write
  assign CAN_FIRE_RL_rl_bus_write =
	     slave_xactor_f_wr_addr_EMPTY_N &&
	     slave_xactor_f_wr_data_EMPTY_N &&
	     slave_xactor_f_wr_resp_FULL_N ;
  assign WILL_FIRE_RL_rl_bus_write = CAN_FIRE_RL_rl_bus_write ;

  // rule RL_rl_set_halted
  assign CAN_FIRE_RL_rl_set_halted = 1'd1 ;
  assign WILL_FIRE_RL_rl_set_halted = 1'd1 ;

  // rule RL_rl_set_busy
  assign CAN_FIRE_RL_rl_set_busy = 1'd1 ;
  assign WILL_FIRE_RL_rl_set_busy = 1'd1 ;

  // rule RL_rl_set_cmderr
  assign CAN_FIRE_RL_rl_set_cmderr = 1'd1 ;
  assign WILL_FIRE_RL_rl_set_cmderr = 1'd1 ;

  // rule RL_rl_upd_flags
  assign CAN_FIRE_RL_rl_upd_flags = 1'd1 ;
  assign WILL_FIRE_RL_rl_upd_flags = 1'd1 ;

  // rule RL_rl_set_resumereq_resumeack
  assign CAN_FIRE_RL_rl_set_resumereq_resumeack = 1'd1 ;
  assign WILL_FIRE_RL_rl_set_resumereq_resumeack = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_control_write_1__SEL_2 =
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     dtm_access_putCommand_put_BITS_40_TO_34_05_EQ__ETC___d826 ;
  assign MUX_rg_sbread_en_write_1__SEL_1 =
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d943 ;
  assign MUX_rg_sbread_en_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_sba_request && sbaccess != 3'd4 &&
	     NOT_sbaccess_70_EQ_1_73_74_OR_NOT_sbaddress0_7_ETC___d190 &&
	     rg_sbread_en ;
  assign MUX_rg_sbwrite_en_write_1__SEL_1 =
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1016 ;
  assign MUX_rg_sbwrite_en_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_sba_request && sbaccess != 3'd4 &&
	     NOT_sbaccess_70_EQ_1_73_74_OR_NOT_sbaddress0_7_ETC___d190 &&
	     !rg_sbread_en &&
	     rg_sbwrite_en ;
  assign MUX_sbaddress0_write_1__SEL_1 =
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     dtm_access_putCommand_put[40:34] == 7'h39 &&
	     !sbbusy ;
  assign MUX_sbaddress0_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_sba_write_response &&
	     master_xactor_f_wr_resp_D_OUT[5:4] != 2'd3 &&
	     master_xactor_f_wr_resp_D_OUT[5:4] != 2'd2 &&
	     sbautoincrement ;
  assign MUX_sbaddress0_write_1__SEL_3 =
	     WILL_FIRE_RL_rl_sba_read_response &&
	     master_xactor_f_rd_data_D_OUT[70:69] != 2'd3 &&
	     master_xactor_f_rd_data_D_OUT[70:69] != 2'd2 &&
	     sbautoincrement ;
  assign MUX_sbbusy_write_1__SEL_1 =
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d941 ;
  assign MUX_sbbusy_write_1__SEL_4 =
	     WILL_FIRE_RL_rl_sba_request &&
	     (sbaccess == 3'd4 ||
	      sbaccess_70_EQ_1_73_AND_sbaddress0_75_BIT_0_76_ETC___d233) ;
  assign MUX_sbdata0_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_sba_read_response &&
	     master_xactor_f_rd_data_D_OUT[70:69] != 2'd3 &&
	     master_xactor_f_rd_data_D_OUT[70:69] != 2'd2 ;
  assign MUX_sbdata1_write_1__SEL_1 =
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     dtm_access_putCommand_put[40:34] == 7'h3D &&
	     !sbbusy ;
  assign MUX_sberr_write_1__SEL_1 =
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1005 ;
  assign MUX_v_data_reg_0_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo55 ;
  assign MUX_v_data_reg_1_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo53 ;
  assign MUX_v_data_reg_10_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo35 ;
  assign MUX_v_data_reg_11_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo33 ;
  assign MUX_v_data_reg_2_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo51 ;
  assign MUX_v_data_reg_3_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo49 ;
  assign MUX_v_data_reg_4_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo47 ;
  assign MUX_v_data_reg_5_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo45 ;
  assign MUX_v_data_reg_6_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo43 ;
  assign MUX_v_data_reg_7_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo41 ;
  assign MUX_v_data_reg_8_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo39 ;
  assign MUX_v_data_reg_9_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo37 ;
  assign MUX_v_progbuf_reg_0_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo31 ;
  assign MUX_v_progbuf_reg_1_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo29 ;
  assign MUX_v_progbuf_reg_10_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo11 ;
  assign MUX_v_progbuf_reg_11_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo9 ;
  assign MUX_v_progbuf_reg_12_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo7 ;
  assign MUX_v_progbuf_reg_13_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo5 ;
  assign MUX_v_progbuf_reg_14_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo3 ;
  assign MUX_v_progbuf_reg_15_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo1 ;
  assign MUX_v_progbuf_reg_2_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo27 ;
  assign MUX_v_progbuf_reg_3_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo25 ;
  assign MUX_v_progbuf_reg_4_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo23 ;
  assign MUX_v_progbuf_reg_5_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo21 ;
  assign MUX_v_progbuf_reg_6_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo19 ;
  assign MUX_v_progbuf_reg_7_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo17 ;
  assign MUX_v_progbuf_reg_8_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo15 ;
  assign MUX_v_progbuf_reg_9_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_bus_write && _dfoo13 ;
  assign MUX_control_write_1__VAL_1 =
	     { 1'd0, control[22:16], access_cntrl___1_regno__h9716 } ;
  assign MUX_dmi_response_write_1__VAL_1 =
	     { 1'd0,
	       34'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_dmi_response_write_1__VAL_2 =
	     { 1'd1,
	       CASE_dtm_access_putCommand_put_BITS_1_TO_0_1_y_ETC__q6 } ;
  assign MUX_sbaddress0_write_1__VAL_2 =
	     sbaddress0 + { 28'd0, increment__h14782 } ;
  assign MUX_sberr_write_1__VAL_1 = x__h91558 & sberr ;
  always@(master_xactor_f_wr_resp_D_OUT)
  begin
    case (master_xactor_f_wr_resp_D_OUT[5:4])
      2'd2: MUX_sberr_write_1__VAL_2 = 3'd7;
      2'd3: MUX_sberr_write_1__VAL_2 = 3'd2;
      default: MUX_sberr_write_1__VAL_2 = 3'd0;
    endcase
  end
  always@(master_xactor_f_rd_data_D_OUT)
  begin
    case (master_xactor_f_rd_data_D_OUT[70:69])
      2'd2: MUX_sberr_write_1__VAL_3 = 3'd7;
      2'd3: MUX_sberr_write_1__VAL_3 = 3'd2;
      default: MUX_sberr_write_1__VAL_3 = 3'd0;
    endcase
  end
  assign MUX_sberr_write_1__VAL_4 =
	     (sbaccess == 3'd4) ?
	       sbaccess :
	       (sbaccess_70_EQ_1_73_AND_sbaddress0_75_BIT_0_76_ETC___d233 ?
		  3'd3 :
		  3'd0) ;
  assign MUX_v_data_reg_0_write_1__VAL_1 =
	     (slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	      4'd0 &&
	      slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	      NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418) ?
	       x__h20569 :
	       x__h34806 ;
  assign MUX_v_data_reg_1_write_1__VAL_1 =
	     (slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	      4'd1 &&
	      slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	      NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418) ?
	       x__h20569 :
	       x__h34806 ;
  assign MUX_v_data_reg_10_write_1__VAL_1 =
	     (slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	      4'd10 &&
	      slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	      NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418) ?
	       x__h20569 :
	       x__h34806 ;
  assign MUX_v_data_reg_11_write_1__VAL_1 =
	     (slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	      4'd11 &&
	      slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	      NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418) ?
	       x__h20569 :
	       x__h34806 ;
  assign MUX_v_data_reg_2_write_1__VAL_1 =
	     (slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	      4'd2 &&
	      slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	      NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418) ?
	       x__h20569 :
	       x__h34806 ;
  assign MUX_v_data_reg_3_write_1__VAL_1 =
	     (slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	      4'd3 &&
	      slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	      NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418) ?
	       x__h20569 :
	       x__h34806 ;
  assign MUX_v_data_reg_4_write_1__VAL_1 =
	     (slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	      4'd4 &&
	      slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	      NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418) ?
	       x__h20569 :
	       x__h34806 ;
  assign MUX_v_data_reg_5_write_1__VAL_1 =
	     (slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	      4'd5 &&
	      slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	      NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418) ?
	       x__h20569 :
	       x__h34806 ;
  assign MUX_v_data_reg_6_write_1__VAL_1 =
	     (slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	      4'd6 &&
	      slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	      NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418) ?
	       x__h20569 :
	       x__h34806 ;
  assign MUX_v_data_reg_7_write_1__VAL_1 =
	     (slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	      4'd7 &&
	      slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	      NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418) ?
	       x__h20569 :
	       x__h34806 ;
  assign MUX_v_data_reg_8_write_1__VAL_1 =
	     (slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	      4'd8 &&
	      slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	      NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418) ?
	       x__h20569 :
	       x__h34806 ;
  assign MUX_v_data_reg_9_write_1__VAL_1 =
	     (slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	      4'd9 &&
	      slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	      NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418) ?
	       x__h20569 :
	       x__h34806 ;
  assign MUX_v_progbuf_reg_0_write_1__VAL_1 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d559 ?
	       x__h49091 :
	       x__h68073 ;
  assign MUX_v_progbuf_reg_1_write_1__VAL_1 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d576 ?
	       x__h49091 :
	       x__h68073 ;
  assign MUX_v_progbuf_reg_10_write_1__VAL_1 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d594 ?
	       x__h49091 :
	       x__h68073 ;
  assign MUX_v_progbuf_reg_11_write_1__VAL_1 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d596 ?
	       x__h49091 :
	       x__h68073 ;
  assign MUX_v_progbuf_reg_12_write_1__VAL_1 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d598 ?
	       x__h49091 :
	       x__h68073 ;
  assign MUX_v_progbuf_reg_13_write_1__VAL_1 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d600 ?
	       x__h49091 :
	       x__h68073 ;
  assign MUX_v_progbuf_reg_14_write_1__VAL_1 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d602 ?
	       x__h49091 :
	       x__h68073 ;
  assign MUX_v_progbuf_reg_15_write_1__VAL_1 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d604 ?
	       x__h49091 :
	       x__h68073 ;
  assign MUX_v_progbuf_reg_2_write_1__VAL_1 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d578 ?
	       x__h49091 :
	       x__h68073 ;
  assign MUX_v_progbuf_reg_3_write_1__VAL_1 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d580 ?
	       x__h49091 :
	       x__h68073 ;
  assign MUX_v_progbuf_reg_4_write_1__VAL_1 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d582 ?
	       x__h49091 :
	       x__h68073 ;
  assign MUX_v_progbuf_reg_5_write_1__VAL_1 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d584 ?
	       x__h49091 :
	       x__h68073 ;
  assign MUX_v_progbuf_reg_6_write_1__VAL_1 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d586 ?
	       x__h49091 :
	       x__h68073 ;
  assign MUX_v_progbuf_reg_7_write_1__VAL_1 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d588 ?
	       x__h49091 :
	       x__h68073 ;
  assign MUX_v_progbuf_reg_8_write_1__VAL_1 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d590 ?
	       x__h49091 :
	       x__h68073 ;
  assign MUX_v_progbuf_reg_9_write_1__VAL_1 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d592 ?
	       x__h49091 :
	       x__h68073 ;

  // inlined wires
  assign wr_haltreq_wren_whas =
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     dtm_access_putCommand_put[40:34] == 7'h10 ;
  assign wr_resumereq_wren_whas =
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     dtm_access_putCommand_put[40:34] == 7'h10 &&
	     dtm_access_putCommand_put[32] ;
  assign wr_ackhavereset_wren_whas =
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     dtm_access_putCommand_put[40:34] == 7'h10 &&
	     dtm_access_putCommand_put[30] ;
  assign wr_harthalting_wren_whas =
	     WILL_FIRE_RL_rl_bus_write &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] == 12'h100 ;
  assign wr_hartgoing_wren_whas =
	     WILL_FIRE_RL_rl_bus_write &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] == 12'h104 ;
  assign wr_hartresuming_wren_whas =
	     WILL_FIRE_RL_rl_bus_write &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] == 12'h108 ;
  assign wr_exception_wren_whas =
	     WILL_FIRE_RL_rl_bus_write &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] == 12'h10C ;
  assign wr_cmderr_wren_whas =
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     dtm_access_putCommand_put[40:34] == 7'h16 ;
  assign wr_errbusy_wget = cmderr == 3'd0 && busy ;
  assign wr_errbusy_whas =
	     EN_dtm_access_putCommand_put &&
	     (dtm_access_putCommand_put[1:0] == 2'd2 &&
	      dtm_access_putCommand_put[40:34] != 7'h10 &&
	      dtm_access_putCommand_put[40:34] != 7'h11 &&
	      dtm_access_putCommand_put[40:34] != 7'h12 &&
	      dtm_access_putCommand_put[40:34] != 7'h14 &&
	      dtm_access_putCommand_put[40:34] != 7'h15 &&
	      (dtm_access_putCommand_put[40:34] == 7'h16 ||
	       dtm_access_putCommand_put[40:34] == 7'h17 ||
	       dtm_access_putCommand_put[40:34] == 7'h18 ||
	       dtm_access_putCommand_put[40:34] != 7'h19 &&
	       dtm_access_putCommand_put[40:34] != 7'h1A &&
	       dtm_access_putCommand_put[40:34] != 7'h1B &&
	       dtm_access_putCommand_put[40:34] != 7'h1C &&
	       dtm_access_putCommand_put[40:34] != 7'h1D &&
	       dtm_access_putCommand_put[40:34] != 7'h34 &&
	       dtm_access_putCommand_put[40:34] != 7'h35 &&
	       dtm_access_putCommand_put[40:34] != 7'h38 &&
	       dtm_access_putCommand_put[40:34] != 7'h39 &&
	       dtm_access_putCommand_put[40:34] != 7'h3A &&
	       dtm_access_putCommand_put[40:34] != 7'h3B &&
	       dtm_access_putCommand_put[40:34] != 7'h37 &&
	       dtm_access_putCommand_put[40:34] != 7'h3C &&
	       dtm_access_putCommand_put[40:34] != 7'h3D &&
	       NOT_dtm_access_putCommand_put_BITS_40_TO_34_05_ETC___d769) ||
	      dtm_access_putCommand_put[1:0] == 2'd1 &&
	      dtm_access_putCommand_put[40:34] != 7'h10 &&
	      dtm_access_putCommand_put[40:34] != 7'h11 &&
	      dtm_access_putCommand_put[40:34] != 7'h12 &&
	      dtm_access_putCommand_put[40:34] != 7'h14 &&
	      dtm_access_putCommand_put[40:34] != 7'h15 &&
	      dtm_access_putCommand_put[40:34] != 7'h16 &&
	      dtm_access_putCommand_put[40:34] != 7'h17 &&
	      dtm_access_putCommand_put[40:34] != 7'h18 &&
	      dtm_access_putCommand_put[40:34] != 7'h19 &&
	      dtm_access_putCommand_put[40:34] != 7'h1A &&
	      dtm_access_putCommand_put[40:34] != 7'h1B &&
	      dtm_access_putCommand_put[40:34] != 7'h1C &&
	      dtm_access_putCommand_put[40:34] != 7'h1D &&
	      dtm_access_putCommand_put[40:34] != 7'h34 &&
	      dtm_access_putCommand_put[40:34] != 7'h35 &&
	      dtm_access_putCommand_put[40:34] != 7'h38 &&
	      dtm_access_putCommand_put[40:34] != 7'h40 &&
	      dtm_access_putCommand_put[40:34] != 7'h13 &&
	      dtm_access_putCommand_put[40:34] != 7'h39 &&
	      dtm_access_putCommand_put[40:34] != 7'h3A &&
	      dtm_access_putCommand_put[40:34] != 7'h3B &&
	      dtm_access_putCommand_put[40:34] != 7'h37 &&
	      dtm_access_putCommand_put[40:34] != 7'h3C &&
	      NOT_dtm_access_putCommand_put_BITS_40_TO_34_05_ETC___d807) ;
  assign wr_errnotsupported_whas =
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     dtm_access_putCommand_put[40:34] == 7'h17 &&
	     cmderr_9_EQ_0_12_AND_NOT_busy_3_14_15_AND_NOT__ETC___d992 ;
  assign wr_errexception_whas =
	     !wr_cmdtype_wren_whas &&
	     v_flags_0_4_BIT_0_5_OR_NOT_wr_harthalting_id_w_ETC___d117 &&
	     busy &&
	     wr_exception_wren_whas ;
  assign wr_errhaltresume_whas =
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     dtm_access_putCommand_put_BITS_40_TO_34_05_EQ__ETC___d999 ;
  assign wr_cmdtype_wren_whas =
	     EN_dtm_access_putCommand_put &&
	     (dtm_access_putCommand_put[1:0] == 2'd2 &&
	      dtm_access_putCommand_put[40:34] != 7'h10 &&
	      dtm_access_putCommand_put[40:34] != 7'h11 &&
	      dtm_access_putCommand_put[40:34] != 7'h12 &&
	      dtm_access_putCommand_put[40:34] != 7'h14 &&
	      dtm_access_putCommand_put[40:34] != 7'h15 &&
	      dtm_access_putCommand_put[40:34] != 7'h16 &&
	      dtm_access_putCommand_put_BITS_40_TO_34_05_EQ__ETC___d852 ||
	      dtm_access_putCommand_put[1:0] == 2'd1 &&
	      dtm_access_putCommand_put[40:34] != 7'h10 &&
	      dtm_access_putCommand_put[40:34] != 7'h11 &&
	      dtm_access_putCommand_put[40:34] != 7'h12 &&
	      dtm_access_putCommand_put[40:34] != 7'h14 &&
	      dtm_access_putCommand_put[40:34] != 7'h15 &&
	      dtm_access_putCommand_put[40:34] != 7'h16 &&
	      dtm_access_putCommand_put[40:34] != 7'h17 &&
	      dtm_access_putCommand_put[40:34] != 7'h18 &&
	      dtm_access_putCommand_put[40:34] != 7'h19 &&
	      dtm_access_putCommand_put[40:34] != 7'h1A &&
	      dtm_access_putCommand_put[40:34] != 7'h1B &&
	      dtm_access_putCommand_put[40:34] != 7'h1C &&
	      dtm_access_putCommand_put[40:34] != 7'h1D &&
	      dtm_access_putCommand_put[40:34] != 7'h34 &&
	      dtm_access_putCommand_put[40:34] != 7'h35 &&
	      dtm_access_putCommand_put[40:34] != 7'h38 &&
	      dtm_access_putCommand_put[40:34] != 7'h40 &&
	      dtm_access_putCommand_put[40:34] != 7'h13 &&
	      dtm_access_putCommand_put[40:34] != 7'h39 &&
	      dtm_access_putCommand_put[40:34] != 7'h3A &&
	      dtm_access_putCommand_put[40:34] != 7'h3B &&
	      dtm_access_putCommand_put[40:34] != 7'h37 &&
	      dtm_access_putCommand_put[40:34] != 7'h3C &&
	      dtm_access_putCommand_put[40:34] != 7'h3D &&
	      dtm_access_putCommand_put[40:34] != 7'h3E &&
	      dtm_access_putCommand_put[40:34] != 7'h3F &&
	      NOT_dtm_access_putCommand_put_BITS_40_TO_34_05_ETC___d842) ;
  assign _write_RL_rl_set_busy_EN_busy_wget =
	     wr_cmdtype_wren_whas ||
	     busy_3_AND_NOT_v_flags_0_4_BIT_0_5_6_7_AND_wr__ETC___d89 ||
	     busy && wr_exception_wren_whas ;
  assign _write_RL_rl_sba_read_response_EN_sbaddress0_wget =
	     master_xactor_f_rd_data_D_OUT[70:69] != 2'd3 &&
	     master_xactor_f_rd_data_D_OUT[70:69] != 2'd2 &&
	     sbautoincrement ;
  assign hahavereset_port0__write_1 =
	     hahavereset | hartside_ma_havereset_resetack ;
  assign hahavereset_port1__read =
	     EN_hartside_ma_havereset ?
	       hahavereset_port0__write_1 :
	       hahavereset ;
  assign hahavereset_port2__read =
	     !wr_ackhavereset_wren_whas && hahavereset_port1__read ;

  // register _unnamed_
  assign _unnamed__D_IN = 1'b0 ;
  assign _unnamed__EN = 1'b0 ;

  // register ackhavereset
  assign ackhavereset_D_IN = 1'b0 ;
  assign ackhavereset_EN = 1'b0 ;

  // register ackunavail
  assign ackunavail_D_IN = 1'b0 ;
  assign ackunavail_EN = 1'b0 ;

  // register allhalted
  assign allhalted_D_IN = hartside_ma_debugenable__debugenable & hahalted ;
  assign allhalted_EN = EN_hartside_ma_debugenable ;

  // register allhavereset
  assign allhavereset_D_IN = hahavereset_port1__read ;
  assign allhavereset_EN = EN_hartside_ma_debugenable ;

  // register allnonexistent
  assign allnonexistent_D_IN = 1'b0 ;
  assign allnonexistent_EN = 1'b0 ;

  // register allresumeack
  assign allresumeack_D_IN = haresumeack ;
  assign allresumeack_EN = EN_hartside_ma_debugenable ;

  // register allrunning
  assign allrunning_D_IN = hartside_ma_debugenable__debugenable & y__h11225 ;
  assign allrunning_EN = EN_hartside_ma_debugenable ;

  // register allunavail
  assign allunavail_D_IN = ~hartside_ma_debugenable__debugenable ;
  assign allunavail_EN = EN_hartside_ma_debugenable ;

  // register anyhalted
  assign anyhalted_D_IN = hartside_ma_debugenable__debugenable & hahalted ;
  assign anyhalted_EN = EN_hartside_ma_debugenable ;

  // register anyhavereset
  assign anyhavereset_D_IN = hahavereset_port1__read ;
  assign anyhavereset_EN = EN_hartside_ma_debugenable ;

  // register anynonexistent
  assign anynonexistent_D_IN = 1'b0 ;
  assign anynonexistent_EN = 1'b0 ;

  // register anyresumeack
  assign anyresumeack_D_IN = haresumeack ;
  assign anyresumeack_EN = EN_hartside_ma_debugenable ;

  // register anyrunning
  assign anyrunning_D_IN = hartside_ma_debugenable__debugenable & y__h11225 ;
  assign anyrunning_EN = EN_hartside_ma_debugenable ;

  // register anyunavail
  assign anyunavail_D_IN = ~hartside_ma_debugenable__debugenable ;
  assign anyunavail_EN = EN_hartside_ma_debugenable ;

  // register authbusy
  assign authbusy_D_IN = 1'b0 ;
  assign authbusy_EN = 1'b0 ;

  // register authenticated
  assign authenticated_D_IN = 1'b0 ;
  assign authenticated_EN = 1'b0 ;

  // register autoexecdata
  assign autoexecdata_D_IN = dtm_access_putCommand_put[13:2] ;
  assign autoexecdata_EN =
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1002 ;

  // register autoexecprogbuf
  assign autoexecprogbuf_D_IN = dtm_access_putCommand_put[33:18] ;
  assign autoexecprogbuf_EN =
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1002 ;

  // register busy
  assign busy_D_IN = wr_cmdtype_wren_whas ;
  assign busy_EN = _write_RL_rl_set_busy_EN_busy_wget ;

  // register clrresethaltreq
  assign clrresethaltreq_D_IN = 1'b0 ;
  assign clrresethaltreq_EN = 1'b0 ;

  // register cmderr
  assign cmderr_D_IN =
	     (wr_errbusy_whas && wr_errbusy_wget) ?
	       3'd1 :
	       IF_wr_errnotsupported_whas__9_AND_wr_errnotsup_ETC___d78 ;
  assign cmderr_EN =
	     wr_errbusy_whas && wr_errbusy_wget || wr_errnotsupported_whas ||
	     wr_errexception_whas ||
	     wr_errhaltresume_whas ||
	     wr_cmderr_wren_whas ;

  // register cmdtype
  assign cmdtype_D_IN = dtm_access_putCommand_put[33:26] ;
  assign cmdtype_EN = MUX_control_write_1__SEL_2 ;

  // register confstrptrvalid
  assign confstrptrvalid_D_IN = 1'b0 ;
  assign confstrptrvalid_EN = 1'b0 ;

  // register control
  assign control_D_IN =
	     NOT_wr_cmdtype_wren_whas__0_6_OR_NOT_wr_cmdtyp_ETC___d105 ?
	       MUX_control_write_1__VAL_1 :
	       dtm_access_putCommand_put[25:2] ;
  assign control_EN =
	     NOT_wr_cmdtype_wren_whas__0_6_OR_NOT_wr_cmdtyp_ETC___d105 ||
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     dtm_access_putCommand_put_BITS_40_TO_34_05_EQ__ETC___d826 ;

  // register dmactive
  assign dmactive_D_IN = dtm_access_putCommand_put[2] ;
  assign dmactive_EN = wr_haltreq_wren_whas ;

  // register dmi_response
  assign dmi_response_D_IN =
	     EN_dtm_access_getResponse_get ?
	       MUX_dmi_response_write_1__VAL_1 :
	       MUX_dmi_response_write_1__VAL_2 ;
  assign dmi_response_EN =
	     EN_dtm_access_getResponse_get || EN_dtm_access_putCommand_put ;

  // register hahalted
  assign hahalted_D_IN =
	     wr_harthalting_wren_whas ?
	       x__h8766 :
	       (wr_hartresuming_wren_whas ? x__h8776 : hahalted) ;
  assign hahalted_EN = 1'd1 ;

  // register hahaltreq
  assign hahaltreq_D_IN =
	     wr_haltreq_wren_whas && dtm_access_putCommand_put[33] ;
  assign hahaltreq_EN = wr_haltreq_wren_whas ;

  // register hahavereset
  assign hahavereset_D_IN = hahavereset_port2__read ;
  assign hahavereset_EN = 1'b1 ;

  // register haltreq
  assign haltreq_D_IN = dtm_access_putCommand_put[33] ;
  assign haltreq_EN = wr_haltreq_wren_whas ;

  // register hamask
  assign hamask_D_IN = x__h89823 | y__h89824 ;
  assign hamask_EN =
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     dtm_access_putCommand_put[40:34] == 7'h15 ;

  // register haresetreq
  assign haresetreq_D_IN = hartreset ;
  assign haresetreq_EN = 1'd1 ;

  // register haresumeack
  assign haresumeack_D_IN = !wr_resumereq_wren_whas && x__h8954 ;
  assign haresumeack_EN = 1'd1 ;

  // register haresumereq
  assign haresumereq_D_IN = _theResult_____1__h8833 ;
  assign haresumereq_EN = 1'd1 ;

  // register hartreset
  assign hartreset_D_IN = dtm_access_putCommand_put[31] ;
  assign hartreset_EN = wr_haltreq_wren_whas ;

  // register hasel
  assign hasel_D_IN = 1'b0 ;
  assign hasel_EN = 1'b0 ;

  // register hasresethaltreq
  assign hasresethaltreq_D_IN = 1'b0 ;
  assign hasresethaltreq_EN = 1'b0 ;

  // register ndmreset
  assign ndmreset_D_IN = dtm_access_putCommand_put[3] ;
  assign ndmreset_EN = wr_haltreq_wren_whas ;

  // register ndmresetpending
  assign ndmresetpending_D_IN = 1'b0 ;
  assign ndmresetpending_EN = 1'b0 ;

  // register relaxedpriv
  assign relaxedpriv_D_IN = dtm_access_putCommand_put[13] ;
  assign relaxedpriv_EN = wr_cmderr_wren_whas ;

  // register resumereq
  assign resumereq_D_IN = 1'b0 ;
  assign resumereq_EN = 1'b0 ;

  // register rg_init
  assign rg_init_D_IN = 1'd1 ;
  assign rg_init_EN = CAN_FIRE_RL_rl_loggers ;

  // register rg_sbread_en
  assign rg_sbread_en_D_IN = MUX_rg_sbread_en_write_1__SEL_1 ;
  assign rg_sbread_en_EN =
	     WILL_FIRE_RL_rl_sba_request && sbaccess != 3'd4 &&
	     NOT_sbaccess_70_EQ_1_73_74_OR_NOT_sbaddress0_7_ETC___d190 &&
	     rg_sbread_en ||
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d943 ;

  // register rg_sbwrite_en
  assign rg_sbwrite_en_D_IN = MUX_rg_sbwrite_en_write_1__SEL_1 ;
  assign rg_sbwrite_en_EN =
	     MUX_rg_sbwrite_en_write_1__SEL_2 ||
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1016 ;

  // register sbaccess
  assign sbaccess_D_IN = dtm_access_putCommand_put[21:19] ;
  assign sbaccess_EN = MUX_sberr_write_1__SEL_1 ;

  // register sbaddress0
  always@(MUX_sbaddress0_write_1__SEL_1 or
	  dtm_access_putCommand_put or
	  MUX_sbaddress0_write_1__SEL_2 or
	  MUX_sbaddress0_write_1__VAL_2 or MUX_sbaddress0_write_1__SEL_3)
  case (1'b1)
    MUX_sbaddress0_write_1__SEL_1:
	sbaddress0_D_IN = dtm_access_putCommand_put[33:2];
    MUX_sbaddress0_write_1__SEL_2:
	sbaddress0_D_IN = MUX_sbaddress0_write_1__VAL_2;
    MUX_sbaddress0_write_1__SEL_3:
	sbaddress0_D_IN = MUX_sbaddress0_write_1__VAL_2;
    default: sbaddress0_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign sbaddress0_EN =
	     WILL_FIRE_RL_rl_sba_read_response &&
	     master_xactor_f_rd_data_D_OUT[70:69] != 2'd3 &&
	     master_xactor_f_rd_data_D_OUT[70:69] != 2'd2 &&
	     sbautoincrement ||
	     WILL_FIRE_RL_rl_sba_write_response &&
	     master_xactor_f_wr_resp_D_OUT[5:4] != 2'd3 &&
	     master_xactor_f_wr_resp_D_OUT[5:4] != 2'd2 &&
	     sbautoincrement ||
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     dtm_access_putCommand_put[40:34] == 7'h39 &&
	     !sbbusy ;

  // register sbaddress1
  assign sbaddress1_D_IN = 32'h0 ;
  assign sbaddress1_EN = 1'b0 ;

  // register sbaddress2
  assign sbaddress2_D_IN = 32'h0 ;
  assign sbaddress2_EN = 1'b0 ;

  // register sbaddress3
  assign sbaddress3_D_IN = 32'h0 ;
  assign sbaddress3_EN = 1'b0 ;

  // register sbautoincrement
  assign sbautoincrement_D_IN = dtm_access_putCommand_put[18] ;
  assign sbautoincrement_EN = MUX_sberr_write_1__SEL_1 ;

  // register sbbusy
  assign sbbusy_D_IN = MUX_sbbusy_write_1__SEL_1 ;
  assign sbbusy_EN =
	     WILL_FIRE_RL_rl_sba_request &&
	     (sbaccess == 3'd4 ||
	      sbaccess_70_EQ_1_73_AND_sbaddress0_75_BIT_0_76_ETC___d233) ||
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d941 ||
	     WILL_FIRE_RL_rl_sba_write_response ||
	     WILL_FIRE_RL_rl_sba_read_response ;

  // register sbbusyerror
  assign sbbusyerror_D_IN =
	     dtm_access_putCommand_put[1:0] != 2'd2 ||
	     dtm_access_putCommand_put[40:34] != 7'h38 ||
	     x__h91341 ;
  assign sbbusyerror_EN =
	     EN_dtm_access_putCommand_put &&
	     (dtm_access_putCommand_put[1:0] == 2'd2 &&
	      dtm_access_putCommand_put[40:34] != 7'h10 &&
	      dtm_access_putCommand_put[40:34] != 7'h11 &&
	      dtm_access_putCommand_put[40:34] != 7'h12 &&
	      dtm_access_putCommand_put[40:34] != 7'h14 &&
	      dtm_access_putCommand_put[40:34] != 7'h15 &&
	      dtm_access_putCommand_put[40:34] != 7'h16 &&
	      dtm_access_putCommand_put[40:34] != 7'h17 &&
	      dtm_access_putCommand_put[40:34] != 7'h18 &&
	      dtm_access_putCommand_put[40:34] != 7'h19 &&
	      dtm_access_putCommand_put[40:34] != 7'h1A &&
	      dtm_access_putCommand_put[40:34] != 7'h1B &&
	      dtm_access_putCommand_put[40:34] != 7'h1C &&
	      dtm_access_putCommand_put[40:34] != 7'h1D &&
	      dtm_access_putCommand_put[40:34] != 7'h34 &&
	      dtm_access_putCommand_put[40:34] != 7'h35 &&
	      dtm_access_putCommand_put_BITS_40_TO_34_05_EQ__ETC___d892 ||
	      dtm_access_putCommand_put[1:0] == 2'd1 &&
	      (dtm_access_putCommand_put[40:34] == 7'h3C && sbbusy ||
	       (dtm_access_putCommand_put[40:34] == 7'h3D ||
		dtm_access_putCommand_put[40:34] == 7'h3E ||
		dtm_access_putCommand_put[40:34] == 7'h3F) &&
	       sbbusy)) ;

  // register sbdata0
  assign sbdata0_D_IN =
	     MUX_rg_sbwrite_en_write_1__SEL_1 ?
	       dtm_access_putCommand_put[33:2] :
	       data__h14242[31:0] ;
  assign sbdata0_EN =
	     WILL_FIRE_RL_rl_sba_read_response &&
	     master_xactor_f_rd_data_D_OUT[70:69] != 2'd3 &&
	     master_xactor_f_rd_data_D_OUT[70:69] != 2'd2 ||
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1016 ;

  // register sbdata1
  assign sbdata1_D_IN =
	     MUX_sbdata1_write_1__SEL_1 ?
	       dtm_access_putCommand_put[33:2] :
	       data__h14242[63:32] ;
  assign sbdata1_EN =
	     WILL_FIRE_RL_rl_sba_read_response &&
	     master_xactor_f_rd_data_D_OUT[70:69] != 2'd3 &&
	     master_xactor_f_rd_data_D_OUT[70:69] != 2'd2 ||
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     dtm_access_putCommand_put[40:34] == 7'h3D &&
	     !sbbusy ;

  // register sbdata2
  assign sbdata2_D_IN = 32'd0 ;
  assign sbdata2_EN = MUX_sbdata0_write_1__SEL_2 ;

  // register sbdata3
  assign sbdata3_D_IN = 32'd0 ;
  assign sbdata3_EN = MUX_sbdata0_write_1__SEL_2 ;

  // register sberr
  always@(MUX_sberr_write_1__SEL_1 or
	  MUX_sberr_write_1__VAL_1 or
	  WILL_FIRE_RL_rl_sba_write_response or
	  MUX_sberr_write_1__VAL_2 or
	  WILL_FIRE_RL_rl_sba_read_response or
	  MUX_sberr_write_1__VAL_3 or
	  MUX_sbbusy_write_1__SEL_4 or MUX_sberr_write_1__VAL_4)
  case (1'b1)
    MUX_sberr_write_1__SEL_1: sberr_D_IN = MUX_sberr_write_1__VAL_1;
    WILL_FIRE_RL_rl_sba_write_response: sberr_D_IN = MUX_sberr_write_1__VAL_2;
    WILL_FIRE_RL_rl_sba_read_response: sberr_D_IN = MUX_sberr_write_1__VAL_3;
    MUX_sbbusy_write_1__SEL_4: sberr_D_IN = MUX_sberr_write_1__VAL_4;
    default: sberr_D_IN = 3'bxxx /* unspecified value */ ;
  endcase
  assign sberr_EN =
	     WILL_FIRE_RL_rl_sba_request &&
	     (sbaccess == 3'd4 ||
	      sbaccess_70_EQ_1_73_AND_sbaddress0_75_BIT_0_76_ETC___d233) ||
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1005 ||
	     WILL_FIRE_RL_rl_sba_read_response ||
	     WILL_FIRE_RL_rl_sba_write_response ;

  // register sbreadonaddr
  assign sbreadonaddr_D_IN = dtm_access_putCommand_put[22] ;
  assign sbreadonaddr_EN = MUX_sberr_write_1__SEL_1 ;

  // register sbreadondata
  assign sbreadondata_D_IN = dtm_access_putCommand_put[17] ;
  assign sbreadondata_EN = MUX_sberr_write_1__SEL_1 ;

  // register setresethaltreq
  assign setresethaltreq_D_IN = 1'b0 ;
  assign setresethaltreq_EN = 1'b0 ;

  // register v_abstract_reg_0
  assign v_abstract_reg_0_D_IN =
	     x_wget__h5576[17] ?
	       { 5'd7,
		 x_wget__h5576[16] ?
		   { 12'd0, x_wget__h5576[22:20], x_wget__h5576[4:0], 7'd3 } :
		   { 2'd0,
		     x_wget__h5576[4:0],
		     5'd0,
		     x_wget__h5576[22:20],
		     12'd35 } } :
	       32'h00000013 ;
  assign v_abstract_reg_0_EN = CAN_FIRE_RL_rl_set_abstract_instructions ;

  // register v_abstract_reg_1
  assign v_abstract_reg_1_D_IN =
	     x_wget__h5576[18] ? 32'h00000013 : 32'h00100073 ;
  assign v_abstract_reg_1_EN = CAN_FIRE_RL_rl_set_abstract_instructions ;

  // register v_data_reg_0
  assign v_data_reg_0_D_IN =
	     MUX_v_data_reg_0_write_1__SEL_1 ?
	       MUX_v_data_reg_0_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_data_reg_0_EN =
	     EN_dtm_access_putCommand_put && x__h92862 == 7'd0 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1036 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo55 ;

  // register v_data_reg_1
  assign v_data_reg_1_D_IN =
	     MUX_v_data_reg_1_write_1__SEL_1 ?
	       MUX_v_data_reg_1_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_data_reg_1_EN =
	     EN_dtm_access_putCommand_put && x__h92862 == 7'd1 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1036 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo53 ;

  // register v_data_reg_10
  assign v_data_reg_10_D_IN =
	     MUX_v_data_reg_10_write_1__SEL_1 ?
	       MUX_v_data_reg_10_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_data_reg_10_EN =
	     EN_dtm_access_putCommand_put && x__h92862 == 7'd10 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1036 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo35 ;

  // register v_data_reg_11
  assign v_data_reg_11_D_IN =
	     MUX_v_data_reg_11_write_1__SEL_1 ?
	       MUX_v_data_reg_11_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_data_reg_11_EN =
	     EN_dtm_access_putCommand_put && x__h92862 == 7'd11 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1036 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo33 ;

  // register v_data_reg_2
  assign v_data_reg_2_D_IN =
	     MUX_v_data_reg_2_write_1__SEL_1 ?
	       MUX_v_data_reg_2_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_data_reg_2_EN =
	     EN_dtm_access_putCommand_put && x__h92862 == 7'd2 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1036 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo51 ;

  // register v_data_reg_3
  assign v_data_reg_3_D_IN =
	     MUX_v_data_reg_3_write_1__SEL_1 ?
	       MUX_v_data_reg_3_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_data_reg_3_EN =
	     EN_dtm_access_putCommand_put && x__h92862 == 7'd3 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1036 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo49 ;

  // register v_data_reg_4
  assign v_data_reg_4_D_IN =
	     MUX_v_data_reg_4_write_1__SEL_1 ?
	       MUX_v_data_reg_4_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_data_reg_4_EN =
	     EN_dtm_access_putCommand_put && x__h92862 == 7'd4 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1036 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo47 ;

  // register v_data_reg_5
  assign v_data_reg_5_D_IN =
	     MUX_v_data_reg_5_write_1__SEL_1 ?
	       MUX_v_data_reg_5_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_data_reg_5_EN =
	     EN_dtm_access_putCommand_put && x__h92862 == 7'd5 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1036 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo45 ;

  // register v_data_reg_6
  assign v_data_reg_6_D_IN =
	     MUX_v_data_reg_6_write_1__SEL_1 ?
	       MUX_v_data_reg_6_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_data_reg_6_EN =
	     EN_dtm_access_putCommand_put && x__h92862 == 7'd6 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1036 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo43 ;

  // register v_data_reg_7
  assign v_data_reg_7_D_IN =
	     MUX_v_data_reg_7_write_1__SEL_1 ?
	       MUX_v_data_reg_7_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_data_reg_7_EN =
	     EN_dtm_access_putCommand_put && x__h92862 == 7'd7 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1036 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo41 ;

  // register v_data_reg_8
  assign v_data_reg_8_D_IN =
	     MUX_v_data_reg_8_write_1__SEL_1 ?
	       MUX_v_data_reg_8_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_data_reg_8_EN =
	     EN_dtm_access_putCommand_put && x__h92862 == 7'd8 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1036 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo39 ;

  // register v_data_reg_9
  assign v_data_reg_9_D_IN =
	     MUX_v_data_reg_9_write_1__SEL_1 ?
	       MUX_v_data_reg_9_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_data_reg_9_EN =
	     EN_dtm_access_putCommand_put && x__h92862 == 7'd9 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1036 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo37 ;

  // register v_flags_0
  assign v_flags_0_D_IN = { 6'd0, haresumereq, x__h10014 } ;
  assign v_flags_0_EN = 1'd1 ;

  // register v_hartinfo_reg_0
  assign v_hartinfo_reg_0_D_IN =
	     { 8'd0,
	       dtm_access_putCommand_put[25:22],
	       3'd0,
	       dtm_access_putCommand_put[18:2] } ;
  assign v_hartinfo_reg_0_EN =
	     EN_dtm_access_putCommand_put &&
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     dtm_access_putCommand_put[40:34] == 7'h12 ;

  // register v_progbuf_reg_0
  assign v_progbuf_reg_0_D_IN =
	     MUX_v_progbuf_reg_0_write_1__SEL_1 ?
	       MUX_v_progbuf_reg_0_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_progbuf_reg_0_EN =
	     EN_dtm_access_putCommand_put && x__h93351 == 7'd0 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1078 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo31 ;

  // register v_progbuf_reg_1
  assign v_progbuf_reg_1_D_IN =
	     MUX_v_progbuf_reg_1_write_1__SEL_1 ?
	       MUX_v_progbuf_reg_1_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_progbuf_reg_1_EN =
	     EN_dtm_access_putCommand_put && x__h93351 == 7'd1 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1078 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo29 ;

  // register v_progbuf_reg_10
  assign v_progbuf_reg_10_D_IN =
	     MUX_v_progbuf_reg_10_write_1__SEL_1 ?
	       MUX_v_progbuf_reg_10_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_progbuf_reg_10_EN =
	     EN_dtm_access_putCommand_put && x__h93351 == 7'd10 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1078 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo11 ;

  // register v_progbuf_reg_11
  assign v_progbuf_reg_11_D_IN =
	     MUX_v_progbuf_reg_11_write_1__SEL_1 ?
	       MUX_v_progbuf_reg_11_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_progbuf_reg_11_EN =
	     EN_dtm_access_putCommand_put && x__h93351 == 7'd11 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1078 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo9 ;

  // register v_progbuf_reg_12
  assign v_progbuf_reg_12_D_IN =
	     MUX_v_progbuf_reg_12_write_1__SEL_1 ?
	       MUX_v_progbuf_reg_12_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_progbuf_reg_12_EN =
	     EN_dtm_access_putCommand_put && x__h93351 == 7'd12 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1078 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo7 ;

  // register v_progbuf_reg_13
  assign v_progbuf_reg_13_D_IN =
	     MUX_v_progbuf_reg_13_write_1__SEL_1 ?
	       MUX_v_progbuf_reg_13_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_progbuf_reg_13_EN =
	     EN_dtm_access_putCommand_put && x__h93351 == 7'd13 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1078 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo5 ;

  // register v_progbuf_reg_14
  assign v_progbuf_reg_14_D_IN =
	     MUX_v_progbuf_reg_14_write_1__SEL_1 ?
	       MUX_v_progbuf_reg_14_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_progbuf_reg_14_EN =
	     EN_dtm_access_putCommand_put && x__h93351 == 7'd14 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1078 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo3 ;

  // register v_progbuf_reg_15
  assign v_progbuf_reg_15_D_IN =
	     MUX_v_progbuf_reg_15_write_1__SEL_1 ?
	       MUX_v_progbuf_reg_15_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_progbuf_reg_15_EN =
	     EN_dtm_access_putCommand_put && x__h93351 == 7'd15 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1078 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo1 ;

  // register v_progbuf_reg_2
  assign v_progbuf_reg_2_D_IN =
	     MUX_v_progbuf_reg_2_write_1__SEL_1 ?
	       MUX_v_progbuf_reg_2_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_progbuf_reg_2_EN =
	     EN_dtm_access_putCommand_put && x__h93351 == 7'd2 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1078 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo27 ;

  // register v_progbuf_reg_3
  assign v_progbuf_reg_3_D_IN =
	     MUX_v_progbuf_reg_3_write_1__SEL_1 ?
	       MUX_v_progbuf_reg_3_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_progbuf_reg_3_EN =
	     EN_dtm_access_putCommand_put && x__h93351 == 7'd3 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1078 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo25 ;

  // register v_progbuf_reg_4
  assign v_progbuf_reg_4_D_IN =
	     MUX_v_progbuf_reg_4_write_1__SEL_1 ?
	       MUX_v_progbuf_reg_4_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_progbuf_reg_4_EN =
	     EN_dtm_access_putCommand_put && x__h93351 == 7'd4 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1078 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo23 ;

  // register v_progbuf_reg_5
  assign v_progbuf_reg_5_D_IN =
	     MUX_v_progbuf_reg_5_write_1__SEL_1 ?
	       MUX_v_progbuf_reg_5_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_progbuf_reg_5_EN =
	     EN_dtm_access_putCommand_put && x__h93351 == 7'd5 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1078 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo21 ;

  // register v_progbuf_reg_6
  assign v_progbuf_reg_6_D_IN =
	     MUX_v_progbuf_reg_6_write_1__SEL_1 ?
	       MUX_v_progbuf_reg_6_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_progbuf_reg_6_EN =
	     EN_dtm_access_putCommand_put && x__h93351 == 7'd6 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1078 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo19 ;

  // register v_progbuf_reg_7
  assign v_progbuf_reg_7_D_IN =
	     MUX_v_progbuf_reg_7_write_1__SEL_1 ?
	       MUX_v_progbuf_reg_7_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_progbuf_reg_7_EN =
	     EN_dtm_access_putCommand_put && x__h93351 == 7'd7 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1078 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo17 ;

  // register v_progbuf_reg_8
  assign v_progbuf_reg_8_D_IN =
	     MUX_v_progbuf_reg_8_write_1__SEL_1 ?
	       MUX_v_progbuf_reg_8_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_progbuf_reg_8_EN =
	     EN_dtm_access_putCommand_put && x__h93351 == 7'd8 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1078 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo15 ;

  // register v_progbuf_reg_9
  assign v_progbuf_reg_9_D_IN =
	     MUX_v_progbuf_reg_9_write_1__SEL_1 ?
	       MUX_v_progbuf_reg_9_write_1__VAL_1 :
	       dtm_access_putCommand_put[33:2] ;
  assign v_progbuf_reg_9_EN =
	     EN_dtm_access_putCommand_put && x__h93351 == 7'd9 &&
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1078 ||
	     WILL_FIRE_RL_rl_bus_write && _dfoo13 ;

  // register version
  assign version_D_IN = 4'h0 ;
  assign version_EN = 1'b0 ;

  // submodule dmactive_reset
  assign dmactive_reset_ASSERT_IN = CAN_FIRE_RL_rl_dmactive_reset ;

  // submodule master_xactor_f_rd_addr
  assign master_xactor_f_rd_addr_D_IN =
	     { sbaddress0, 3'd3, sbaccess, 14'd0 } ;
  assign master_xactor_f_rd_addr_ENQ = MUX_rg_sbread_en_write_1__SEL_2 ;
  assign master_xactor_f_rd_addr_DEQ =
	     master_xactor_f_rd_addr_EMPTY_N && debug_master_ARREADY ;
  assign master_xactor_f_rd_addr_CLR = 1'b0 ;

  // submodule master_xactor_f_rd_data
  assign master_xactor_f_rd_data_D_IN =
	     { debug_master_RRESP,
	       debug_master_RDATA,
	       debug_master_RLAST,
	       debug_master_RID } ;
  assign master_xactor_f_rd_data_ENQ =
	     debug_master_RVALID && master_xactor_f_rd_data_FULL_N ;
  assign master_xactor_f_rd_data_DEQ = CAN_FIRE_RL_rl_sba_read_response ;
  assign master_xactor_f_rd_data_CLR = 1'b0 ;

  // submodule master_xactor_f_wr_addr
  assign master_xactor_f_wr_addr_D_IN =
	     { sbaddress0, 11'd768, sbaccess, 6'd0 } ;
  assign master_xactor_f_wr_addr_ENQ = MUX_rg_sbwrite_en_write_1__SEL_2 ;
  assign master_xactor_f_wr_addr_DEQ =
	     master_xactor_f_wr_addr_EMPTY_N && debug_master_AWREADY ;
  assign master_xactor_f_wr_addr_CLR = 1'b0 ;

  // submodule master_xactor_f_wr_data
  assign master_xactor_f_wr_data_D_IN =
	     { wr_data_request_wdata__h11770,
	       wr_data_request_wstrb__h11771,
	       4'bxxxx /* unspecified value */ ,
	       1'd1 } ;
  assign master_xactor_f_wr_data_ENQ = MUX_rg_sbwrite_en_write_1__SEL_2 ;
  assign master_xactor_f_wr_data_DEQ =
	     master_xactor_f_wr_data_EMPTY_N && debug_master_WREADY ;
  assign master_xactor_f_wr_data_CLR = 1'b0 ;

  // submodule master_xactor_f_wr_resp
  assign master_xactor_f_wr_resp_D_IN =
	     { debug_master_BRESP, debug_master_BID } ;
  assign master_xactor_f_wr_resp_ENQ =
	     debug_master_BVALID && master_xactor_f_wr_resp_FULL_N ;
  assign master_xactor_f_wr_resp_DEQ = CAN_FIRE_RL_rl_sba_write_response ;
  assign master_xactor_f_wr_resp_CLR = 1'b0 ;

  // submodule slave_xactor_f_rd_addr
  assign slave_xactor_f_rd_addr_D_IN =
	     { debug_slave_ARADDR,
	       debug_slave_ARPROT,
	       debug_slave_ARSIZE,
	       debug_slave_ARLEN,
	       debug_slave_ARBURST,
	       debug_slave_ARID } ;
  assign slave_xactor_f_rd_addr_ENQ =
	     debug_slave_ARVALID && slave_xactor_f_rd_addr_FULL_N ;
  assign slave_xactor_f_rd_addr_DEQ = CAN_FIRE_RL_rl_bus_read ;
  assign slave_xactor_f_rd_addr_CLR = 1'b0 ;

  // submodule slave_xactor_f_rd_data
  assign slave_xactor_f_rd_data_D_IN =
	     { (slave_xactor_f_rd_addr_D_OUT[31:20] == 12'd892 ||
		slave_xactor_f_rd_addr_D_OUT[31:20] == 12'h300 ||
		slave_xactor_f_rd_addr_D_OUT[31:20] >= 12'd820 &&
		slave_xactor_f_rd_addr_first__77_BITS_31_TO_20_ETC___d283 &&
		slave_xactor_f_rd_addr_D_OUT[16:14] == 3'd2 ||
		NOT_slave_xactor_f_rd_addr_first__77_BITS_31_T_ETC___d309) ?
		 2'd0 :
		 2'd2,
	       r_rdata__h18132,
	       slave_xactor_f_rd_addr_D_OUT[13:6] == 8'd0,
	       slave_xactor_f_rd_addr_D_OUT[3:0] } ;
  assign slave_xactor_f_rd_data_ENQ = CAN_FIRE_RL_rl_bus_read ;
  assign slave_xactor_f_rd_data_DEQ =
	     debug_slave_RREADY && slave_xactor_f_rd_data_EMPTY_N ;
  assign slave_xactor_f_rd_data_CLR = 1'b0 ;

  // submodule slave_xactor_f_wr_addr
  assign slave_xactor_f_wr_addr_D_IN =
	     { debug_slave_AWADDR,
	       debug_slave_AWPROT,
	       debug_slave_AWLEN,
	       debug_slave_AWSIZE,
	       debug_slave_AWBURST,
	       debug_slave_AWID } ;
  assign slave_xactor_f_wr_addr_ENQ =
	     debug_slave_AWVALID && slave_xactor_f_wr_addr_FULL_N ;
  assign slave_xactor_f_wr_addr_DEQ = CAN_FIRE_RL_rl_bus_write ;
  assign slave_xactor_f_wr_addr_CLR = 1'b0 ;

  // submodule slave_xactor_f_wr_data
  assign slave_xactor_f_wr_data_D_IN =
	     { debug_slave_WDATA,
	       debug_slave_WSTRB,
	       debug_slave_WID,
	       debug_slave_WLAST } ;
  assign slave_xactor_f_wr_data_ENQ =
	     debug_slave_WVALID && slave_xactor_f_wr_data_FULL_N ;
  assign slave_xactor_f_wr_data_DEQ = CAN_FIRE_RL_rl_bus_write ;
  assign slave_xactor_f_wr_data_CLR = 1'b0 ;

  // submodule slave_xactor_f_wr_resp
  assign slave_xactor_f_wr_resp_D_IN =
	     { (slave_xactor_f_wr_addr_D_OUT[31:20] == 12'h100 ||
		slave_xactor_f_wr_addr_D_OUT[31:20] == 12'h104 ||
		slave_xactor_f_wr_addr_D_OUT[31:20] == 12'h108 ||
		slave_xactor_f_wr_addr_D_OUT[31:20] == 12'h10C ||
		!slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d412 &&
		slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d414 ||
		slave_xactor_f_wr_addr_D_OUT[31:20] >= 12'd828 &&
		slave_xactor_f_wr_addr_D_OUT[31:20] <= 12'd892) ?
		 2'd0 :
		 2'd2,
	       slave_xactor_f_wr_addr_D_OUT[3:0] } ;
  assign slave_xactor_f_wr_resp_ENQ = CAN_FIRE_RL_rl_bus_write ;
  assign slave_xactor_f_wr_resp_DEQ =
	     debug_slave_BREADY && slave_xactor_f_wr_resp_EMPTY_N ;
  assign slave_xactor_f_wr_resp_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_wr_errnotsupported_whas__9_AND_wr_errnotsup_ETC___d78 =
	     wr_errnotsupported_whas ?
	       3'd2 :
	       (wr_errexception_whas ?
		  3'd3 :
		  (wr_errhaltresume_whas ? 3'd4 : x__h9316)) ;
  assign NOT_dtm_access_putCommand_put_BITS_40_TO_34_05_ETC___d769 =
	     dtm_access_putCommand_put[40:34] != 7'h3E &&
	     dtm_access_putCommand_put[40:34] != 7'h3F &&
	     (!dtm_access_putCommand_put_BITS_40_TO_34_05_ULT_ETC___d760 &&
	      dtm_access_putCommand_put_BITS_40_TO_34_05_ULE_16___d762 ||
	      dtm_access_putCommand_put[40:34] >= 7'h20 &&
	      dtm_access_putCommand_put[40:34] <= 7'd48) ;
  assign NOT_dtm_access_putCommand_put_BITS_40_TO_34_05_ETC___d807 =
	     dtm_access_putCommand_put[40:34] != 7'h3D &&
	     dtm_access_putCommand_put[40:34] != 7'h3E &&
	     dtm_access_putCommand_put[40:34] != 7'h3F &&
	     (!dtm_access_putCommand_put_BITS_40_TO_34_05_ULT_ETC___d760 &&
	      dtm_access_putCommand_put_BITS_40_TO_34_05_ULE_16___d762 ||
	      dtm_access_putCommand_put[40:34] >= 7'h20 &&
	      dtm_access_putCommand_put[40:34] <= 7'd48) ;
  assign NOT_dtm_access_putCommand_put_BITS_40_TO_34_05_ETC___d832 =
	     !dtm_access_putCommand_put_BITS_40_TO_34_05_ULT_ETC___d760 &&
	     dtm_access_putCommand_put_BITS_40_TO_34_05_ULE_16___d762 &&
	     !busy &&
	     autoexecdata[x__h92862[3:0]] ;
  assign NOT_dtm_access_putCommand_put_BITS_40_TO_34_05_ETC___d842 =
	     NOT_dtm_access_putCommand_put_BITS_40_TO_34_05_ETC___d832 ||
	     (dtm_access_putCommand_put_BITS_40_TO_34_05_ULT_ETC___d760 ||
	      !dtm_access_putCommand_put_BITS_40_TO_34_05_ULE_16___d762) &&
	     dtm_access_putCommand_put[40:34] >= 7'h20 &&
	     dtm_access_putCommand_put[40:34] <= 7'd48 &&
	     !busy &&
	     autoexecprogbuf[x__h93351[3:0]] ;
  assign NOT_sbaccess_70_EQ_1_73_74_OR_NOT_sbaddress0_7_ETC___d190 =
	     (sbaccess != 3'd1 || !sbaddress0[0]) &&
	     (sbaccess != 3'd2 || sbaddress0[1:0] == 2'd0) &&
	     (sbaccess != 3'd3 || sbaddress0[2:0] == 3'd0) ;
  assign NOT_sbbusy_67_70_AND_sberr_16_EQ_0_17_AND_NOT__ETC___d921 =
	     !sbbusy && sberr == 3'd0 && !sbbusyerror && sbreadonaddr ;
  assign NOT_sbbusy_67_70_AND_sberr_16_EQ_0_17_AND_NOT__ETC___d938 =
	     !sbbusy && sberr == 3'd0 && !sbbusyerror && sbreadondata ;
  assign NOT_slave_xactor_f_rd_addr_first__77_BITS_31_T_ETC___d295 =
	     slave_xactor_f_rd_addr_D_OUT[31:20] >= 12'h400 &&
	     slave_xactor_f_rd_addr_D_OUT[31:20] < 12'd1025 &&
	     slave_xactor_f_rd_addr_D_OUT[16:14] == 3'd0 &&
	     slave_xactor_f_rd_addr_first__77_BITS_31_TO_20_ETC___d294 ;
  assign NOT_slave_xactor_f_rd_addr_first__77_BITS_31_T_ETC___d309 =
	     NOT_slave_xactor_f_rd_addr_first__77_BITS_31_T_ETC___d295 ||
	     slave_xactor_f_rd_addr_D_OUT[31:20] >= 12'h380 &&
	     slave_xactor_f_rd_addr_D_OUT[31:20] <= 12'd944 ||
	     !slave_xactor_f_rd_addr_first__77_BITS_31_TO_20_ETC___d283 &&
	     slave_xactor_f_rd_addr_D_OUT[31:20] <= 12'd892 ||
	     !slave_xactor_f_rd_addr_first__77_BITS_31_TO_20_ETC___d294 &&
	     slave_xactor_f_rd_addr_D_OUT[31:20] <= 12'd2160 &&
	     slave_xactor_f_rd_addr_D_OUT[16:14] == 3'd2 ;
  assign NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418 =
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h10C &&
	     !slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d412 &&
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d414 ;
  assign NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d483 =
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h10C &&
	     !slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d412 &&
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d414 &&
	     slave_xactor_f_wr_addr_D_OUT[8:6] == 3'd3 ;
  assign NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d555 =
	     (slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d412 ||
	      !slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d414) &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] >= 12'd828 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] <= 12'd892 ;
  assign NOT_wr_cmdtype_wren_whas__0_6_OR_NOT_wr_cmdtyp_ETC___d105 =
	     !wr_cmdtype_wren_whas &&
	     busy_3_AND_NOT_v_flags_0_4_BIT_0_5_6_7_AND_wr__ETC___d89 &&
	     cmdtype == 8'd0 &&
	     control[19] ;
  assign _dfoo1 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d604 ||
	     x__h68053 == 4'd15 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h10C &&
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d608 ;
  assign _dfoo11 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d594 ||
	     x__h68053 == 4'd10 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h10C &&
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d608 ;
  assign _dfoo13 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d592 ||
	     x__h68053 == 4'd9 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h10C &&
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d608 ;
  assign _dfoo15 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d590 ||
	     x__h68053 == 4'd8 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h10C &&
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d608 ;
  assign _dfoo17 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d588 ||
	     x__h68053 == 4'd7 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h10C &&
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d608 ;
  assign _dfoo19 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d586 ||
	     x__h68053 == 4'd6 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h10C &&
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d608 ;
  assign _dfoo21 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d584 ||
	     x__h68053 == 4'd5 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h10C &&
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d608 ;
  assign _dfoo23 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d582 ||
	     x__h68053 == 4'd4 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h10C &&
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d608 ;
  assign _dfoo25 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d580 ||
	     x__h68053 == 4'd3 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h10C &&
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d608 ;
  assign _dfoo27 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d578 ||
	     x__h68053 == 4'd2 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h10C &&
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d608 ;
  assign _dfoo29 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d576 ||
	     x__h68053 == 4'd1 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h10C &&
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d608 ;
  assign _dfoo3 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d602 ||
	     x__h68053 == 4'd14 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h10C &&
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d608 ;
  assign _dfoo31 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d559 ||
	     x__h68053 == 4'd0 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h10C &&
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d608 ;
  assign _dfoo33 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	     4'd11 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418 ||
	     x__h34773 == 4'd11 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d483 ;
  assign _dfoo35 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	     4'd10 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418 ||
	     x__h34773 == 4'd10 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d483 ;
  assign _dfoo37 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	     4'd9 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418 ||
	     x__h34773 == 4'd9 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d483 ;
  assign _dfoo39 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	     4'd8 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418 ||
	     x__h34773 == 4'd8 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d483 ;
  assign _dfoo41 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	     4'd7 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418 ||
	     x__h34773 == 4'd7 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d483 ;
  assign _dfoo43 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	     4'd6 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418 ||
	     x__h34773 == 4'd6 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d483 ;
  assign _dfoo45 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	     4'd5 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418 ||
	     x__h34773 == 4'd5 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d483 ;
  assign _dfoo47 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	     4'd4 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418 ||
	     x__h34773 == 4'd4 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d483 ;
  assign _dfoo49 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	     4'd3 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418 ||
	     x__h34773 == 4'd3 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d483 ;
  assign _dfoo5 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d600 ||
	     x__h68053 == 4'd13 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h10C &&
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d608 ;
  assign _dfoo51 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	     4'd2 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418 ||
	     x__h34773 == 4'd2 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d483 ;
  assign _dfoo53 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	     4'd1 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418 ||
	     x__h34773 == 4'd1 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d483 ;
  assign _dfoo55 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] ==
	     4'd0 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d418 ||
	     x__h34773 == 4'd0 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d483 ;
  assign _dfoo7 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d598 ||
	     x__h68053 == 4'd12 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h10C &&
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d608 ;
  assign _dfoo9 =
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d596 ||
	     x__h68053 == 4'd11 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h10C &&
	     slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d608 ;
  assign _theResult_____1__h8833 =
	     wr_resumereq_wren_whas ||
	     (wr_hartresuming_wren_whas ?
		lv_resumereq___1__h8889 :
		haresumereq) ;
  assign access_cntrl___1_regno__h9716 = control[15:0] + 16'd1 ;
  assign busy_3_AND_NOT_v_flags_0_4_BIT_0_5_6_7_AND_wr__ETC___d89 =
	     busy && !v_flags_0[0] && y__h8805 && wr_harthalting_wren_whas ;
  assign cmderr_9_EQ_0_12_AND_NOT_busy_3_14_15_AND_NOT__ETC___d992 =
	     cmderr == 3'd0 && !busy &&
	     (dtm_access_putCommand_put[33:26] != 8'd0 ||
	      dtm_access_putCommand_put_BITS_17_TO_2_18_ULT__ETC___d819 ||
	      !dtm_access_putCommand_put_BITS_17_TO_2_18_ULE__ETC___d821) ;
  assign data___1__h18439 =
	     { 6'd0,
	       v_flags_0[1:0],
	       6'd0,
	       v_flags_0[1:0],
	       6'd0,
	       v_flags_0[1:0],
	       6'd0,
	       v_flags_0[1:0],
	       6'd0,
	       v_flags_0[1:0],
	       6'd0,
	       v_flags_0[1:0],
	       6'd0,
	       v_flags_0[1:0],
	       6'd0,
	       v_flags_0[1:0] } ;
  assign data__h14242 = master_xactor_f_rd_data_D_OUT[68:5] >> x__h14278 ;
  assign data__h89784 =
	     { hasel, 5'd0 } == 6'd0 && dtm_access_putCommand_put[2] ;
  assign din__h95410 = { hasel, 5'd0 } == 6'd0 && hamask ;
  assign dmi_response_data___2__h93973 = { r1__read__h88259, dmactive } ;
  assign dmi_response_data___2__h93979 = { r1__read__h88963, version } ;
  assign dmi_response_data___2__h93985 =
	     { 8'd0, v_hartinfo_reg_0[23:20], 3'd0, v_hartinfo_reg_0[16:0] } ;
  assign dmi_response_data___2__h94052 = { r1__read__h91137, 1'd1 } ;
  assign dmi_response_data___2__h94064 = { 31'd0, hahalted } ;
  assign dmi_response_data___2__h95409 = { 31'd0, din__h95410 } ;
  assign dmi_response_data___2__h95437 = { r1__read__h89977, 4'd12 } ;
  assign dmi_response_data___2__h95444 = { r1__read__h90873, autoexecdata } ;
  assign dtm_access_putCommand_put_BITS_17_TO_2_18_ULE__ETC___d821 =
	     dtm_access_putCommand_put[17:2] <= 16'h101F ;
  assign dtm_access_putCommand_put_BITS_17_TO_2_18_ULT__ETC___d819 =
	     dtm_access_putCommand_put[17:2] < 16'h1000 ;
  assign dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1002 =
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     dtm_access_putCommand_put[40:34] == 7'h18 &&
	     cmderr == 3'd0 &&
	     !busy ;
  assign dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1005 =
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     dtm_access_putCommand_put[40:34] == 7'h38 &&
	     !sbbusy &&
	     !sbbusyerror ;
  assign dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1016 =
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     dtm_access_putCommand_put[40:34] == 7'h3C &&
	     !sbbusy &&
	     !sbbusyerror ;
  assign dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1036 =
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     dtm_access_putCommand_put[40:34] != 7'h10 &&
	     dtm_access_putCommand_put[40:34] != 7'h11 &&
	     dtm_access_putCommand_put[40:34] != 7'h12 &&
	     dtm_access_putCommand_put[40:34] != 7'h14 &&
	     dtm_access_putCommand_put[40:34] != 7'h15 &&
	     dtm_access_putCommand_put[40:34] != 7'h16 &&
	     dtm_access_putCommand_put[40:34] != 7'h17 &&
	     dtm_access_putCommand_put[40:34] != 7'h18 &&
	     dtm_access_putCommand_put[40:34] != 7'h19 &&
	     dtm_access_putCommand_put[40:34] != 7'h1A &&
	     dtm_access_putCommand_put[40:34] != 7'h1B &&
	     dtm_access_putCommand_put[40:34] != 7'h1C &&
	     dtm_access_putCommand_put[40:34] != 7'h1D &&
	     dtm_access_putCommand_put[40:34] != 7'h34 &&
	     dtm_access_putCommand_put[40:34] != 7'h35 &&
	     dtm_access_putCommand_put[40:34] != 7'h38 &&
	     dtm_access_putCommand_put[40:34] != 7'h39 &&
	     dtm_access_putCommand_put[40:34] != 7'h3A &&
	     dtm_access_putCommand_put[40:34] != 7'h3B &&
	     dtm_access_putCommand_put[40:34] != 7'h37 &&
	     dtm_access_putCommand_put[40:34] != 7'h3C &&
	     dtm_access_putCommand_put[40:34] != 7'h3D &&
	     dtm_access_putCommand_put[40:34] != 7'h3E &&
	     dtm_access_putCommand_put[40:34] != 7'h3F &&
	     !dtm_access_putCommand_put_BITS_40_TO_34_05_ULT_ETC___d760 &&
	     dtm_access_putCommand_put_BITS_40_TO_34_05_ULE_16___d762 &&
	     !busy ;
  assign dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d1078 =
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     (dtm_access_putCommand_put_BITS_40_TO_34_05_ULT_ETC___d760 ||
	      !dtm_access_putCommand_put_BITS_40_TO_34_05_ULE_16___d762) &&
	     dtm_access_putCommand_put[40:34] >= 7'h20 &&
	     dtm_access_putCommand_put[40:34] <= 7'd48 &&
	     !busy ;
  assign dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d935 =
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     (dtm_access_putCommand_put[40:34] == 7'h39 &&
	      NOT_sbbusy_67_70_AND_sberr_16_EQ_0_17_AND_NOT__ETC___d921 ||
	      dtm_access_putCommand_put[40:34] == 7'h3C && !sbbusy &&
	      !sbbusyerror) ;
  assign dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d941 =
	     dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d935 ||
	     dtm_access_putCommand_put[1:0] == 2'd1 &&
	     dtm_access_putCommand_put[40:34] == 7'h3C &&
	     NOT_sbbusy_67_70_AND_sberr_16_EQ_0_17_AND_NOT__ETC___d938 ;
  assign dtm_access_putCommand_put_BITS_1_TO_0_03_EQ_2__ETC___d943 =
	     dtm_access_putCommand_put[1:0] == 2'd2 &&
	     dtm_access_putCommand_put[40:34] == 7'h39 &&
	     NOT_sbbusy_67_70_AND_sberr_16_EQ_0_17_AND_NOT__ETC___d921 ||
	     dtm_access_putCommand_put[1:0] == 2'd1 &&
	     dtm_access_putCommand_put[40:34] == 7'h3C &&
	     NOT_sbbusy_67_70_AND_sberr_16_EQ_0_17_AND_NOT__ETC___d938 ;
  assign dtm_access_putCommand_put_BITS_40_TO_34_05_EQ__ETC___d1265 =
	     dtm_access_putCommand_put[40:34] == 7'h10 ||
	     dtm_access_putCommand_put[40:34] == 7'h11 ||
	     dtm_access_putCommand_put[40:34] == 7'h12 ||
	     dtm_access_putCommand_put[40:34] == 7'h14 ||
	     dtm_access_putCommand_put[40:34] == 7'h15 ||
	     dtm_access_putCommand_put[40:34] == 7'h16 ||
	     dtm_access_putCommand_put[40:34] == 7'h17 ||
	     dtm_access_putCommand_put[40:34] == 7'h18 ||
	     dtm_access_putCommand_put[40:34] == 7'h19 ||
	     dtm_access_putCommand_put[40:34] == 7'h1A ||
	     dtm_access_putCommand_put[40:34] == 7'h1B ||
	     dtm_access_putCommand_put[40:34] == 7'h1C ||
	     dtm_access_putCommand_put[40:34] == 7'h1D ||
	     dtm_access_putCommand_put[40:34] == 7'h34 ||
	     dtm_access_putCommand_put[40:34] == 7'h35 ||
	     dtm_access_putCommand_put[40:34] == 7'h38 ||
	     dtm_access_putCommand_put[40:34] == 7'h40 ||
	     dtm_access_putCommand_put[40:34] == 7'h13 ||
	     dtm_access_putCommand_put[40:34] == 7'h39 ||
	     dtm_access_putCommand_put[40:34] == 7'h3A ||
	     dtm_access_putCommand_put[40:34] == 7'h3B ||
	     dtm_access_putCommand_put[40:34] == 7'h37 ||
	     dtm_access_putCommand_put[40:34] == 7'h3C ||
	     dtm_access_putCommand_put[40:34] == 7'h3D ||
	     dtm_access_putCommand_put[40:34] == 7'h3E ||
	     dtm_access_putCommand_put[40:34] == 7'h3F ||
	     !dtm_access_putCommand_put_BITS_40_TO_34_05_ULT_ETC___d760 &&
	     dtm_access_putCommand_put_BITS_40_TO_34_05_ULE_16___d762 ||
	     dtm_access_putCommand_put[40:34] >= 7'h20 &&
	     dtm_access_putCommand_put[40:34] <= 7'd48 ;
  assign dtm_access_putCommand_put_BITS_40_TO_34_05_EQ__ETC___d826 =
	     dtm_access_putCommand_put[40:34] == 7'h17 && cmderr == 3'd0 &&
	     !busy &&
	     dtm_access_putCommand_put[33:26] == 8'd0 &&
	     !dtm_access_putCommand_put_BITS_17_TO_2_18_ULT__ETC___d819 &&
	     dtm_access_putCommand_put_BITS_17_TO_2_18_ULE__ETC___d821 &&
	     hahalted ;
  assign dtm_access_putCommand_put_BITS_40_TO_34_05_EQ__ETC___d852 =
	     dtm_access_putCommand_put_BITS_40_TO_34_05_EQ__ETC___d826 ||
	     dtm_access_putCommand_put[40:34] != 7'h17 &&
	     dtm_access_putCommand_put[40:34] != 7'h18 &&
	     dtm_access_putCommand_put[40:34] != 7'h19 &&
	     dtm_access_putCommand_put[40:34] != 7'h1A &&
	     dtm_access_putCommand_put[40:34] != 7'h1B &&
	     dtm_access_putCommand_put[40:34] != 7'h1C &&
	     dtm_access_putCommand_put[40:34] != 7'h1D &&
	     dtm_access_putCommand_put[40:34] != 7'h34 &&
	     dtm_access_putCommand_put[40:34] != 7'h35 &&
	     dtm_access_putCommand_put[40:34] != 7'h38 &&
	     dtm_access_putCommand_put[40:34] != 7'h39 &&
	     dtm_access_putCommand_put[40:34] != 7'h3A &&
	     dtm_access_putCommand_put[40:34] != 7'h3B &&
	     dtm_access_putCommand_put[40:34] != 7'h37 &&
	     dtm_access_putCommand_put[40:34] != 7'h3C &&
	     dtm_access_putCommand_put[40:34] != 7'h3D &&
	     dtm_access_putCommand_put[40:34] != 7'h3E &&
	     dtm_access_putCommand_put[40:34] != 7'h3F &&
	     NOT_dtm_access_putCommand_put_BITS_40_TO_34_05_ETC___d842 ;
  assign dtm_access_putCommand_put_BITS_40_TO_34_05_EQ__ETC___d892 =
	     dtm_access_putCommand_put[40:34] == 7'h38 && !sbbusy &&
	     !sbbusyerror ||
	     dtm_access_putCommand_put[40:34] == 7'h39 && sbbusy ||
	     (dtm_access_putCommand_put[40:34] == 7'h3A ||
	      dtm_access_putCommand_put[40:34] == 7'h3B ||
	      dtm_access_putCommand_put[40:34] == 7'h37) &&
	     sbbusy ||
	     dtm_access_putCommand_put[40:34] == 7'h3C && sbbusy ||
	     dtm_access_putCommand_put[40:34] == 7'h3D && sbbusy ||
	     (dtm_access_putCommand_put[40:34] == 7'h3E ||
	      dtm_access_putCommand_put[40:34] == 7'h3F) &&
	     sbbusy ;
  assign dtm_access_putCommand_put_BITS_40_TO_34_05_EQ__ETC___d999 =
	     dtm_access_putCommand_put[40:34] == 7'h17 && cmderr == 3'd0 &&
	     !busy &&
	     dtm_access_putCommand_put[33:26] == 8'd0 &&
	     !dtm_access_putCommand_put_BITS_17_TO_2_18_ULT__ETC___d819 &&
	     dtm_access_putCommand_put_BITS_17_TO_2_18_ULE__ETC___d821 &&
	     !hahalted ;
  assign dtm_access_putCommand_put_BITS_40_TO_34_05_ULE_16___d762 =
	     dtm_access_putCommand_put[40:34] <= 7'd16 ;
  assign dtm_access_putCommand_put_BITS_40_TO_34_05_ULT_ETC___d760 =
	     dtm_access_putCommand_put[40:34] < 7'h04 ;
  assign increment__h14782 = 4'b0001 << sbaccess ;
  assign lv_resumereq___1__h8889 = haresumereq & y__h8814 ;
  assign r1__read__h88259 = { r1__read__h88271, ndmreset } ;
  assign r1__read__h88271 = { r1__read__h88283, 1'd0 } ;
  assign r1__read__h88283 = { r1__read__h88295, 1'd0 } ;
  assign r1__read__h88295 = { r1__read__h88307, 1'd0 } ;
  assign r1__read__h88307 = { r1__read__h88319, 1'd0 } ;
  assign r1__read__h88319 = { r1__read__h88331, 10'd0 } ;
  assign r1__read__h88331 = { r1__read__h88343, 1'd0 } ;
  assign r1__read__h88343 = { r1__read__h88355, 9'd0 } ;
  assign r1__read__h88355 = { r1__read__h88367, 1'd0 } ;
  assign r1__read__h88367 = { r1__read__h88379, 1'd0 } ;
  assign r1__read__h88379 = { r1__read__h88391, 1'd0 } ;
  assign r1__read__h88391 = { 2'd0, hartreset } ;
  assign r1__read__h88963 = { r1__read__h88975, confstrptrvalid } ;
  assign r1__read__h88975 = { r1__read__h88987, hasresethaltreq } ;
  assign r1__read__h88987 = { r1__read__h88999, authbusy } ;
  assign r1__read__h88999 = { r1__read__h89011, authenticated } ;
  assign r1__read__h89011 = { r1__read__h89023, anyhalted } ;
  assign r1__read__h89023 = { r1__read__h89035, allhalted } ;
  assign r1__read__h89035 = { r1__read__h89047, anyrunning } ;
  assign r1__read__h89047 = { r1__read__h89059, allrunning } ;
  assign r1__read__h89059 = { r1__read__h89071, anyunavail } ;
  assign r1__read__h89071 = { r1__read__h89083, allunavail } ;
  assign r1__read__h89083 = { r1__read__h89095, anynonexistent } ;
  assign r1__read__h89095 = { r1__read__h89107, allnonexistent } ;
  assign r1__read__h89107 = { r1__read__h89119, anyresumeack } ;
  assign r1__read__h89119 = { r1__read__h89131, allresumeack } ;
  assign r1__read__h89131 = { r1__read__h89143, anyhavereset } ;
  assign r1__read__h89143 = { r1__read__h89155, allhavereset } ;
  assign r1__read__h89155 = { r1__read__h89167, 2'd0 } ;
  assign r1__read__h89167 = { r1__read__h89179, 1'd1 } ;
  assign r1__read__h89179 = { r1__read__h89191, 1'd0 } ;
  assign r1__read__h89191 = { 7'd0, ndmresetpending } ;
  assign r1__read__h89977 = { r1__read__h89989, 4'd0 } ;
  assign r1__read__h89989 = { r1__read__h90001, cmderr } ;
  assign r1__read__h90001 = { r1__read__h90013, relaxedpriv } ;
  assign r1__read__h90013 = { 19'd32768, busy } ;
  assign r1__read__h90873 = { autoexecprogbuf, 4'd0 } ;
  assign r1__read__h91137 = { r1__read__h91149, 1'd1 } ;
  assign r1__read__h91149 = { r1__read__h91161, 1'd1 } ;
  assign r1__read__h91161 = { r1__read__h91173, 1'd1 } ;
  assign r1__read__h91173 = { r1__read__h91185, 1'd0 } ;
  assign r1__read__h91185 = { r1__read__h91197, 7'd32 } ;
  assign r1__read__h91197 = { r1__read__h91209, sberr } ;
  assign r1__read__h91209 = { r1__read__h91221, sbreadondata } ;
  assign r1__read__h91221 = { r1__read__h91233, sbautoincrement } ;
  assign r1__read__h91233 = { r1__read__h91245, sbaccess } ;
  assign r1__read__h91245 = { r1__read__h91257, sbreadonaddr } ;
  assign r1__read__h91257 = { r1__read__h91269, sbbusy } ;
  assign r1__read__h91269 = { 9'd64, sbbusyerror } ;
  assign sbaccess_70_EQ_1_73_AND_sbaddress0_75_BIT_0_76_ETC___d233 =
	     sbaccess == 3'd1 && sbaddress0[0] ||
	     sbaccess == 3'd2 && sbaddress0[1:0] != 2'd0 ||
	     sbaccess == 3'd3 && sbaddress0[2:0] != 3'd0 ;
  assign slave_xactor_f_rd_addrD_OUT_BITS_31_TO_20_MIN_ETC__q1 =
	     slave_xactor_f_rd_addr_D_OUT[31:20] - 12'd828 ;
  assign slave_xactor_f_rd_addrD_OUT_BITS_31_TO_20_MIN_ETC__q5 =
	     slave_xactor_f_rd_addr_D_OUT[31:20] - 12'h800 ;
  assign slave_xactor_f_rd_addr_first__77_BITS_31_TO_20_ETC___d283 =
	     slave_xactor_f_rd_addr_D_OUT[31:20] < 12'd828 ;
  assign slave_xactor_f_rd_addr_first__77_BITS_31_TO_20_ETC___d294 =
	     slave_xactor_f_rd_addr_D_OUT[31:20] < 12'h800 ;
  assign slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2 =
	     slave_xactor_f_wr_addr_D_OUT[31:20] - 12'd828 ;
  assign slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3 =
	     slave_xactor_f_wr_addr_D_OUT[31:20] - 12'h380 ;
  assign slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d412 =
	     slave_xactor_f_wr_addr_D_OUT[31:20] < 12'h380 ;
  assign slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d414 =
	     slave_xactor_f_wr_addr_D_OUT[31:20] <= 12'd944 ;
  assign slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d559 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2[5:2] ==
	     4'd0 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d555 ;
  assign slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d576 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2[5:2] ==
	     4'd1 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d555 ;
  assign slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d578 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2[5:2] ==
	     4'd2 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d555 ;
  assign slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d580 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2[5:2] ==
	     4'd3 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d555 ;
  assign slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d582 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2[5:2] ==
	     4'd4 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d555 ;
  assign slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d584 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2[5:2] ==
	     4'd5 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d555 ;
  assign slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d586 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2[5:2] ==
	     4'd6 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d555 ;
  assign slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d588 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2[5:2] ==
	     4'd7 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d555 ;
  assign slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d590 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2[5:2] ==
	     4'd8 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d555 ;
  assign slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d592 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2[5:2] ==
	     4'd9 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d555 ;
  assign slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d594 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2[5:2] ==
	     4'd10 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d555 ;
  assign slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d596 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2[5:2] ==
	     4'd11 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d555 ;
  assign slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d598 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2[5:2] ==
	     4'd12 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d555 ;
  assign slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d600 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2[5:2] ==
	     4'd13 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d555 ;
  assign slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d602 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2[5:2] ==
	     4'd14 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d555 ;
  assign slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d604 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2[5:2] ==
	     4'd15 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h100 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h104 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] != 12'h108 &&
	     NOT_slave_xactor_f_wr_addr_first__96_BITS_31_T_ETC___d555 ;
  assign slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d608 =
	     (slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d412 ||
	      !slave_xactor_f_wr_addr_first__96_BITS_31_TO_20_ETC___d414) &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] >= 12'd828 &&
	     slave_xactor_f_wr_addr_D_OUT[31:20] <= 12'd892 &&
	     slave_xactor_f_wr_addr_D_OUT[8:6] == 3'd3 ;
  assign v__h15528 =
	     {2{SEL_ARR_v_abstract_reg_0_14_v_abstract_reg_1_1_ETC___d322}} ;
  assign v__h16021 =
	     { (slave_xactor_f_rd_addr_D_OUT[16:14] == 3'd3) ?
		 spliced_bits__h16060 :
		 SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d371,
	       SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d371 } ;
  assign v__h16503 =
	     {2{SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377}} ;
  assign v__h87899 =
	     (dtm_access_putCommand_put[40:34] == 7'h10 ||
	      dtm_access_putCommand_put[40:34] == 7'h11 ||
	      dtm_access_putCommand_put[40:34] == 7'h12 ||
	      dtm_access_putCommand_put[40:34] == 7'h14 ||
	      dtm_access_putCommand_put[40:34] == 7'h15 ||
	      dtm_access_putCommand_put[40:34] == 7'h16 ||
	      dtm_access_putCommand_put[40:34] == 7'h17 ||
	      dtm_access_putCommand_put[40:34] == 7'h18 ||
	      dtm_access_putCommand_put[40:34] == 7'h19 ||
	      dtm_access_putCommand_put[40:34] == 7'h1A ||
	      dtm_access_putCommand_put[40:34] == 7'h1B ||
	      dtm_access_putCommand_put[40:34] == 7'h1C ||
	      dtm_access_putCommand_put[40:34] == 7'h1D ||
	      dtm_access_putCommand_put[40:34] == 7'h34 ||
	      dtm_access_putCommand_put[40:34] == 7'h35 ||
	      dtm_access_putCommand_put[40:34] == 7'h38 ||
	      dtm_access_putCommand_put[40:34] == 7'h39 ||
	      dtm_access_putCommand_put[40:34] == 7'h3A ||
	      dtm_access_putCommand_put[40:34] == 7'h3B ||
	      dtm_access_putCommand_put[40:34] == 7'h37 ||
	      dtm_access_putCommand_put[40:34] == 7'h3C ||
	      dtm_access_putCommand_put[40:34] == 7'h3D ||
	      dtm_access_putCommand_put[40:34] == 7'h3E ||
	      dtm_access_putCommand_put[40:34] == 7'h3F ||
	      !dtm_access_putCommand_put_BITS_40_TO_34_05_ULT_ETC___d760 &&
	      dtm_access_putCommand_put_BITS_40_TO_34_05_ULE_16___d762 ||
	      dtm_access_putCommand_put[40:34] >= 7'h20 &&
	      dtm_access_putCommand_put[40:34] <= 7'd48) ?
	       2'd0 :
	       2'd2 ;
  assign v__h94149 = sbbusy ? 32'd0 : sbdata0 ;
  assign v__h94368 = sbbusy ? 32'd0 : sbdata1 ;
  assign v_flags_0_4_BIT_0_5_OR_NOT_wr_harthalting_id_w_ETC___d117 =
	     v_flags_0[0] || !wr_harthalting_wren_whas || !x_wget__h3890 ||
	     !wr_harthalting_wren_whas ;
  assign writedata__h11814 = {8{sbdata0[7:0]}} ;
  assign writedata__h12844 = {4{sbdata0[15:0]}} ;
  assign writedata__h13397 = {2{sbdata0}} ;
  assign writedata__h13690 = { sbdata1, sbdata0 } ;
  assign writestrb__h11815 = 8'b00000001 << sbaddress0[2:0] ;
  assign writestrb__h12845 = 8'b00000011 << sbaddress0[2:0] ;
  assign writestrb__h13398 = 8'b00001111 << sbaddress0[2:0] ;
  assign writestrb__h13691 = 8'b11111111 << sbaddress0[2:0] ;
  assign x5867_MINUS_8__q4 = x__h15867 - 12'd8 ;
  assign x__h10014 =
	     wr_cmdtype_wren_whas && x__read__h5431 == 8'd0 ||
	     !wr_hartgoing_wren_whas && v_flags_0[0] ;
  assign x__h14278 = { sbaddress0[2:0], 3'b0 } ;
  assign x__h15867 = x__h15869 - 12'd4 ;
  assign x__h15869 = x__h15871 - 12'd64 ;
  assign x__h15871 = slave_xactor_f_rd_addr_D_OUT[31:20] - 12'h380 ;
  assign x__h16445 =
	     slave_xactor_f_rd_addrD_OUT_BITS_31_TO_20_MIN_ETC__q1[5:2] +
	     4'd1 ;
  assign x__h19859 = x__h15871[5:2] + 4'd1 ;
  assign x__h20569 =
	     { x__h21228 | y__h21229,
	       x__h21602 | y__h21603,
	       x__h21739 | y__h21740,
	       x__h21876 | y__h21877 } ;
  assign x__h21228 = slave_xactor_f_wr_data_D_OUT[44:37] & y__h21230 ;
  assign x__h21602 = slave_xactor_f_wr_data_D_OUT[36:29] & y__h21604 ;
  assign x__h21739 = slave_xactor_f_wr_data_D_OUT[28:21] & y__h21741 ;
  assign x__h21876 = slave_xactor_f_wr_data_D_OUT[20:13] & y__h21878 ;
  assign x__h34773 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2] +
	     4'd1 ;
  assign x__h34806 =
	     { x__h35465 | y__h35466,
	       x__h35844 | y__h35845,
	       x__h35981 | y__h35982,
	       x__h36118 | y__h36119 } ;
  assign x__h35465 = slave_xactor_f_wr_data_D_OUT[76:69] & y__h35467 ;
  assign x__h35844 = slave_xactor_f_wr_data_D_OUT[68:61] & y__h35846 ;
  assign x__h35981 = slave_xactor_f_wr_data_D_OUT[60:53] & y__h35983 ;
  assign x__h36118 = slave_xactor_f_wr_data_D_OUT[52:45] & y__h36120 ;
  assign x__h49091 =
	     { x__h21228 | y__h49826,
	       x__h21602 | y__h50192,
	       x__h21739 | y__h50329,
	       x__h21876 | y__h50466 } ;
  assign x__h68053 =
	     slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2[5:2] +
	     4'd1 ;
  assign x__h68073 =
	     { x__h35465 | y__h68808,
	       x__h35844 | y__h69191,
	       x__h35981 | y__h69328,
	       x__h36118 | y__h69465 } ;
  assign x__h8766 = hahalted | y__h8805 ;
  assign x__h8776 = hahalted & y__h8814 ;
  assign x__h8815 = wr_hartresuming_wren_whas && x_wget__h4202 ;
  assign x__h8954 = ~_theResult_____1__h8833 ;
  assign x__h89823 = hamask & y__h89826 ;
  assign x__h91341 = x__h91370 & sbbusyerror ;
  assign x__h91370 = ~dtm_access_putCommand_put[24] ;
  assign x__h91558 = ~dtm_access_putCommand_put[16:14] ;
  assign x__h92862 = dtm_access_putCommand_put[40:34] - 7'h04 ;
  assign x__h9316 = cmderr & y__h9368 ;
  assign x__h93351 = dtm_access_putCommand_put[40:34] - 7'h20 ;
  assign x__read__h5431 =
	     (dtm_access_putCommand_put[1:0] == 2'd2) ?
	       ((dtm_access_putCommand_put[40:34] == 7'h17) ?
		  dtm_access_putCommand_put[33:26] :
		  cmdtype) :
	       cmdtype ;
  assign x_wget__h3890 = slave_xactor_f_wr_data_D_OUT[76:13] == 64'd0 ;
  assign x_wget__h4202 = x_wget__h3890 ;
  assign x_wget__h5576 =
	     (dtm_access_putCommand_put[1:0] == 2'd2) ?
	       ((dtm_access_putCommand_put[40:34] == 7'h17) ?
		  dtm_access_putCommand_put[25:2] :
		  control) :
	       control ;
  assign y__h11225 = ~hahalted ;
  assign y__h21229 =
	     SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d425[31:24] &
	     y__h21512 ;
  assign y__h21230 = {8{slave_xactor_f_wr_data_D_OUT[8]}} ;
  assign y__h21512 = ~y__h21230 ;
  assign y__h21603 =
	     SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d425[23:16] &
	     y__h21663 ;
  assign y__h21604 = {8{slave_xactor_f_wr_data_D_OUT[7]}} ;
  assign y__h21663 = ~y__h21604 ;
  assign y__h21740 =
	     SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d425[15:8] &
	     y__h21800 ;
  assign y__h21741 = {8{slave_xactor_f_wr_data_D_OUT[6]}} ;
  assign y__h21800 = ~y__h21741 ;
  assign y__h21877 =
	     SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d425[7:0] &
	     y__h21937 ;
  assign y__h21878 = {8{slave_xactor_f_wr_data_D_OUT[5]}} ;
  assign y__h21937 = ~y__h21878 ;
  assign y__h35466 =
	     SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d492[31:24] &
	     y__h35752 ;
  assign y__h35467 = {8{slave_xactor_f_wr_data_D_OUT[12]}} ;
  assign y__h35752 = ~y__h35467 ;
  assign y__h35845 =
	     SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d492[23:16] &
	     y__h35905 ;
  assign y__h35846 = {8{slave_xactor_f_wr_data_D_OUT[11]}} ;
  assign y__h35905 = ~y__h35846 ;
  assign y__h35982 =
	     SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d492[15:8] &
	     y__h36042 ;
  assign y__h35983 = {8{slave_xactor_f_wr_data_D_OUT[10]}} ;
  assign y__h36042 = ~y__h35983 ;
  assign y__h36119 =
	     SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d492[7:0] &
	     y__h36179 ;
  assign y__h36120 = {8{slave_xactor_f_wr_data_D_OUT[9]}} ;
  assign y__h36179 = ~y__h36120 ;
  assign y__h49826 =
	     SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560[31:24] &
	     y__h21512 ;
  assign y__h50192 =
	     SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560[23:16] &
	     y__h21663 ;
  assign y__h50329 =
	     SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560[15:8] &
	     y__h21800 ;
  assign y__h50466 =
	     SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560[7:0] &
	     y__h21937 ;
  assign y__h68808 =
	     SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614[31:24] &
	     y__h35752 ;
  assign y__h69191 =
	     SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614[23:16] &
	     y__h35905 ;
  assign y__h69328 =
	     SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614[15:8] &
	     y__h36042 ;
  assign y__h69465 =
	     SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614[7:0] &
	     y__h36179 ;
  assign y__h8805 = wr_harthalting_wren_whas && x_wget__h3890 ;
  assign y__h8814 = ~x__h8815 ;
  assign y__h89824 = data__h89784 & { hasel, 5'd0 } == 6'd0 ;
  assign y__h89826 = ~({ hasel, 5'd0 } == 6'd0) ;
  assign y__h9368 = ~dtm_access_putCommand_put[12:10] ;
  assign y_avValue_fst__h18034 =
	     (!slave_xactor_f_rd_addr_first__77_BITS_31_TO_20_ETC___d294 &&
	      slave_xactor_f_rd_addr_D_OUT[31:20] <= 12'd2160 &&
	      slave_xactor_f_rd_addr_D_OUT[16:14] == 3'd2) ?
	       v__h16503 :
	       64'd0 ;
  assign y_avValue_fst__h18046 =
	     (!slave_xactor_f_rd_addr_first__77_BITS_31_TO_20_ETC___d283 &&
	      slave_xactor_f_rd_addr_D_OUT[31:20] <= 12'd892) ?
	       v__h16021 :
	       y_avValue_fst__h18034 ;
  assign y_avValue_fst__h18058 =
	     (slave_xactor_f_rd_addr_D_OUT[31:20] >= 12'h380 &&
	      slave_xactor_f_rd_addr_D_OUT[31:20] <= 12'd944) ?
	       { (slave_xactor_f_rd_addr_D_OUT[16:14] == 3'd3) ?
		   spliced_bits__h19483 :
		   SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d347,
		 SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d347 } :
	       y_avValue_fst__h18046 ;
  assign y_avValue_fst__h18072 =
	     NOT_slave_xactor_f_rd_addr_first__77_BITS_31_T_ETC___d295 ?
	       data___1__h18439 :
	       y_avValue_fst__h18058 ;
  assign y_avValue_fst__h18086 =
	     (slave_xactor_f_rd_addr_D_OUT[31:20] >= 12'd820 &&
	      slave_xactor_f_rd_addr_first__77_BITS_31_TO_20_ETC___d283 &&
	      slave_xactor_f_rd_addr_D_OUT[16:14] == 3'd2) ?
	       v__h15528 :
	       y_avValue_fst__h18072 ;
  assign y_avValue_fst__h95122 =
	     (dtm_access_putCommand_put[40:34] >= 7'h20 &&
	      dtm_access_putCommand_put[40:34] <= 7'd48) ?
	       v__h94869 :
	       32'd0 ;
  assign y_avValue_fst__h95188 =
	     (!dtm_access_putCommand_put_BITS_40_TO_34_05_ULT_ETC___d760 &&
	      dtm_access_putCommand_put_BITS_40_TO_34_05_ULE_16___d762) ?
	       v__h94615 :
	       y_avValue_fst__h95122 ;
  assign y_avValue_snd__h95295 =
	     dtm_access_putCommand_put_BITS_40_TO_34_05_EQ__ETC___d1265 ?
	       2'd0 :
	       2'd2 ;
  always@(sbaccess or
	  writedata__h11814 or
	  writedata__h12844 or writedata__h13397 or writedata__h13690)
  begin
    case (sbaccess)
      3'd0: wr_data_request_wdata__h11770 = writedata__h11814;
      3'd1: wr_data_request_wdata__h11770 = writedata__h12844;
      3'd2: wr_data_request_wdata__h11770 = writedata__h13397;
      3'd3: wr_data_request_wdata__h11770 = writedata__h13690;
      default: wr_data_request_wdata__h11770 = 64'd0;
    endcase
  end
  always@(sbaccess or
	  writestrb__h11815 or
	  writestrb__h12845 or writestrb__h13398 or writestrb__h13691)
  begin
    case (sbaccess)
      3'd0: wr_data_request_wstrb__h11771 = writestrb__h11815;
      3'd1: wr_data_request_wstrb__h11771 = writestrb__h12845;
      3'd2: wr_data_request_wstrb__h11771 = writestrb__h13398;
      3'd3: wr_data_request_wstrb__h11771 = writestrb__h13691;
      default: wr_data_request_wstrb__h11771 = 8'd0;
    endcase
  end
  always@(x__h92862 or
	  v_data_reg_0 or
	  v_data_reg_1 or
	  v_data_reg_2 or
	  v_data_reg_3 or
	  v_data_reg_4 or
	  v_data_reg_5 or
	  v_data_reg_6 or
	  v_data_reg_7 or
	  v_data_reg_8 or v_data_reg_9 or v_data_reg_10 or v_data_reg_11)
  begin
    case (x__h92862)
      7'd0: v__h94615 = v_data_reg_0;
      7'd1: v__h94615 = v_data_reg_1;
      7'd2: v__h94615 = v_data_reg_2;
      7'd3: v__h94615 = v_data_reg_3;
      7'd4: v__h94615 = v_data_reg_4;
      7'd5: v__h94615 = v_data_reg_5;
      7'd6: v__h94615 = v_data_reg_6;
      7'd7: v__h94615 = v_data_reg_7;
      7'd8: v__h94615 = v_data_reg_8;
      7'd9: v__h94615 = v_data_reg_9;
      7'd10: v__h94615 = v_data_reg_10;
      7'd11: v__h94615 = v_data_reg_11;
      default: v__h94615 =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h93351 or
	  v_progbuf_reg_0 or
	  v_progbuf_reg_1 or
	  v_progbuf_reg_2 or
	  v_progbuf_reg_3 or
	  v_progbuf_reg_4 or
	  v_progbuf_reg_5 or
	  v_progbuf_reg_6 or
	  v_progbuf_reg_7 or
	  v_progbuf_reg_8 or
	  v_progbuf_reg_9 or
	  v_progbuf_reg_10 or
	  v_progbuf_reg_11 or
	  v_progbuf_reg_12 or
	  v_progbuf_reg_13 or v_progbuf_reg_14 or v_progbuf_reg_15)
  begin
    case (x__h93351)
      7'd0: v__h94869 = v_progbuf_reg_0;
      7'd1: v__h94869 = v_progbuf_reg_1;
      7'd2: v__h94869 = v_progbuf_reg_2;
      7'd3: v__h94869 = v_progbuf_reg_3;
      7'd4: v__h94869 = v_progbuf_reg_4;
      7'd5: v__h94869 = v_progbuf_reg_5;
      7'd6: v__h94869 = v_progbuf_reg_6;
      7'd7: v__h94869 = v_progbuf_reg_7;
      7'd8: v__h94869 = v_progbuf_reg_8;
      7'd9: v__h94869 = v_progbuf_reg_9;
      7'd10: v__h94869 = v_progbuf_reg_10;
      7'd11: v__h94869 = v_progbuf_reg_11;
      7'd12: v__h94869 = v_progbuf_reg_12;
      7'd13: v__h94869 = v_progbuf_reg_13;
      7'd14: v__h94869 = v_progbuf_reg_14;
      7'd15: v__h94869 = v_progbuf_reg_15;
      default: v__h94869 =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h16445 or
	  v_progbuf_reg_0 or
	  v_progbuf_reg_1 or
	  v_progbuf_reg_2 or
	  v_progbuf_reg_3 or
	  v_progbuf_reg_4 or
	  v_progbuf_reg_5 or
	  v_progbuf_reg_6 or
	  v_progbuf_reg_7 or
	  v_progbuf_reg_8 or
	  v_progbuf_reg_9 or
	  v_progbuf_reg_10 or
	  v_progbuf_reg_11 or
	  v_progbuf_reg_12 or
	  v_progbuf_reg_13 or v_progbuf_reg_14 or v_progbuf_reg_15)
  begin
    case (x__h16445)
      4'd0: spliced_bits__h16060 = v_progbuf_reg_0;
      4'd1: spliced_bits__h16060 = v_progbuf_reg_1;
      4'd2: spliced_bits__h16060 = v_progbuf_reg_2;
      4'd3: spliced_bits__h16060 = v_progbuf_reg_3;
      4'd4: spliced_bits__h16060 = v_progbuf_reg_4;
      4'd5: spliced_bits__h16060 = v_progbuf_reg_5;
      4'd6: spliced_bits__h16060 = v_progbuf_reg_6;
      4'd7: spliced_bits__h16060 = v_progbuf_reg_7;
      4'd8: spliced_bits__h16060 = v_progbuf_reg_8;
      4'd9: spliced_bits__h16060 = v_progbuf_reg_9;
      4'd10: spliced_bits__h16060 = v_progbuf_reg_10;
      4'd11: spliced_bits__h16060 = v_progbuf_reg_11;
      4'd12: spliced_bits__h16060 = v_progbuf_reg_12;
      4'd13: spliced_bits__h16060 = v_progbuf_reg_13;
      4'd14: spliced_bits__h16060 = v_progbuf_reg_14;
      4'd15: spliced_bits__h16060 = v_progbuf_reg_15;
    endcase
  end
  always@(x__h19859 or
	  v_data_reg_0 or
	  v_data_reg_1 or
	  v_data_reg_2 or
	  v_data_reg_3 or
	  v_data_reg_4 or
	  v_data_reg_5 or
	  v_data_reg_6 or
	  v_data_reg_7 or
	  v_data_reg_8 or v_data_reg_9 or v_data_reg_10 or v_data_reg_11)
  begin
    case (x__h19859)
      4'd0: spliced_bits__h19483 = v_data_reg_0;
      4'd1: spliced_bits__h19483 = v_data_reg_1;
      4'd2: spliced_bits__h19483 = v_data_reg_2;
      4'd3: spliced_bits__h19483 = v_data_reg_3;
      4'd4: spliced_bits__h19483 = v_data_reg_4;
      4'd5: spliced_bits__h19483 = v_data_reg_5;
      4'd6: spliced_bits__h19483 = v_data_reg_6;
      4'd7: spliced_bits__h19483 = v_data_reg_7;
      4'd8: spliced_bits__h19483 = v_data_reg_8;
      4'd9: spliced_bits__h19483 = v_data_reg_9;
      4'd10: spliced_bits__h19483 = v_data_reg_10;
      4'd11: spliced_bits__h19483 = v_data_reg_11;
      default: spliced_bits__h19483 =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x5867_MINUS_8__q4 or v_abstract_reg_0 or v_abstract_reg_1)
  begin
    case (x5867_MINUS_8__q4[2])
      1'd0:
	  SEL_ARR_v_abstract_reg_0_14_v_abstract_reg_1_1_ETC___d322 =
	      v_abstract_reg_0;
      1'd1:
	  SEL_ARR_v_abstract_reg_0_14_v_abstract_reg_1_1_ETC___d322 =
	      v_abstract_reg_1;
    endcase
  end
  always@(x__h15871 or
	  v_data_reg_0 or
	  v_data_reg_1 or
	  v_data_reg_2 or
	  v_data_reg_3 or
	  v_data_reg_4 or
	  v_data_reg_5 or
	  v_data_reg_6 or
	  v_data_reg_7 or
	  v_data_reg_8 or v_data_reg_9 or v_data_reg_10 or v_data_reg_11)
  begin
    case (x__h15871[5:2])
      4'd0:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d347 =
	      v_data_reg_0;
      4'd1:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d347 =
	      v_data_reg_1;
      4'd2:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d347 =
	      v_data_reg_2;
      4'd3:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d347 =
	      v_data_reg_3;
      4'd4:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d347 =
	      v_data_reg_4;
      4'd5:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d347 =
	      v_data_reg_5;
      4'd6:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d347 =
	      v_data_reg_6;
      4'd7:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d347 =
	      v_data_reg_7;
      4'd8:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d347 =
	      v_data_reg_8;
      4'd9:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d347 =
	      v_data_reg_9;
      4'd10:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d347 =
	      v_data_reg_10;
      4'd11:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d347 =
	      v_data_reg_11;
      default: SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d347 =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(slave_xactor_f_rd_addrD_OUT_BITS_31_TO_20_MIN_ETC__q1 or
	  v_progbuf_reg_0 or
	  v_progbuf_reg_1 or
	  v_progbuf_reg_2 or
	  v_progbuf_reg_3 or
	  v_progbuf_reg_4 or
	  v_progbuf_reg_5 or
	  v_progbuf_reg_6 or
	  v_progbuf_reg_7 or
	  v_progbuf_reg_8 or
	  v_progbuf_reg_9 or
	  v_progbuf_reg_10 or
	  v_progbuf_reg_11 or
	  v_progbuf_reg_12 or
	  v_progbuf_reg_13 or v_progbuf_reg_14 or v_progbuf_reg_15)
  begin
    case (slave_xactor_f_rd_addrD_OUT_BITS_31_TO_20_MIN_ETC__q1[5:2])
      4'd0:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d371 =
	      v_progbuf_reg_0;
      4'd1:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d371 =
	      v_progbuf_reg_1;
      4'd2:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d371 =
	      v_progbuf_reg_2;
      4'd3:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d371 =
	      v_progbuf_reg_3;
      4'd4:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d371 =
	      v_progbuf_reg_4;
      4'd5:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d371 =
	      v_progbuf_reg_5;
      4'd6:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d371 =
	      v_progbuf_reg_6;
      4'd7:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d371 =
	      v_progbuf_reg_7;
      4'd8:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d371 =
	      v_progbuf_reg_8;
      4'd9:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d371 =
	      v_progbuf_reg_9;
      4'd10:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d371 =
	      v_progbuf_reg_10;
      4'd11:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d371 =
	      v_progbuf_reg_11;
      4'd12:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d371 =
	      v_progbuf_reg_12;
      4'd13:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d371 =
	      v_progbuf_reg_13;
      4'd14:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d371 =
	      v_progbuf_reg_14;
      4'd15:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d371 =
	      v_progbuf_reg_15;
    endcase
  end
  always@(slave_xactor_f_rd_addrD_OUT_BITS_31_TO_20_MIN_ETC__q5)
  begin
    case (slave_xactor_f_rd_addrD_OUT_BITS_31_TO_20_MIN_ETC__q5[6:2])
      5'd0:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h00C0006F;
      5'd1:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h0600006F;
      5'd2:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h0380006F;
      5'd3, 5'd22:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h0FF0000F;
      5'd4:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h7B241073;
      5'd5, 5'd10, 5'd19, 5'd25:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'hF1402473;
      5'd6:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h10802023;
      5'd7, 5'd11:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h40044403;
      5'd8:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h00147413;
      5'd9:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h02041463;
      5'd12:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h00247413;
      5'd13:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h02041863;
      5'd14, 5'd29, 5'd30, 5'd31:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h00000013;
      5'd15:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'hFD9FF06F;
      5'd16, 5'd21, 5'd27:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h7B202473;
      5'd17:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h10002623;
      5'd18:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h00100073;
      5'd20:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h10802223;
      5'd23:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h0000100F;
      5'd24:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h30000067;
      5'd26:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h10802423;
      5'd28:
	  SEL_ARR_0xC0006F_0x600006F_0x380006F_0xFF0000F_ETC___d377 =
	      32'h7B200073;
    endcase
  end
  always@(slave_xactor_f_rd_addr_D_OUT or y_avValue_fst__h18086)
  begin
    case (slave_xactor_f_rd_addr_D_OUT[31:20])
      12'h300: r_rdata__h18132 = 64'h0340006F0340006F;
      12'd892: r_rdata__h18132 = 64'h0010007300100073;
      default: r_rdata__h18132 = y_avValue_fst__h18086;
    endcase
  end
  always@(slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3 or
	  v_data_reg_0 or
	  v_data_reg_1 or
	  v_data_reg_2 or
	  v_data_reg_3 or
	  v_data_reg_4 or
	  v_data_reg_5 or
	  v_data_reg_6 or
	  v_data_reg_7 or
	  v_data_reg_8 or v_data_reg_9 or v_data_reg_10 or v_data_reg_11)
  begin
    case (slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q3[5:2])
      4'd0:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d425 =
	      v_data_reg_0;
      4'd1:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d425 =
	      v_data_reg_1;
      4'd2:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d425 =
	      v_data_reg_2;
      4'd3:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d425 =
	      v_data_reg_3;
      4'd4:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d425 =
	      v_data_reg_4;
      4'd5:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d425 =
	      v_data_reg_5;
      4'd6:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d425 =
	      v_data_reg_6;
      4'd7:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d425 =
	      v_data_reg_7;
      4'd8:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d425 =
	      v_data_reg_8;
      4'd9:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d425 =
	      v_data_reg_9;
      4'd10:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d425 =
	      v_data_reg_10;
      4'd11:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d425 =
	      v_data_reg_11;
      default: SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d425 =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h34773 or
	  v_data_reg_0 or
	  v_data_reg_1 or
	  v_data_reg_2 or
	  v_data_reg_3 or
	  v_data_reg_4 or
	  v_data_reg_5 or
	  v_data_reg_6 or
	  v_data_reg_7 or
	  v_data_reg_8 or v_data_reg_9 or v_data_reg_10 or v_data_reg_11)
  begin
    case (x__h34773)
      4'd0:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d492 =
	      v_data_reg_0;
      4'd1:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d492 =
	      v_data_reg_1;
      4'd2:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d492 =
	      v_data_reg_2;
      4'd3:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d492 =
	      v_data_reg_3;
      4'd4:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d492 =
	      v_data_reg_4;
      4'd5:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d492 =
	      v_data_reg_5;
      4'd6:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d492 =
	      v_data_reg_6;
      4'd7:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d492 =
	      v_data_reg_7;
      4'd8:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d492 =
	      v_data_reg_8;
      4'd9:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d492 =
	      v_data_reg_9;
      4'd10:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d492 =
	      v_data_reg_10;
      4'd11:
	  SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d492 =
	      v_data_reg_11;
      default: SEL_ARR_v_data_reg_0_31_v_data_reg_1_32_v_data_ETC___d492 =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2 or
	  v_progbuf_reg_0 or
	  v_progbuf_reg_1 or
	  v_progbuf_reg_2 or
	  v_progbuf_reg_3 or
	  v_progbuf_reg_4 or
	  v_progbuf_reg_5 or
	  v_progbuf_reg_6 or
	  v_progbuf_reg_7 or
	  v_progbuf_reg_8 or
	  v_progbuf_reg_9 or
	  v_progbuf_reg_10 or
	  v_progbuf_reg_11 or
	  v_progbuf_reg_12 or
	  v_progbuf_reg_13 or v_progbuf_reg_14 or v_progbuf_reg_15)
  begin
    case (slave_xactor_f_wr_addrD_OUT_BITS_31_TO_20_MIN_ETC__q2[5:2])
      4'd0:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560 =
	      v_progbuf_reg_0;
      4'd1:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560 =
	      v_progbuf_reg_1;
      4'd2:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560 =
	      v_progbuf_reg_2;
      4'd3:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560 =
	      v_progbuf_reg_3;
      4'd4:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560 =
	      v_progbuf_reg_4;
      4'd5:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560 =
	      v_progbuf_reg_5;
      4'd6:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560 =
	      v_progbuf_reg_6;
      4'd7:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560 =
	      v_progbuf_reg_7;
      4'd8:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560 =
	      v_progbuf_reg_8;
      4'd9:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560 =
	      v_progbuf_reg_9;
      4'd10:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560 =
	      v_progbuf_reg_10;
      4'd11:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560 =
	      v_progbuf_reg_11;
      4'd12:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560 =
	      v_progbuf_reg_12;
      4'd13:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560 =
	      v_progbuf_reg_13;
      4'd14:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560 =
	      v_progbuf_reg_14;
      4'd15:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d560 =
	      v_progbuf_reg_15;
    endcase
  end
  always@(x__h68053 or
	  v_progbuf_reg_0 or
	  v_progbuf_reg_1 or
	  v_progbuf_reg_2 or
	  v_progbuf_reg_3 or
	  v_progbuf_reg_4 or
	  v_progbuf_reg_5 or
	  v_progbuf_reg_6 or
	  v_progbuf_reg_7 or
	  v_progbuf_reg_8 or
	  v_progbuf_reg_9 or
	  v_progbuf_reg_10 or
	  v_progbuf_reg_11 or
	  v_progbuf_reg_12 or
	  v_progbuf_reg_13 or v_progbuf_reg_14 or v_progbuf_reg_15)
  begin
    case (x__h68053)
      4'd0:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614 =
	      v_progbuf_reg_0;
      4'd1:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614 =
	      v_progbuf_reg_1;
      4'd2:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614 =
	      v_progbuf_reg_2;
      4'd3:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614 =
	      v_progbuf_reg_3;
      4'd4:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614 =
	      v_progbuf_reg_4;
      4'd5:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614 =
	      v_progbuf_reg_5;
      4'd6:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614 =
	      v_progbuf_reg_6;
      4'd7:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614 =
	      v_progbuf_reg_7;
      4'd8:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614 =
	      v_progbuf_reg_8;
      4'd9:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614 =
	      v_progbuf_reg_9;
      4'd10:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614 =
	      v_progbuf_reg_10;
      4'd11:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614 =
	      v_progbuf_reg_11;
      4'd12:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614 =
	      v_progbuf_reg_12;
      4'd13:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614 =
	      v_progbuf_reg_13;
      4'd14:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614 =
	      v_progbuf_reg_14;
      4'd15:
	  SEL_ARR_v_progbuf_reg_0_50_v_progbuf_reg_1_51__ETC___d614 =
	      v_progbuf_reg_15;
    endcase
  end
  always@(dtm_access_putCommand_put or
	  y_avValue_fst__h95188 or
	  dmi_response_data___2__h93973 or
	  dmi_response_data___2__h93979 or
	  dmi_response_data___2__h93985 or
	  dmi_response_data___2__h94064 or
	  dmi_response_data___2__h95409 or
	  dmi_response_data___2__h95437 or
	  dmi_response_data___2__h95444 or
	  sbaddress3 or
	  dmi_response_data___2__h94052 or
	  sbaddress0 or sbaddress1 or sbaddress2 or v__h94149 or v__h94368)
  begin
    case (dtm_access_putCommand_put[40:34])
      7'h10: y_avValue_fst__h95294 = dmi_response_data___2__h93973;
      7'h11: y_avValue_fst__h95294 = dmi_response_data___2__h93979;
      7'h12: y_avValue_fst__h95294 = dmi_response_data___2__h93985;
      7'h13: y_avValue_fst__h95294 = dmi_response_data___2__h94064;
      7'h14,
      7'h17,
      7'h19,
      7'h1A,
      7'h1B,
      7'h1C,
      7'h1D,
      7'h34,
      7'h35,
      7'h3E,
      7'h3F,
      7'h40:
	  y_avValue_fst__h95294 = 32'd0;
      7'h15: y_avValue_fst__h95294 = dmi_response_data___2__h95409;
      7'h16: y_avValue_fst__h95294 = dmi_response_data___2__h95437;
      7'h18: y_avValue_fst__h95294 = dmi_response_data___2__h95444;
      7'h37: y_avValue_fst__h95294 = sbaddress3;
      7'h38: y_avValue_fst__h95294 = dmi_response_data___2__h94052;
      7'h39: y_avValue_fst__h95294 = sbaddress0;
      7'h3A: y_avValue_fst__h95294 = sbaddress1;
      7'h3B: y_avValue_fst__h95294 = sbaddress2;
      7'h3C: y_avValue_fst__h95294 = v__h94149;
      7'h3D: y_avValue_fst__h95294 = v__h94368;
      default: y_avValue_fst__h95294 = y_avValue_fst__h95188;
    endcase
  end
  always@(dtm_access_putCommand_put or
	  y_avValue_fst__h95294 or y_avValue_snd__h95295 or v__h87899)
  begin
    case (dtm_access_putCommand_put[1:0])
      2'd1:
	  CASE_dtm_access_putCommand_put_BITS_1_TO_0_1_y_ETC__q6 =
	      { y_avValue_fst__h95294, y_avValue_snd__h95295 };
      2'd2:
	  CASE_dtm_access_putCommand_put_BITS_1_TO_0_1_y_ETC__q6 =
	      { 32'd0, v__h87899 };
      default: CASE_dtm_access_putCommand_put_BITS_1_TO_0_1_y_ETC__q6 = 34'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        allhalted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	allhavereset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	allnonexistent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	allresumeack <= `BSV_ASSIGNMENT_DELAY 1'd1;
	allrunning <= `BSV_ASSIGNMENT_DELAY 1'd1;
	allunavail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	anyhalted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	anyhavereset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	anynonexistent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	anyresumeack <= `BSV_ASSIGNMENT_DELAY 1'd1;
	anyrunning <= `BSV_ASSIGNMENT_DELAY 1'd1;
	anyunavail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	authbusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	authenticated <= `BSV_ASSIGNMENT_DELAY 1'd1;
	confstrptrvalid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dmactive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dmi_response <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      34'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	hasresethaltreq <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ndmresetpending <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_init <= `BSV_ASSIGNMENT_DELAY 1'd0;
	version <= `BSV_ASSIGNMENT_DELAY 4'd3;
      end
    else
      begin
        if (allhalted_EN) allhalted <= `BSV_ASSIGNMENT_DELAY allhalted_D_IN;
	if (allhavereset_EN)
	  allhavereset <= `BSV_ASSIGNMENT_DELAY allhavereset_D_IN;
	if (allnonexistent_EN)
	  allnonexistent <= `BSV_ASSIGNMENT_DELAY allnonexistent_D_IN;
	if (allresumeack_EN)
	  allresumeack <= `BSV_ASSIGNMENT_DELAY allresumeack_D_IN;
	if (allrunning_EN)
	  allrunning <= `BSV_ASSIGNMENT_DELAY allrunning_D_IN;
	if (allunavail_EN)
	  allunavail <= `BSV_ASSIGNMENT_DELAY allunavail_D_IN;
	if (anyhalted_EN) anyhalted <= `BSV_ASSIGNMENT_DELAY anyhalted_D_IN;
	if (anyhavereset_EN)
	  anyhavereset <= `BSV_ASSIGNMENT_DELAY anyhavereset_D_IN;
	if (anynonexistent_EN)
	  anynonexistent <= `BSV_ASSIGNMENT_DELAY anynonexistent_D_IN;
	if (anyresumeack_EN)
	  anyresumeack <= `BSV_ASSIGNMENT_DELAY anyresumeack_D_IN;
	if (anyrunning_EN)
	  anyrunning <= `BSV_ASSIGNMENT_DELAY anyrunning_D_IN;
	if (anyunavail_EN)
	  anyunavail <= `BSV_ASSIGNMENT_DELAY anyunavail_D_IN;
	if (authbusy_EN) authbusy <= `BSV_ASSIGNMENT_DELAY authbusy_D_IN;
	if (authenticated_EN)
	  authenticated <= `BSV_ASSIGNMENT_DELAY authenticated_D_IN;
	if (confstrptrvalid_EN)
	  confstrptrvalid <= `BSV_ASSIGNMENT_DELAY confstrptrvalid_D_IN;
	if (dmactive_EN) dmactive <= `BSV_ASSIGNMENT_DELAY dmactive_D_IN;
	if (dmi_response_EN)
	  dmi_response <= `BSV_ASSIGNMENT_DELAY dmi_response_D_IN;
	if (hasresethaltreq_EN)
	  hasresethaltreq <= `BSV_ASSIGNMENT_DELAY hasresethaltreq_D_IN;
	if (ndmresetpending_EN)
	  ndmresetpending <= `BSV_ASSIGNMENT_DELAY ndmresetpending_D_IN;
	if (rg_init_EN) rg_init <= `BSV_ASSIGNMENT_DELAY rg_init_D_IN;
	if (version_EN) version <= `BSV_ASSIGNMENT_DELAY version_D_IN;
      end
    if (dm_reset_RST_OUT == `BSV_RESET_VALUE)
      begin
        _unnamed_ <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ackhavereset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ackunavail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	autoexecdata <= `BSV_ASSIGNMENT_DELAY 12'd0;
	autoexecprogbuf <= `BSV_ASSIGNMENT_DELAY 16'd0;
	busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	clrresethaltreq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cmderr <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cmdtype <= `BSV_ASSIGNMENT_DELAY 8'd0;
	control <= `BSV_ASSIGNMENT_DELAY 24'd0;
	hahalted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hahaltreq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hahavereset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	haltreq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hamask <= `BSV_ASSIGNMENT_DELAY 1'd0;
	haresetreq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	haresumeack <= `BSV_ASSIGNMENT_DELAY 1'd0;
	haresumereq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hartreset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hasel <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ndmreset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	relaxedpriv <= `BSV_ASSIGNMENT_DELAY 1'd0;
	resumereq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_sbread_en <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_sbwrite_en <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sbaccess <= `BSV_ASSIGNMENT_DELAY 3'd2;
	sbaddress0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sbaddress1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sbaddress2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sbaddress3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sbautoincrement <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sbbusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sbbusyerror <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sbdata0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sbdata1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sbdata2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sbdata3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sberr <= `BSV_ASSIGNMENT_DELAY 3'd0;
	sbreadonaddr <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sbreadondata <= `BSV_ASSIGNMENT_DELAY 1'd0;
	setresethaltreq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_abstract_reg_0 <= `BSV_ASSIGNMENT_DELAY 32'h00000013;
	v_abstract_reg_1 <= `BSV_ASSIGNMENT_DELAY 32'h00000013;
	v_data_reg_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_data_reg_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_data_reg_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_data_reg_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_data_reg_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_data_reg_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_data_reg_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_data_reg_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_data_reg_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_data_reg_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_data_reg_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_data_reg_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_flags_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	v_hartinfo_reg_0 <= `BSV_ASSIGNMENT_DELAY 32'd1164160;
	v_progbuf_reg_0 <= `BSV_ASSIGNMENT_DELAY 32'h00000013;
	v_progbuf_reg_1 <= `BSV_ASSIGNMENT_DELAY 32'h00000013;
	v_progbuf_reg_10 <= `BSV_ASSIGNMENT_DELAY 32'h00000013;
	v_progbuf_reg_11 <= `BSV_ASSIGNMENT_DELAY 32'h00000013;
	v_progbuf_reg_12 <= `BSV_ASSIGNMENT_DELAY 32'h00000013;
	v_progbuf_reg_13 <= `BSV_ASSIGNMENT_DELAY 32'h00000013;
	v_progbuf_reg_14 <= `BSV_ASSIGNMENT_DELAY 32'h00000013;
	v_progbuf_reg_15 <= `BSV_ASSIGNMENT_DELAY 32'h00000013;
	v_progbuf_reg_2 <= `BSV_ASSIGNMENT_DELAY 32'h00000013;
	v_progbuf_reg_3 <= `BSV_ASSIGNMENT_DELAY 32'h00000013;
	v_progbuf_reg_4 <= `BSV_ASSIGNMENT_DELAY 32'h00000013;
	v_progbuf_reg_5 <= `BSV_ASSIGNMENT_DELAY 32'h00000013;
	v_progbuf_reg_6 <= `BSV_ASSIGNMENT_DELAY 32'h00000013;
	v_progbuf_reg_7 <= `BSV_ASSIGNMENT_DELAY 32'h00000013;
	v_progbuf_reg_8 <= `BSV_ASSIGNMENT_DELAY 32'h00000013;
	v_progbuf_reg_9 <= `BSV_ASSIGNMENT_DELAY 32'h00000013;
      end
    else
      begin
        if (_unnamed__EN) _unnamed_ <= `BSV_ASSIGNMENT_DELAY _unnamed__D_IN;
	if (ackhavereset_EN)
	  ackhavereset <= `BSV_ASSIGNMENT_DELAY ackhavereset_D_IN;
	if (ackunavail_EN)
	  ackunavail <= `BSV_ASSIGNMENT_DELAY ackunavail_D_IN;
	if (autoexecdata_EN)
	  autoexecdata <= `BSV_ASSIGNMENT_DELAY autoexecdata_D_IN;
	if (autoexecprogbuf_EN)
	  autoexecprogbuf <= `BSV_ASSIGNMENT_DELAY autoexecprogbuf_D_IN;
	if (busy_EN) busy <= `BSV_ASSIGNMENT_DELAY busy_D_IN;
	if (clrresethaltreq_EN)
	  clrresethaltreq <= `BSV_ASSIGNMENT_DELAY clrresethaltreq_D_IN;
	if (cmderr_EN) cmderr <= `BSV_ASSIGNMENT_DELAY cmderr_D_IN;
	if (cmdtype_EN) cmdtype <= `BSV_ASSIGNMENT_DELAY cmdtype_D_IN;
	if (control_EN) control <= `BSV_ASSIGNMENT_DELAY control_D_IN;
	if (hahalted_EN) hahalted <= `BSV_ASSIGNMENT_DELAY hahalted_D_IN;
	if (hahaltreq_EN) hahaltreq <= `BSV_ASSIGNMENT_DELAY hahaltreq_D_IN;
	if (hahavereset_EN)
	  hahavereset <= `BSV_ASSIGNMENT_DELAY hahavereset_D_IN;
	if (haltreq_EN) haltreq <= `BSV_ASSIGNMENT_DELAY haltreq_D_IN;
	if (hamask_EN) hamask <= `BSV_ASSIGNMENT_DELAY hamask_D_IN;
	if (haresetreq_EN)
	  haresetreq <= `BSV_ASSIGNMENT_DELAY haresetreq_D_IN;
	if (haresumeack_EN)
	  haresumeack <= `BSV_ASSIGNMENT_DELAY haresumeack_D_IN;
	if (haresumereq_EN)
	  haresumereq <= `BSV_ASSIGNMENT_DELAY haresumereq_D_IN;
	if (hartreset_EN) hartreset <= `BSV_ASSIGNMENT_DELAY hartreset_D_IN;
	if (hasel_EN) hasel <= `BSV_ASSIGNMENT_DELAY hasel_D_IN;
	if (ndmreset_EN) ndmreset <= `BSV_ASSIGNMENT_DELAY ndmreset_D_IN;
	if (relaxedpriv_EN)
	  relaxedpriv <= `BSV_ASSIGNMENT_DELAY relaxedpriv_D_IN;
	if (resumereq_EN) resumereq <= `BSV_ASSIGNMENT_DELAY resumereq_D_IN;
	if (rg_sbread_en_EN)
	  rg_sbread_en <= `BSV_ASSIGNMENT_DELAY rg_sbread_en_D_IN;
	if (rg_sbwrite_en_EN)
	  rg_sbwrite_en <= `BSV_ASSIGNMENT_DELAY rg_sbwrite_en_D_IN;
	if (sbaccess_EN) sbaccess <= `BSV_ASSIGNMENT_DELAY sbaccess_D_IN;
	if (sbaddress0_EN)
	  sbaddress0 <= `BSV_ASSIGNMENT_DELAY sbaddress0_D_IN;
	if (sbaddress1_EN)
	  sbaddress1 <= `BSV_ASSIGNMENT_DELAY sbaddress1_D_IN;
	if (sbaddress2_EN)
	  sbaddress2 <= `BSV_ASSIGNMENT_DELAY sbaddress2_D_IN;
	if (sbaddress3_EN)
	  sbaddress3 <= `BSV_ASSIGNMENT_DELAY sbaddress3_D_IN;
	if (sbautoincrement_EN)
	  sbautoincrement <= `BSV_ASSIGNMENT_DELAY sbautoincrement_D_IN;
	if (sbbusy_EN) sbbusy <= `BSV_ASSIGNMENT_DELAY sbbusy_D_IN;
	if (sbbusyerror_EN)
	  sbbusyerror <= `BSV_ASSIGNMENT_DELAY sbbusyerror_D_IN;
	if (sbdata0_EN) sbdata0 <= `BSV_ASSIGNMENT_DELAY sbdata0_D_IN;
	if (sbdata1_EN) sbdata1 <= `BSV_ASSIGNMENT_DELAY sbdata1_D_IN;
	if (sbdata2_EN) sbdata2 <= `BSV_ASSIGNMENT_DELAY sbdata2_D_IN;
	if (sbdata3_EN) sbdata3 <= `BSV_ASSIGNMENT_DELAY sbdata3_D_IN;
	if (sberr_EN) sberr <= `BSV_ASSIGNMENT_DELAY sberr_D_IN;
	if (sbreadonaddr_EN)
	  sbreadonaddr <= `BSV_ASSIGNMENT_DELAY sbreadonaddr_D_IN;
	if (sbreadondata_EN)
	  sbreadondata <= `BSV_ASSIGNMENT_DELAY sbreadondata_D_IN;
	if (setresethaltreq_EN)
	  setresethaltreq <= `BSV_ASSIGNMENT_DELAY setresethaltreq_D_IN;
	if (v_abstract_reg_0_EN)
	  v_abstract_reg_0 <= `BSV_ASSIGNMENT_DELAY v_abstract_reg_0_D_IN;
	if (v_abstract_reg_1_EN)
	  v_abstract_reg_1 <= `BSV_ASSIGNMENT_DELAY v_abstract_reg_1_D_IN;
	if (v_data_reg_0_EN)
	  v_data_reg_0 <= `BSV_ASSIGNMENT_DELAY v_data_reg_0_D_IN;
	if (v_data_reg_1_EN)
	  v_data_reg_1 <= `BSV_ASSIGNMENT_DELAY v_data_reg_1_D_IN;
	if (v_data_reg_10_EN)
	  v_data_reg_10 <= `BSV_ASSIGNMENT_DELAY v_data_reg_10_D_IN;
	if (v_data_reg_11_EN)
	  v_data_reg_11 <= `BSV_ASSIGNMENT_DELAY v_data_reg_11_D_IN;
	if (v_data_reg_2_EN)
	  v_data_reg_2 <= `BSV_ASSIGNMENT_DELAY v_data_reg_2_D_IN;
	if (v_data_reg_3_EN)
	  v_data_reg_3 <= `BSV_ASSIGNMENT_DELAY v_data_reg_3_D_IN;
	if (v_data_reg_4_EN)
	  v_data_reg_4 <= `BSV_ASSIGNMENT_DELAY v_data_reg_4_D_IN;
	if (v_data_reg_5_EN)
	  v_data_reg_5 <= `BSV_ASSIGNMENT_DELAY v_data_reg_5_D_IN;
	if (v_data_reg_6_EN)
	  v_data_reg_6 <= `BSV_ASSIGNMENT_DELAY v_data_reg_6_D_IN;
	if (v_data_reg_7_EN)
	  v_data_reg_7 <= `BSV_ASSIGNMENT_DELAY v_data_reg_7_D_IN;
	if (v_data_reg_8_EN)
	  v_data_reg_8 <= `BSV_ASSIGNMENT_DELAY v_data_reg_8_D_IN;
	if (v_data_reg_9_EN)
	  v_data_reg_9 <= `BSV_ASSIGNMENT_DELAY v_data_reg_9_D_IN;
	if (v_flags_0_EN) v_flags_0 <= `BSV_ASSIGNMENT_DELAY v_flags_0_D_IN;
	if (v_hartinfo_reg_0_EN)
	  v_hartinfo_reg_0 <= `BSV_ASSIGNMENT_DELAY v_hartinfo_reg_0_D_IN;
	if (v_progbuf_reg_0_EN)
	  v_progbuf_reg_0 <= `BSV_ASSIGNMENT_DELAY v_progbuf_reg_0_D_IN;
	if (v_progbuf_reg_1_EN)
	  v_progbuf_reg_1 <= `BSV_ASSIGNMENT_DELAY v_progbuf_reg_1_D_IN;
	if (v_progbuf_reg_10_EN)
	  v_progbuf_reg_10 <= `BSV_ASSIGNMENT_DELAY v_progbuf_reg_10_D_IN;
	if (v_progbuf_reg_11_EN)
	  v_progbuf_reg_11 <= `BSV_ASSIGNMENT_DELAY v_progbuf_reg_11_D_IN;
	if (v_progbuf_reg_12_EN)
	  v_progbuf_reg_12 <= `BSV_ASSIGNMENT_DELAY v_progbuf_reg_12_D_IN;
	if (v_progbuf_reg_13_EN)
	  v_progbuf_reg_13 <= `BSV_ASSIGNMENT_DELAY v_progbuf_reg_13_D_IN;
	if (v_progbuf_reg_14_EN)
	  v_progbuf_reg_14 <= `BSV_ASSIGNMENT_DELAY v_progbuf_reg_14_D_IN;
	if (v_progbuf_reg_15_EN)
	  v_progbuf_reg_15 <= `BSV_ASSIGNMENT_DELAY v_progbuf_reg_15_D_IN;
	if (v_progbuf_reg_2_EN)
	  v_progbuf_reg_2 <= `BSV_ASSIGNMENT_DELAY v_progbuf_reg_2_D_IN;
	if (v_progbuf_reg_3_EN)
	  v_progbuf_reg_3 <= `BSV_ASSIGNMENT_DELAY v_progbuf_reg_3_D_IN;
	if (v_progbuf_reg_4_EN)
	  v_progbuf_reg_4 <= `BSV_ASSIGNMENT_DELAY v_progbuf_reg_4_D_IN;
	if (v_progbuf_reg_5_EN)
	  v_progbuf_reg_5 <= `BSV_ASSIGNMENT_DELAY v_progbuf_reg_5_D_IN;
	if (v_progbuf_reg_6_EN)
	  v_progbuf_reg_6 <= `BSV_ASSIGNMENT_DELAY v_progbuf_reg_6_D_IN;
	if (v_progbuf_reg_7_EN)
	  v_progbuf_reg_7 <= `BSV_ASSIGNMENT_DELAY v_progbuf_reg_7_D_IN;
	if (v_progbuf_reg_8_EN)
	  v_progbuf_reg_8 <= `BSV_ASSIGNMENT_DELAY v_progbuf_reg_8_D_IN;
	if (v_progbuf_reg_9_EN)
	  v_progbuf_reg_9 <= `BSV_ASSIGNMENT_DELAY v_progbuf_reg_9_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    _unnamed_ = 1'h0;
    ackhavereset = 1'h0;
    ackunavail = 1'h0;
    allhalted = 1'h0;
    allhavereset = 1'h0;
    allnonexistent = 1'h0;
    allresumeack = 1'h0;
    allrunning = 1'h0;
    allunavail = 1'h0;
    anyhalted = 1'h0;
    anyhavereset = 1'h0;
    anynonexistent = 1'h0;
    anyresumeack = 1'h0;
    anyrunning = 1'h0;
    anyunavail = 1'h0;
    authbusy = 1'h0;
    authenticated = 1'h0;
    autoexecdata = 12'hAAA;
    autoexecprogbuf = 16'hAAAA;
    busy = 1'h0;
    clrresethaltreq = 1'h0;
    cmderr = 3'h2;
    cmdtype = 8'hAA;
    confstrptrvalid = 1'h0;
    control = 24'hAAAAAA;
    dmactive = 1'h0;
    dmi_response = 35'h2AAAAAAAA;
    hahalted = 1'h0;
    hahaltreq = 1'h0;
    hahavereset = 1'h0;
    haltreq = 1'h0;
    hamask = 1'h0;
    haresetreq = 1'h0;
    haresumeack = 1'h0;
    haresumereq = 1'h0;
    hartreset = 1'h0;
    hasel = 1'h0;
    hasresethaltreq = 1'h0;
    ndmreset = 1'h0;
    ndmresetpending = 1'h0;
    relaxedpriv = 1'h0;
    resumereq = 1'h0;
    rg_init = 1'h0;
    rg_sbread_en = 1'h0;
    rg_sbwrite_en = 1'h0;
    sbaccess = 3'h2;
    sbaddress0 = 32'hAAAAAAAA;
    sbaddress1 = 32'hAAAAAAAA;
    sbaddress2 = 32'hAAAAAAAA;
    sbaddress3 = 32'hAAAAAAAA;
    sbautoincrement = 1'h0;
    sbbusy = 1'h0;
    sbbusyerror = 1'h0;
    sbdata0 = 32'hAAAAAAAA;
    sbdata1 = 32'hAAAAAAAA;
    sbdata2 = 32'hAAAAAAAA;
    sbdata3 = 32'hAAAAAAAA;
    sberr = 3'h2;
    sbreadonaddr = 1'h0;
    sbreadondata = 1'h0;
    setresethaltreq = 1'h0;
    v_abstract_reg_0 = 32'hAAAAAAAA;
    v_abstract_reg_1 = 32'hAAAAAAAA;
    v_data_reg_0 = 32'hAAAAAAAA;
    v_data_reg_1 = 32'hAAAAAAAA;
    v_data_reg_10 = 32'hAAAAAAAA;
    v_data_reg_11 = 32'hAAAAAAAA;
    v_data_reg_2 = 32'hAAAAAAAA;
    v_data_reg_3 = 32'hAAAAAAAA;
    v_data_reg_4 = 32'hAAAAAAAA;
    v_data_reg_5 = 32'hAAAAAAAA;
    v_data_reg_6 = 32'hAAAAAAAA;
    v_data_reg_7 = 32'hAAAAAAAA;
    v_data_reg_8 = 32'hAAAAAAAA;
    v_data_reg_9 = 32'hAAAAAAAA;
    v_flags_0 = 8'hAA;
    v_hartinfo_reg_0 = 32'hAAAAAAAA;
    v_progbuf_reg_0 = 32'hAAAAAAAA;
    v_progbuf_reg_1 = 32'hAAAAAAAA;
    v_progbuf_reg_10 = 32'hAAAAAAAA;
    v_progbuf_reg_11 = 32'hAAAAAAAA;
    v_progbuf_reg_12 = 32'hAAAAAAAA;
    v_progbuf_reg_13 = 32'hAAAAAAAA;
    v_progbuf_reg_14 = 32'hAAAAAAAA;
    v_progbuf_reg_15 = 32'hAAAAAAAA;
    v_progbuf_reg_2 = 32'hAAAAAAAA;
    v_progbuf_reg_3 = 32'hAAAAAAAA;
    v_progbuf_reg_4 = 32'hAAAAAAAA;
    v_progbuf_reg_5 = 32'hAAAAAAAA;
    v_progbuf_reg_6 = 32'hAAAAAAAA;
    v_progbuf_reg_7 = 32'hAAAAAAAA;
    v_progbuf_reg_8 = 32'hAAAAAAAA;
    v_progbuf_reg_9 = 32'hAAAAAAAA;
    version = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (dm_reset_RST_OUT != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sba_write_response &&
	  WILL_FIRE_RL_rl_sba_read_response &&
	  !rg_sbwrite_en &&
	  master_xactor_f_wr_resp_EMPTY_N &&
	  !rg_sbread_en)
	$display("Error: \"devices/riscvdebug100/debug.bsv\", line 810, column 8: (R0002)\n  Conflict-free rules RL_rl_sba_write_response and RL_rl_sba_read_response\n  called conflicting methods read and write of module instance sbbusy.\n");
    if (dm_reset_RST_OUT != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sba_write_response &&
	  WILL_FIRE_RL_rl_sba_read_response &&
	  master_xactor_f_wr_resp_D_OUT[5:4] != 2'd3 &&
	  sbautoincrement &&
	  master_xactor_f_wr_resp_D_OUT[5:4] != 2'd2 &&
	  _write_RL_rl_sba_read_response_EN_sbaddress0_wget)
	$display("Error: \"devices/riscvdebug100/debug.bsv\", line 810, column 8: (R0002)\n  Conflict-free rules RL_rl_sba_write_response and RL_rl_sba_read_response\n  called conflicting methods read and write of module instance sbaddress0.\n");
  end
  // synopsys translate_on
endmodule  // mk_debug

