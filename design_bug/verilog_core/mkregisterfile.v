//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
//
// On Tue Jul 29 14:28:05 +04 2025
//
//
// Ports:
// Name                         I/O  size props
// read_rs1                       O    64
// RDY_read_rs1                   O     1
// read_rs2                       O    64
// RDY_read_rs2                   O     1
// read_rs3                       O    64
// RDY_read_rs3                   O     1
// RDY_commit_rd                  O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_rs1_addr                  I     5
// read_rs1_rs1type               I     1
// read_rs2_addr                  I     5
// read_rs2_rs2type               I     1
// read_rs3_addr                  I     5
// commit_rd_c                    I    75
// EN_commit_rd                   I     1
// EN_read_rs1                    I     1 unused
// EN_read_rs2                    I     1 unused
// EN_read_rs3                    I     1 unused
//
// Combinational paths from inputs to outputs:
//   read_rs1_rs1type -> read_rs1
//   read_rs2_rs2type -> read_rs2
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkregisterfile(CLK,
		      RST_N,

		      read_rs1_addr,
		      read_rs1_rs1type,
		      EN_read_rs1,
		      read_rs1,
		      RDY_read_rs1,

		      read_rs2_addr,
		      read_rs2_rs2type,
		      EN_read_rs2,
		      read_rs2,
		      RDY_read_rs2,

		      read_rs3_addr,
		      EN_read_rs3,
		      read_rs3,
		      RDY_read_rs3,

		      commit_rd_c,
		      EN_commit_rd,
		      RDY_commit_rd);
  parameter [63 : 0] hartid = 64'b0;
  input  CLK;
  input  RST_N;

  // actionvalue method read_rs1
  input  [4 : 0] read_rs1_addr;
  input  read_rs1_rs1type;
  input  EN_read_rs1;
  output [63 : 0] read_rs1;
  output RDY_read_rs1;

  // actionvalue method read_rs2
  input  [4 : 0] read_rs2_addr;
  input  read_rs2_rs2type;
  input  EN_read_rs2;
  output [63 : 0] read_rs2;
  output RDY_read_rs2;

  // actionvalue method read_rs3
  input  [4 : 0] read_rs3_addr;
  input  EN_read_rs3;
  output [63 : 0] read_rs3;
  output RDY_read_rs3;

  // action method commit_rd
  input  [74 : 0] commit_rd_c;
  input  EN_commit_rd;
  output RDY_commit_rd;

  // signals for module outputs
  wire [63 : 0] read_rs1, read_rs2, read_rs3;
  wire RDY_commit_rd, RDY_read_rs1, RDY_read_rs2, RDY_read_rs3;

  // register initialize
  reg initialize;
  wire initialize_D_IN, initialize_EN;

  // register rg_index
  reg [4 : 0] rg_index;
  wire [4 : 0] rg_index_D_IN;
  wire rg_index_EN;

  // ports of submodule frf
  wire [63 : 0] frf_D_IN, frf_D_OUT_1, frf_D_OUT_2, frf_D_OUT_3;
  wire [4 : 0] frf_ADDR_1,
	       frf_ADDR_2,
	       frf_ADDR_3,
	       frf_ADDR_4,
	       frf_ADDR_5,
	       frf_ADDR_IN;
  wire frf_WE;

  // ports of submodule xrf
  wire [63 : 0] xrf_D_IN, xrf_D_OUT_1, xrf_D_OUT_2;
  wire [4 : 0] xrf_ADDR_1,
	       xrf_ADDR_2,
	       xrf_ADDR_3,
	       xrf_ADDR_4,
	       xrf_ADDR_5,
	       xrf_ADDR_IN;
  wire xrf_WE;

  // rule scheduling signals
  wire CAN_FIRE_RL_initialize_regfile,
       CAN_FIRE_commit_rd,
       CAN_FIRE_read_rs1,
       CAN_FIRE_read_rs2,
       CAN_FIRE_read_rs3,
       WILL_FIRE_RL_initialize_regfile,
       WILL_FIRE_commit_rd,
       WILL_FIRE_read_rs1,
       WILL_FIRE_read_rs2,
       WILL_FIRE_read_rs3;

  // inputs to muxes for submodule ports
  wire MUX_frf_upd_1__SEL_1, MUX_xrf_upd_1__SEL_1;

  // actionvalue method read_rs1
  assign read_rs1 = read_rs1_rs1type ? frf_D_OUT_3 : xrf_D_OUT_2 ;
  assign RDY_read_rs1 = !initialize ;
  assign CAN_FIRE_read_rs1 = !initialize ;
  assign WILL_FIRE_read_rs1 = EN_read_rs1 ;

  // actionvalue method read_rs2
  assign read_rs2 = read_rs2_rs2type ? frf_D_OUT_2 : xrf_D_OUT_1 ;
  assign RDY_read_rs2 = !initialize ;
  assign CAN_FIRE_read_rs2 = !initialize ;
  assign WILL_FIRE_read_rs2 = EN_read_rs2 ;

  // actionvalue method read_rs3
  assign read_rs3 = frf_D_OUT_1 ;
  assign RDY_read_rs3 = !initialize ;
  assign CAN_FIRE_read_rs3 = !initialize ;
  assign WILL_FIRE_read_rs3 = EN_read_rs3 ;

  // action method commit_rd
  assign RDY_commit_rd = !initialize ;
  assign CAN_FIRE_commit_rd = !initialize ;
  assign WILL_FIRE_commit_rd = EN_commit_rd ;

  // submodule frf
  RegFile #(.addr_width(32'd5),
	    .data_width(32'd64),
	    .lo(5'd0),
	    .hi(5'd31)) frf(.CLK(CLK),
			    .ADDR_1(frf_ADDR_1),
			    .ADDR_2(frf_ADDR_2),
			    .ADDR_3(frf_ADDR_3),
			    .ADDR_4(frf_ADDR_4),
			    .ADDR_5(frf_ADDR_5),
			    .ADDR_IN(frf_ADDR_IN),
			    .D_IN(frf_D_IN),
			    .WE(frf_WE),
			    .D_OUT_1(frf_D_OUT_1),
			    .D_OUT_2(frf_D_OUT_2),
			    .D_OUT_3(frf_D_OUT_3),
			    .D_OUT_4(),
			    .D_OUT_5());

  // submodule xrf
  RegFile #(.addr_width(32'd5),
	    .data_width(32'd64),
	    .lo(5'd0),
	    .hi(5'd31)) xrf(.CLK(CLK),
			    .ADDR_1(xrf_ADDR_1),
			    .ADDR_2(xrf_ADDR_2),
			    .ADDR_3(xrf_ADDR_3),
			    .ADDR_4(xrf_ADDR_4),
			    .ADDR_5(xrf_ADDR_5),
			    .ADDR_IN(xrf_ADDR_IN),
			    .D_IN(xrf_D_IN),
			    .WE(xrf_WE),
			    .D_OUT_1(xrf_D_OUT_1),
			    .D_OUT_2(xrf_D_OUT_2),
			    .D_OUT_3(),
			    .D_OUT_4(),
			    .D_OUT_5());

  // rule RL_initialize_regfile
  assign CAN_FIRE_RL_initialize_regfile = initialize ;
  assign WILL_FIRE_RL_initialize_regfile = initialize ;

  // inputs to muxes for submodule ports
  assign MUX_frf_upd_1__SEL_1 = EN_commit_rd && commit_rd_c[70] ;
  assign MUX_xrf_upd_1__SEL_1 =
	     EN_commit_rd && !commit_rd_c[70] && commit_rd_c[68:64] != 5'd0 ;

  // register initialize
  assign initialize_D_IN = 1'd0 ;
  assign initialize_EN = initialize && rg_index == 5'd31 ;

  // register rg_index
  assign rg_index_D_IN = rg_index + 5'd1 ;
  assign rg_index_EN = initialize ;

  // submodule frf
  assign frf_ADDR_1 = read_rs3_addr ;
  assign frf_ADDR_2 = read_rs2_addr ;
  assign frf_ADDR_3 = read_rs1_addr ;
  assign frf_ADDR_4 = 5'h0 ;
  assign frf_ADDR_5 = 5'h0 ;
  assign frf_ADDR_IN = MUX_frf_upd_1__SEL_1 ? commit_rd_c[68:64] : rg_index ;
  assign frf_D_IN = MUX_frf_upd_1__SEL_1 ? commit_rd_c[63:0] : 64'd0 ;
  assign frf_WE = EN_commit_rd && commit_rd_c[70] || initialize ;

  // submodule xrf
  assign xrf_ADDR_1 = read_rs2_addr ;
  assign xrf_ADDR_2 = read_rs1_addr ;
  assign xrf_ADDR_3 = 5'h0 ;
  assign xrf_ADDR_4 = 5'h0 ;
  assign xrf_ADDR_5 = 5'h0 ;
  assign xrf_ADDR_IN = MUX_xrf_upd_1__SEL_1 ? commit_rd_c[68:64] : rg_index ;
  assign xrf_D_IN = MUX_xrf_upd_1__SEL_1 ? commit_rd_c[63:0] : 64'd0 ;
  assign xrf_WE =
	     EN_commit_rd && !commit_rd_c[70] && commit_rd_c[68:64] != 5'd0 ||
	     initialize ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        initialize <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_index <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (initialize_EN)
	  initialize <= `BSV_ASSIGNMENT_DELAY initialize_D_IN;
	if (rg_index_EN) rg_index <= `BSV_ASSIGNMENT_DELAY rg_index_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    initialize = 1'h0;
    rg_index = 5'h0A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkregisterfile

